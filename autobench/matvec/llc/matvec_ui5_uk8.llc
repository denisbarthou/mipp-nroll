; ModuleID = 'codes/matvec_ui5_uk8.cpp'
source_filename = "codes/matvec_ui5_uk8.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui5_uk8.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 40
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = sdiv i32 %4, 64
  %6 = shl nsw i32 %5, 6
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %21

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %9 to i64
  %12 = zext i32 %9 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = zext i32 %9 to i64
  %16 = zext i32 %9 to i64
  %17 = zext i32 %9 to i64
  %18 = icmp sgt i32 %9, 0
  %19 = zext i32 %9 to i64
  %20 = sext i32 %6 to i64
  br label %33

21:                                               ; preds = %600, %0
  %22 = tail call i64 @llvm.x86.rdtsc()
  %23 = uitofp i64 %22 to double
  %24 = fsub double %23, %2
  %25 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %26 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %27 = shl i32 %26, 1
  %28 = add nsw i32 %27, -1
  %29 = mul nsw i32 %28, %25
  %30 = sitofp i32 %29 to float
  %31 = fptrunc double %24 to float
  %32 = fdiv float %30, %31
  ret float %32

33:                                               ; preds = %8, %600
  %34 = phi i64 [ 0, %8 ], [ %601, %600 ]
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = load float, float* %35, align 4, !tbaa !18
  %37 = insertelement <8 x float> undef, float %36, i32 0
  %38 = shufflevector <8 x float> %37, <8 x float> undef, <8 x i32> zeroinitializer
  %39 = or i64 %34, 1
  %40 = getelementptr inbounds float, float* %4, i64 %39
  %41 = load float, float* %40, align 4, !tbaa !18
  %42 = insertelement <8 x float> undef, float %41, i32 0
  %43 = shufflevector <8 x float> %42, <8 x float> undef, <8 x i32> zeroinitializer
  %44 = or i64 %34, 2
  %45 = getelementptr inbounds float, float* %4, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !18
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = or i64 %34, 3
  %50 = getelementptr inbounds float, float* %4, i64 %49
  %51 = load float, float* %50, align 4, !tbaa !18
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = or i64 %34, 4
  %55 = getelementptr inbounds float, float* %4, i64 %54
  %56 = load float, float* %55, align 4, !tbaa !18
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = or i64 %34, 5
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = load float, float* %60, align 4, !tbaa !18
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = or i64 %34, 6
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !18
  %67 = insertelement <8 x float> undef, float %66, i32 0
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <8 x i32> zeroinitializer
  %69 = or i64 %34, 7
  %70 = getelementptr inbounds float, float* %4, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !18
  %72 = insertelement <8 x float> undef, float %71, i32 0
  %73 = shufflevector <8 x float> %72, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %74, label %600

74:                                               ; preds = %33
  %75 = trunc i64 %34 to i32
  %76 = mul nsw i32 %9, %75
  br label %82

77:                                               ; preds = %82
  br i1 %10, label %78, label %600

78:                                               ; preds = %77
  %79 = trunc i64 %39 to i32
  %80 = mul nsw i32 %9, %79
  %81 = sext i32 %80 to i64
  br label %162

82:                                               ; preds = %74, %82
  %83 = phi i64 [ 0, %74 ], [ %155, %82 ]
  %84 = getelementptr inbounds float, float* %5, i64 %83
  %85 = getelementptr inbounds float, float* %84, i64 8
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %3, i64 %83
  %88 = getelementptr inbounds float, float* %87, i64 8
  %89 = bitcast float* %88 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %89, i32 0, i32 1, i32 1)
  %90 = getelementptr inbounds float, float* %84, i64 16
  %91 = bitcast float* %90 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %91, i32 0, i32 1, i32 1)
  %92 = getelementptr inbounds float, float* %87, i64 16
  %93 = bitcast float* %92 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %93, i32 0, i32 1, i32 1)
  %94 = getelementptr inbounds float, float* %84, i64 24
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %95, i32 0, i32 1, i32 1)
  %96 = getelementptr inbounds float, float* %87, i64 24
  %97 = bitcast float* %96 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %97, i32 0, i32 1, i32 1)
  %98 = getelementptr inbounds float, float* %84, i64 32
  %99 = bitcast float* %98 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %99, i32 0, i32 1, i32 1)
  %100 = getelementptr inbounds float, float* %87, i64 32
  %101 = bitcast float* %100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %101, i32 0, i32 1, i32 1)
  %102 = getelementptr inbounds float, float* %84, i64 40
  %103 = bitcast float* %102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %103, i32 0, i32 1, i32 1)
  %104 = getelementptr inbounds float, float* %87, i64 40
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %105, i32 0, i32 1, i32 1)
  %106 = bitcast float* %84 to <8 x float>*
  %107 = load <8 x float>, <8 x float>* %106, align 1, !tbaa !12
  %108 = add nuw nsw i64 %83, 8
  %109 = getelementptr inbounds float, float* %5, i64 %108
  %110 = bitcast float* %109 to <8 x float>*
  %111 = load <8 x float>, <8 x float>* %110, align 1, !tbaa !12
  %112 = add nuw nsw i64 %83, 16
  %113 = getelementptr inbounds float, float* %5, i64 %112
  %114 = bitcast float* %113 to <8 x float>*
  %115 = load <8 x float>, <8 x float>* %114, align 1, !tbaa !12
  %116 = add nuw nsw i64 %83, 24
  %117 = getelementptr inbounds float, float* %5, i64 %116
  %118 = bitcast float* %117 to <8 x float>*
  %119 = load <8 x float>, <8 x float>* %118, align 1, !tbaa !12
  %120 = add nuw nsw i64 %83, 32
  %121 = getelementptr inbounds float, float* %5, i64 %120
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 1, !tbaa !12
  %124 = trunc i64 %83 to i32
  %125 = add nsw i32 %76, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %3, i64 %126
  %128 = bitcast float* %127 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !tbaa !12
  %130 = add nsw i32 %125, 8
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %3, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = add nsw i32 %125, 16
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %3, i64 %136
  %138 = bitcast float* %137 to <8 x float>*
  %139 = load <8 x float>, <8 x float>* %138, align 1, !tbaa !12
  %140 = add nsw i32 %125, 24
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %3, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nsw i32 %125, 32
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %3, i64 %146
  %148 = bitcast float* %147 to <8 x float>*
  %149 = load <8 x float>, <8 x float>* %148, align 1, !tbaa !12
  %150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %129, <8 x float> %38, <8 x float> %107) #10
  %151 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %38, <8 x float> %111) #10
  %152 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %38, <8 x float> %115) #10
  %153 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %144, <8 x float> %38, <8 x float> %119) #10
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %38, <8 x float> %123) #10
  store <8 x float> %150, <8 x float>* %106, align 1, !tbaa !12
  store <8 x float> %151, <8 x float>* %110, align 1, !tbaa !12
  store <8 x float> %152, <8 x float>* %114, align 1, !tbaa !12
  store <8 x float> %153, <8 x float>* %118, align 1, !tbaa !12
  store <8 x float> %154, <8 x float>* %122, align 1, !tbaa !12
  %155 = add nuw nsw i64 %83, 40
  %156 = icmp ult i64 %155, %11
  br i1 %156, label %82, label %77

157:                                              ; preds = %162
  br i1 %10, label %158, label %600

158:                                              ; preds = %157
  %159 = trunc i64 %44 to i32
  %160 = mul nsw i32 %9, %159
  %161 = sext i32 %160 to i64
  br label %236

162:                                              ; preds = %78, %162
  %163 = phi i64 [ 0, %78 ], [ %229, %162 ]
  %164 = getelementptr inbounds float, float* %5, i64 %163
  %165 = getelementptr inbounds float, float* %164, i64 8
  %166 = bitcast float* %165 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %166, i32 0, i32 1, i32 1)
  %167 = getelementptr inbounds float, float* %3, i64 %163
  %168 = getelementptr inbounds float, float* %167, i64 8
  %169 = bitcast float* %168 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %169, i32 0, i32 1, i32 1)
  %170 = getelementptr inbounds float, float* %164, i64 16
  %171 = bitcast float* %170 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %171, i32 0, i32 1, i32 1)
  %172 = getelementptr inbounds float, float* %167, i64 16
  %173 = bitcast float* %172 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %173, i32 0, i32 1, i32 1)
  %174 = getelementptr inbounds float, float* %164, i64 24
  %175 = bitcast float* %174 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %175, i32 0, i32 1, i32 1)
  %176 = getelementptr inbounds float, float* %167, i64 24
  %177 = bitcast float* %176 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %177, i32 0, i32 1, i32 1)
  %178 = getelementptr inbounds float, float* %164, i64 32
  %179 = bitcast float* %178 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %179, i32 0, i32 1, i32 1)
  %180 = getelementptr inbounds float, float* %167, i64 32
  %181 = bitcast float* %180 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %181, i32 0, i32 1, i32 1)
  %182 = getelementptr inbounds float, float* %164, i64 40
  %183 = bitcast float* %182 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %183, i32 0, i32 1, i32 1)
  %184 = getelementptr inbounds float, float* %167, i64 40
  %185 = bitcast float* %184 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %185, i32 0, i32 1, i32 1)
  %186 = bitcast float* %164 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !tbaa !12
  %188 = add nuw nsw i64 %163, 8
  %189 = getelementptr inbounds float, float* %5, i64 %188
  %190 = bitcast float* %189 to <8 x float>*
  %191 = load <8 x float>, <8 x float>* %190, align 1, !tbaa !12
  %192 = add nuw nsw i64 %163, 16
  %193 = getelementptr inbounds float, float* %5, i64 %192
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 1, !tbaa !12
  %196 = add nuw nsw i64 %163, 24
  %197 = getelementptr inbounds float, float* %5, i64 %196
  %198 = bitcast float* %197 to <8 x float>*
  %199 = load <8 x float>, <8 x float>* %198, align 1, !tbaa !12
  %200 = add nuw nsw i64 %163, 32
  %201 = getelementptr inbounds float, float* %5, i64 %200
  %202 = bitcast float* %201 to <8 x float>*
  %203 = load <8 x float>, <8 x float>* %202, align 1, !tbaa !12
  %204 = add nsw i64 %163, %81
  %205 = getelementptr inbounds float, float* %3, i64 %204
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 1, !tbaa !12
  %208 = add nsw i64 %204, 8
  %209 = getelementptr inbounds float, float* %3, i64 %208
  %210 = bitcast float* %209 to <8 x float>*
  %211 = load <8 x float>, <8 x float>* %210, align 1, !tbaa !12
  %212 = add nsw i64 %204, 16
  %213 = getelementptr inbounds float, float* %3, i64 %212
  %214 = bitcast float* %213 to <8 x float>*
  %215 = load <8 x float>, <8 x float>* %214, align 1, !tbaa !12
  %216 = add nsw i64 %204, 24
  %217 = getelementptr inbounds float, float* %3, i64 %216
  %218 = bitcast float* %217 to <8 x float>*
  %219 = load <8 x float>, <8 x float>* %218, align 1, !tbaa !12
  %220 = add nsw i64 %204, 32
  %221 = getelementptr inbounds float, float* %3, i64 %220
  %222 = bitcast float* %221 to <8 x float>*
  %223 = load <8 x float>, <8 x float>* %222, align 1, !tbaa !12
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %43, <8 x float> %187) #10
  %225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %43, <8 x float> %191) #10
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %215, <8 x float> %43, <8 x float> %195) #10
  %227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %219, <8 x float> %43, <8 x float> %199) #10
  %228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %223, <8 x float> %43, <8 x float> %203) #10
  store <8 x float> %224, <8 x float>* %186, align 1, !tbaa !12
  store <8 x float> %225, <8 x float>* %190, align 1, !tbaa !12
  store <8 x float> %226, <8 x float>* %194, align 1, !tbaa !12
  store <8 x float> %227, <8 x float>* %198, align 1, !tbaa !12
  store <8 x float> %228, <8 x float>* %202, align 1, !tbaa !12
  %229 = add nuw nsw i64 %163, 40
  %230 = icmp ult i64 %229, %12
  br i1 %230, label %162, label %157

231:                                              ; preds = %236
  br i1 %10, label %232, label %600

232:                                              ; preds = %231
  %233 = trunc i64 %49 to i32
  %234 = mul nsw i32 %9, %233
  %235 = sext i32 %234 to i64
  br label %310

236:                                              ; preds = %158, %236
  %237 = phi i64 [ 0, %158 ], [ %303, %236 ]
  %238 = getelementptr inbounds float, float* %5, i64 %237
  %239 = getelementptr inbounds float, float* %238, i64 8
  %240 = bitcast float* %239 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %240, i32 0, i32 1, i32 1)
  %241 = getelementptr inbounds float, float* %3, i64 %237
  %242 = getelementptr inbounds float, float* %241, i64 8
  %243 = bitcast float* %242 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %243, i32 0, i32 1, i32 1)
  %244 = getelementptr inbounds float, float* %238, i64 16
  %245 = bitcast float* %244 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %245, i32 0, i32 1, i32 1)
  %246 = getelementptr inbounds float, float* %241, i64 16
  %247 = bitcast float* %246 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %247, i32 0, i32 1, i32 1)
  %248 = getelementptr inbounds float, float* %238, i64 24
  %249 = bitcast float* %248 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %249, i32 0, i32 1, i32 1)
  %250 = getelementptr inbounds float, float* %241, i64 24
  %251 = bitcast float* %250 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %251, i32 0, i32 1, i32 1)
  %252 = getelementptr inbounds float, float* %238, i64 32
  %253 = bitcast float* %252 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %253, i32 0, i32 1, i32 1)
  %254 = getelementptr inbounds float, float* %241, i64 32
  %255 = bitcast float* %254 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %255, i32 0, i32 1, i32 1)
  %256 = getelementptr inbounds float, float* %238, i64 40
  %257 = bitcast float* %256 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %257, i32 0, i32 1, i32 1)
  %258 = getelementptr inbounds float, float* %241, i64 40
  %259 = bitcast float* %258 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %259, i32 0, i32 1, i32 1)
  %260 = bitcast float* %238 to <8 x float>*
  %261 = load <8 x float>, <8 x float>* %260, align 1, !tbaa !12
  %262 = add nuw nsw i64 %237, 8
  %263 = getelementptr inbounds float, float* %5, i64 %262
  %264 = bitcast float* %263 to <8 x float>*
  %265 = load <8 x float>, <8 x float>* %264, align 1, !tbaa !12
  %266 = add nuw nsw i64 %237, 16
  %267 = getelementptr inbounds float, float* %5, i64 %266
  %268 = bitcast float* %267 to <8 x float>*
  %269 = load <8 x float>, <8 x float>* %268, align 1, !tbaa !12
  %270 = add nuw nsw i64 %237, 24
  %271 = getelementptr inbounds float, float* %5, i64 %270
  %272 = bitcast float* %271 to <8 x float>*
  %273 = load <8 x float>, <8 x float>* %272, align 1, !tbaa !12
  %274 = add nuw nsw i64 %237, 32
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = bitcast float* %275 to <8 x float>*
  %277 = load <8 x float>, <8 x float>* %276, align 1, !tbaa !12
  %278 = add nsw i64 %237, %161
  %279 = getelementptr inbounds float, float* %3, i64 %278
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !tbaa !12
  %282 = add nsw i64 %278, 8
  %283 = getelementptr inbounds float, float* %3, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 1, !tbaa !12
  %286 = add nsw i64 %278, 16
  %287 = getelementptr inbounds float, float* %3, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 1, !tbaa !12
  %290 = add nsw i64 %278, 24
  %291 = getelementptr inbounds float, float* %3, i64 %290
  %292 = bitcast float* %291 to <8 x float>*
  %293 = load <8 x float>, <8 x float>* %292, align 1, !tbaa !12
  %294 = add nsw i64 %278, 32
  %295 = getelementptr inbounds float, float* %3, i64 %294
  %296 = bitcast float* %295 to <8 x float>*
  %297 = load <8 x float>, <8 x float>* %296, align 1, !tbaa !12
  %298 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %281, <8 x float> %48, <8 x float> %261) #10
  %299 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %285, <8 x float> %48, <8 x float> %265) #10
  %300 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %289, <8 x float> %48, <8 x float> %269) #10
  %301 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %293, <8 x float> %48, <8 x float> %273) #10
  %302 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %297, <8 x float> %48, <8 x float> %277) #10
  store <8 x float> %298, <8 x float>* %260, align 1, !tbaa !12
  store <8 x float> %299, <8 x float>* %264, align 1, !tbaa !12
  store <8 x float> %300, <8 x float>* %268, align 1, !tbaa !12
  store <8 x float> %301, <8 x float>* %272, align 1, !tbaa !12
  store <8 x float> %302, <8 x float>* %276, align 1, !tbaa !12
  %303 = add nuw nsw i64 %237, 40
  %304 = icmp ult i64 %303, %13
  br i1 %304, label %236, label %231

305:                                              ; preds = %310
  br i1 %10, label %306, label %600

306:                                              ; preds = %305
  %307 = trunc i64 %54 to i32
  %308 = mul nsw i32 %9, %307
  %309 = sext i32 %308 to i64
  br label %384

310:                                              ; preds = %232, %310
  %311 = phi i64 [ 0, %232 ], [ %377, %310 ]
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = getelementptr inbounds float, float* %312, i64 8
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %314, i32 0, i32 1, i32 1)
  %315 = getelementptr inbounds float, float* %3, i64 %311
  %316 = getelementptr inbounds float, float* %315, i64 8
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %312, i64 16
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = getelementptr inbounds float, float* %315, i64 16
  %321 = bitcast float* %320 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %321, i32 0, i32 1, i32 1)
  %322 = getelementptr inbounds float, float* %312, i64 24
  %323 = bitcast float* %322 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %323, i32 0, i32 1, i32 1)
  %324 = getelementptr inbounds float, float* %315, i64 24
  %325 = bitcast float* %324 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %325, i32 0, i32 1, i32 1)
  %326 = getelementptr inbounds float, float* %312, i64 32
  %327 = bitcast float* %326 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %327, i32 0, i32 1, i32 1)
  %328 = getelementptr inbounds float, float* %315, i64 32
  %329 = bitcast float* %328 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %329, i32 0, i32 1, i32 1)
  %330 = getelementptr inbounds float, float* %312, i64 40
  %331 = bitcast float* %330 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %331, i32 0, i32 1, i32 1)
  %332 = getelementptr inbounds float, float* %315, i64 40
  %333 = bitcast float* %332 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %333, i32 0, i32 1, i32 1)
  %334 = bitcast float* %312 to <8 x float>*
  %335 = load <8 x float>, <8 x float>* %334, align 1, !tbaa !12
  %336 = add nuw nsw i64 %311, 8
  %337 = getelementptr inbounds float, float* %5, i64 %336
  %338 = bitcast float* %337 to <8 x float>*
  %339 = load <8 x float>, <8 x float>* %338, align 1, !tbaa !12
  %340 = add nuw nsw i64 %311, 16
  %341 = getelementptr inbounds float, float* %5, i64 %340
  %342 = bitcast float* %341 to <8 x float>*
  %343 = load <8 x float>, <8 x float>* %342, align 1, !tbaa !12
  %344 = add nuw nsw i64 %311, 24
  %345 = getelementptr inbounds float, float* %5, i64 %344
  %346 = bitcast float* %345 to <8 x float>*
  %347 = load <8 x float>, <8 x float>* %346, align 1, !tbaa !12
  %348 = add nuw nsw i64 %311, 32
  %349 = getelementptr inbounds float, float* %5, i64 %348
  %350 = bitcast float* %349 to <8 x float>*
  %351 = load <8 x float>, <8 x float>* %350, align 1, !tbaa !12
  %352 = add nsw i64 %311, %235
  %353 = getelementptr inbounds float, float* %3, i64 %352
  %354 = bitcast float* %353 to <8 x float>*
  %355 = load <8 x float>, <8 x float>* %354, align 1, !tbaa !12
  %356 = add nsw i64 %352, 8
  %357 = getelementptr inbounds float, float* %3, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  %359 = load <8 x float>, <8 x float>* %358, align 1, !tbaa !12
  %360 = add nsw i64 %352, 16
  %361 = getelementptr inbounds float, float* %3, i64 %360
  %362 = bitcast float* %361 to <8 x float>*
  %363 = load <8 x float>, <8 x float>* %362, align 1, !tbaa !12
  %364 = add nsw i64 %352, 24
  %365 = getelementptr inbounds float, float* %3, i64 %364
  %366 = bitcast float* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 1, !tbaa !12
  %368 = add nsw i64 %352, 32
  %369 = getelementptr inbounds float, float* %3, i64 %368
  %370 = bitcast float* %369 to <8 x float>*
  %371 = load <8 x float>, <8 x float>* %370, align 1, !tbaa !12
  %372 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %355, <8 x float> %53, <8 x float> %335) #10
  %373 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %359, <8 x float> %53, <8 x float> %339) #10
  %374 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %363, <8 x float> %53, <8 x float> %343) #10
  %375 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %367, <8 x float> %53, <8 x float> %347) #10
  %376 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %371, <8 x float> %53, <8 x float> %351) #10
  store <8 x float> %372, <8 x float>* %334, align 1, !tbaa !12
  store <8 x float> %373, <8 x float>* %338, align 1, !tbaa !12
  store <8 x float> %374, <8 x float>* %342, align 1, !tbaa !12
  store <8 x float> %375, <8 x float>* %346, align 1, !tbaa !12
  store <8 x float> %376, <8 x float>* %350, align 1, !tbaa !12
  %377 = add nuw nsw i64 %311, 40
  %378 = icmp ult i64 %377, %14
  br i1 %378, label %310, label %305

379:                                              ; preds = %384
  br i1 %10, label %380, label %600

380:                                              ; preds = %379
  %381 = trunc i64 %59 to i32
  %382 = mul nsw i32 %9, %381
  %383 = sext i32 %382 to i64
  br label %458

384:                                              ; preds = %306, %384
  %385 = phi i64 [ 0, %306 ], [ %451, %384 ]
  %386 = getelementptr inbounds float, float* %5, i64 %385
  %387 = getelementptr inbounds float, float* %386, i64 8
  %388 = bitcast float* %387 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %388, i32 0, i32 1, i32 1)
  %389 = getelementptr inbounds float, float* %3, i64 %385
  %390 = getelementptr inbounds float, float* %389, i64 8
  %391 = bitcast float* %390 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %391, i32 0, i32 1, i32 1)
  %392 = getelementptr inbounds float, float* %386, i64 16
  %393 = bitcast float* %392 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %393, i32 0, i32 1, i32 1)
  %394 = getelementptr inbounds float, float* %389, i64 16
  %395 = bitcast float* %394 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %395, i32 0, i32 1, i32 1)
  %396 = getelementptr inbounds float, float* %386, i64 24
  %397 = bitcast float* %396 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %397, i32 0, i32 1, i32 1)
  %398 = getelementptr inbounds float, float* %389, i64 24
  %399 = bitcast float* %398 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %399, i32 0, i32 1, i32 1)
  %400 = getelementptr inbounds float, float* %386, i64 32
  %401 = bitcast float* %400 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %401, i32 0, i32 1, i32 1)
  %402 = getelementptr inbounds float, float* %389, i64 32
  %403 = bitcast float* %402 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %403, i32 0, i32 1, i32 1)
  %404 = getelementptr inbounds float, float* %386, i64 40
  %405 = bitcast float* %404 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %405, i32 0, i32 1, i32 1)
  %406 = getelementptr inbounds float, float* %389, i64 40
  %407 = bitcast float* %406 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %407, i32 0, i32 1, i32 1)
  %408 = bitcast float* %386 to <8 x float>*
  %409 = load <8 x float>, <8 x float>* %408, align 1, !tbaa !12
  %410 = add nuw nsw i64 %385, 8
  %411 = getelementptr inbounds float, float* %5, i64 %410
  %412 = bitcast float* %411 to <8 x float>*
  %413 = load <8 x float>, <8 x float>* %412, align 1, !tbaa !12
  %414 = add nuw nsw i64 %385, 16
  %415 = getelementptr inbounds float, float* %5, i64 %414
  %416 = bitcast float* %415 to <8 x float>*
  %417 = load <8 x float>, <8 x float>* %416, align 1, !tbaa !12
  %418 = add nuw nsw i64 %385, 24
  %419 = getelementptr inbounds float, float* %5, i64 %418
  %420 = bitcast float* %419 to <8 x float>*
  %421 = load <8 x float>, <8 x float>* %420, align 1, !tbaa !12
  %422 = add nuw nsw i64 %385, 32
  %423 = getelementptr inbounds float, float* %5, i64 %422
  %424 = bitcast float* %423 to <8 x float>*
  %425 = load <8 x float>, <8 x float>* %424, align 1, !tbaa !12
  %426 = add nsw i64 %385, %309
  %427 = getelementptr inbounds float, float* %3, i64 %426
  %428 = bitcast float* %427 to <8 x float>*
  %429 = load <8 x float>, <8 x float>* %428, align 1, !tbaa !12
  %430 = add nsw i64 %426, 8
  %431 = getelementptr inbounds float, float* %3, i64 %430
  %432 = bitcast float* %431 to <8 x float>*
  %433 = load <8 x float>, <8 x float>* %432, align 1, !tbaa !12
  %434 = add nsw i64 %426, 16
  %435 = getelementptr inbounds float, float* %3, i64 %434
  %436 = bitcast float* %435 to <8 x float>*
  %437 = load <8 x float>, <8 x float>* %436, align 1, !tbaa !12
  %438 = add nsw i64 %426, 24
  %439 = getelementptr inbounds float, float* %3, i64 %438
  %440 = bitcast float* %439 to <8 x float>*
  %441 = load <8 x float>, <8 x float>* %440, align 1, !tbaa !12
  %442 = add nsw i64 %426, 32
  %443 = getelementptr inbounds float, float* %3, i64 %442
  %444 = bitcast float* %443 to <8 x float>*
  %445 = load <8 x float>, <8 x float>* %444, align 1, !tbaa !12
  %446 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %429, <8 x float> %58, <8 x float> %409) #10
  %447 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %433, <8 x float> %58, <8 x float> %413) #10
  %448 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %437, <8 x float> %58, <8 x float> %417) #10
  %449 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %441, <8 x float> %58, <8 x float> %421) #10
  %450 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %445, <8 x float> %58, <8 x float> %425) #10
  store <8 x float> %446, <8 x float>* %408, align 1, !tbaa !12
  store <8 x float> %447, <8 x float>* %412, align 1, !tbaa !12
  store <8 x float> %448, <8 x float>* %416, align 1, !tbaa !12
  store <8 x float> %449, <8 x float>* %420, align 1, !tbaa !12
  store <8 x float> %450, <8 x float>* %424, align 1, !tbaa !12
  %451 = add nuw nsw i64 %385, 40
  %452 = icmp ult i64 %451, %15
  br i1 %452, label %384, label %379

453:                                              ; preds = %458
  br i1 %10, label %454, label %600

454:                                              ; preds = %453
  %455 = trunc i64 %64 to i32
  %456 = mul nsw i32 %9, %455
  %457 = sext i32 %456 to i64
  br label %531

458:                                              ; preds = %380, %458
  %459 = phi i64 [ 0, %380 ], [ %525, %458 ]
  %460 = getelementptr inbounds float, float* %5, i64 %459
  %461 = getelementptr inbounds float, float* %460, i64 8
  %462 = bitcast float* %461 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %462, i32 0, i32 1, i32 1)
  %463 = getelementptr inbounds float, float* %3, i64 %459
  %464 = getelementptr inbounds float, float* %463, i64 8
  %465 = bitcast float* %464 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %465, i32 0, i32 1, i32 1)
  %466 = getelementptr inbounds float, float* %460, i64 16
  %467 = bitcast float* %466 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %467, i32 0, i32 1, i32 1)
  %468 = getelementptr inbounds float, float* %463, i64 16
  %469 = bitcast float* %468 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %469, i32 0, i32 1, i32 1)
  %470 = getelementptr inbounds float, float* %460, i64 24
  %471 = bitcast float* %470 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %471, i32 0, i32 1, i32 1)
  %472 = getelementptr inbounds float, float* %463, i64 24
  %473 = bitcast float* %472 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %473, i32 0, i32 1, i32 1)
  %474 = getelementptr inbounds float, float* %460, i64 32
  %475 = bitcast float* %474 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %475, i32 0, i32 1, i32 1)
  %476 = getelementptr inbounds float, float* %463, i64 32
  %477 = bitcast float* %476 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %477, i32 0, i32 1, i32 1)
  %478 = getelementptr inbounds float, float* %460, i64 40
  %479 = bitcast float* %478 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %479, i32 0, i32 1, i32 1)
  %480 = getelementptr inbounds float, float* %463, i64 40
  %481 = bitcast float* %480 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %481, i32 0, i32 1, i32 1)
  %482 = bitcast float* %460 to <8 x float>*
  %483 = load <8 x float>, <8 x float>* %482, align 1, !tbaa !12
  %484 = add nuw nsw i64 %459, 8
  %485 = getelementptr inbounds float, float* %5, i64 %484
  %486 = bitcast float* %485 to <8 x float>*
  %487 = load <8 x float>, <8 x float>* %486, align 1, !tbaa !12
  %488 = add nuw nsw i64 %459, 16
  %489 = getelementptr inbounds float, float* %5, i64 %488
  %490 = bitcast float* %489 to <8 x float>*
  %491 = load <8 x float>, <8 x float>* %490, align 1, !tbaa !12
  %492 = add nuw nsw i64 %459, 24
  %493 = getelementptr inbounds float, float* %5, i64 %492
  %494 = bitcast float* %493 to <8 x float>*
  %495 = load <8 x float>, <8 x float>* %494, align 1, !tbaa !12
  %496 = add nuw nsw i64 %459, 32
  %497 = getelementptr inbounds float, float* %5, i64 %496
  %498 = bitcast float* %497 to <8 x float>*
  %499 = load <8 x float>, <8 x float>* %498, align 1, !tbaa !12
  %500 = add nsw i64 %459, %383
  %501 = getelementptr inbounds float, float* %3, i64 %500
  %502 = bitcast float* %501 to <8 x float>*
  %503 = load <8 x float>, <8 x float>* %502, align 1, !tbaa !12
  %504 = add nsw i64 %500, 8
  %505 = getelementptr inbounds float, float* %3, i64 %504
  %506 = bitcast float* %505 to <8 x float>*
  %507 = load <8 x float>, <8 x float>* %506, align 1, !tbaa !12
  %508 = add nsw i64 %500, 16
  %509 = getelementptr inbounds float, float* %3, i64 %508
  %510 = bitcast float* %509 to <8 x float>*
  %511 = load <8 x float>, <8 x float>* %510, align 1, !tbaa !12
  %512 = add nsw i64 %500, 24
  %513 = getelementptr inbounds float, float* %3, i64 %512
  %514 = bitcast float* %513 to <8 x float>*
  %515 = load <8 x float>, <8 x float>* %514, align 1, !tbaa !12
  %516 = add nsw i64 %500, 32
  %517 = getelementptr inbounds float, float* %3, i64 %516
  %518 = bitcast float* %517 to <8 x float>*
  %519 = load <8 x float>, <8 x float>* %518, align 1, !tbaa !12
  %520 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %503, <8 x float> %63, <8 x float> %483) #10
  %521 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %507, <8 x float> %63, <8 x float> %487) #10
  %522 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %511, <8 x float> %63, <8 x float> %491) #10
  %523 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %515, <8 x float> %63, <8 x float> %495) #10
  %524 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> %63, <8 x float> %499) #10
  store <8 x float> %520, <8 x float>* %482, align 1, !tbaa !12
  store <8 x float> %521, <8 x float>* %486, align 1, !tbaa !12
  store <8 x float> %522, <8 x float>* %490, align 1, !tbaa !12
  store <8 x float> %523, <8 x float>* %494, align 1, !tbaa !12
  store <8 x float> %524, <8 x float>* %498, align 1, !tbaa !12
  %525 = add nuw nsw i64 %459, 40
  %526 = icmp ult i64 %525, %16
  br i1 %526, label %458, label %453

527:                                              ; preds = %531
  br i1 %18, label %528, label %600

528:                                              ; preds = %527
  %529 = trunc i64 %69 to i32
  %530 = mul nsw i32 %9, %529
  br label %603

531:                                              ; preds = %454, %531
  %532 = phi i64 [ 0, %454 ], [ %598, %531 ]
  %533 = getelementptr inbounds float, float* %5, i64 %532
  %534 = getelementptr inbounds float, float* %533, i64 8
  %535 = bitcast float* %534 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %535, i32 0, i32 1, i32 1)
  %536 = getelementptr inbounds float, float* %3, i64 %532
  %537 = getelementptr inbounds float, float* %536, i64 8
  %538 = bitcast float* %537 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %538, i32 0, i32 1, i32 1)
  %539 = getelementptr inbounds float, float* %533, i64 16
  %540 = bitcast float* %539 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %540, i32 0, i32 1, i32 1)
  %541 = getelementptr inbounds float, float* %536, i64 16
  %542 = bitcast float* %541 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %542, i32 0, i32 1, i32 1)
  %543 = getelementptr inbounds float, float* %533, i64 24
  %544 = bitcast float* %543 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %544, i32 0, i32 1, i32 1)
  %545 = getelementptr inbounds float, float* %536, i64 24
  %546 = bitcast float* %545 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %546, i32 0, i32 1, i32 1)
  %547 = getelementptr inbounds float, float* %533, i64 32
  %548 = bitcast float* %547 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %548, i32 0, i32 1, i32 1)
  %549 = getelementptr inbounds float, float* %536, i64 32
  %550 = bitcast float* %549 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %550, i32 0, i32 1, i32 1)
  %551 = getelementptr inbounds float, float* %533, i64 40
  %552 = bitcast float* %551 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %552, i32 0, i32 1, i32 1)
  %553 = getelementptr inbounds float, float* %536, i64 40
  %554 = bitcast float* %553 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %554, i32 0, i32 1, i32 1)
  %555 = bitcast float* %533 to <8 x float>*
  %556 = load <8 x float>, <8 x float>* %555, align 1, !tbaa !12
  %557 = add nuw nsw i64 %532, 8
  %558 = getelementptr inbounds float, float* %5, i64 %557
  %559 = bitcast float* %558 to <8 x float>*
  %560 = load <8 x float>, <8 x float>* %559, align 1, !tbaa !12
  %561 = add nuw nsw i64 %532, 16
  %562 = getelementptr inbounds float, float* %5, i64 %561
  %563 = bitcast float* %562 to <8 x float>*
  %564 = load <8 x float>, <8 x float>* %563, align 1, !tbaa !12
  %565 = add nuw nsw i64 %532, 24
  %566 = getelementptr inbounds float, float* %5, i64 %565
  %567 = bitcast float* %566 to <8 x float>*
  %568 = load <8 x float>, <8 x float>* %567, align 1, !tbaa !12
  %569 = add nuw nsw i64 %532, 32
  %570 = getelementptr inbounds float, float* %5, i64 %569
  %571 = bitcast float* %570 to <8 x float>*
  %572 = load <8 x float>, <8 x float>* %571, align 1, !tbaa !12
  %573 = add nsw i64 %532, %457
  %574 = getelementptr inbounds float, float* %3, i64 %573
  %575 = bitcast float* %574 to <8 x float>*
  %576 = load <8 x float>, <8 x float>* %575, align 1, !tbaa !12
  %577 = add nsw i64 %573, 8
  %578 = getelementptr inbounds float, float* %3, i64 %577
  %579 = bitcast float* %578 to <8 x float>*
  %580 = load <8 x float>, <8 x float>* %579, align 1, !tbaa !12
  %581 = add nsw i64 %573, 16
  %582 = getelementptr inbounds float, float* %3, i64 %581
  %583 = bitcast float* %582 to <8 x float>*
  %584 = load <8 x float>, <8 x float>* %583, align 1, !tbaa !12
  %585 = add nsw i64 %573, 24
  %586 = getelementptr inbounds float, float* %3, i64 %585
  %587 = bitcast float* %586 to <8 x float>*
  %588 = load <8 x float>, <8 x float>* %587, align 1, !tbaa !12
  %589 = add nsw i64 %573, 32
  %590 = getelementptr inbounds float, float* %3, i64 %589
  %591 = bitcast float* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 1, !tbaa !12
  %593 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %576, <8 x float> %68, <8 x float> %556) #10
  %594 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %580, <8 x float> %68, <8 x float> %560) #10
  %595 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %584, <8 x float> %68, <8 x float> %564) #10
  %596 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %588, <8 x float> %68, <8 x float> %568) #10
  %597 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %592, <8 x float> %68, <8 x float> %572) #10
  store <8 x float> %593, <8 x float>* %555, align 1, !tbaa !12
  store <8 x float> %594, <8 x float>* %559, align 1, !tbaa !12
  store <8 x float> %595, <8 x float>* %563, align 1, !tbaa !12
  store <8 x float> %596, <8 x float>* %567, align 1, !tbaa !12
  store <8 x float> %597, <8 x float>* %571, align 1, !tbaa !12
  %598 = add nuw nsw i64 %532, 40
  %599 = icmp ult i64 %598, %17
  br i1 %599, label %531, label %527

600:                                              ; preds = %603, %33, %77, %157, %231, %305, %379, %453, %527
  %601 = add nuw nsw i64 %34, 8
  %602 = icmp slt i64 %601, %20
  br i1 %602, label %33, label %21

603:                                              ; preds = %528, %603
  %604 = phi i64 [ 0, %528 ], [ %676, %603 ]
  %605 = getelementptr inbounds float, float* %5, i64 %604
  %606 = getelementptr inbounds float, float* %605, i64 8
  %607 = bitcast float* %606 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %607, i32 0, i32 1, i32 1)
  %608 = getelementptr inbounds float, float* %3, i64 %604
  %609 = getelementptr inbounds float, float* %608, i64 8
  %610 = bitcast float* %609 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %610, i32 0, i32 1, i32 1)
  %611 = getelementptr inbounds float, float* %605, i64 16
  %612 = bitcast float* %611 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %612, i32 0, i32 1, i32 1)
  %613 = getelementptr inbounds float, float* %608, i64 16
  %614 = bitcast float* %613 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %614, i32 0, i32 1, i32 1)
  %615 = getelementptr inbounds float, float* %605, i64 24
  %616 = bitcast float* %615 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %616, i32 0, i32 1, i32 1)
  %617 = getelementptr inbounds float, float* %608, i64 24
  %618 = bitcast float* %617 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %618, i32 0, i32 1, i32 1)
  %619 = getelementptr inbounds float, float* %605, i64 32
  %620 = bitcast float* %619 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %620, i32 0, i32 1, i32 1)
  %621 = getelementptr inbounds float, float* %608, i64 32
  %622 = bitcast float* %621 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %622, i32 0, i32 1, i32 1)
  %623 = getelementptr inbounds float, float* %605, i64 40
  %624 = bitcast float* %623 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %624, i32 0, i32 1, i32 1)
  %625 = getelementptr inbounds float, float* %608, i64 40
  %626 = bitcast float* %625 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %626, i32 0, i32 1, i32 1)
  %627 = bitcast float* %605 to <8 x float>*
  %628 = load <8 x float>, <8 x float>* %627, align 1, !tbaa !12
  %629 = add nuw nsw i64 %604, 8
  %630 = getelementptr inbounds float, float* %5, i64 %629
  %631 = bitcast float* %630 to <8 x float>*
  %632 = load <8 x float>, <8 x float>* %631, align 1, !tbaa !12
  %633 = add nuw nsw i64 %604, 16
  %634 = getelementptr inbounds float, float* %5, i64 %633
  %635 = bitcast float* %634 to <8 x float>*
  %636 = load <8 x float>, <8 x float>* %635, align 1, !tbaa !12
  %637 = add nuw nsw i64 %604, 24
  %638 = getelementptr inbounds float, float* %5, i64 %637
  %639 = bitcast float* %638 to <8 x float>*
  %640 = load <8 x float>, <8 x float>* %639, align 1, !tbaa !12
  %641 = add nuw nsw i64 %604, 32
  %642 = getelementptr inbounds float, float* %5, i64 %641
  %643 = bitcast float* %642 to <8 x float>*
  %644 = load <8 x float>, <8 x float>* %643, align 1, !tbaa !12
  %645 = trunc i64 %604 to i32
  %646 = add nsw i32 %530, %645
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds float, float* %3, i64 %647
  %649 = bitcast float* %648 to <8 x float>*
  %650 = load <8 x float>, <8 x float>* %649, align 1, !tbaa !12
  %651 = add nsw i32 %646, 8
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds float, float* %3, i64 %652
  %654 = bitcast float* %653 to <8 x float>*
  %655 = load <8 x float>, <8 x float>* %654, align 1, !tbaa !12
  %656 = add nsw i32 %646, 16
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds float, float* %3, i64 %657
  %659 = bitcast float* %658 to <8 x float>*
  %660 = load <8 x float>, <8 x float>* %659, align 1, !tbaa !12
  %661 = add nsw i32 %646, 24
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds float, float* %3, i64 %662
  %664 = bitcast float* %663 to <8 x float>*
  %665 = load <8 x float>, <8 x float>* %664, align 1, !tbaa !12
  %666 = add nsw i32 %646, 32
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds float, float* %3, i64 %667
  %669 = bitcast float* %668 to <8 x float>*
  %670 = load <8 x float>, <8 x float>* %669, align 1, !tbaa !12
  %671 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %650, <8 x float> %73, <8 x float> %628) #10
  %672 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %655, <8 x float> %73, <8 x float> %632) #10
  %673 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %660, <8 x float> %73, <8 x float> %636) #10
  %674 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %665, <8 x float> %73, <8 x float> %640) #10
  %675 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %670, <8 x float> %73, <8 x float> %644) #10
  store <8 x float> %671, <8 x float>* %627, align 1, !tbaa !12
  store <8 x float> %672, <8 x float>* %631, align 1, !tbaa !12
  store <8 x float> %673, <8 x float>* %635, align 1, !tbaa !12
  store <8 x float> %674, <8 x float>* %639, align 1, !tbaa !12
  store <8 x float> %675, <8 x float>* %643, align 1, !tbaa !12
  %676 = add nuw nsw i64 %604, 40
  %677 = icmp ult i64 %676, %19
  br i1 %677, label %603, label %600
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 88
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui5_uk8.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
