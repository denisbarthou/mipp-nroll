; ModuleID = 'codes/matvec_ui5_uk12.cpp'
source_filename = "codes/matvec_ui5_uk12.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui5_uk12.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 40
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 96
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %9 to i64
  %12 = zext i32 %9 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = zext i32 %9 to i64
  %16 = zext i32 %9 to i64
  %17 = zext i32 %9 to i64
  %18 = icmp sgt i32 %9, 0
  %19 = zext i32 %9 to i64
  %20 = icmp sgt i32 %9, 0
  %21 = zext i32 %9 to i64
  %22 = zext i32 %9 to i64
  %23 = sext i32 %9 to i64
  %24 = sext i32 %9 to i64
  %25 = sext i32 %6 to i64
  br label %38

26:                                               ; preds = %925, %0
  %27 = tail call i64 @llvm.x86.rdtsc()
  %28 = uitofp i64 %27 to double
  %29 = fsub double %28, %2
  %30 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %31 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %32 = shl i32 %31, 1
  %33 = add nsw i32 %32, -1
  %34 = mul nsw i32 %33, %30
  %35 = sitofp i32 %34 to float
  %36 = fptrunc double %29 to float
  %37 = fdiv float %35, %36
  ret float %37

38:                                               ; preds = %8, %925
  %39 = phi i64 [ 0, %8 ], [ %926, %925 ]
  %40 = getelementptr inbounds float, float* %4, i64 %39
  %41 = load float, float* %40, align 4, !tbaa !18
  %42 = insertelement <8 x float> undef, float %41, i32 0
  %43 = shufflevector <8 x float> %42, <8 x float> undef, <8 x i32> zeroinitializer
  %44 = or i64 %39, 1
  %45 = getelementptr inbounds float, float* %4, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !18
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = or i64 %39, 2
  %50 = getelementptr inbounds float, float* %4, i64 %49
  %51 = load float, float* %50, align 4, !tbaa !18
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = or i64 %39, 3
  %55 = getelementptr inbounds float, float* %4, i64 %54
  %56 = load float, float* %55, align 4, !tbaa !18
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = add nuw nsw i64 %39, 4
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = load float, float* %60, align 4, !tbaa !18
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = add nuw nsw i64 %39, 5
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !18
  %67 = insertelement <8 x float> undef, float %66, i32 0
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <8 x i32> zeroinitializer
  %69 = add nuw nsw i64 %39, 6
  %70 = getelementptr inbounds float, float* %4, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !18
  %72 = insertelement <8 x float> undef, float %71, i32 0
  %73 = shufflevector <8 x float> %72, <8 x float> undef, <8 x i32> zeroinitializer
  %74 = add nuw nsw i64 %39, 7
  %75 = getelementptr inbounds float, float* %4, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !18
  %77 = insertelement <8 x float> undef, float %76, i32 0
  %78 = shufflevector <8 x float> %77, <8 x float> undef, <8 x i32> zeroinitializer
  %79 = add nuw nsw i64 %39, 8
  %80 = getelementptr inbounds float, float* %4, i64 %79
  %81 = load float, float* %80, align 4, !tbaa !18
  %82 = insertelement <8 x float> undef, float %81, i32 0
  %83 = shufflevector <8 x float> %82, <8 x float> undef, <8 x i32> zeroinitializer
  %84 = add nuw nsw i64 %39, 9
  %85 = getelementptr inbounds float, float* %4, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !18
  %87 = insertelement <8 x float> undef, float %86, i32 0
  %88 = shufflevector <8 x float> %87, <8 x float> undef, <8 x i32> zeroinitializer
  %89 = add nuw nsw i64 %39, 10
  %90 = getelementptr inbounds float, float* %4, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !18
  %92 = insertelement <8 x float> undef, float %91, i32 0
  %93 = shufflevector <8 x float> %92, <8 x float> undef, <8 x i32> zeroinitializer
  %94 = add nuw nsw i64 %39, 11
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !18
  %97 = insertelement <8 x float> undef, float %96, i32 0
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %99, label %925

99:                                               ; preds = %38
  %100 = trunc i64 %39 to i32
  %101 = mul nsw i32 %9, %100
  br label %107

102:                                              ; preds = %107
  br i1 %10, label %103, label %925

103:                                              ; preds = %102
  %104 = trunc i64 %44 to i32
  %105 = mul nsw i32 %9, %104
  %106 = sext i32 %105 to i64
  br label %187

107:                                              ; preds = %99, %107
  %108 = phi i64 [ 0, %99 ], [ %180, %107 ]
  %109 = getelementptr inbounds float, float* %5, i64 %108
  %110 = getelementptr inbounds float, float* %109, i64 8
  %111 = bitcast float* %110 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %111, i32 0, i32 1, i32 1)
  %112 = getelementptr inbounds float, float* %3, i64 %108
  %113 = getelementptr inbounds float, float* %112, i64 8
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %109, i64 16
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %112, i64 16
  %118 = bitcast float* %117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %118, i32 0, i32 1, i32 1)
  %119 = getelementptr inbounds float, float* %109, i64 24
  %120 = bitcast float* %119 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %120, i32 0, i32 1, i32 1)
  %121 = getelementptr inbounds float, float* %112, i64 24
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %122, i32 0, i32 1, i32 1)
  %123 = getelementptr inbounds float, float* %109, i64 32
  %124 = bitcast float* %123 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %124, i32 0, i32 1, i32 1)
  %125 = getelementptr inbounds float, float* %112, i64 32
  %126 = bitcast float* %125 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %126, i32 0, i32 1, i32 1)
  %127 = getelementptr inbounds float, float* %109, i64 40
  %128 = bitcast float* %127 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %128, i32 0, i32 1, i32 1)
  %129 = getelementptr inbounds float, float* %112, i64 40
  %130 = bitcast float* %129 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %130, i32 0, i32 1, i32 1)
  %131 = bitcast float* %109 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !tbaa !12
  %133 = add nuw nsw i64 %108, 8
  %134 = getelementptr inbounds float, float* %5, i64 %133
  %135 = bitcast float* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 1, !tbaa !12
  %137 = add nuw nsw i64 %108, 16
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 1, !tbaa !12
  %141 = add nuw nsw i64 %108, 24
  %142 = getelementptr inbounds float, float* %5, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nuw nsw i64 %108, 32
  %146 = getelementptr inbounds float, float* %5, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = trunc i64 %108 to i32
  %150 = add nsw i32 %101, %149
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %3, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 1, !tbaa !12
  %155 = add nsw i32 %150, 8
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %3, i64 %156
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 1, !tbaa !12
  %160 = add nsw i32 %150, 16
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %3, i64 %161
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 1, !tbaa !12
  %165 = add nsw i32 %150, 24
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %3, i64 %166
  %168 = bitcast float* %167 to <8 x float>*
  %169 = load <8 x float>, <8 x float>* %168, align 1, !tbaa !12
  %170 = add nsw i32 %150, 32
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %3, i64 %171
  %173 = bitcast float* %172 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 1, !tbaa !12
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %154, <8 x float> %43, <8 x float> %132) #10
  %176 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %159, <8 x float> %43, <8 x float> %136) #10
  %177 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %164, <8 x float> %43, <8 x float> %140) #10
  %178 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %169, <8 x float> %43, <8 x float> %144) #10
  %179 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %43, <8 x float> %148) #10
  store <8 x float> %175, <8 x float>* %131, align 1, !tbaa !12
  store <8 x float> %176, <8 x float>* %135, align 1, !tbaa !12
  store <8 x float> %177, <8 x float>* %139, align 1, !tbaa !12
  store <8 x float> %178, <8 x float>* %143, align 1, !tbaa !12
  store <8 x float> %179, <8 x float>* %147, align 1, !tbaa !12
  %180 = add nuw nsw i64 %108, 40
  %181 = icmp ult i64 %180, %11
  br i1 %181, label %107, label %102

182:                                              ; preds = %187
  br i1 %10, label %183, label %925

183:                                              ; preds = %182
  %184 = trunc i64 %49 to i32
  %185 = mul nsw i32 %9, %184
  %186 = sext i32 %185 to i64
  br label %261

187:                                              ; preds = %103, %187
  %188 = phi i64 [ 0, %103 ], [ %254, %187 ]
  %189 = getelementptr inbounds float, float* %5, i64 %188
  %190 = getelementptr inbounds float, float* %189, i64 8
  %191 = bitcast float* %190 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %191, i32 0, i32 1, i32 1)
  %192 = getelementptr inbounds float, float* %3, i64 %188
  %193 = getelementptr inbounds float, float* %192, i64 8
  %194 = bitcast float* %193 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %194, i32 0, i32 1, i32 1)
  %195 = getelementptr inbounds float, float* %189, i64 16
  %196 = bitcast float* %195 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %196, i32 0, i32 1, i32 1)
  %197 = getelementptr inbounds float, float* %192, i64 16
  %198 = bitcast float* %197 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %198, i32 0, i32 1, i32 1)
  %199 = getelementptr inbounds float, float* %189, i64 24
  %200 = bitcast float* %199 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %200, i32 0, i32 1, i32 1)
  %201 = getelementptr inbounds float, float* %192, i64 24
  %202 = bitcast float* %201 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %202, i32 0, i32 1, i32 1)
  %203 = getelementptr inbounds float, float* %189, i64 32
  %204 = bitcast float* %203 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %204, i32 0, i32 1, i32 1)
  %205 = getelementptr inbounds float, float* %192, i64 32
  %206 = bitcast float* %205 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %206, i32 0, i32 1, i32 1)
  %207 = getelementptr inbounds float, float* %189, i64 40
  %208 = bitcast float* %207 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %208, i32 0, i32 1, i32 1)
  %209 = getelementptr inbounds float, float* %192, i64 40
  %210 = bitcast float* %209 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %210, i32 0, i32 1, i32 1)
  %211 = bitcast float* %189 to <8 x float>*
  %212 = load <8 x float>, <8 x float>* %211, align 1, !tbaa !12
  %213 = add nuw nsw i64 %188, 8
  %214 = getelementptr inbounds float, float* %5, i64 %213
  %215 = bitcast float* %214 to <8 x float>*
  %216 = load <8 x float>, <8 x float>* %215, align 1, !tbaa !12
  %217 = add nuw nsw i64 %188, 16
  %218 = getelementptr inbounds float, float* %5, i64 %217
  %219 = bitcast float* %218 to <8 x float>*
  %220 = load <8 x float>, <8 x float>* %219, align 1, !tbaa !12
  %221 = add nuw nsw i64 %188, 24
  %222 = getelementptr inbounds float, float* %5, i64 %221
  %223 = bitcast float* %222 to <8 x float>*
  %224 = load <8 x float>, <8 x float>* %223, align 1, !tbaa !12
  %225 = add nuw nsw i64 %188, 32
  %226 = getelementptr inbounds float, float* %5, i64 %225
  %227 = bitcast float* %226 to <8 x float>*
  %228 = load <8 x float>, <8 x float>* %227, align 1, !tbaa !12
  %229 = add nsw i64 %188, %106
  %230 = getelementptr inbounds float, float* %3, i64 %229
  %231 = bitcast float* %230 to <8 x float>*
  %232 = load <8 x float>, <8 x float>* %231, align 1, !tbaa !12
  %233 = add nsw i64 %229, 8
  %234 = getelementptr inbounds float, float* %3, i64 %233
  %235 = bitcast float* %234 to <8 x float>*
  %236 = load <8 x float>, <8 x float>* %235, align 1, !tbaa !12
  %237 = add nsw i64 %229, 16
  %238 = getelementptr inbounds float, float* %3, i64 %237
  %239 = bitcast float* %238 to <8 x float>*
  %240 = load <8 x float>, <8 x float>* %239, align 1, !tbaa !12
  %241 = add nsw i64 %229, 24
  %242 = getelementptr inbounds float, float* %3, i64 %241
  %243 = bitcast float* %242 to <8 x float>*
  %244 = load <8 x float>, <8 x float>* %243, align 1, !tbaa !12
  %245 = add nsw i64 %229, 32
  %246 = getelementptr inbounds float, float* %3, i64 %245
  %247 = bitcast float* %246 to <8 x float>*
  %248 = load <8 x float>, <8 x float>* %247, align 1, !tbaa !12
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %232, <8 x float> %48, <8 x float> %212) #10
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %236, <8 x float> %48, <8 x float> %216) #10
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %240, <8 x float> %48, <8 x float> %220) #10
  %252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %244, <8 x float> %48, <8 x float> %224) #10
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %248, <8 x float> %48, <8 x float> %228) #10
  store <8 x float> %249, <8 x float>* %211, align 1, !tbaa !12
  store <8 x float> %250, <8 x float>* %215, align 1, !tbaa !12
  store <8 x float> %251, <8 x float>* %219, align 1, !tbaa !12
  store <8 x float> %252, <8 x float>* %223, align 1, !tbaa !12
  store <8 x float> %253, <8 x float>* %227, align 1, !tbaa !12
  %254 = add nuw nsw i64 %188, 40
  %255 = icmp ult i64 %254, %12
  br i1 %255, label %187, label %182

256:                                              ; preds = %261
  br i1 %10, label %257, label %925

257:                                              ; preds = %256
  %258 = trunc i64 %54 to i32
  %259 = mul nsw i32 %9, %258
  %260 = sext i32 %259 to i64
  br label %335

261:                                              ; preds = %183, %261
  %262 = phi i64 [ 0, %183 ], [ %328, %261 ]
  %263 = getelementptr inbounds float, float* %5, i64 %262
  %264 = getelementptr inbounds float, float* %263, i64 8
  %265 = bitcast float* %264 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %265, i32 0, i32 1, i32 1)
  %266 = getelementptr inbounds float, float* %3, i64 %262
  %267 = getelementptr inbounds float, float* %266, i64 8
  %268 = bitcast float* %267 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %268, i32 0, i32 1, i32 1)
  %269 = getelementptr inbounds float, float* %263, i64 16
  %270 = bitcast float* %269 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %270, i32 0, i32 1, i32 1)
  %271 = getelementptr inbounds float, float* %266, i64 16
  %272 = bitcast float* %271 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %272, i32 0, i32 1, i32 1)
  %273 = getelementptr inbounds float, float* %263, i64 24
  %274 = bitcast float* %273 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %274, i32 0, i32 1, i32 1)
  %275 = getelementptr inbounds float, float* %266, i64 24
  %276 = bitcast float* %275 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %276, i32 0, i32 1, i32 1)
  %277 = getelementptr inbounds float, float* %263, i64 32
  %278 = bitcast float* %277 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %278, i32 0, i32 1, i32 1)
  %279 = getelementptr inbounds float, float* %266, i64 32
  %280 = bitcast float* %279 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %280, i32 0, i32 1, i32 1)
  %281 = getelementptr inbounds float, float* %263, i64 40
  %282 = bitcast float* %281 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %282, i32 0, i32 1, i32 1)
  %283 = getelementptr inbounds float, float* %266, i64 40
  %284 = bitcast float* %283 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %284, i32 0, i32 1, i32 1)
  %285 = bitcast float* %263 to <8 x float>*
  %286 = load <8 x float>, <8 x float>* %285, align 1, !tbaa !12
  %287 = add nuw nsw i64 %262, 8
  %288 = getelementptr inbounds float, float* %5, i64 %287
  %289 = bitcast float* %288 to <8 x float>*
  %290 = load <8 x float>, <8 x float>* %289, align 1, !tbaa !12
  %291 = add nuw nsw i64 %262, 16
  %292 = getelementptr inbounds float, float* %5, i64 %291
  %293 = bitcast float* %292 to <8 x float>*
  %294 = load <8 x float>, <8 x float>* %293, align 1, !tbaa !12
  %295 = add nuw nsw i64 %262, 24
  %296 = getelementptr inbounds float, float* %5, i64 %295
  %297 = bitcast float* %296 to <8 x float>*
  %298 = load <8 x float>, <8 x float>* %297, align 1, !tbaa !12
  %299 = add nuw nsw i64 %262, 32
  %300 = getelementptr inbounds float, float* %5, i64 %299
  %301 = bitcast float* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 1, !tbaa !12
  %303 = add nsw i64 %262, %186
  %304 = getelementptr inbounds float, float* %3, i64 %303
  %305 = bitcast float* %304 to <8 x float>*
  %306 = load <8 x float>, <8 x float>* %305, align 1, !tbaa !12
  %307 = add nsw i64 %303, 8
  %308 = getelementptr inbounds float, float* %3, i64 %307
  %309 = bitcast float* %308 to <8 x float>*
  %310 = load <8 x float>, <8 x float>* %309, align 1, !tbaa !12
  %311 = add nsw i64 %303, 16
  %312 = getelementptr inbounds float, float* %3, i64 %311
  %313 = bitcast float* %312 to <8 x float>*
  %314 = load <8 x float>, <8 x float>* %313, align 1, !tbaa !12
  %315 = add nsw i64 %303, 24
  %316 = getelementptr inbounds float, float* %3, i64 %315
  %317 = bitcast float* %316 to <8 x float>*
  %318 = load <8 x float>, <8 x float>* %317, align 1, !tbaa !12
  %319 = add nsw i64 %303, 32
  %320 = getelementptr inbounds float, float* %3, i64 %319
  %321 = bitcast float* %320 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 1, !tbaa !12
  %323 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %306, <8 x float> %53, <8 x float> %286) #10
  %324 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %310, <8 x float> %53, <8 x float> %290) #10
  %325 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %314, <8 x float> %53, <8 x float> %294) #10
  %326 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %318, <8 x float> %53, <8 x float> %298) #10
  %327 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %322, <8 x float> %53, <8 x float> %302) #10
  store <8 x float> %323, <8 x float>* %285, align 1, !tbaa !12
  store <8 x float> %324, <8 x float>* %289, align 1, !tbaa !12
  store <8 x float> %325, <8 x float>* %293, align 1, !tbaa !12
  store <8 x float> %326, <8 x float>* %297, align 1, !tbaa !12
  store <8 x float> %327, <8 x float>* %301, align 1, !tbaa !12
  %328 = add nuw nsw i64 %262, 40
  %329 = icmp ult i64 %328, %13
  br i1 %329, label %261, label %256

330:                                              ; preds = %335
  br i1 %10, label %331, label %925

331:                                              ; preds = %330
  %332 = trunc i64 %59 to i32
  %333 = mul nsw i32 %9, %332
  %334 = sext i32 %333 to i64
  br label %409

335:                                              ; preds = %257, %335
  %336 = phi i64 [ 0, %257 ], [ %402, %335 ]
  %337 = getelementptr inbounds float, float* %5, i64 %336
  %338 = getelementptr inbounds float, float* %337, i64 8
  %339 = bitcast float* %338 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %339, i32 0, i32 1, i32 1)
  %340 = getelementptr inbounds float, float* %3, i64 %336
  %341 = getelementptr inbounds float, float* %340, i64 8
  %342 = bitcast float* %341 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %342, i32 0, i32 1, i32 1)
  %343 = getelementptr inbounds float, float* %337, i64 16
  %344 = bitcast float* %343 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %344, i32 0, i32 1, i32 1)
  %345 = getelementptr inbounds float, float* %340, i64 16
  %346 = bitcast float* %345 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %346, i32 0, i32 1, i32 1)
  %347 = getelementptr inbounds float, float* %337, i64 24
  %348 = bitcast float* %347 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %348, i32 0, i32 1, i32 1)
  %349 = getelementptr inbounds float, float* %340, i64 24
  %350 = bitcast float* %349 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %350, i32 0, i32 1, i32 1)
  %351 = getelementptr inbounds float, float* %337, i64 32
  %352 = bitcast float* %351 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %352, i32 0, i32 1, i32 1)
  %353 = getelementptr inbounds float, float* %340, i64 32
  %354 = bitcast float* %353 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %354, i32 0, i32 1, i32 1)
  %355 = getelementptr inbounds float, float* %337, i64 40
  %356 = bitcast float* %355 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %356, i32 0, i32 1, i32 1)
  %357 = getelementptr inbounds float, float* %340, i64 40
  %358 = bitcast float* %357 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %358, i32 0, i32 1, i32 1)
  %359 = bitcast float* %337 to <8 x float>*
  %360 = load <8 x float>, <8 x float>* %359, align 1, !tbaa !12
  %361 = add nuw nsw i64 %336, 8
  %362 = getelementptr inbounds float, float* %5, i64 %361
  %363 = bitcast float* %362 to <8 x float>*
  %364 = load <8 x float>, <8 x float>* %363, align 1, !tbaa !12
  %365 = add nuw nsw i64 %336, 16
  %366 = getelementptr inbounds float, float* %5, i64 %365
  %367 = bitcast float* %366 to <8 x float>*
  %368 = load <8 x float>, <8 x float>* %367, align 1, !tbaa !12
  %369 = add nuw nsw i64 %336, 24
  %370 = getelementptr inbounds float, float* %5, i64 %369
  %371 = bitcast float* %370 to <8 x float>*
  %372 = load <8 x float>, <8 x float>* %371, align 1, !tbaa !12
  %373 = add nuw nsw i64 %336, 32
  %374 = getelementptr inbounds float, float* %5, i64 %373
  %375 = bitcast float* %374 to <8 x float>*
  %376 = load <8 x float>, <8 x float>* %375, align 1, !tbaa !12
  %377 = add nsw i64 %336, %260
  %378 = getelementptr inbounds float, float* %3, i64 %377
  %379 = bitcast float* %378 to <8 x float>*
  %380 = load <8 x float>, <8 x float>* %379, align 1, !tbaa !12
  %381 = add nsw i64 %377, 8
  %382 = getelementptr inbounds float, float* %3, i64 %381
  %383 = bitcast float* %382 to <8 x float>*
  %384 = load <8 x float>, <8 x float>* %383, align 1, !tbaa !12
  %385 = add nsw i64 %377, 16
  %386 = getelementptr inbounds float, float* %3, i64 %385
  %387 = bitcast float* %386 to <8 x float>*
  %388 = load <8 x float>, <8 x float>* %387, align 1, !tbaa !12
  %389 = add nsw i64 %377, 24
  %390 = getelementptr inbounds float, float* %3, i64 %389
  %391 = bitcast float* %390 to <8 x float>*
  %392 = load <8 x float>, <8 x float>* %391, align 1, !tbaa !12
  %393 = add nsw i64 %377, 32
  %394 = getelementptr inbounds float, float* %3, i64 %393
  %395 = bitcast float* %394 to <8 x float>*
  %396 = load <8 x float>, <8 x float>* %395, align 1, !tbaa !12
  %397 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %380, <8 x float> %58, <8 x float> %360) #10
  %398 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %384, <8 x float> %58, <8 x float> %364) #10
  %399 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %58, <8 x float> %368) #10
  %400 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %392, <8 x float> %58, <8 x float> %372) #10
  %401 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %396, <8 x float> %58, <8 x float> %376) #10
  store <8 x float> %397, <8 x float>* %359, align 1, !tbaa !12
  store <8 x float> %398, <8 x float>* %363, align 1, !tbaa !12
  store <8 x float> %399, <8 x float>* %367, align 1, !tbaa !12
  store <8 x float> %400, <8 x float>* %371, align 1, !tbaa !12
  store <8 x float> %401, <8 x float>* %375, align 1, !tbaa !12
  %402 = add nuw nsw i64 %336, 40
  %403 = icmp ult i64 %402, %14
  br i1 %403, label %335, label %330

404:                                              ; preds = %409
  br i1 %10, label %405, label %925

405:                                              ; preds = %404
  %406 = trunc i64 %64 to i32
  %407 = mul nsw i32 %9, %406
  %408 = sext i32 %407 to i64
  br label %483

409:                                              ; preds = %331, %409
  %410 = phi i64 [ 0, %331 ], [ %476, %409 ]
  %411 = getelementptr inbounds float, float* %5, i64 %410
  %412 = getelementptr inbounds float, float* %411, i64 8
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %413, i32 0, i32 1, i32 1)
  %414 = getelementptr inbounds float, float* %3, i64 %410
  %415 = getelementptr inbounds float, float* %414, i64 8
  %416 = bitcast float* %415 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %416, i32 0, i32 1, i32 1)
  %417 = getelementptr inbounds float, float* %411, i64 16
  %418 = bitcast float* %417 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %418, i32 0, i32 1, i32 1)
  %419 = getelementptr inbounds float, float* %414, i64 16
  %420 = bitcast float* %419 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %420, i32 0, i32 1, i32 1)
  %421 = getelementptr inbounds float, float* %411, i64 24
  %422 = bitcast float* %421 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %422, i32 0, i32 1, i32 1)
  %423 = getelementptr inbounds float, float* %414, i64 24
  %424 = bitcast float* %423 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %424, i32 0, i32 1, i32 1)
  %425 = getelementptr inbounds float, float* %411, i64 32
  %426 = bitcast float* %425 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %426, i32 0, i32 1, i32 1)
  %427 = getelementptr inbounds float, float* %414, i64 32
  %428 = bitcast float* %427 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %428, i32 0, i32 1, i32 1)
  %429 = getelementptr inbounds float, float* %411, i64 40
  %430 = bitcast float* %429 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %430, i32 0, i32 1, i32 1)
  %431 = getelementptr inbounds float, float* %414, i64 40
  %432 = bitcast float* %431 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %432, i32 0, i32 1, i32 1)
  %433 = bitcast float* %411 to <8 x float>*
  %434 = load <8 x float>, <8 x float>* %433, align 1, !tbaa !12
  %435 = add nuw nsw i64 %410, 8
  %436 = getelementptr inbounds float, float* %5, i64 %435
  %437 = bitcast float* %436 to <8 x float>*
  %438 = load <8 x float>, <8 x float>* %437, align 1, !tbaa !12
  %439 = add nuw nsw i64 %410, 16
  %440 = getelementptr inbounds float, float* %5, i64 %439
  %441 = bitcast float* %440 to <8 x float>*
  %442 = load <8 x float>, <8 x float>* %441, align 1, !tbaa !12
  %443 = add nuw nsw i64 %410, 24
  %444 = getelementptr inbounds float, float* %5, i64 %443
  %445 = bitcast float* %444 to <8 x float>*
  %446 = load <8 x float>, <8 x float>* %445, align 1, !tbaa !12
  %447 = add nuw nsw i64 %410, 32
  %448 = getelementptr inbounds float, float* %5, i64 %447
  %449 = bitcast float* %448 to <8 x float>*
  %450 = load <8 x float>, <8 x float>* %449, align 1, !tbaa !12
  %451 = add nsw i64 %410, %334
  %452 = getelementptr inbounds float, float* %3, i64 %451
  %453 = bitcast float* %452 to <8 x float>*
  %454 = load <8 x float>, <8 x float>* %453, align 1, !tbaa !12
  %455 = add nsw i64 %451, 8
  %456 = getelementptr inbounds float, float* %3, i64 %455
  %457 = bitcast float* %456 to <8 x float>*
  %458 = load <8 x float>, <8 x float>* %457, align 1, !tbaa !12
  %459 = add nsw i64 %451, 16
  %460 = getelementptr inbounds float, float* %3, i64 %459
  %461 = bitcast float* %460 to <8 x float>*
  %462 = load <8 x float>, <8 x float>* %461, align 1, !tbaa !12
  %463 = add nsw i64 %451, 24
  %464 = getelementptr inbounds float, float* %3, i64 %463
  %465 = bitcast float* %464 to <8 x float>*
  %466 = load <8 x float>, <8 x float>* %465, align 1, !tbaa !12
  %467 = add nsw i64 %451, 32
  %468 = getelementptr inbounds float, float* %3, i64 %467
  %469 = bitcast float* %468 to <8 x float>*
  %470 = load <8 x float>, <8 x float>* %469, align 1, !tbaa !12
  %471 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %454, <8 x float> %63, <8 x float> %434) #10
  %472 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %458, <8 x float> %63, <8 x float> %438) #10
  %473 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %462, <8 x float> %63, <8 x float> %442) #10
  %474 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %466, <8 x float> %63, <8 x float> %446) #10
  %475 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %470, <8 x float> %63, <8 x float> %450) #10
  store <8 x float> %471, <8 x float>* %433, align 1, !tbaa !12
  store <8 x float> %472, <8 x float>* %437, align 1, !tbaa !12
  store <8 x float> %473, <8 x float>* %441, align 1, !tbaa !12
  store <8 x float> %474, <8 x float>* %445, align 1, !tbaa !12
  store <8 x float> %475, <8 x float>* %449, align 1, !tbaa !12
  %476 = add nuw nsw i64 %410, 40
  %477 = icmp ult i64 %476, %15
  br i1 %477, label %409, label %404

478:                                              ; preds = %483
  br i1 %10, label %479, label %925

479:                                              ; preds = %478
  %480 = trunc i64 %69 to i32
  %481 = mul nsw i32 %9, %480
  %482 = sext i32 %481 to i64
  br label %556

483:                                              ; preds = %405, %483
  %484 = phi i64 [ 0, %405 ], [ %550, %483 ]
  %485 = getelementptr inbounds float, float* %5, i64 %484
  %486 = getelementptr inbounds float, float* %485, i64 8
  %487 = bitcast float* %486 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %487, i32 0, i32 1, i32 1)
  %488 = getelementptr inbounds float, float* %3, i64 %484
  %489 = getelementptr inbounds float, float* %488, i64 8
  %490 = bitcast float* %489 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %490, i32 0, i32 1, i32 1)
  %491 = getelementptr inbounds float, float* %485, i64 16
  %492 = bitcast float* %491 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %492, i32 0, i32 1, i32 1)
  %493 = getelementptr inbounds float, float* %488, i64 16
  %494 = bitcast float* %493 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %494, i32 0, i32 1, i32 1)
  %495 = getelementptr inbounds float, float* %485, i64 24
  %496 = bitcast float* %495 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %496, i32 0, i32 1, i32 1)
  %497 = getelementptr inbounds float, float* %488, i64 24
  %498 = bitcast float* %497 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %498, i32 0, i32 1, i32 1)
  %499 = getelementptr inbounds float, float* %485, i64 32
  %500 = bitcast float* %499 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %500, i32 0, i32 1, i32 1)
  %501 = getelementptr inbounds float, float* %488, i64 32
  %502 = bitcast float* %501 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %502, i32 0, i32 1, i32 1)
  %503 = getelementptr inbounds float, float* %485, i64 40
  %504 = bitcast float* %503 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %504, i32 0, i32 1, i32 1)
  %505 = getelementptr inbounds float, float* %488, i64 40
  %506 = bitcast float* %505 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %506, i32 0, i32 1, i32 1)
  %507 = bitcast float* %485 to <8 x float>*
  %508 = load <8 x float>, <8 x float>* %507, align 1, !tbaa !12
  %509 = add nuw nsw i64 %484, 8
  %510 = getelementptr inbounds float, float* %5, i64 %509
  %511 = bitcast float* %510 to <8 x float>*
  %512 = load <8 x float>, <8 x float>* %511, align 1, !tbaa !12
  %513 = add nuw nsw i64 %484, 16
  %514 = getelementptr inbounds float, float* %5, i64 %513
  %515 = bitcast float* %514 to <8 x float>*
  %516 = load <8 x float>, <8 x float>* %515, align 1, !tbaa !12
  %517 = add nuw nsw i64 %484, 24
  %518 = getelementptr inbounds float, float* %5, i64 %517
  %519 = bitcast float* %518 to <8 x float>*
  %520 = load <8 x float>, <8 x float>* %519, align 1, !tbaa !12
  %521 = add nuw nsw i64 %484, 32
  %522 = getelementptr inbounds float, float* %5, i64 %521
  %523 = bitcast float* %522 to <8 x float>*
  %524 = load <8 x float>, <8 x float>* %523, align 1, !tbaa !12
  %525 = add nsw i64 %484, %408
  %526 = getelementptr inbounds float, float* %3, i64 %525
  %527 = bitcast float* %526 to <8 x float>*
  %528 = load <8 x float>, <8 x float>* %527, align 1, !tbaa !12
  %529 = add nsw i64 %525, 8
  %530 = getelementptr inbounds float, float* %3, i64 %529
  %531 = bitcast float* %530 to <8 x float>*
  %532 = load <8 x float>, <8 x float>* %531, align 1, !tbaa !12
  %533 = add nsw i64 %525, 16
  %534 = getelementptr inbounds float, float* %3, i64 %533
  %535 = bitcast float* %534 to <8 x float>*
  %536 = load <8 x float>, <8 x float>* %535, align 1, !tbaa !12
  %537 = add nsw i64 %525, 24
  %538 = getelementptr inbounds float, float* %3, i64 %537
  %539 = bitcast float* %538 to <8 x float>*
  %540 = load <8 x float>, <8 x float>* %539, align 1, !tbaa !12
  %541 = add nsw i64 %525, 32
  %542 = getelementptr inbounds float, float* %3, i64 %541
  %543 = bitcast float* %542 to <8 x float>*
  %544 = load <8 x float>, <8 x float>* %543, align 1, !tbaa !12
  %545 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %528, <8 x float> %68, <8 x float> %508) #10
  %546 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %532, <8 x float> %68, <8 x float> %512) #10
  %547 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %536, <8 x float> %68, <8 x float> %516) #10
  %548 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %540, <8 x float> %68, <8 x float> %520) #10
  %549 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %544, <8 x float> %68, <8 x float> %524) #10
  store <8 x float> %545, <8 x float>* %507, align 1, !tbaa !12
  store <8 x float> %546, <8 x float>* %511, align 1, !tbaa !12
  store <8 x float> %547, <8 x float>* %515, align 1, !tbaa !12
  store <8 x float> %548, <8 x float>* %519, align 1, !tbaa !12
  store <8 x float> %549, <8 x float>* %523, align 1, !tbaa !12
  %550 = add nuw nsw i64 %484, 40
  %551 = icmp ult i64 %550, %16
  br i1 %551, label %483, label %478

552:                                              ; preds = %556
  br i1 %18, label %553, label %925

553:                                              ; preds = %552
  %554 = trunc i64 %74 to i32
  %555 = mul nsw i32 %9, %554
  br label %630

556:                                              ; preds = %479, %556
  %557 = phi i64 [ 0, %479 ], [ %623, %556 ]
  %558 = getelementptr inbounds float, float* %5, i64 %557
  %559 = getelementptr inbounds float, float* %558, i64 8
  %560 = bitcast float* %559 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %560, i32 0, i32 1, i32 1)
  %561 = getelementptr inbounds float, float* %3, i64 %557
  %562 = getelementptr inbounds float, float* %561, i64 8
  %563 = bitcast float* %562 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %563, i32 0, i32 1, i32 1)
  %564 = getelementptr inbounds float, float* %558, i64 16
  %565 = bitcast float* %564 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %565, i32 0, i32 1, i32 1)
  %566 = getelementptr inbounds float, float* %561, i64 16
  %567 = bitcast float* %566 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %567, i32 0, i32 1, i32 1)
  %568 = getelementptr inbounds float, float* %558, i64 24
  %569 = bitcast float* %568 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %569, i32 0, i32 1, i32 1)
  %570 = getelementptr inbounds float, float* %561, i64 24
  %571 = bitcast float* %570 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %571, i32 0, i32 1, i32 1)
  %572 = getelementptr inbounds float, float* %558, i64 32
  %573 = bitcast float* %572 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %573, i32 0, i32 1, i32 1)
  %574 = getelementptr inbounds float, float* %561, i64 32
  %575 = bitcast float* %574 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %575, i32 0, i32 1, i32 1)
  %576 = getelementptr inbounds float, float* %558, i64 40
  %577 = bitcast float* %576 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %577, i32 0, i32 1, i32 1)
  %578 = getelementptr inbounds float, float* %561, i64 40
  %579 = bitcast float* %578 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %579, i32 0, i32 1, i32 1)
  %580 = bitcast float* %558 to <8 x float>*
  %581 = load <8 x float>, <8 x float>* %580, align 1, !tbaa !12
  %582 = add nuw nsw i64 %557, 8
  %583 = getelementptr inbounds float, float* %5, i64 %582
  %584 = bitcast float* %583 to <8 x float>*
  %585 = load <8 x float>, <8 x float>* %584, align 1, !tbaa !12
  %586 = add nuw nsw i64 %557, 16
  %587 = getelementptr inbounds float, float* %5, i64 %586
  %588 = bitcast float* %587 to <8 x float>*
  %589 = load <8 x float>, <8 x float>* %588, align 1, !tbaa !12
  %590 = add nuw nsw i64 %557, 24
  %591 = getelementptr inbounds float, float* %5, i64 %590
  %592 = bitcast float* %591 to <8 x float>*
  %593 = load <8 x float>, <8 x float>* %592, align 1, !tbaa !12
  %594 = add nuw nsw i64 %557, 32
  %595 = getelementptr inbounds float, float* %5, i64 %594
  %596 = bitcast float* %595 to <8 x float>*
  %597 = load <8 x float>, <8 x float>* %596, align 1, !tbaa !12
  %598 = add nsw i64 %557, %482
  %599 = getelementptr inbounds float, float* %3, i64 %598
  %600 = bitcast float* %599 to <8 x float>*
  %601 = load <8 x float>, <8 x float>* %600, align 1, !tbaa !12
  %602 = add nsw i64 %598, 8
  %603 = getelementptr inbounds float, float* %3, i64 %602
  %604 = bitcast float* %603 to <8 x float>*
  %605 = load <8 x float>, <8 x float>* %604, align 1, !tbaa !12
  %606 = add nsw i64 %598, 16
  %607 = getelementptr inbounds float, float* %3, i64 %606
  %608 = bitcast float* %607 to <8 x float>*
  %609 = load <8 x float>, <8 x float>* %608, align 1, !tbaa !12
  %610 = add nsw i64 %598, 24
  %611 = getelementptr inbounds float, float* %3, i64 %610
  %612 = bitcast float* %611 to <8 x float>*
  %613 = load <8 x float>, <8 x float>* %612, align 1, !tbaa !12
  %614 = add nsw i64 %598, 32
  %615 = getelementptr inbounds float, float* %3, i64 %614
  %616 = bitcast float* %615 to <8 x float>*
  %617 = load <8 x float>, <8 x float>* %616, align 1, !tbaa !12
  %618 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %601, <8 x float> %73, <8 x float> %581) #10
  %619 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %605, <8 x float> %73, <8 x float> %585) #10
  %620 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %609, <8 x float> %73, <8 x float> %589) #10
  %621 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %613, <8 x float> %73, <8 x float> %593) #10
  %622 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %617, <8 x float> %73, <8 x float> %597) #10
  store <8 x float> %618, <8 x float>* %580, align 1, !tbaa !12
  store <8 x float> %619, <8 x float>* %584, align 1, !tbaa !12
  store <8 x float> %620, <8 x float>* %588, align 1, !tbaa !12
  store <8 x float> %621, <8 x float>* %592, align 1, !tbaa !12
  store <8 x float> %622, <8 x float>* %596, align 1, !tbaa !12
  %623 = add nuw nsw i64 %557, 40
  %624 = icmp ult i64 %623, %17
  br i1 %624, label %556, label %552

625:                                              ; preds = %630
  br i1 %20, label %626, label %925

626:                                              ; preds = %625
  %627 = trunc i64 %79 to i32
  %628 = mul nsw i32 %9, %627
  %629 = sext i32 %628 to i64
  br label %710

630:                                              ; preds = %553, %630
  %631 = phi i64 [ 0, %553 ], [ %703, %630 ]
  %632 = getelementptr inbounds float, float* %5, i64 %631
  %633 = getelementptr inbounds float, float* %632, i64 8
  %634 = bitcast float* %633 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %634, i32 0, i32 1, i32 1)
  %635 = getelementptr inbounds float, float* %3, i64 %631
  %636 = getelementptr inbounds float, float* %635, i64 8
  %637 = bitcast float* %636 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %637, i32 0, i32 1, i32 1)
  %638 = getelementptr inbounds float, float* %632, i64 16
  %639 = bitcast float* %638 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %639, i32 0, i32 1, i32 1)
  %640 = getelementptr inbounds float, float* %635, i64 16
  %641 = bitcast float* %640 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %641, i32 0, i32 1, i32 1)
  %642 = getelementptr inbounds float, float* %632, i64 24
  %643 = bitcast float* %642 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %643, i32 0, i32 1, i32 1)
  %644 = getelementptr inbounds float, float* %635, i64 24
  %645 = bitcast float* %644 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %645, i32 0, i32 1, i32 1)
  %646 = getelementptr inbounds float, float* %632, i64 32
  %647 = bitcast float* %646 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %647, i32 0, i32 1, i32 1)
  %648 = getelementptr inbounds float, float* %635, i64 32
  %649 = bitcast float* %648 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %649, i32 0, i32 1, i32 1)
  %650 = getelementptr inbounds float, float* %632, i64 40
  %651 = bitcast float* %650 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %651, i32 0, i32 1, i32 1)
  %652 = getelementptr inbounds float, float* %635, i64 40
  %653 = bitcast float* %652 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %653, i32 0, i32 1, i32 1)
  %654 = bitcast float* %632 to <8 x float>*
  %655 = load <8 x float>, <8 x float>* %654, align 1, !tbaa !12
  %656 = add nuw nsw i64 %631, 8
  %657 = getelementptr inbounds float, float* %5, i64 %656
  %658 = bitcast float* %657 to <8 x float>*
  %659 = load <8 x float>, <8 x float>* %658, align 1, !tbaa !12
  %660 = add nuw nsw i64 %631, 16
  %661 = getelementptr inbounds float, float* %5, i64 %660
  %662 = bitcast float* %661 to <8 x float>*
  %663 = load <8 x float>, <8 x float>* %662, align 1, !tbaa !12
  %664 = add nuw nsw i64 %631, 24
  %665 = getelementptr inbounds float, float* %5, i64 %664
  %666 = bitcast float* %665 to <8 x float>*
  %667 = load <8 x float>, <8 x float>* %666, align 1, !tbaa !12
  %668 = add nuw nsw i64 %631, 32
  %669 = getelementptr inbounds float, float* %5, i64 %668
  %670 = bitcast float* %669 to <8 x float>*
  %671 = load <8 x float>, <8 x float>* %670, align 1, !tbaa !12
  %672 = trunc i64 %631 to i32
  %673 = add nsw i32 %555, %672
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds float, float* %3, i64 %674
  %676 = bitcast float* %675 to <8 x float>*
  %677 = load <8 x float>, <8 x float>* %676, align 1, !tbaa !12
  %678 = add nsw i32 %673, 8
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds float, float* %3, i64 %679
  %681 = bitcast float* %680 to <8 x float>*
  %682 = load <8 x float>, <8 x float>* %681, align 1, !tbaa !12
  %683 = add nsw i32 %673, 16
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds float, float* %3, i64 %684
  %686 = bitcast float* %685 to <8 x float>*
  %687 = load <8 x float>, <8 x float>* %686, align 1, !tbaa !12
  %688 = add nsw i32 %673, 24
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds float, float* %3, i64 %689
  %691 = bitcast float* %690 to <8 x float>*
  %692 = load <8 x float>, <8 x float>* %691, align 1, !tbaa !12
  %693 = add nsw i32 %673, 32
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds float, float* %3, i64 %694
  %696 = bitcast float* %695 to <8 x float>*
  %697 = load <8 x float>, <8 x float>* %696, align 1, !tbaa !12
  %698 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %677, <8 x float> %78, <8 x float> %655) #10
  %699 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %682, <8 x float> %78, <8 x float> %659) #10
  %700 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %687, <8 x float> %78, <8 x float> %663) #10
  %701 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %692, <8 x float> %78, <8 x float> %667) #10
  %702 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %697, <8 x float> %78, <8 x float> %671) #10
  store <8 x float> %698, <8 x float>* %654, align 1, !tbaa !12
  store <8 x float> %699, <8 x float>* %658, align 1, !tbaa !12
  store <8 x float> %700, <8 x float>* %662, align 1, !tbaa !12
  store <8 x float> %701, <8 x float>* %666, align 1, !tbaa !12
  store <8 x float> %702, <8 x float>* %670, align 1, !tbaa !12
  %703 = add nuw nsw i64 %631, 40
  %704 = icmp ult i64 %703, %19
  br i1 %704, label %630, label %625

705:                                              ; preds = %710
  br i1 %20, label %706, label %925

706:                                              ; preds = %705
  %707 = trunc i64 %84 to i32
  %708 = mul nsw i32 %9, %707
  %709 = sext i32 %708 to i64
  br label %783

710:                                              ; preds = %626, %710
  %711 = phi i64 [ 0, %626 ], [ %777, %710 ]
  %712 = getelementptr inbounds float, float* %5, i64 %711
  %713 = getelementptr inbounds float, float* %712, i64 8
  %714 = bitcast float* %713 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %714, i32 0, i32 1, i32 1)
  %715 = getelementptr inbounds float, float* %3, i64 %711
  %716 = getelementptr inbounds float, float* %715, i64 8
  %717 = bitcast float* %716 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %717, i32 0, i32 1, i32 1)
  %718 = getelementptr inbounds float, float* %712, i64 16
  %719 = bitcast float* %718 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %719, i32 0, i32 1, i32 1)
  %720 = getelementptr inbounds float, float* %715, i64 16
  %721 = bitcast float* %720 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %721, i32 0, i32 1, i32 1)
  %722 = getelementptr inbounds float, float* %712, i64 24
  %723 = bitcast float* %722 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %723, i32 0, i32 1, i32 1)
  %724 = getelementptr inbounds float, float* %715, i64 24
  %725 = bitcast float* %724 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %725, i32 0, i32 1, i32 1)
  %726 = getelementptr inbounds float, float* %712, i64 32
  %727 = bitcast float* %726 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %727, i32 0, i32 1, i32 1)
  %728 = getelementptr inbounds float, float* %715, i64 32
  %729 = bitcast float* %728 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %729, i32 0, i32 1, i32 1)
  %730 = getelementptr inbounds float, float* %712, i64 40
  %731 = bitcast float* %730 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %731, i32 0, i32 1, i32 1)
  %732 = getelementptr inbounds float, float* %715, i64 40
  %733 = bitcast float* %732 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %733, i32 0, i32 1, i32 1)
  %734 = bitcast float* %712 to <8 x float>*
  %735 = load <8 x float>, <8 x float>* %734, align 1, !tbaa !12
  %736 = add nuw nsw i64 %711, 8
  %737 = getelementptr inbounds float, float* %5, i64 %736
  %738 = bitcast float* %737 to <8 x float>*
  %739 = load <8 x float>, <8 x float>* %738, align 1, !tbaa !12
  %740 = add nuw nsw i64 %711, 16
  %741 = getelementptr inbounds float, float* %5, i64 %740
  %742 = bitcast float* %741 to <8 x float>*
  %743 = load <8 x float>, <8 x float>* %742, align 1, !tbaa !12
  %744 = add nuw nsw i64 %711, 24
  %745 = getelementptr inbounds float, float* %5, i64 %744
  %746 = bitcast float* %745 to <8 x float>*
  %747 = load <8 x float>, <8 x float>* %746, align 1, !tbaa !12
  %748 = add nuw nsw i64 %711, 32
  %749 = getelementptr inbounds float, float* %5, i64 %748
  %750 = bitcast float* %749 to <8 x float>*
  %751 = load <8 x float>, <8 x float>* %750, align 1, !tbaa !12
  %752 = add nsw i64 %711, %629
  %753 = getelementptr inbounds float, float* %3, i64 %752
  %754 = bitcast float* %753 to <8 x float>*
  %755 = load <8 x float>, <8 x float>* %754, align 1, !tbaa !12
  %756 = add nsw i64 %752, 8
  %757 = getelementptr inbounds float, float* %3, i64 %756
  %758 = bitcast float* %757 to <8 x float>*
  %759 = load <8 x float>, <8 x float>* %758, align 1, !tbaa !12
  %760 = add nsw i64 %752, 16
  %761 = getelementptr inbounds float, float* %3, i64 %760
  %762 = bitcast float* %761 to <8 x float>*
  %763 = load <8 x float>, <8 x float>* %762, align 1, !tbaa !12
  %764 = add nsw i64 %752, 24
  %765 = getelementptr inbounds float, float* %3, i64 %764
  %766 = bitcast float* %765 to <8 x float>*
  %767 = load <8 x float>, <8 x float>* %766, align 1, !tbaa !12
  %768 = add nsw i64 %752, 32
  %769 = getelementptr inbounds float, float* %3, i64 %768
  %770 = bitcast float* %769 to <8 x float>*
  %771 = load <8 x float>, <8 x float>* %770, align 1, !tbaa !12
  %772 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %755, <8 x float> %83, <8 x float> %735) #10
  %773 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %759, <8 x float> %83, <8 x float> %739) #10
  %774 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %763, <8 x float> %83, <8 x float> %743) #10
  %775 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %767, <8 x float> %83, <8 x float> %747) #10
  %776 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %771, <8 x float> %83, <8 x float> %751) #10
  store <8 x float> %772, <8 x float>* %734, align 1, !tbaa !12
  store <8 x float> %773, <8 x float>* %738, align 1, !tbaa !12
  store <8 x float> %774, <8 x float>* %742, align 1, !tbaa !12
  store <8 x float> %775, <8 x float>* %746, align 1, !tbaa !12
  store <8 x float> %776, <8 x float>* %750, align 1, !tbaa !12
  %777 = add nuw nsw i64 %711, 40
  %778 = icmp ult i64 %777, %21
  br i1 %778, label %710, label %705

779:                                              ; preds = %783
  %780 = trunc i64 %89 to i32
  %781 = mul nsw i32 %9, %780
  %782 = sext i32 %781 to i64
  br label %856

783:                                              ; preds = %706, %783
  %784 = phi i64 [ 0, %706 ], [ %850, %783 ]
  %785 = getelementptr inbounds float, float* %5, i64 %784
  %786 = getelementptr inbounds float, float* %785, i64 8
  %787 = bitcast float* %786 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %787, i32 0, i32 1, i32 1)
  %788 = getelementptr inbounds float, float* %3, i64 %784
  %789 = getelementptr inbounds float, float* %788, i64 8
  %790 = bitcast float* %789 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %790, i32 0, i32 1, i32 1)
  %791 = getelementptr inbounds float, float* %785, i64 16
  %792 = bitcast float* %791 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %792, i32 0, i32 1, i32 1)
  %793 = getelementptr inbounds float, float* %788, i64 16
  %794 = bitcast float* %793 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %794, i32 0, i32 1, i32 1)
  %795 = getelementptr inbounds float, float* %785, i64 24
  %796 = bitcast float* %795 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %796, i32 0, i32 1, i32 1)
  %797 = getelementptr inbounds float, float* %788, i64 24
  %798 = bitcast float* %797 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %798, i32 0, i32 1, i32 1)
  %799 = getelementptr inbounds float, float* %785, i64 32
  %800 = bitcast float* %799 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %800, i32 0, i32 1, i32 1)
  %801 = getelementptr inbounds float, float* %788, i64 32
  %802 = bitcast float* %801 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %802, i32 0, i32 1, i32 1)
  %803 = getelementptr inbounds float, float* %785, i64 40
  %804 = bitcast float* %803 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %804, i32 0, i32 1, i32 1)
  %805 = getelementptr inbounds float, float* %788, i64 40
  %806 = bitcast float* %805 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %806, i32 0, i32 1, i32 1)
  %807 = bitcast float* %785 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 1, !tbaa !12
  %809 = add nuw nsw i64 %784, 8
  %810 = getelementptr inbounds float, float* %5, i64 %809
  %811 = bitcast float* %810 to <8 x float>*
  %812 = load <8 x float>, <8 x float>* %811, align 1, !tbaa !12
  %813 = add nuw nsw i64 %784, 16
  %814 = getelementptr inbounds float, float* %5, i64 %813
  %815 = bitcast float* %814 to <8 x float>*
  %816 = load <8 x float>, <8 x float>* %815, align 1, !tbaa !12
  %817 = add nuw nsw i64 %784, 24
  %818 = getelementptr inbounds float, float* %5, i64 %817
  %819 = bitcast float* %818 to <8 x float>*
  %820 = load <8 x float>, <8 x float>* %819, align 1, !tbaa !12
  %821 = add nuw nsw i64 %784, 32
  %822 = getelementptr inbounds float, float* %5, i64 %821
  %823 = bitcast float* %822 to <8 x float>*
  %824 = load <8 x float>, <8 x float>* %823, align 1, !tbaa !12
  %825 = add nsw i64 %784, %709
  %826 = getelementptr inbounds float, float* %3, i64 %825
  %827 = bitcast float* %826 to <8 x float>*
  %828 = load <8 x float>, <8 x float>* %827, align 1, !tbaa !12
  %829 = add nsw i64 %825, 8
  %830 = getelementptr inbounds float, float* %3, i64 %829
  %831 = bitcast float* %830 to <8 x float>*
  %832 = load <8 x float>, <8 x float>* %831, align 1, !tbaa !12
  %833 = add nsw i64 %825, 16
  %834 = getelementptr inbounds float, float* %3, i64 %833
  %835 = bitcast float* %834 to <8 x float>*
  %836 = load <8 x float>, <8 x float>* %835, align 1, !tbaa !12
  %837 = add nsw i64 %825, 24
  %838 = getelementptr inbounds float, float* %3, i64 %837
  %839 = bitcast float* %838 to <8 x float>*
  %840 = load <8 x float>, <8 x float>* %839, align 1, !tbaa !12
  %841 = add nsw i64 %825, 32
  %842 = getelementptr inbounds float, float* %3, i64 %841
  %843 = bitcast float* %842 to <8 x float>*
  %844 = load <8 x float>, <8 x float>* %843, align 1, !tbaa !12
  %845 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %88, <8 x float> %808) #10
  %846 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %832, <8 x float> %88, <8 x float> %812) #10
  %847 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %836, <8 x float> %88, <8 x float> %816) #10
  %848 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %840, <8 x float> %88, <8 x float> %820) #10
  %849 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %844, <8 x float> %88, <8 x float> %824) #10
  store <8 x float> %845, <8 x float>* %807, align 1, !tbaa !12
  store <8 x float> %846, <8 x float>* %811, align 1, !tbaa !12
  store <8 x float> %847, <8 x float>* %815, align 1, !tbaa !12
  store <8 x float> %848, <8 x float>* %819, align 1, !tbaa !12
  store <8 x float> %849, <8 x float>* %823, align 1, !tbaa !12
  %850 = add nuw nsw i64 %784, 40
  %851 = icmp ult i64 %850, %22
  br i1 %851, label %783, label %779

852:                                              ; preds = %856
  %853 = trunc i64 %94 to i32
  %854 = mul nsw i32 %9, %853
  %855 = sext i32 %854 to i64
  br label %928

856:                                              ; preds = %779, %856
  %857 = phi i64 [ 0, %779 ], [ %923, %856 ]
  %858 = getelementptr inbounds float, float* %5, i64 %857
  %859 = getelementptr inbounds float, float* %858, i64 8
  %860 = bitcast float* %859 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %860, i32 0, i32 1, i32 1)
  %861 = getelementptr inbounds float, float* %3, i64 %857
  %862 = getelementptr inbounds float, float* %861, i64 8
  %863 = bitcast float* %862 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %863, i32 0, i32 1, i32 1)
  %864 = getelementptr inbounds float, float* %858, i64 16
  %865 = bitcast float* %864 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %865, i32 0, i32 1, i32 1)
  %866 = getelementptr inbounds float, float* %861, i64 16
  %867 = bitcast float* %866 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %867, i32 0, i32 1, i32 1)
  %868 = getelementptr inbounds float, float* %858, i64 24
  %869 = bitcast float* %868 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %869, i32 0, i32 1, i32 1)
  %870 = getelementptr inbounds float, float* %861, i64 24
  %871 = bitcast float* %870 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %871, i32 0, i32 1, i32 1)
  %872 = getelementptr inbounds float, float* %858, i64 32
  %873 = bitcast float* %872 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %873, i32 0, i32 1, i32 1)
  %874 = getelementptr inbounds float, float* %861, i64 32
  %875 = bitcast float* %874 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %875, i32 0, i32 1, i32 1)
  %876 = getelementptr inbounds float, float* %858, i64 40
  %877 = bitcast float* %876 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %877, i32 0, i32 1, i32 1)
  %878 = getelementptr inbounds float, float* %861, i64 40
  %879 = bitcast float* %878 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %879, i32 0, i32 1, i32 1)
  %880 = bitcast float* %858 to <8 x float>*
  %881 = load <8 x float>, <8 x float>* %880, align 1, !tbaa !12
  %882 = add nuw nsw i64 %857, 8
  %883 = getelementptr inbounds float, float* %5, i64 %882
  %884 = bitcast float* %883 to <8 x float>*
  %885 = load <8 x float>, <8 x float>* %884, align 1, !tbaa !12
  %886 = add nuw nsw i64 %857, 16
  %887 = getelementptr inbounds float, float* %5, i64 %886
  %888 = bitcast float* %887 to <8 x float>*
  %889 = load <8 x float>, <8 x float>* %888, align 1, !tbaa !12
  %890 = add nuw nsw i64 %857, 24
  %891 = getelementptr inbounds float, float* %5, i64 %890
  %892 = bitcast float* %891 to <8 x float>*
  %893 = load <8 x float>, <8 x float>* %892, align 1, !tbaa !12
  %894 = add nuw nsw i64 %857, 32
  %895 = getelementptr inbounds float, float* %5, i64 %894
  %896 = bitcast float* %895 to <8 x float>*
  %897 = load <8 x float>, <8 x float>* %896, align 1, !tbaa !12
  %898 = add nsw i64 %857, %782
  %899 = getelementptr inbounds float, float* %3, i64 %898
  %900 = bitcast float* %899 to <8 x float>*
  %901 = load <8 x float>, <8 x float>* %900, align 1, !tbaa !12
  %902 = add nsw i64 %898, 8
  %903 = getelementptr inbounds float, float* %3, i64 %902
  %904 = bitcast float* %903 to <8 x float>*
  %905 = load <8 x float>, <8 x float>* %904, align 1, !tbaa !12
  %906 = add nsw i64 %898, 16
  %907 = getelementptr inbounds float, float* %3, i64 %906
  %908 = bitcast float* %907 to <8 x float>*
  %909 = load <8 x float>, <8 x float>* %908, align 1, !tbaa !12
  %910 = add nsw i64 %898, 24
  %911 = getelementptr inbounds float, float* %3, i64 %910
  %912 = bitcast float* %911 to <8 x float>*
  %913 = load <8 x float>, <8 x float>* %912, align 1, !tbaa !12
  %914 = add nsw i64 %898, 32
  %915 = getelementptr inbounds float, float* %3, i64 %914
  %916 = bitcast float* %915 to <8 x float>*
  %917 = load <8 x float>, <8 x float>* %916, align 1, !tbaa !12
  %918 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %901, <8 x float> %93, <8 x float> %881) #10
  %919 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %905, <8 x float> %93, <8 x float> %885) #10
  %920 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %909, <8 x float> %93, <8 x float> %889) #10
  %921 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %913, <8 x float> %93, <8 x float> %893) #10
  %922 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %917, <8 x float> %93, <8 x float> %897) #10
  store <8 x float> %918, <8 x float>* %880, align 1, !tbaa !12
  store <8 x float> %919, <8 x float>* %884, align 1, !tbaa !12
  store <8 x float> %920, <8 x float>* %888, align 1, !tbaa !12
  store <8 x float> %921, <8 x float>* %892, align 1, !tbaa !12
  store <8 x float> %922, <8 x float>* %896, align 1, !tbaa !12
  %923 = add nuw nsw i64 %857, 40
  %924 = icmp slt i64 %923, %23
  br i1 %924, label %856, label %852

925:                                              ; preds = %928, %625, %38, %102, %182, %256, %330, %404, %478, %552, %705
  %926 = add nuw nsw i64 %39, 12
  %927 = icmp slt i64 %926, %25
  br i1 %927, label %38, label %26

928:                                              ; preds = %852, %928
  %929 = phi i64 [ 0, %852 ], [ %995, %928 ]
  %930 = getelementptr inbounds float, float* %5, i64 %929
  %931 = getelementptr inbounds float, float* %930, i64 8
  %932 = bitcast float* %931 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %932, i32 0, i32 1, i32 1)
  %933 = getelementptr inbounds float, float* %3, i64 %929
  %934 = getelementptr inbounds float, float* %933, i64 8
  %935 = bitcast float* %934 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %935, i32 0, i32 1, i32 1)
  %936 = getelementptr inbounds float, float* %930, i64 16
  %937 = bitcast float* %936 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %937, i32 0, i32 1, i32 1)
  %938 = getelementptr inbounds float, float* %933, i64 16
  %939 = bitcast float* %938 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %939, i32 0, i32 1, i32 1)
  %940 = getelementptr inbounds float, float* %930, i64 24
  %941 = bitcast float* %940 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %941, i32 0, i32 1, i32 1)
  %942 = getelementptr inbounds float, float* %933, i64 24
  %943 = bitcast float* %942 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %943, i32 0, i32 1, i32 1)
  %944 = getelementptr inbounds float, float* %930, i64 32
  %945 = bitcast float* %944 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %945, i32 0, i32 1, i32 1)
  %946 = getelementptr inbounds float, float* %933, i64 32
  %947 = bitcast float* %946 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %947, i32 0, i32 1, i32 1)
  %948 = getelementptr inbounds float, float* %930, i64 40
  %949 = bitcast float* %948 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %949, i32 0, i32 1, i32 1)
  %950 = getelementptr inbounds float, float* %933, i64 40
  %951 = bitcast float* %950 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %951, i32 0, i32 1, i32 1)
  %952 = bitcast float* %930 to <8 x float>*
  %953 = load <8 x float>, <8 x float>* %952, align 1, !tbaa !12
  %954 = add nuw nsw i64 %929, 8
  %955 = getelementptr inbounds float, float* %5, i64 %954
  %956 = bitcast float* %955 to <8 x float>*
  %957 = load <8 x float>, <8 x float>* %956, align 1, !tbaa !12
  %958 = add nuw nsw i64 %929, 16
  %959 = getelementptr inbounds float, float* %5, i64 %958
  %960 = bitcast float* %959 to <8 x float>*
  %961 = load <8 x float>, <8 x float>* %960, align 1, !tbaa !12
  %962 = add nuw nsw i64 %929, 24
  %963 = getelementptr inbounds float, float* %5, i64 %962
  %964 = bitcast float* %963 to <8 x float>*
  %965 = load <8 x float>, <8 x float>* %964, align 1, !tbaa !12
  %966 = add nuw nsw i64 %929, 32
  %967 = getelementptr inbounds float, float* %5, i64 %966
  %968 = bitcast float* %967 to <8 x float>*
  %969 = load <8 x float>, <8 x float>* %968, align 1, !tbaa !12
  %970 = add nsw i64 %929, %855
  %971 = getelementptr inbounds float, float* %3, i64 %970
  %972 = bitcast float* %971 to <8 x float>*
  %973 = load <8 x float>, <8 x float>* %972, align 1, !tbaa !12
  %974 = add nsw i64 %970, 8
  %975 = getelementptr inbounds float, float* %3, i64 %974
  %976 = bitcast float* %975 to <8 x float>*
  %977 = load <8 x float>, <8 x float>* %976, align 1, !tbaa !12
  %978 = add nsw i64 %970, 16
  %979 = getelementptr inbounds float, float* %3, i64 %978
  %980 = bitcast float* %979 to <8 x float>*
  %981 = load <8 x float>, <8 x float>* %980, align 1, !tbaa !12
  %982 = add nsw i64 %970, 24
  %983 = getelementptr inbounds float, float* %3, i64 %982
  %984 = bitcast float* %983 to <8 x float>*
  %985 = load <8 x float>, <8 x float>* %984, align 1, !tbaa !12
  %986 = add nsw i64 %970, 32
  %987 = getelementptr inbounds float, float* %3, i64 %986
  %988 = bitcast float* %987 to <8 x float>*
  %989 = load <8 x float>, <8 x float>* %988, align 1, !tbaa !12
  %990 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %973, <8 x float> %98, <8 x float> %953) #10
  %991 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %977, <8 x float> %98, <8 x float> %957) #10
  %992 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %981, <8 x float> %98, <8 x float> %961) #10
  %993 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %985, <8 x float> %98, <8 x float> %965) #10
  %994 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %989, <8 x float> %98, <8 x float> %969) #10
  store <8 x float> %990, <8 x float>* %952, align 1, !tbaa !12
  store <8 x float> %991, <8 x float>* %956, align 1, !tbaa !12
  store <8 x float> %992, <8 x float>* %960, align 1, !tbaa !12
  store <8 x float> %993, <8 x float>* %964, align 1, !tbaa !12
  store <8 x float> %994, <8 x float>* %968, align 1, !tbaa !12
  %995 = add nuw nsw i64 %929, 40
  %996 = icmp slt i64 %995, %24
  br i1 %996, label %928, label %925
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 132
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui5_uk12.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
