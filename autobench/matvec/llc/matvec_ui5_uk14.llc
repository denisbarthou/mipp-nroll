; ModuleID = 'codes/matvec_ui5_uk14.cpp'
source_filename = "codes/matvec_ui5_uk14.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui5_uk14.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 40
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 112
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %28

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %9 to i64
  %12 = zext i32 %9 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = zext i32 %9 to i64
  %16 = zext i32 %9 to i64
  %17 = zext i32 %9 to i64
  %18 = icmp sgt i32 %9, 0
  %19 = zext i32 %9 to i64
  %20 = icmp sgt i32 %9, 0
  %21 = zext i32 %9 to i64
  %22 = zext i32 %9 to i64
  %23 = sext i32 %9 to i64
  %24 = sext i32 %9 to i64
  %25 = sext i32 %9 to i64
  %26 = sext i32 %9 to i64
  %27 = sext i32 %6 to i64
  br label %40

28:                                               ; preds = %1083, %0
  %29 = tail call i64 @llvm.x86.rdtsc()
  %30 = uitofp i64 %29 to double
  %31 = fsub double %30, %2
  %32 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %33 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %34 = shl i32 %33, 1
  %35 = add nsw i32 %34, -1
  %36 = mul nsw i32 %35, %32
  %37 = sitofp i32 %36 to float
  %38 = fptrunc double %31 to float
  %39 = fdiv float %37, %38
  ret float %39

40:                                               ; preds = %8, %1083
  %41 = phi i64 [ 0, %8 ], [ %1084, %1083 ]
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = or i64 %41, 1
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = add nuw nsw i64 %41, 2
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = add nuw nsw i64 %41, 3
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = add nuw nsw i64 %41, 4
  %62 = getelementptr inbounds float, float* %4, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !18
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = add nuw nsw i64 %41, 5
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !18
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = add nuw nsw i64 %41, 6
  %72 = getelementptr inbounds float, float* %4, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !18
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = add nuw nsw i64 %41, 7
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !18
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = add nuw nsw i64 %41, 8
  %82 = getelementptr inbounds float, float* %4, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !18
  %84 = insertelement <8 x float> undef, float %83, i32 0
  %85 = shufflevector <8 x float> %84, <8 x float> undef, <8 x i32> zeroinitializer
  %86 = add nuw nsw i64 %41, 9
  %87 = getelementptr inbounds float, float* %4, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !18
  %89 = insertelement <8 x float> undef, float %88, i32 0
  %90 = shufflevector <8 x float> %89, <8 x float> undef, <8 x i32> zeroinitializer
  %91 = add nuw nsw i64 %41, 10
  %92 = getelementptr inbounds float, float* %4, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !18
  %94 = insertelement <8 x float> undef, float %93, i32 0
  %95 = shufflevector <8 x float> %94, <8 x float> undef, <8 x i32> zeroinitializer
  %96 = add nuw nsw i64 %41, 11
  %97 = getelementptr inbounds float, float* %4, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !18
  %99 = insertelement <8 x float> undef, float %98, i32 0
  %100 = shufflevector <8 x float> %99, <8 x float> undef, <8 x i32> zeroinitializer
  %101 = add nuw nsw i64 %41, 12
  %102 = getelementptr inbounds float, float* %4, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !18
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = shufflevector <8 x float> %104, <8 x float> undef, <8 x i32> zeroinitializer
  %106 = add nuw nsw i64 %41, 13
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !18
  %109 = insertelement <8 x float> undef, float %108, i32 0
  %110 = shufflevector <8 x float> %109, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %111, label %1083

111:                                              ; preds = %40
  %112 = trunc i64 %41 to i32
  %113 = mul nsw i32 %9, %112
  br label %119

114:                                              ; preds = %119
  br i1 %10, label %115, label %1083

115:                                              ; preds = %114
  %116 = trunc i64 %46 to i32
  %117 = mul nsw i32 %9, %116
  %118 = sext i32 %117 to i64
  br label %199

119:                                              ; preds = %111, %119
  %120 = phi i64 [ 0, %111 ], [ %192, %119 ]
  %121 = getelementptr inbounds float, float* %5, i64 %120
  %122 = getelementptr inbounds float, float* %121, i64 8
  %123 = bitcast float* %122 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %123, i32 0, i32 1, i32 1)
  %124 = getelementptr inbounds float, float* %3, i64 %120
  %125 = getelementptr inbounds float, float* %124, i64 8
  %126 = bitcast float* %125 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %126, i32 0, i32 1, i32 1)
  %127 = getelementptr inbounds float, float* %121, i64 16
  %128 = bitcast float* %127 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %128, i32 0, i32 1, i32 1)
  %129 = getelementptr inbounds float, float* %124, i64 16
  %130 = bitcast float* %129 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %130, i32 0, i32 1, i32 1)
  %131 = getelementptr inbounds float, float* %121, i64 24
  %132 = bitcast float* %131 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %132, i32 0, i32 1, i32 1)
  %133 = getelementptr inbounds float, float* %124, i64 24
  %134 = bitcast float* %133 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %134, i32 0, i32 1, i32 1)
  %135 = getelementptr inbounds float, float* %121, i64 32
  %136 = bitcast float* %135 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %136, i32 0, i32 1, i32 1)
  %137 = getelementptr inbounds float, float* %124, i64 32
  %138 = bitcast float* %137 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %138, i32 0, i32 1, i32 1)
  %139 = getelementptr inbounds float, float* %121, i64 40
  %140 = bitcast float* %139 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %140, i32 0, i32 1, i32 1)
  %141 = getelementptr inbounds float, float* %124, i64 40
  %142 = bitcast float* %141 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %142, i32 0, i32 1, i32 1)
  %143 = bitcast float* %121 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nuw nsw i64 %120, 8
  %146 = getelementptr inbounds float, float* %5, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = add nuw nsw i64 %120, 16
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 1, !tbaa !12
  %153 = add nuw nsw i64 %120, 24
  %154 = getelementptr inbounds float, float* %5, i64 %153
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 1, !tbaa !12
  %157 = add nuw nsw i64 %120, 32
  %158 = getelementptr inbounds float, float* %5, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 1, !tbaa !12
  %161 = trunc i64 %120 to i32
  %162 = add nsw i32 %113, %161
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %3, i64 %163
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 1, !tbaa !12
  %167 = add nsw i32 %162, 8
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %3, i64 %168
  %170 = bitcast float* %169 to <8 x float>*
  %171 = load <8 x float>, <8 x float>* %170, align 1, !tbaa !12
  %172 = add nsw i32 %162, 16
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %3, i64 %173
  %175 = bitcast float* %174 to <8 x float>*
  %176 = load <8 x float>, <8 x float>* %175, align 1, !tbaa !12
  %177 = add nsw i32 %162, 24
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds float, float* %3, i64 %178
  %180 = bitcast float* %179 to <8 x float>*
  %181 = load <8 x float>, <8 x float>* %180, align 1, !tbaa !12
  %182 = add nsw i32 %162, 32
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %3, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 1, !tbaa !12
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %166, <8 x float> %45, <8 x float> %144) #10
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %171, <8 x float> %45, <8 x float> %148) #10
  %189 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %45, <8 x float> %152) #10
  %190 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %181, <8 x float> %45, <8 x float> %156) #10
  %191 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %186, <8 x float> %45, <8 x float> %160) #10
  store <8 x float> %187, <8 x float>* %143, align 1, !tbaa !12
  store <8 x float> %188, <8 x float>* %147, align 1, !tbaa !12
  store <8 x float> %189, <8 x float>* %151, align 1, !tbaa !12
  store <8 x float> %190, <8 x float>* %155, align 1, !tbaa !12
  store <8 x float> %191, <8 x float>* %159, align 1, !tbaa !12
  %192 = add nuw nsw i64 %120, 40
  %193 = icmp ult i64 %192, %11
  br i1 %193, label %119, label %114

194:                                              ; preds = %199
  br i1 %10, label %195, label %1083

195:                                              ; preds = %194
  %196 = trunc i64 %51 to i32
  %197 = mul nsw i32 %9, %196
  %198 = sext i32 %197 to i64
  br label %273

199:                                              ; preds = %115, %199
  %200 = phi i64 [ 0, %115 ], [ %266, %199 ]
  %201 = getelementptr inbounds float, float* %5, i64 %200
  %202 = getelementptr inbounds float, float* %201, i64 8
  %203 = bitcast float* %202 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %203, i32 0, i32 1, i32 1)
  %204 = getelementptr inbounds float, float* %3, i64 %200
  %205 = getelementptr inbounds float, float* %204, i64 8
  %206 = bitcast float* %205 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %206, i32 0, i32 1, i32 1)
  %207 = getelementptr inbounds float, float* %201, i64 16
  %208 = bitcast float* %207 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %208, i32 0, i32 1, i32 1)
  %209 = getelementptr inbounds float, float* %204, i64 16
  %210 = bitcast float* %209 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %210, i32 0, i32 1, i32 1)
  %211 = getelementptr inbounds float, float* %201, i64 24
  %212 = bitcast float* %211 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %212, i32 0, i32 1, i32 1)
  %213 = getelementptr inbounds float, float* %204, i64 24
  %214 = bitcast float* %213 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %214, i32 0, i32 1, i32 1)
  %215 = getelementptr inbounds float, float* %201, i64 32
  %216 = bitcast float* %215 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %216, i32 0, i32 1, i32 1)
  %217 = getelementptr inbounds float, float* %204, i64 32
  %218 = bitcast float* %217 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %218, i32 0, i32 1, i32 1)
  %219 = getelementptr inbounds float, float* %201, i64 40
  %220 = bitcast float* %219 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %220, i32 0, i32 1, i32 1)
  %221 = getelementptr inbounds float, float* %204, i64 40
  %222 = bitcast float* %221 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %222, i32 0, i32 1, i32 1)
  %223 = bitcast float* %201 to <8 x float>*
  %224 = load <8 x float>, <8 x float>* %223, align 1, !tbaa !12
  %225 = add nuw nsw i64 %200, 8
  %226 = getelementptr inbounds float, float* %5, i64 %225
  %227 = bitcast float* %226 to <8 x float>*
  %228 = load <8 x float>, <8 x float>* %227, align 1, !tbaa !12
  %229 = add nuw nsw i64 %200, 16
  %230 = getelementptr inbounds float, float* %5, i64 %229
  %231 = bitcast float* %230 to <8 x float>*
  %232 = load <8 x float>, <8 x float>* %231, align 1, !tbaa !12
  %233 = add nuw nsw i64 %200, 24
  %234 = getelementptr inbounds float, float* %5, i64 %233
  %235 = bitcast float* %234 to <8 x float>*
  %236 = load <8 x float>, <8 x float>* %235, align 1, !tbaa !12
  %237 = add nuw nsw i64 %200, 32
  %238 = getelementptr inbounds float, float* %5, i64 %237
  %239 = bitcast float* %238 to <8 x float>*
  %240 = load <8 x float>, <8 x float>* %239, align 1, !tbaa !12
  %241 = add nsw i64 %200, %118
  %242 = getelementptr inbounds float, float* %3, i64 %241
  %243 = bitcast float* %242 to <8 x float>*
  %244 = load <8 x float>, <8 x float>* %243, align 1, !tbaa !12
  %245 = add nsw i64 %241, 8
  %246 = getelementptr inbounds float, float* %3, i64 %245
  %247 = bitcast float* %246 to <8 x float>*
  %248 = load <8 x float>, <8 x float>* %247, align 1, !tbaa !12
  %249 = add nsw i64 %241, 16
  %250 = getelementptr inbounds float, float* %3, i64 %249
  %251 = bitcast float* %250 to <8 x float>*
  %252 = load <8 x float>, <8 x float>* %251, align 1, !tbaa !12
  %253 = add nsw i64 %241, 24
  %254 = getelementptr inbounds float, float* %3, i64 %253
  %255 = bitcast float* %254 to <8 x float>*
  %256 = load <8 x float>, <8 x float>* %255, align 1, !tbaa !12
  %257 = add nsw i64 %241, 32
  %258 = getelementptr inbounds float, float* %3, i64 %257
  %259 = bitcast float* %258 to <8 x float>*
  %260 = load <8 x float>, <8 x float>* %259, align 1, !tbaa !12
  %261 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %244, <8 x float> %50, <8 x float> %224) #10
  %262 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %248, <8 x float> %50, <8 x float> %228) #10
  %263 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %252, <8 x float> %50, <8 x float> %232) #10
  %264 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %256, <8 x float> %50, <8 x float> %236) #10
  %265 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %260, <8 x float> %50, <8 x float> %240) #10
  store <8 x float> %261, <8 x float>* %223, align 1, !tbaa !12
  store <8 x float> %262, <8 x float>* %227, align 1, !tbaa !12
  store <8 x float> %263, <8 x float>* %231, align 1, !tbaa !12
  store <8 x float> %264, <8 x float>* %235, align 1, !tbaa !12
  store <8 x float> %265, <8 x float>* %239, align 1, !tbaa !12
  %266 = add nuw nsw i64 %200, 40
  %267 = icmp ult i64 %266, %12
  br i1 %267, label %199, label %194

268:                                              ; preds = %273
  br i1 %10, label %269, label %1083

269:                                              ; preds = %268
  %270 = trunc i64 %56 to i32
  %271 = mul nsw i32 %9, %270
  %272 = sext i32 %271 to i64
  br label %347

273:                                              ; preds = %195, %273
  %274 = phi i64 [ 0, %195 ], [ %340, %273 ]
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = getelementptr inbounds float, float* %275, i64 8
  %277 = bitcast float* %276 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %277, i32 0, i32 1, i32 1)
  %278 = getelementptr inbounds float, float* %3, i64 %274
  %279 = getelementptr inbounds float, float* %278, i64 8
  %280 = bitcast float* %279 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %280, i32 0, i32 1, i32 1)
  %281 = getelementptr inbounds float, float* %275, i64 16
  %282 = bitcast float* %281 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %282, i32 0, i32 1, i32 1)
  %283 = getelementptr inbounds float, float* %278, i64 16
  %284 = bitcast float* %283 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %284, i32 0, i32 1, i32 1)
  %285 = getelementptr inbounds float, float* %275, i64 24
  %286 = bitcast float* %285 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %286, i32 0, i32 1, i32 1)
  %287 = getelementptr inbounds float, float* %278, i64 24
  %288 = bitcast float* %287 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %288, i32 0, i32 1, i32 1)
  %289 = getelementptr inbounds float, float* %275, i64 32
  %290 = bitcast float* %289 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %290, i32 0, i32 1, i32 1)
  %291 = getelementptr inbounds float, float* %278, i64 32
  %292 = bitcast float* %291 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %292, i32 0, i32 1, i32 1)
  %293 = getelementptr inbounds float, float* %275, i64 40
  %294 = bitcast float* %293 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %294, i32 0, i32 1, i32 1)
  %295 = getelementptr inbounds float, float* %278, i64 40
  %296 = bitcast float* %295 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %296, i32 0, i32 1, i32 1)
  %297 = bitcast float* %275 to <8 x float>*
  %298 = load <8 x float>, <8 x float>* %297, align 1, !tbaa !12
  %299 = add nuw nsw i64 %274, 8
  %300 = getelementptr inbounds float, float* %5, i64 %299
  %301 = bitcast float* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 1, !tbaa !12
  %303 = add nuw nsw i64 %274, 16
  %304 = getelementptr inbounds float, float* %5, i64 %303
  %305 = bitcast float* %304 to <8 x float>*
  %306 = load <8 x float>, <8 x float>* %305, align 1, !tbaa !12
  %307 = add nuw nsw i64 %274, 24
  %308 = getelementptr inbounds float, float* %5, i64 %307
  %309 = bitcast float* %308 to <8 x float>*
  %310 = load <8 x float>, <8 x float>* %309, align 1, !tbaa !12
  %311 = add nuw nsw i64 %274, 32
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = bitcast float* %312 to <8 x float>*
  %314 = load <8 x float>, <8 x float>* %313, align 1, !tbaa !12
  %315 = add nsw i64 %274, %198
  %316 = getelementptr inbounds float, float* %3, i64 %315
  %317 = bitcast float* %316 to <8 x float>*
  %318 = load <8 x float>, <8 x float>* %317, align 1, !tbaa !12
  %319 = add nsw i64 %315, 8
  %320 = getelementptr inbounds float, float* %3, i64 %319
  %321 = bitcast float* %320 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 1, !tbaa !12
  %323 = add nsw i64 %315, 16
  %324 = getelementptr inbounds float, float* %3, i64 %323
  %325 = bitcast float* %324 to <8 x float>*
  %326 = load <8 x float>, <8 x float>* %325, align 1, !tbaa !12
  %327 = add nsw i64 %315, 24
  %328 = getelementptr inbounds float, float* %3, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  %330 = load <8 x float>, <8 x float>* %329, align 1, !tbaa !12
  %331 = add nsw i64 %315, 32
  %332 = getelementptr inbounds float, float* %3, i64 %331
  %333 = bitcast float* %332 to <8 x float>*
  %334 = load <8 x float>, <8 x float>* %333, align 1, !tbaa !12
  %335 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %318, <8 x float> %55, <8 x float> %298) #10
  %336 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %322, <8 x float> %55, <8 x float> %302) #10
  %337 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %326, <8 x float> %55, <8 x float> %306) #10
  %338 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %330, <8 x float> %55, <8 x float> %310) #10
  %339 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %334, <8 x float> %55, <8 x float> %314) #10
  store <8 x float> %335, <8 x float>* %297, align 1, !tbaa !12
  store <8 x float> %336, <8 x float>* %301, align 1, !tbaa !12
  store <8 x float> %337, <8 x float>* %305, align 1, !tbaa !12
  store <8 x float> %338, <8 x float>* %309, align 1, !tbaa !12
  store <8 x float> %339, <8 x float>* %313, align 1, !tbaa !12
  %340 = add nuw nsw i64 %274, 40
  %341 = icmp ult i64 %340, %13
  br i1 %341, label %273, label %268

342:                                              ; preds = %347
  br i1 %10, label %343, label %1083

343:                                              ; preds = %342
  %344 = trunc i64 %61 to i32
  %345 = mul nsw i32 %9, %344
  %346 = sext i32 %345 to i64
  br label %421

347:                                              ; preds = %269, %347
  %348 = phi i64 [ 0, %269 ], [ %414, %347 ]
  %349 = getelementptr inbounds float, float* %5, i64 %348
  %350 = getelementptr inbounds float, float* %349, i64 8
  %351 = bitcast float* %350 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %351, i32 0, i32 1, i32 1)
  %352 = getelementptr inbounds float, float* %3, i64 %348
  %353 = getelementptr inbounds float, float* %352, i64 8
  %354 = bitcast float* %353 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %354, i32 0, i32 1, i32 1)
  %355 = getelementptr inbounds float, float* %349, i64 16
  %356 = bitcast float* %355 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %356, i32 0, i32 1, i32 1)
  %357 = getelementptr inbounds float, float* %352, i64 16
  %358 = bitcast float* %357 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %358, i32 0, i32 1, i32 1)
  %359 = getelementptr inbounds float, float* %349, i64 24
  %360 = bitcast float* %359 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %360, i32 0, i32 1, i32 1)
  %361 = getelementptr inbounds float, float* %352, i64 24
  %362 = bitcast float* %361 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %362, i32 0, i32 1, i32 1)
  %363 = getelementptr inbounds float, float* %349, i64 32
  %364 = bitcast float* %363 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %364, i32 0, i32 1, i32 1)
  %365 = getelementptr inbounds float, float* %352, i64 32
  %366 = bitcast float* %365 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %366, i32 0, i32 1, i32 1)
  %367 = getelementptr inbounds float, float* %349, i64 40
  %368 = bitcast float* %367 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %368, i32 0, i32 1, i32 1)
  %369 = getelementptr inbounds float, float* %352, i64 40
  %370 = bitcast float* %369 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %370, i32 0, i32 1, i32 1)
  %371 = bitcast float* %349 to <8 x float>*
  %372 = load <8 x float>, <8 x float>* %371, align 1, !tbaa !12
  %373 = add nuw nsw i64 %348, 8
  %374 = getelementptr inbounds float, float* %5, i64 %373
  %375 = bitcast float* %374 to <8 x float>*
  %376 = load <8 x float>, <8 x float>* %375, align 1, !tbaa !12
  %377 = add nuw nsw i64 %348, 16
  %378 = getelementptr inbounds float, float* %5, i64 %377
  %379 = bitcast float* %378 to <8 x float>*
  %380 = load <8 x float>, <8 x float>* %379, align 1, !tbaa !12
  %381 = add nuw nsw i64 %348, 24
  %382 = getelementptr inbounds float, float* %5, i64 %381
  %383 = bitcast float* %382 to <8 x float>*
  %384 = load <8 x float>, <8 x float>* %383, align 1, !tbaa !12
  %385 = add nuw nsw i64 %348, 32
  %386 = getelementptr inbounds float, float* %5, i64 %385
  %387 = bitcast float* %386 to <8 x float>*
  %388 = load <8 x float>, <8 x float>* %387, align 1, !tbaa !12
  %389 = add nsw i64 %348, %272
  %390 = getelementptr inbounds float, float* %3, i64 %389
  %391 = bitcast float* %390 to <8 x float>*
  %392 = load <8 x float>, <8 x float>* %391, align 1, !tbaa !12
  %393 = add nsw i64 %389, 8
  %394 = getelementptr inbounds float, float* %3, i64 %393
  %395 = bitcast float* %394 to <8 x float>*
  %396 = load <8 x float>, <8 x float>* %395, align 1, !tbaa !12
  %397 = add nsw i64 %389, 16
  %398 = getelementptr inbounds float, float* %3, i64 %397
  %399 = bitcast float* %398 to <8 x float>*
  %400 = load <8 x float>, <8 x float>* %399, align 1, !tbaa !12
  %401 = add nsw i64 %389, 24
  %402 = getelementptr inbounds float, float* %3, i64 %401
  %403 = bitcast float* %402 to <8 x float>*
  %404 = load <8 x float>, <8 x float>* %403, align 1, !tbaa !12
  %405 = add nsw i64 %389, 32
  %406 = getelementptr inbounds float, float* %3, i64 %405
  %407 = bitcast float* %406 to <8 x float>*
  %408 = load <8 x float>, <8 x float>* %407, align 1, !tbaa !12
  %409 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %392, <8 x float> %60, <8 x float> %372) #10
  %410 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %396, <8 x float> %60, <8 x float> %376) #10
  %411 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %400, <8 x float> %60, <8 x float> %380) #10
  %412 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %404, <8 x float> %60, <8 x float> %384) #10
  %413 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %408, <8 x float> %60, <8 x float> %388) #10
  store <8 x float> %409, <8 x float>* %371, align 1, !tbaa !12
  store <8 x float> %410, <8 x float>* %375, align 1, !tbaa !12
  store <8 x float> %411, <8 x float>* %379, align 1, !tbaa !12
  store <8 x float> %412, <8 x float>* %383, align 1, !tbaa !12
  store <8 x float> %413, <8 x float>* %387, align 1, !tbaa !12
  %414 = add nuw nsw i64 %348, 40
  %415 = icmp ult i64 %414, %14
  br i1 %415, label %347, label %342

416:                                              ; preds = %421
  br i1 %10, label %417, label %1083

417:                                              ; preds = %416
  %418 = trunc i64 %66 to i32
  %419 = mul nsw i32 %9, %418
  %420 = sext i32 %419 to i64
  br label %495

421:                                              ; preds = %343, %421
  %422 = phi i64 [ 0, %343 ], [ %488, %421 ]
  %423 = getelementptr inbounds float, float* %5, i64 %422
  %424 = getelementptr inbounds float, float* %423, i64 8
  %425 = bitcast float* %424 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %425, i32 0, i32 1, i32 1)
  %426 = getelementptr inbounds float, float* %3, i64 %422
  %427 = getelementptr inbounds float, float* %426, i64 8
  %428 = bitcast float* %427 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %428, i32 0, i32 1, i32 1)
  %429 = getelementptr inbounds float, float* %423, i64 16
  %430 = bitcast float* %429 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %430, i32 0, i32 1, i32 1)
  %431 = getelementptr inbounds float, float* %426, i64 16
  %432 = bitcast float* %431 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %432, i32 0, i32 1, i32 1)
  %433 = getelementptr inbounds float, float* %423, i64 24
  %434 = bitcast float* %433 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %434, i32 0, i32 1, i32 1)
  %435 = getelementptr inbounds float, float* %426, i64 24
  %436 = bitcast float* %435 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %436, i32 0, i32 1, i32 1)
  %437 = getelementptr inbounds float, float* %423, i64 32
  %438 = bitcast float* %437 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %438, i32 0, i32 1, i32 1)
  %439 = getelementptr inbounds float, float* %426, i64 32
  %440 = bitcast float* %439 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %440, i32 0, i32 1, i32 1)
  %441 = getelementptr inbounds float, float* %423, i64 40
  %442 = bitcast float* %441 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %442, i32 0, i32 1, i32 1)
  %443 = getelementptr inbounds float, float* %426, i64 40
  %444 = bitcast float* %443 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %444, i32 0, i32 1, i32 1)
  %445 = bitcast float* %423 to <8 x float>*
  %446 = load <8 x float>, <8 x float>* %445, align 1, !tbaa !12
  %447 = add nuw nsw i64 %422, 8
  %448 = getelementptr inbounds float, float* %5, i64 %447
  %449 = bitcast float* %448 to <8 x float>*
  %450 = load <8 x float>, <8 x float>* %449, align 1, !tbaa !12
  %451 = add nuw nsw i64 %422, 16
  %452 = getelementptr inbounds float, float* %5, i64 %451
  %453 = bitcast float* %452 to <8 x float>*
  %454 = load <8 x float>, <8 x float>* %453, align 1, !tbaa !12
  %455 = add nuw nsw i64 %422, 24
  %456 = getelementptr inbounds float, float* %5, i64 %455
  %457 = bitcast float* %456 to <8 x float>*
  %458 = load <8 x float>, <8 x float>* %457, align 1, !tbaa !12
  %459 = add nuw nsw i64 %422, 32
  %460 = getelementptr inbounds float, float* %5, i64 %459
  %461 = bitcast float* %460 to <8 x float>*
  %462 = load <8 x float>, <8 x float>* %461, align 1, !tbaa !12
  %463 = add nsw i64 %422, %346
  %464 = getelementptr inbounds float, float* %3, i64 %463
  %465 = bitcast float* %464 to <8 x float>*
  %466 = load <8 x float>, <8 x float>* %465, align 1, !tbaa !12
  %467 = add nsw i64 %463, 8
  %468 = getelementptr inbounds float, float* %3, i64 %467
  %469 = bitcast float* %468 to <8 x float>*
  %470 = load <8 x float>, <8 x float>* %469, align 1, !tbaa !12
  %471 = add nsw i64 %463, 16
  %472 = getelementptr inbounds float, float* %3, i64 %471
  %473 = bitcast float* %472 to <8 x float>*
  %474 = load <8 x float>, <8 x float>* %473, align 1, !tbaa !12
  %475 = add nsw i64 %463, 24
  %476 = getelementptr inbounds float, float* %3, i64 %475
  %477 = bitcast float* %476 to <8 x float>*
  %478 = load <8 x float>, <8 x float>* %477, align 1, !tbaa !12
  %479 = add nsw i64 %463, 32
  %480 = getelementptr inbounds float, float* %3, i64 %479
  %481 = bitcast float* %480 to <8 x float>*
  %482 = load <8 x float>, <8 x float>* %481, align 1, !tbaa !12
  %483 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %466, <8 x float> %65, <8 x float> %446) #10
  %484 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %470, <8 x float> %65, <8 x float> %450) #10
  %485 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %474, <8 x float> %65, <8 x float> %454) #10
  %486 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %478, <8 x float> %65, <8 x float> %458) #10
  %487 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %482, <8 x float> %65, <8 x float> %462) #10
  store <8 x float> %483, <8 x float>* %445, align 1, !tbaa !12
  store <8 x float> %484, <8 x float>* %449, align 1, !tbaa !12
  store <8 x float> %485, <8 x float>* %453, align 1, !tbaa !12
  store <8 x float> %486, <8 x float>* %457, align 1, !tbaa !12
  store <8 x float> %487, <8 x float>* %461, align 1, !tbaa !12
  %488 = add nuw nsw i64 %422, 40
  %489 = icmp ult i64 %488, %15
  br i1 %489, label %421, label %416

490:                                              ; preds = %495
  br i1 %10, label %491, label %1083

491:                                              ; preds = %490
  %492 = trunc i64 %71 to i32
  %493 = mul nsw i32 %9, %492
  %494 = sext i32 %493 to i64
  br label %568

495:                                              ; preds = %417, %495
  %496 = phi i64 [ 0, %417 ], [ %562, %495 ]
  %497 = getelementptr inbounds float, float* %5, i64 %496
  %498 = getelementptr inbounds float, float* %497, i64 8
  %499 = bitcast float* %498 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %499, i32 0, i32 1, i32 1)
  %500 = getelementptr inbounds float, float* %3, i64 %496
  %501 = getelementptr inbounds float, float* %500, i64 8
  %502 = bitcast float* %501 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %502, i32 0, i32 1, i32 1)
  %503 = getelementptr inbounds float, float* %497, i64 16
  %504 = bitcast float* %503 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %504, i32 0, i32 1, i32 1)
  %505 = getelementptr inbounds float, float* %500, i64 16
  %506 = bitcast float* %505 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %506, i32 0, i32 1, i32 1)
  %507 = getelementptr inbounds float, float* %497, i64 24
  %508 = bitcast float* %507 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %508, i32 0, i32 1, i32 1)
  %509 = getelementptr inbounds float, float* %500, i64 24
  %510 = bitcast float* %509 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %510, i32 0, i32 1, i32 1)
  %511 = getelementptr inbounds float, float* %497, i64 32
  %512 = bitcast float* %511 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %512, i32 0, i32 1, i32 1)
  %513 = getelementptr inbounds float, float* %500, i64 32
  %514 = bitcast float* %513 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %514, i32 0, i32 1, i32 1)
  %515 = getelementptr inbounds float, float* %497, i64 40
  %516 = bitcast float* %515 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %516, i32 0, i32 1, i32 1)
  %517 = getelementptr inbounds float, float* %500, i64 40
  %518 = bitcast float* %517 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %518, i32 0, i32 1, i32 1)
  %519 = bitcast float* %497 to <8 x float>*
  %520 = load <8 x float>, <8 x float>* %519, align 1, !tbaa !12
  %521 = add nuw nsw i64 %496, 8
  %522 = getelementptr inbounds float, float* %5, i64 %521
  %523 = bitcast float* %522 to <8 x float>*
  %524 = load <8 x float>, <8 x float>* %523, align 1, !tbaa !12
  %525 = add nuw nsw i64 %496, 16
  %526 = getelementptr inbounds float, float* %5, i64 %525
  %527 = bitcast float* %526 to <8 x float>*
  %528 = load <8 x float>, <8 x float>* %527, align 1, !tbaa !12
  %529 = add nuw nsw i64 %496, 24
  %530 = getelementptr inbounds float, float* %5, i64 %529
  %531 = bitcast float* %530 to <8 x float>*
  %532 = load <8 x float>, <8 x float>* %531, align 1, !tbaa !12
  %533 = add nuw nsw i64 %496, 32
  %534 = getelementptr inbounds float, float* %5, i64 %533
  %535 = bitcast float* %534 to <8 x float>*
  %536 = load <8 x float>, <8 x float>* %535, align 1, !tbaa !12
  %537 = add nsw i64 %496, %420
  %538 = getelementptr inbounds float, float* %3, i64 %537
  %539 = bitcast float* %538 to <8 x float>*
  %540 = load <8 x float>, <8 x float>* %539, align 1, !tbaa !12
  %541 = add nsw i64 %537, 8
  %542 = getelementptr inbounds float, float* %3, i64 %541
  %543 = bitcast float* %542 to <8 x float>*
  %544 = load <8 x float>, <8 x float>* %543, align 1, !tbaa !12
  %545 = add nsw i64 %537, 16
  %546 = getelementptr inbounds float, float* %3, i64 %545
  %547 = bitcast float* %546 to <8 x float>*
  %548 = load <8 x float>, <8 x float>* %547, align 1, !tbaa !12
  %549 = add nsw i64 %537, 24
  %550 = getelementptr inbounds float, float* %3, i64 %549
  %551 = bitcast float* %550 to <8 x float>*
  %552 = load <8 x float>, <8 x float>* %551, align 1, !tbaa !12
  %553 = add nsw i64 %537, 32
  %554 = getelementptr inbounds float, float* %3, i64 %553
  %555 = bitcast float* %554 to <8 x float>*
  %556 = load <8 x float>, <8 x float>* %555, align 1, !tbaa !12
  %557 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %540, <8 x float> %70, <8 x float> %520) #10
  %558 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %544, <8 x float> %70, <8 x float> %524) #10
  %559 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %548, <8 x float> %70, <8 x float> %528) #10
  %560 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %552, <8 x float> %70, <8 x float> %532) #10
  %561 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %556, <8 x float> %70, <8 x float> %536) #10
  store <8 x float> %557, <8 x float>* %519, align 1, !tbaa !12
  store <8 x float> %558, <8 x float>* %523, align 1, !tbaa !12
  store <8 x float> %559, <8 x float>* %527, align 1, !tbaa !12
  store <8 x float> %560, <8 x float>* %531, align 1, !tbaa !12
  store <8 x float> %561, <8 x float>* %535, align 1, !tbaa !12
  %562 = add nuw nsw i64 %496, 40
  %563 = icmp ult i64 %562, %16
  br i1 %563, label %495, label %490

564:                                              ; preds = %568
  br i1 %18, label %565, label %1083

565:                                              ; preds = %564
  %566 = trunc i64 %76 to i32
  %567 = mul nsw i32 %9, %566
  br label %642

568:                                              ; preds = %491, %568
  %569 = phi i64 [ 0, %491 ], [ %635, %568 ]
  %570 = getelementptr inbounds float, float* %5, i64 %569
  %571 = getelementptr inbounds float, float* %570, i64 8
  %572 = bitcast float* %571 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %572, i32 0, i32 1, i32 1)
  %573 = getelementptr inbounds float, float* %3, i64 %569
  %574 = getelementptr inbounds float, float* %573, i64 8
  %575 = bitcast float* %574 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %575, i32 0, i32 1, i32 1)
  %576 = getelementptr inbounds float, float* %570, i64 16
  %577 = bitcast float* %576 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %577, i32 0, i32 1, i32 1)
  %578 = getelementptr inbounds float, float* %573, i64 16
  %579 = bitcast float* %578 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %579, i32 0, i32 1, i32 1)
  %580 = getelementptr inbounds float, float* %570, i64 24
  %581 = bitcast float* %580 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %581, i32 0, i32 1, i32 1)
  %582 = getelementptr inbounds float, float* %573, i64 24
  %583 = bitcast float* %582 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %583, i32 0, i32 1, i32 1)
  %584 = getelementptr inbounds float, float* %570, i64 32
  %585 = bitcast float* %584 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %585, i32 0, i32 1, i32 1)
  %586 = getelementptr inbounds float, float* %573, i64 32
  %587 = bitcast float* %586 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %587, i32 0, i32 1, i32 1)
  %588 = getelementptr inbounds float, float* %570, i64 40
  %589 = bitcast float* %588 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %589, i32 0, i32 1, i32 1)
  %590 = getelementptr inbounds float, float* %573, i64 40
  %591 = bitcast float* %590 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %591, i32 0, i32 1, i32 1)
  %592 = bitcast float* %570 to <8 x float>*
  %593 = load <8 x float>, <8 x float>* %592, align 1, !tbaa !12
  %594 = add nuw nsw i64 %569, 8
  %595 = getelementptr inbounds float, float* %5, i64 %594
  %596 = bitcast float* %595 to <8 x float>*
  %597 = load <8 x float>, <8 x float>* %596, align 1, !tbaa !12
  %598 = add nuw nsw i64 %569, 16
  %599 = getelementptr inbounds float, float* %5, i64 %598
  %600 = bitcast float* %599 to <8 x float>*
  %601 = load <8 x float>, <8 x float>* %600, align 1, !tbaa !12
  %602 = add nuw nsw i64 %569, 24
  %603 = getelementptr inbounds float, float* %5, i64 %602
  %604 = bitcast float* %603 to <8 x float>*
  %605 = load <8 x float>, <8 x float>* %604, align 1, !tbaa !12
  %606 = add nuw nsw i64 %569, 32
  %607 = getelementptr inbounds float, float* %5, i64 %606
  %608 = bitcast float* %607 to <8 x float>*
  %609 = load <8 x float>, <8 x float>* %608, align 1, !tbaa !12
  %610 = add nsw i64 %569, %494
  %611 = getelementptr inbounds float, float* %3, i64 %610
  %612 = bitcast float* %611 to <8 x float>*
  %613 = load <8 x float>, <8 x float>* %612, align 1, !tbaa !12
  %614 = add nsw i64 %610, 8
  %615 = getelementptr inbounds float, float* %3, i64 %614
  %616 = bitcast float* %615 to <8 x float>*
  %617 = load <8 x float>, <8 x float>* %616, align 1, !tbaa !12
  %618 = add nsw i64 %610, 16
  %619 = getelementptr inbounds float, float* %3, i64 %618
  %620 = bitcast float* %619 to <8 x float>*
  %621 = load <8 x float>, <8 x float>* %620, align 1, !tbaa !12
  %622 = add nsw i64 %610, 24
  %623 = getelementptr inbounds float, float* %3, i64 %622
  %624 = bitcast float* %623 to <8 x float>*
  %625 = load <8 x float>, <8 x float>* %624, align 1, !tbaa !12
  %626 = add nsw i64 %610, 32
  %627 = getelementptr inbounds float, float* %3, i64 %626
  %628 = bitcast float* %627 to <8 x float>*
  %629 = load <8 x float>, <8 x float>* %628, align 1, !tbaa !12
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %613, <8 x float> %75, <8 x float> %593) #10
  %631 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %617, <8 x float> %75, <8 x float> %597) #10
  %632 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %621, <8 x float> %75, <8 x float> %601) #10
  %633 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %625, <8 x float> %75, <8 x float> %605) #10
  %634 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %629, <8 x float> %75, <8 x float> %609) #10
  store <8 x float> %630, <8 x float>* %592, align 1, !tbaa !12
  store <8 x float> %631, <8 x float>* %596, align 1, !tbaa !12
  store <8 x float> %632, <8 x float>* %600, align 1, !tbaa !12
  store <8 x float> %633, <8 x float>* %604, align 1, !tbaa !12
  store <8 x float> %634, <8 x float>* %608, align 1, !tbaa !12
  %635 = add nuw nsw i64 %569, 40
  %636 = icmp ult i64 %635, %17
  br i1 %636, label %568, label %564

637:                                              ; preds = %642
  br i1 %20, label %638, label %1083

638:                                              ; preds = %637
  %639 = trunc i64 %81 to i32
  %640 = mul nsw i32 %9, %639
  %641 = sext i32 %640 to i64
  br label %722

642:                                              ; preds = %565, %642
  %643 = phi i64 [ 0, %565 ], [ %715, %642 ]
  %644 = getelementptr inbounds float, float* %5, i64 %643
  %645 = getelementptr inbounds float, float* %644, i64 8
  %646 = bitcast float* %645 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %646, i32 0, i32 1, i32 1)
  %647 = getelementptr inbounds float, float* %3, i64 %643
  %648 = getelementptr inbounds float, float* %647, i64 8
  %649 = bitcast float* %648 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %649, i32 0, i32 1, i32 1)
  %650 = getelementptr inbounds float, float* %644, i64 16
  %651 = bitcast float* %650 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %651, i32 0, i32 1, i32 1)
  %652 = getelementptr inbounds float, float* %647, i64 16
  %653 = bitcast float* %652 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %653, i32 0, i32 1, i32 1)
  %654 = getelementptr inbounds float, float* %644, i64 24
  %655 = bitcast float* %654 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %655, i32 0, i32 1, i32 1)
  %656 = getelementptr inbounds float, float* %647, i64 24
  %657 = bitcast float* %656 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %657, i32 0, i32 1, i32 1)
  %658 = getelementptr inbounds float, float* %644, i64 32
  %659 = bitcast float* %658 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %659, i32 0, i32 1, i32 1)
  %660 = getelementptr inbounds float, float* %647, i64 32
  %661 = bitcast float* %660 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %661, i32 0, i32 1, i32 1)
  %662 = getelementptr inbounds float, float* %644, i64 40
  %663 = bitcast float* %662 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %663, i32 0, i32 1, i32 1)
  %664 = getelementptr inbounds float, float* %647, i64 40
  %665 = bitcast float* %664 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %665, i32 0, i32 1, i32 1)
  %666 = bitcast float* %644 to <8 x float>*
  %667 = load <8 x float>, <8 x float>* %666, align 1, !tbaa !12
  %668 = add nuw nsw i64 %643, 8
  %669 = getelementptr inbounds float, float* %5, i64 %668
  %670 = bitcast float* %669 to <8 x float>*
  %671 = load <8 x float>, <8 x float>* %670, align 1, !tbaa !12
  %672 = add nuw nsw i64 %643, 16
  %673 = getelementptr inbounds float, float* %5, i64 %672
  %674 = bitcast float* %673 to <8 x float>*
  %675 = load <8 x float>, <8 x float>* %674, align 1, !tbaa !12
  %676 = add nuw nsw i64 %643, 24
  %677 = getelementptr inbounds float, float* %5, i64 %676
  %678 = bitcast float* %677 to <8 x float>*
  %679 = load <8 x float>, <8 x float>* %678, align 1, !tbaa !12
  %680 = add nuw nsw i64 %643, 32
  %681 = getelementptr inbounds float, float* %5, i64 %680
  %682 = bitcast float* %681 to <8 x float>*
  %683 = load <8 x float>, <8 x float>* %682, align 1, !tbaa !12
  %684 = trunc i64 %643 to i32
  %685 = add nsw i32 %567, %684
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds float, float* %3, i64 %686
  %688 = bitcast float* %687 to <8 x float>*
  %689 = load <8 x float>, <8 x float>* %688, align 1, !tbaa !12
  %690 = add nsw i32 %685, 8
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds float, float* %3, i64 %691
  %693 = bitcast float* %692 to <8 x float>*
  %694 = load <8 x float>, <8 x float>* %693, align 1, !tbaa !12
  %695 = add nsw i32 %685, 16
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds float, float* %3, i64 %696
  %698 = bitcast float* %697 to <8 x float>*
  %699 = load <8 x float>, <8 x float>* %698, align 1, !tbaa !12
  %700 = add nsw i32 %685, 24
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds float, float* %3, i64 %701
  %703 = bitcast float* %702 to <8 x float>*
  %704 = load <8 x float>, <8 x float>* %703, align 1, !tbaa !12
  %705 = add nsw i32 %685, 32
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds float, float* %3, i64 %706
  %708 = bitcast float* %707 to <8 x float>*
  %709 = load <8 x float>, <8 x float>* %708, align 1, !tbaa !12
  %710 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %689, <8 x float> %80, <8 x float> %667) #10
  %711 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %694, <8 x float> %80, <8 x float> %671) #10
  %712 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %699, <8 x float> %80, <8 x float> %675) #10
  %713 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %704, <8 x float> %80, <8 x float> %679) #10
  %714 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %709, <8 x float> %80, <8 x float> %683) #10
  store <8 x float> %710, <8 x float>* %666, align 1, !tbaa !12
  store <8 x float> %711, <8 x float>* %670, align 1, !tbaa !12
  store <8 x float> %712, <8 x float>* %674, align 1, !tbaa !12
  store <8 x float> %713, <8 x float>* %678, align 1, !tbaa !12
  store <8 x float> %714, <8 x float>* %682, align 1, !tbaa !12
  %715 = add nuw nsw i64 %643, 40
  %716 = icmp ult i64 %715, %19
  br i1 %716, label %642, label %637

717:                                              ; preds = %722
  br i1 %20, label %718, label %1083

718:                                              ; preds = %717
  %719 = trunc i64 %86 to i32
  %720 = mul nsw i32 %9, %719
  %721 = sext i32 %720 to i64
  br label %795

722:                                              ; preds = %638, %722
  %723 = phi i64 [ 0, %638 ], [ %789, %722 ]
  %724 = getelementptr inbounds float, float* %5, i64 %723
  %725 = getelementptr inbounds float, float* %724, i64 8
  %726 = bitcast float* %725 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %726, i32 0, i32 1, i32 1)
  %727 = getelementptr inbounds float, float* %3, i64 %723
  %728 = getelementptr inbounds float, float* %727, i64 8
  %729 = bitcast float* %728 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %729, i32 0, i32 1, i32 1)
  %730 = getelementptr inbounds float, float* %724, i64 16
  %731 = bitcast float* %730 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %731, i32 0, i32 1, i32 1)
  %732 = getelementptr inbounds float, float* %727, i64 16
  %733 = bitcast float* %732 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %733, i32 0, i32 1, i32 1)
  %734 = getelementptr inbounds float, float* %724, i64 24
  %735 = bitcast float* %734 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %735, i32 0, i32 1, i32 1)
  %736 = getelementptr inbounds float, float* %727, i64 24
  %737 = bitcast float* %736 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %737, i32 0, i32 1, i32 1)
  %738 = getelementptr inbounds float, float* %724, i64 32
  %739 = bitcast float* %738 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %739, i32 0, i32 1, i32 1)
  %740 = getelementptr inbounds float, float* %727, i64 32
  %741 = bitcast float* %740 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %741, i32 0, i32 1, i32 1)
  %742 = getelementptr inbounds float, float* %724, i64 40
  %743 = bitcast float* %742 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %743, i32 0, i32 1, i32 1)
  %744 = getelementptr inbounds float, float* %727, i64 40
  %745 = bitcast float* %744 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %745, i32 0, i32 1, i32 1)
  %746 = bitcast float* %724 to <8 x float>*
  %747 = load <8 x float>, <8 x float>* %746, align 1, !tbaa !12
  %748 = add nuw nsw i64 %723, 8
  %749 = getelementptr inbounds float, float* %5, i64 %748
  %750 = bitcast float* %749 to <8 x float>*
  %751 = load <8 x float>, <8 x float>* %750, align 1, !tbaa !12
  %752 = add nuw nsw i64 %723, 16
  %753 = getelementptr inbounds float, float* %5, i64 %752
  %754 = bitcast float* %753 to <8 x float>*
  %755 = load <8 x float>, <8 x float>* %754, align 1, !tbaa !12
  %756 = add nuw nsw i64 %723, 24
  %757 = getelementptr inbounds float, float* %5, i64 %756
  %758 = bitcast float* %757 to <8 x float>*
  %759 = load <8 x float>, <8 x float>* %758, align 1, !tbaa !12
  %760 = add nuw nsw i64 %723, 32
  %761 = getelementptr inbounds float, float* %5, i64 %760
  %762 = bitcast float* %761 to <8 x float>*
  %763 = load <8 x float>, <8 x float>* %762, align 1, !tbaa !12
  %764 = add nsw i64 %723, %641
  %765 = getelementptr inbounds float, float* %3, i64 %764
  %766 = bitcast float* %765 to <8 x float>*
  %767 = load <8 x float>, <8 x float>* %766, align 1, !tbaa !12
  %768 = add nsw i64 %764, 8
  %769 = getelementptr inbounds float, float* %3, i64 %768
  %770 = bitcast float* %769 to <8 x float>*
  %771 = load <8 x float>, <8 x float>* %770, align 1, !tbaa !12
  %772 = add nsw i64 %764, 16
  %773 = getelementptr inbounds float, float* %3, i64 %772
  %774 = bitcast float* %773 to <8 x float>*
  %775 = load <8 x float>, <8 x float>* %774, align 1, !tbaa !12
  %776 = add nsw i64 %764, 24
  %777 = getelementptr inbounds float, float* %3, i64 %776
  %778 = bitcast float* %777 to <8 x float>*
  %779 = load <8 x float>, <8 x float>* %778, align 1, !tbaa !12
  %780 = add nsw i64 %764, 32
  %781 = getelementptr inbounds float, float* %3, i64 %780
  %782 = bitcast float* %781 to <8 x float>*
  %783 = load <8 x float>, <8 x float>* %782, align 1, !tbaa !12
  %784 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %767, <8 x float> %85, <8 x float> %747) #10
  %785 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %771, <8 x float> %85, <8 x float> %751) #10
  %786 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %775, <8 x float> %85, <8 x float> %755) #10
  %787 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %779, <8 x float> %85, <8 x float> %759) #10
  %788 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %783, <8 x float> %85, <8 x float> %763) #10
  store <8 x float> %784, <8 x float>* %746, align 1, !tbaa !12
  store <8 x float> %785, <8 x float>* %750, align 1, !tbaa !12
  store <8 x float> %786, <8 x float>* %754, align 1, !tbaa !12
  store <8 x float> %787, <8 x float>* %758, align 1, !tbaa !12
  store <8 x float> %788, <8 x float>* %762, align 1, !tbaa !12
  %789 = add nuw nsw i64 %723, 40
  %790 = icmp ult i64 %789, %21
  br i1 %790, label %722, label %717

791:                                              ; preds = %795
  %792 = trunc i64 %91 to i32
  %793 = mul nsw i32 %9, %792
  %794 = sext i32 %793 to i64
  br label %868

795:                                              ; preds = %718, %795
  %796 = phi i64 [ 0, %718 ], [ %862, %795 ]
  %797 = getelementptr inbounds float, float* %5, i64 %796
  %798 = getelementptr inbounds float, float* %797, i64 8
  %799 = bitcast float* %798 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %799, i32 0, i32 1, i32 1)
  %800 = getelementptr inbounds float, float* %3, i64 %796
  %801 = getelementptr inbounds float, float* %800, i64 8
  %802 = bitcast float* %801 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %802, i32 0, i32 1, i32 1)
  %803 = getelementptr inbounds float, float* %797, i64 16
  %804 = bitcast float* %803 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %804, i32 0, i32 1, i32 1)
  %805 = getelementptr inbounds float, float* %800, i64 16
  %806 = bitcast float* %805 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %806, i32 0, i32 1, i32 1)
  %807 = getelementptr inbounds float, float* %797, i64 24
  %808 = bitcast float* %807 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %808, i32 0, i32 1, i32 1)
  %809 = getelementptr inbounds float, float* %800, i64 24
  %810 = bitcast float* %809 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %810, i32 0, i32 1, i32 1)
  %811 = getelementptr inbounds float, float* %797, i64 32
  %812 = bitcast float* %811 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %812, i32 0, i32 1, i32 1)
  %813 = getelementptr inbounds float, float* %800, i64 32
  %814 = bitcast float* %813 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %814, i32 0, i32 1, i32 1)
  %815 = getelementptr inbounds float, float* %797, i64 40
  %816 = bitcast float* %815 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %816, i32 0, i32 1, i32 1)
  %817 = getelementptr inbounds float, float* %800, i64 40
  %818 = bitcast float* %817 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %818, i32 0, i32 1, i32 1)
  %819 = bitcast float* %797 to <8 x float>*
  %820 = load <8 x float>, <8 x float>* %819, align 1, !tbaa !12
  %821 = add nuw nsw i64 %796, 8
  %822 = getelementptr inbounds float, float* %5, i64 %821
  %823 = bitcast float* %822 to <8 x float>*
  %824 = load <8 x float>, <8 x float>* %823, align 1, !tbaa !12
  %825 = add nuw nsw i64 %796, 16
  %826 = getelementptr inbounds float, float* %5, i64 %825
  %827 = bitcast float* %826 to <8 x float>*
  %828 = load <8 x float>, <8 x float>* %827, align 1, !tbaa !12
  %829 = add nuw nsw i64 %796, 24
  %830 = getelementptr inbounds float, float* %5, i64 %829
  %831 = bitcast float* %830 to <8 x float>*
  %832 = load <8 x float>, <8 x float>* %831, align 1, !tbaa !12
  %833 = add nuw nsw i64 %796, 32
  %834 = getelementptr inbounds float, float* %5, i64 %833
  %835 = bitcast float* %834 to <8 x float>*
  %836 = load <8 x float>, <8 x float>* %835, align 1, !tbaa !12
  %837 = add nsw i64 %796, %721
  %838 = getelementptr inbounds float, float* %3, i64 %837
  %839 = bitcast float* %838 to <8 x float>*
  %840 = load <8 x float>, <8 x float>* %839, align 1, !tbaa !12
  %841 = add nsw i64 %837, 8
  %842 = getelementptr inbounds float, float* %3, i64 %841
  %843 = bitcast float* %842 to <8 x float>*
  %844 = load <8 x float>, <8 x float>* %843, align 1, !tbaa !12
  %845 = add nsw i64 %837, 16
  %846 = getelementptr inbounds float, float* %3, i64 %845
  %847 = bitcast float* %846 to <8 x float>*
  %848 = load <8 x float>, <8 x float>* %847, align 1, !tbaa !12
  %849 = add nsw i64 %837, 24
  %850 = getelementptr inbounds float, float* %3, i64 %849
  %851 = bitcast float* %850 to <8 x float>*
  %852 = load <8 x float>, <8 x float>* %851, align 1, !tbaa !12
  %853 = add nsw i64 %837, 32
  %854 = getelementptr inbounds float, float* %3, i64 %853
  %855 = bitcast float* %854 to <8 x float>*
  %856 = load <8 x float>, <8 x float>* %855, align 1, !tbaa !12
  %857 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %840, <8 x float> %90, <8 x float> %820) #10
  %858 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %844, <8 x float> %90, <8 x float> %824) #10
  %859 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %848, <8 x float> %90, <8 x float> %828) #10
  %860 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %852, <8 x float> %90, <8 x float> %832) #10
  %861 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %856, <8 x float> %90, <8 x float> %836) #10
  store <8 x float> %857, <8 x float>* %819, align 1, !tbaa !12
  store <8 x float> %858, <8 x float>* %823, align 1, !tbaa !12
  store <8 x float> %859, <8 x float>* %827, align 1, !tbaa !12
  store <8 x float> %860, <8 x float>* %831, align 1, !tbaa !12
  store <8 x float> %861, <8 x float>* %835, align 1, !tbaa !12
  %862 = add nuw nsw i64 %796, 40
  %863 = icmp ult i64 %862, %22
  br i1 %863, label %795, label %791

864:                                              ; preds = %868
  %865 = trunc i64 %96 to i32
  %866 = mul nsw i32 %9, %865
  %867 = sext i32 %866 to i64
  br label %941

868:                                              ; preds = %791, %868
  %869 = phi i64 [ 0, %791 ], [ %935, %868 ]
  %870 = getelementptr inbounds float, float* %5, i64 %869
  %871 = getelementptr inbounds float, float* %870, i64 8
  %872 = bitcast float* %871 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %872, i32 0, i32 1, i32 1)
  %873 = getelementptr inbounds float, float* %3, i64 %869
  %874 = getelementptr inbounds float, float* %873, i64 8
  %875 = bitcast float* %874 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %875, i32 0, i32 1, i32 1)
  %876 = getelementptr inbounds float, float* %870, i64 16
  %877 = bitcast float* %876 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %877, i32 0, i32 1, i32 1)
  %878 = getelementptr inbounds float, float* %873, i64 16
  %879 = bitcast float* %878 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %879, i32 0, i32 1, i32 1)
  %880 = getelementptr inbounds float, float* %870, i64 24
  %881 = bitcast float* %880 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %881, i32 0, i32 1, i32 1)
  %882 = getelementptr inbounds float, float* %873, i64 24
  %883 = bitcast float* %882 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %883, i32 0, i32 1, i32 1)
  %884 = getelementptr inbounds float, float* %870, i64 32
  %885 = bitcast float* %884 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %885, i32 0, i32 1, i32 1)
  %886 = getelementptr inbounds float, float* %873, i64 32
  %887 = bitcast float* %886 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %887, i32 0, i32 1, i32 1)
  %888 = getelementptr inbounds float, float* %870, i64 40
  %889 = bitcast float* %888 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %889, i32 0, i32 1, i32 1)
  %890 = getelementptr inbounds float, float* %873, i64 40
  %891 = bitcast float* %890 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %891, i32 0, i32 1, i32 1)
  %892 = bitcast float* %870 to <8 x float>*
  %893 = load <8 x float>, <8 x float>* %892, align 1, !tbaa !12
  %894 = add nuw nsw i64 %869, 8
  %895 = getelementptr inbounds float, float* %5, i64 %894
  %896 = bitcast float* %895 to <8 x float>*
  %897 = load <8 x float>, <8 x float>* %896, align 1, !tbaa !12
  %898 = add nuw nsw i64 %869, 16
  %899 = getelementptr inbounds float, float* %5, i64 %898
  %900 = bitcast float* %899 to <8 x float>*
  %901 = load <8 x float>, <8 x float>* %900, align 1, !tbaa !12
  %902 = add nuw nsw i64 %869, 24
  %903 = getelementptr inbounds float, float* %5, i64 %902
  %904 = bitcast float* %903 to <8 x float>*
  %905 = load <8 x float>, <8 x float>* %904, align 1, !tbaa !12
  %906 = add nuw nsw i64 %869, 32
  %907 = getelementptr inbounds float, float* %5, i64 %906
  %908 = bitcast float* %907 to <8 x float>*
  %909 = load <8 x float>, <8 x float>* %908, align 1, !tbaa !12
  %910 = add nsw i64 %869, %794
  %911 = getelementptr inbounds float, float* %3, i64 %910
  %912 = bitcast float* %911 to <8 x float>*
  %913 = load <8 x float>, <8 x float>* %912, align 1, !tbaa !12
  %914 = add nsw i64 %910, 8
  %915 = getelementptr inbounds float, float* %3, i64 %914
  %916 = bitcast float* %915 to <8 x float>*
  %917 = load <8 x float>, <8 x float>* %916, align 1, !tbaa !12
  %918 = add nsw i64 %910, 16
  %919 = getelementptr inbounds float, float* %3, i64 %918
  %920 = bitcast float* %919 to <8 x float>*
  %921 = load <8 x float>, <8 x float>* %920, align 1, !tbaa !12
  %922 = add nsw i64 %910, 24
  %923 = getelementptr inbounds float, float* %3, i64 %922
  %924 = bitcast float* %923 to <8 x float>*
  %925 = load <8 x float>, <8 x float>* %924, align 1, !tbaa !12
  %926 = add nsw i64 %910, 32
  %927 = getelementptr inbounds float, float* %3, i64 %926
  %928 = bitcast float* %927 to <8 x float>*
  %929 = load <8 x float>, <8 x float>* %928, align 1, !tbaa !12
  %930 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %913, <8 x float> %95, <8 x float> %893) #10
  %931 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %917, <8 x float> %95, <8 x float> %897) #10
  %932 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %921, <8 x float> %95, <8 x float> %901) #10
  %933 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %925, <8 x float> %95, <8 x float> %905) #10
  %934 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %929, <8 x float> %95, <8 x float> %909) #10
  store <8 x float> %930, <8 x float>* %892, align 1, !tbaa !12
  store <8 x float> %931, <8 x float>* %896, align 1, !tbaa !12
  store <8 x float> %932, <8 x float>* %900, align 1, !tbaa !12
  store <8 x float> %933, <8 x float>* %904, align 1, !tbaa !12
  store <8 x float> %934, <8 x float>* %908, align 1, !tbaa !12
  %935 = add nuw nsw i64 %869, 40
  %936 = icmp slt i64 %935, %23
  br i1 %936, label %868, label %864

937:                                              ; preds = %941
  %938 = trunc i64 %101 to i32
  %939 = mul nsw i32 %9, %938
  %940 = sext i32 %939 to i64
  br label %1014

941:                                              ; preds = %864, %941
  %942 = phi i64 [ 0, %864 ], [ %1008, %941 ]
  %943 = getelementptr inbounds float, float* %5, i64 %942
  %944 = getelementptr inbounds float, float* %943, i64 8
  %945 = bitcast float* %944 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %945, i32 0, i32 1, i32 1)
  %946 = getelementptr inbounds float, float* %3, i64 %942
  %947 = getelementptr inbounds float, float* %946, i64 8
  %948 = bitcast float* %947 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %948, i32 0, i32 1, i32 1)
  %949 = getelementptr inbounds float, float* %943, i64 16
  %950 = bitcast float* %949 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %950, i32 0, i32 1, i32 1)
  %951 = getelementptr inbounds float, float* %946, i64 16
  %952 = bitcast float* %951 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %952, i32 0, i32 1, i32 1)
  %953 = getelementptr inbounds float, float* %943, i64 24
  %954 = bitcast float* %953 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %954, i32 0, i32 1, i32 1)
  %955 = getelementptr inbounds float, float* %946, i64 24
  %956 = bitcast float* %955 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %956, i32 0, i32 1, i32 1)
  %957 = getelementptr inbounds float, float* %943, i64 32
  %958 = bitcast float* %957 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %958, i32 0, i32 1, i32 1)
  %959 = getelementptr inbounds float, float* %946, i64 32
  %960 = bitcast float* %959 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %960, i32 0, i32 1, i32 1)
  %961 = getelementptr inbounds float, float* %943, i64 40
  %962 = bitcast float* %961 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %962, i32 0, i32 1, i32 1)
  %963 = getelementptr inbounds float, float* %946, i64 40
  %964 = bitcast float* %963 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %964, i32 0, i32 1, i32 1)
  %965 = bitcast float* %943 to <8 x float>*
  %966 = load <8 x float>, <8 x float>* %965, align 1, !tbaa !12
  %967 = add nuw nsw i64 %942, 8
  %968 = getelementptr inbounds float, float* %5, i64 %967
  %969 = bitcast float* %968 to <8 x float>*
  %970 = load <8 x float>, <8 x float>* %969, align 1, !tbaa !12
  %971 = add nuw nsw i64 %942, 16
  %972 = getelementptr inbounds float, float* %5, i64 %971
  %973 = bitcast float* %972 to <8 x float>*
  %974 = load <8 x float>, <8 x float>* %973, align 1, !tbaa !12
  %975 = add nuw nsw i64 %942, 24
  %976 = getelementptr inbounds float, float* %5, i64 %975
  %977 = bitcast float* %976 to <8 x float>*
  %978 = load <8 x float>, <8 x float>* %977, align 1, !tbaa !12
  %979 = add nuw nsw i64 %942, 32
  %980 = getelementptr inbounds float, float* %5, i64 %979
  %981 = bitcast float* %980 to <8 x float>*
  %982 = load <8 x float>, <8 x float>* %981, align 1, !tbaa !12
  %983 = add nsw i64 %942, %867
  %984 = getelementptr inbounds float, float* %3, i64 %983
  %985 = bitcast float* %984 to <8 x float>*
  %986 = load <8 x float>, <8 x float>* %985, align 1, !tbaa !12
  %987 = add nsw i64 %983, 8
  %988 = getelementptr inbounds float, float* %3, i64 %987
  %989 = bitcast float* %988 to <8 x float>*
  %990 = load <8 x float>, <8 x float>* %989, align 1, !tbaa !12
  %991 = add nsw i64 %983, 16
  %992 = getelementptr inbounds float, float* %3, i64 %991
  %993 = bitcast float* %992 to <8 x float>*
  %994 = load <8 x float>, <8 x float>* %993, align 1, !tbaa !12
  %995 = add nsw i64 %983, 24
  %996 = getelementptr inbounds float, float* %3, i64 %995
  %997 = bitcast float* %996 to <8 x float>*
  %998 = load <8 x float>, <8 x float>* %997, align 1, !tbaa !12
  %999 = add nsw i64 %983, 32
  %1000 = getelementptr inbounds float, float* %3, i64 %999
  %1001 = bitcast float* %1000 to <8 x float>*
  %1002 = load <8 x float>, <8 x float>* %1001, align 1, !tbaa !12
  %1003 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %986, <8 x float> %100, <8 x float> %966) #10
  %1004 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %990, <8 x float> %100, <8 x float> %970) #10
  %1005 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %994, <8 x float> %100, <8 x float> %974) #10
  %1006 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %998, <8 x float> %100, <8 x float> %978) #10
  %1007 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1002, <8 x float> %100, <8 x float> %982) #10
  store <8 x float> %1003, <8 x float>* %965, align 1, !tbaa !12
  store <8 x float> %1004, <8 x float>* %969, align 1, !tbaa !12
  store <8 x float> %1005, <8 x float>* %973, align 1, !tbaa !12
  store <8 x float> %1006, <8 x float>* %977, align 1, !tbaa !12
  store <8 x float> %1007, <8 x float>* %981, align 1, !tbaa !12
  %1008 = add nuw nsw i64 %942, 40
  %1009 = icmp slt i64 %1008, %24
  br i1 %1009, label %941, label %937

1010:                                             ; preds = %1014
  %1011 = trunc i64 %106 to i32
  %1012 = mul nsw i32 %9, %1011
  %1013 = sext i32 %1012 to i64
  br label %1086

1014:                                             ; preds = %937, %1014
  %1015 = phi i64 [ 0, %937 ], [ %1081, %1014 ]
  %1016 = getelementptr inbounds float, float* %5, i64 %1015
  %1017 = getelementptr inbounds float, float* %1016, i64 8
  %1018 = bitcast float* %1017 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1018, i32 0, i32 1, i32 1)
  %1019 = getelementptr inbounds float, float* %3, i64 %1015
  %1020 = getelementptr inbounds float, float* %1019, i64 8
  %1021 = bitcast float* %1020 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1021, i32 0, i32 1, i32 1)
  %1022 = getelementptr inbounds float, float* %1016, i64 16
  %1023 = bitcast float* %1022 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1023, i32 0, i32 1, i32 1)
  %1024 = getelementptr inbounds float, float* %1019, i64 16
  %1025 = bitcast float* %1024 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1025, i32 0, i32 1, i32 1)
  %1026 = getelementptr inbounds float, float* %1016, i64 24
  %1027 = bitcast float* %1026 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1027, i32 0, i32 1, i32 1)
  %1028 = getelementptr inbounds float, float* %1019, i64 24
  %1029 = bitcast float* %1028 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1029, i32 0, i32 1, i32 1)
  %1030 = getelementptr inbounds float, float* %1016, i64 32
  %1031 = bitcast float* %1030 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1031, i32 0, i32 1, i32 1)
  %1032 = getelementptr inbounds float, float* %1019, i64 32
  %1033 = bitcast float* %1032 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1033, i32 0, i32 1, i32 1)
  %1034 = getelementptr inbounds float, float* %1016, i64 40
  %1035 = bitcast float* %1034 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1035, i32 0, i32 1, i32 1)
  %1036 = getelementptr inbounds float, float* %1019, i64 40
  %1037 = bitcast float* %1036 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1037, i32 0, i32 1, i32 1)
  %1038 = bitcast float* %1016 to <8 x float>*
  %1039 = load <8 x float>, <8 x float>* %1038, align 1, !tbaa !12
  %1040 = add nuw nsw i64 %1015, 8
  %1041 = getelementptr inbounds float, float* %5, i64 %1040
  %1042 = bitcast float* %1041 to <8 x float>*
  %1043 = load <8 x float>, <8 x float>* %1042, align 1, !tbaa !12
  %1044 = add nuw nsw i64 %1015, 16
  %1045 = getelementptr inbounds float, float* %5, i64 %1044
  %1046 = bitcast float* %1045 to <8 x float>*
  %1047 = load <8 x float>, <8 x float>* %1046, align 1, !tbaa !12
  %1048 = add nuw nsw i64 %1015, 24
  %1049 = getelementptr inbounds float, float* %5, i64 %1048
  %1050 = bitcast float* %1049 to <8 x float>*
  %1051 = load <8 x float>, <8 x float>* %1050, align 1, !tbaa !12
  %1052 = add nuw nsw i64 %1015, 32
  %1053 = getelementptr inbounds float, float* %5, i64 %1052
  %1054 = bitcast float* %1053 to <8 x float>*
  %1055 = load <8 x float>, <8 x float>* %1054, align 1, !tbaa !12
  %1056 = add nsw i64 %1015, %940
  %1057 = getelementptr inbounds float, float* %3, i64 %1056
  %1058 = bitcast float* %1057 to <8 x float>*
  %1059 = load <8 x float>, <8 x float>* %1058, align 1, !tbaa !12
  %1060 = add nsw i64 %1056, 8
  %1061 = getelementptr inbounds float, float* %3, i64 %1060
  %1062 = bitcast float* %1061 to <8 x float>*
  %1063 = load <8 x float>, <8 x float>* %1062, align 1, !tbaa !12
  %1064 = add nsw i64 %1056, 16
  %1065 = getelementptr inbounds float, float* %3, i64 %1064
  %1066 = bitcast float* %1065 to <8 x float>*
  %1067 = load <8 x float>, <8 x float>* %1066, align 1, !tbaa !12
  %1068 = add nsw i64 %1056, 24
  %1069 = getelementptr inbounds float, float* %3, i64 %1068
  %1070 = bitcast float* %1069 to <8 x float>*
  %1071 = load <8 x float>, <8 x float>* %1070, align 1, !tbaa !12
  %1072 = add nsw i64 %1056, 32
  %1073 = getelementptr inbounds float, float* %3, i64 %1072
  %1074 = bitcast float* %1073 to <8 x float>*
  %1075 = load <8 x float>, <8 x float>* %1074, align 1, !tbaa !12
  %1076 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1059, <8 x float> %105, <8 x float> %1039) #10
  %1077 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1063, <8 x float> %105, <8 x float> %1043) #10
  %1078 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1067, <8 x float> %105, <8 x float> %1047) #10
  %1079 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1071, <8 x float> %105, <8 x float> %1051) #10
  %1080 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1075, <8 x float> %105, <8 x float> %1055) #10
  store <8 x float> %1076, <8 x float>* %1038, align 1, !tbaa !12
  store <8 x float> %1077, <8 x float>* %1042, align 1, !tbaa !12
  store <8 x float> %1078, <8 x float>* %1046, align 1, !tbaa !12
  store <8 x float> %1079, <8 x float>* %1050, align 1, !tbaa !12
  store <8 x float> %1080, <8 x float>* %1054, align 1, !tbaa !12
  %1081 = add nuw nsw i64 %1015, 40
  %1082 = icmp slt i64 %1081, %25
  br i1 %1082, label %1014, label %1010

1083:                                             ; preds = %1086, %637, %40, %114, %194, %268, %342, %416, %490, %564, %717
  %1084 = add nuw nsw i64 %41, 14
  %1085 = icmp slt i64 %1084, %27
  br i1 %1085, label %40, label %28

1086:                                             ; preds = %1010, %1086
  %1087 = phi i64 [ 0, %1010 ], [ %1153, %1086 ]
  %1088 = getelementptr inbounds float, float* %5, i64 %1087
  %1089 = getelementptr inbounds float, float* %1088, i64 8
  %1090 = bitcast float* %1089 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1090, i32 0, i32 1, i32 1)
  %1091 = getelementptr inbounds float, float* %3, i64 %1087
  %1092 = getelementptr inbounds float, float* %1091, i64 8
  %1093 = bitcast float* %1092 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1093, i32 0, i32 1, i32 1)
  %1094 = getelementptr inbounds float, float* %1088, i64 16
  %1095 = bitcast float* %1094 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1095, i32 0, i32 1, i32 1)
  %1096 = getelementptr inbounds float, float* %1091, i64 16
  %1097 = bitcast float* %1096 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1097, i32 0, i32 1, i32 1)
  %1098 = getelementptr inbounds float, float* %1088, i64 24
  %1099 = bitcast float* %1098 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1099, i32 0, i32 1, i32 1)
  %1100 = getelementptr inbounds float, float* %1091, i64 24
  %1101 = bitcast float* %1100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1101, i32 0, i32 1, i32 1)
  %1102 = getelementptr inbounds float, float* %1088, i64 32
  %1103 = bitcast float* %1102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1103, i32 0, i32 1, i32 1)
  %1104 = getelementptr inbounds float, float* %1091, i64 32
  %1105 = bitcast float* %1104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1105, i32 0, i32 1, i32 1)
  %1106 = getelementptr inbounds float, float* %1088, i64 40
  %1107 = bitcast float* %1106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1107, i32 0, i32 1, i32 1)
  %1108 = getelementptr inbounds float, float* %1091, i64 40
  %1109 = bitcast float* %1108 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1109, i32 0, i32 1, i32 1)
  %1110 = bitcast float* %1088 to <8 x float>*
  %1111 = load <8 x float>, <8 x float>* %1110, align 1, !tbaa !12
  %1112 = add nuw nsw i64 %1087, 8
  %1113 = getelementptr inbounds float, float* %5, i64 %1112
  %1114 = bitcast float* %1113 to <8 x float>*
  %1115 = load <8 x float>, <8 x float>* %1114, align 1, !tbaa !12
  %1116 = add nuw nsw i64 %1087, 16
  %1117 = getelementptr inbounds float, float* %5, i64 %1116
  %1118 = bitcast float* %1117 to <8 x float>*
  %1119 = load <8 x float>, <8 x float>* %1118, align 1, !tbaa !12
  %1120 = add nuw nsw i64 %1087, 24
  %1121 = getelementptr inbounds float, float* %5, i64 %1120
  %1122 = bitcast float* %1121 to <8 x float>*
  %1123 = load <8 x float>, <8 x float>* %1122, align 1, !tbaa !12
  %1124 = add nuw nsw i64 %1087, 32
  %1125 = getelementptr inbounds float, float* %5, i64 %1124
  %1126 = bitcast float* %1125 to <8 x float>*
  %1127 = load <8 x float>, <8 x float>* %1126, align 1, !tbaa !12
  %1128 = add nsw i64 %1087, %1013
  %1129 = getelementptr inbounds float, float* %3, i64 %1128
  %1130 = bitcast float* %1129 to <8 x float>*
  %1131 = load <8 x float>, <8 x float>* %1130, align 1, !tbaa !12
  %1132 = add nsw i64 %1128, 8
  %1133 = getelementptr inbounds float, float* %3, i64 %1132
  %1134 = bitcast float* %1133 to <8 x float>*
  %1135 = load <8 x float>, <8 x float>* %1134, align 1, !tbaa !12
  %1136 = add nsw i64 %1128, 16
  %1137 = getelementptr inbounds float, float* %3, i64 %1136
  %1138 = bitcast float* %1137 to <8 x float>*
  %1139 = load <8 x float>, <8 x float>* %1138, align 1, !tbaa !12
  %1140 = add nsw i64 %1128, 24
  %1141 = getelementptr inbounds float, float* %3, i64 %1140
  %1142 = bitcast float* %1141 to <8 x float>*
  %1143 = load <8 x float>, <8 x float>* %1142, align 1, !tbaa !12
  %1144 = add nsw i64 %1128, 32
  %1145 = getelementptr inbounds float, float* %3, i64 %1144
  %1146 = bitcast float* %1145 to <8 x float>*
  %1147 = load <8 x float>, <8 x float>* %1146, align 1, !tbaa !12
  %1148 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1131, <8 x float> %110, <8 x float> %1111) #10
  %1149 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1135, <8 x float> %110, <8 x float> %1115) #10
  %1150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1139, <8 x float> %110, <8 x float> %1119) #10
  %1151 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1143, <8 x float> %110, <8 x float> %1123) #10
  %1152 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1147, <8 x float> %110, <8 x float> %1127) #10
  store <8 x float> %1148, <8 x float>* %1110, align 1, !tbaa !12
  store <8 x float> %1149, <8 x float>* %1114, align 1, !tbaa !12
  store <8 x float> %1150, <8 x float>* %1118, align 1, !tbaa !12
  store <8 x float> %1151, <8 x float>* %1122, align 1, !tbaa !12
  store <8 x float> %1152, <8 x float>* %1126, align 1, !tbaa !12
  %1153 = add nuw nsw i64 %1087, 40
  %1154 = icmp slt i64 %1153, %26
  br i1 %1154, label %1086, label %1083
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 154
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui5_uk14.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
