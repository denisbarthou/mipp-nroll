; ModuleID = 'codes/matvec_ui14_uk3.cpp'
source_filename = "codes/matvec_ui14_uk3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui14_uk3.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 112
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 24
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %441, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %441
  %21 = phi i64 [ %442, %441 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = add nuw nsw i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %441

38:                                               ; preds = %20
  %39 = zext i32 %36 to i64
  %40 = trunc i64 %21 to i32
  %41 = mul nsw i32 %36, %40
  br label %48

42:                                               ; preds = %48
  br i1 %37, label %43, label %441

43:                                               ; preds = %42
  %44 = trunc i64 %26 to i32
  %45 = mul nsw i32 %36, %44
  %46 = sext i32 %45 to i64
  %47 = zext i32 %36 to i64
  br label %255

48:                                               ; preds = %38, %48
  %49 = phi i64 [ 0, %38 ], [ %247, %48 ]
  %50 = getelementptr inbounds float, float* %5, i64 %49
  %51 = getelementptr inbounds float, float* %50, i64 8
  %52 = bitcast float* %51 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %52, i32 0, i32 1, i32 1)
  %53 = getelementptr inbounds float, float* %3, i64 %49
  %54 = getelementptr inbounds float, float* %53, i64 8
  %55 = bitcast float* %54 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %55, i32 0, i32 1, i32 1)
  %56 = getelementptr inbounds float, float* %50, i64 16
  %57 = bitcast float* %56 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %57, i32 0, i32 1, i32 1)
  %58 = getelementptr inbounds float, float* %53, i64 16
  %59 = bitcast float* %58 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %59, i32 0, i32 1, i32 1)
  %60 = getelementptr inbounds float, float* %50, i64 24
  %61 = bitcast float* %60 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %61, i32 0, i32 1, i32 1)
  %62 = getelementptr inbounds float, float* %53, i64 24
  %63 = bitcast float* %62 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %63, i32 0, i32 1, i32 1)
  %64 = getelementptr inbounds float, float* %50, i64 32
  %65 = bitcast float* %64 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %65, i32 0, i32 1, i32 1)
  %66 = getelementptr inbounds float, float* %53, i64 32
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %50, i64 40
  %69 = bitcast float* %68 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %69, i32 0, i32 1, i32 1)
  %70 = getelementptr inbounds float, float* %53, i64 40
  %71 = bitcast float* %70 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %71, i32 0, i32 1, i32 1)
  %72 = getelementptr inbounds float, float* %50, i64 48
  %73 = bitcast float* %72 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %73, i32 0, i32 1, i32 1)
  %74 = getelementptr inbounds float, float* %53, i64 48
  %75 = bitcast float* %74 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %75, i32 0, i32 1, i32 1)
  %76 = getelementptr inbounds float, float* %50, i64 56
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %77, i32 0, i32 1, i32 1)
  %78 = getelementptr inbounds float, float* %53, i64 56
  %79 = bitcast float* %78 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %79, i32 0, i32 1, i32 1)
  %80 = getelementptr inbounds float, float* %50, i64 64
  %81 = bitcast float* %80 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %81, i32 0, i32 1, i32 1)
  %82 = getelementptr inbounds float, float* %53, i64 64
  %83 = bitcast float* %82 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %83, i32 0, i32 1, i32 1)
  %84 = getelementptr inbounds float, float* %50, i64 72
  %85 = bitcast float* %84 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %85, i32 0, i32 1, i32 1)
  %86 = getelementptr inbounds float, float* %53, i64 72
  %87 = bitcast float* %86 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %87, i32 0, i32 1, i32 1)
  %88 = getelementptr inbounds float, float* %50, i64 80
  %89 = bitcast float* %88 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %89, i32 0, i32 1, i32 1)
  %90 = getelementptr inbounds float, float* %53, i64 80
  %91 = bitcast float* %90 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %91, i32 0, i32 1, i32 1)
  %92 = getelementptr inbounds float, float* %50, i64 88
  %93 = bitcast float* %92 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %93, i32 0, i32 1, i32 1)
  %94 = getelementptr inbounds float, float* %53, i64 88
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %95, i32 0, i32 1, i32 1)
  %96 = getelementptr inbounds float, float* %50, i64 96
  %97 = bitcast float* %96 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %97, i32 0, i32 1, i32 1)
  %98 = getelementptr inbounds float, float* %53, i64 96
  %99 = bitcast float* %98 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %99, i32 0, i32 1, i32 1)
  %100 = getelementptr inbounds float, float* %50, i64 104
  %101 = bitcast float* %100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %101, i32 0, i32 1, i32 1)
  %102 = getelementptr inbounds float, float* %53, i64 104
  %103 = bitcast float* %102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %103, i32 0, i32 1, i32 1)
  %104 = getelementptr inbounds float, float* %50, i64 112
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %105, i32 0, i32 1, i32 1)
  %106 = getelementptr inbounds float, float* %53, i64 112
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %107, i32 0, i32 1, i32 1)
  %108 = bitcast float* %50 to <8 x float>*
  %109 = load <8 x float>, <8 x float>* %108, align 1, !tbaa !12
  %110 = or i64 %49, 8
  %111 = getelementptr inbounds float, float* %5, i64 %110
  %112 = bitcast float* %111 to <8 x float>*
  %113 = load <8 x float>, <8 x float>* %112, align 1, !tbaa !12
  %114 = add nuw nsw i64 %49, 16
  %115 = getelementptr inbounds float, float* %5, i64 %114
  %116 = bitcast float* %115 to <8 x float>*
  %117 = load <8 x float>, <8 x float>* %116, align 1, !tbaa !12
  %118 = add nuw nsw i64 %49, 24
  %119 = getelementptr inbounds float, float* %5, i64 %118
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !tbaa !12
  %122 = add nuw nsw i64 %49, 32
  %123 = getelementptr inbounds float, float* %5, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 1, !tbaa !12
  %126 = add nuw nsw i64 %49, 40
  %127 = getelementptr inbounds float, float* %5, i64 %126
  %128 = bitcast float* %127 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !tbaa !12
  %130 = add nuw nsw i64 %49, 48
  %131 = getelementptr inbounds float, float* %5, i64 %130
  %132 = bitcast float* %131 to <8 x float>*
  %133 = load <8 x float>, <8 x float>* %132, align 1, !tbaa !12
  %134 = add nuw nsw i64 %49, 56
  %135 = getelementptr inbounds float, float* %5, i64 %134
  %136 = bitcast float* %135 to <8 x float>*
  %137 = load <8 x float>, <8 x float>* %136, align 1, !tbaa !12
  %138 = add nuw nsw i64 %49, 64
  %139 = getelementptr inbounds float, float* %5, i64 %138
  %140 = bitcast float* %139 to <8 x float>*
  %141 = load <8 x float>, <8 x float>* %140, align 1, !tbaa !12
  %142 = add nuw nsw i64 %49, 72
  %143 = getelementptr inbounds float, float* %5, i64 %142
  %144 = bitcast float* %143 to <8 x float>*
  %145 = load <8 x float>, <8 x float>* %144, align 1, !tbaa !12
  %146 = add nuw nsw i64 %49, 80
  %147 = getelementptr inbounds float, float* %5, i64 %146
  %148 = bitcast float* %147 to <8 x float>*
  %149 = load <8 x float>, <8 x float>* %148, align 1, !tbaa !12
  %150 = add nuw nsw i64 %49, 88
  %151 = getelementptr inbounds float, float* %5, i64 %150
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !tbaa !12
  %154 = add nuw nsw i64 %49, 96
  %155 = getelementptr inbounds float, float* %5, i64 %154
  %156 = bitcast float* %155 to <8 x float>*
  %157 = load <8 x float>, <8 x float>* %156, align 1, !tbaa !12
  %158 = add nuw nsw i64 %49, 104
  %159 = getelementptr inbounds float, float* %5, i64 %158
  %160 = bitcast float* %159 to <8 x float>*
  %161 = load <8 x float>, <8 x float>* %160, align 1, !tbaa !12
  %162 = trunc i64 %49 to i32
  %163 = add nsw i32 %41, %162
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds float, float* %3, i64 %164
  %166 = bitcast float* %165 to <8 x float>*
  %167 = load <8 x float>, <8 x float>* %166, align 1, !tbaa !12
  %168 = add nsw i32 %163, 8
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float, float* %3, i64 %169
  %171 = bitcast float* %170 to <8 x float>*
  %172 = load <8 x float>, <8 x float>* %171, align 1, !tbaa !12
  %173 = add nsw i32 %163, 16
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds float, float* %3, i64 %174
  %176 = bitcast float* %175 to <8 x float>*
  %177 = load <8 x float>, <8 x float>* %176, align 1, !tbaa !12
  %178 = add nsw i32 %163, 24
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds float, float* %3, i64 %179
  %181 = bitcast float* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 1, !tbaa !12
  %183 = add nsw i32 %163, 32
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float, float* %3, i64 %184
  %186 = bitcast float* %185 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !tbaa !12
  %188 = add nsw i32 %163, 40
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %3, i64 %189
  %191 = bitcast float* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 1, !tbaa !12
  %193 = add nsw i32 %163, 48
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %3, i64 %194
  %196 = bitcast float* %195 to <8 x float>*
  %197 = load <8 x float>, <8 x float>* %196, align 1, !tbaa !12
  %198 = add nsw i32 %163, 56
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float, float* %3, i64 %199
  %201 = bitcast float* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 1, !tbaa !12
  %203 = add nsw i32 %163, 64
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %3, i64 %204
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 1, !tbaa !12
  %208 = add nsw i32 %163, 72
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float* %3, i64 %209
  %211 = bitcast float* %210 to <8 x float>*
  %212 = load <8 x float>, <8 x float>* %211, align 1, !tbaa !12
  %213 = add nsw i32 %163, 80
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %3, i64 %214
  %216 = bitcast float* %215 to <8 x float>*
  %217 = load <8 x float>, <8 x float>* %216, align 1, !tbaa !12
  %218 = add nsw i32 %163, 88
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds float, float* %3, i64 %219
  %221 = bitcast float* %220 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 1, !tbaa !12
  %223 = add nsw i32 %163, 96
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds float, float* %3, i64 %224
  %226 = bitcast float* %225 to <8 x float>*
  %227 = load <8 x float>, <8 x float>* %226, align 1, !tbaa !12
  %228 = add nsw i32 %163, 104
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds float, float* %3, i64 %229
  %231 = bitcast float* %230 to <8 x float>*
  %232 = load <8 x float>, <8 x float>* %231, align 1, !tbaa !12
  %233 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %167, <8 x float> %25, <8 x float> %109) #10
  %234 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %172, <8 x float> %25, <8 x float> %113) #10
  %235 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %177, <8 x float> %25, <8 x float> %117) #10
  %236 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %182, <8 x float> %25, <8 x float> %121) #10
  %237 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %187, <8 x float> %25, <8 x float> %125) #10
  %238 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %192, <8 x float> %25, <8 x float> %129) #10
  %239 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %197, <8 x float> %25, <8 x float> %133) #10
  %240 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %25, <8 x float> %137) #10
  %241 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %25, <8 x float> %141) #10
  %242 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %212, <8 x float> %25, <8 x float> %145) #10
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %217, <8 x float> %25, <8 x float> %149) #10
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %25, <8 x float> %153) #10
  %245 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %227, <8 x float> %25, <8 x float> %157) #10
  %246 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %232, <8 x float> %25, <8 x float> %161) #10
  store <8 x float> %233, <8 x float>* %108, align 1, !tbaa !12
  store <8 x float> %234, <8 x float>* %112, align 1, !tbaa !12
  store <8 x float> %235, <8 x float>* %116, align 1, !tbaa !12
  store <8 x float> %236, <8 x float>* %120, align 1, !tbaa !12
  store <8 x float> %237, <8 x float>* %124, align 1, !tbaa !12
  store <8 x float> %238, <8 x float>* %128, align 1, !tbaa !12
  store <8 x float> %239, <8 x float>* %132, align 1, !tbaa !12
  store <8 x float> %240, <8 x float>* %136, align 1, !tbaa !12
  store <8 x float> %241, <8 x float>* %140, align 1, !tbaa !12
  store <8 x float> %242, <8 x float>* %144, align 1, !tbaa !12
  store <8 x float> %243, <8 x float>* %148, align 1, !tbaa !12
  store <8 x float> %244, <8 x float>* %152, align 1, !tbaa !12
  store <8 x float> %245, <8 x float>* %156, align 1, !tbaa !12
  store <8 x float> %246, <8 x float>* %160, align 1, !tbaa !12
  %247 = add nuw nsw i64 %49, 112
  %248 = icmp ult i64 %247, %39
  br i1 %248, label %48, label %42

249:                                              ; preds = %255
  br i1 %37, label %250, label %441

250:                                              ; preds = %249
  %251 = trunc i64 %31 to i32
  %252 = mul nsw i32 %36, %251
  %253 = sext i32 %252 to i64
  %254 = zext i32 %36 to i64
  br label %446

255:                                              ; preds = %43, %255
  %256 = phi i64 [ 0, %43 ], [ %439, %255 ]
  %257 = getelementptr inbounds float, float* %5, i64 %256
  %258 = getelementptr inbounds float, float* %257, i64 8
  %259 = bitcast float* %258 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %259, i32 0, i32 1, i32 1)
  %260 = getelementptr inbounds float, float* %3, i64 %256
  %261 = getelementptr inbounds float, float* %260, i64 8
  %262 = bitcast float* %261 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %262, i32 0, i32 1, i32 1)
  %263 = getelementptr inbounds float, float* %257, i64 16
  %264 = bitcast float* %263 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %264, i32 0, i32 1, i32 1)
  %265 = getelementptr inbounds float, float* %260, i64 16
  %266 = bitcast float* %265 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %266, i32 0, i32 1, i32 1)
  %267 = getelementptr inbounds float, float* %257, i64 24
  %268 = bitcast float* %267 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %268, i32 0, i32 1, i32 1)
  %269 = getelementptr inbounds float, float* %260, i64 24
  %270 = bitcast float* %269 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %270, i32 0, i32 1, i32 1)
  %271 = getelementptr inbounds float, float* %257, i64 32
  %272 = bitcast float* %271 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %272, i32 0, i32 1, i32 1)
  %273 = getelementptr inbounds float, float* %260, i64 32
  %274 = bitcast float* %273 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %274, i32 0, i32 1, i32 1)
  %275 = getelementptr inbounds float, float* %257, i64 40
  %276 = bitcast float* %275 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %276, i32 0, i32 1, i32 1)
  %277 = getelementptr inbounds float, float* %260, i64 40
  %278 = bitcast float* %277 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %278, i32 0, i32 1, i32 1)
  %279 = getelementptr inbounds float, float* %257, i64 48
  %280 = bitcast float* %279 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %280, i32 0, i32 1, i32 1)
  %281 = getelementptr inbounds float, float* %260, i64 48
  %282 = bitcast float* %281 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %282, i32 0, i32 1, i32 1)
  %283 = getelementptr inbounds float, float* %257, i64 56
  %284 = bitcast float* %283 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %284, i32 0, i32 1, i32 1)
  %285 = getelementptr inbounds float, float* %260, i64 56
  %286 = bitcast float* %285 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %286, i32 0, i32 1, i32 1)
  %287 = getelementptr inbounds float, float* %257, i64 64
  %288 = bitcast float* %287 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %288, i32 0, i32 1, i32 1)
  %289 = getelementptr inbounds float, float* %260, i64 64
  %290 = bitcast float* %289 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %290, i32 0, i32 1, i32 1)
  %291 = getelementptr inbounds float, float* %257, i64 72
  %292 = bitcast float* %291 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %292, i32 0, i32 1, i32 1)
  %293 = getelementptr inbounds float, float* %260, i64 72
  %294 = bitcast float* %293 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %294, i32 0, i32 1, i32 1)
  %295 = getelementptr inbounds float, float* %257, i64 80
  %296 = bitcast float* %295 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %296, i32 0, i32 1, i32 1)
  %297 = getelementptr inbounds float, float* %260, i64 80
  %298 = bitcast float* %297 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %298, i32 0, i32 1, i32 1)
  %299 = getelementptr inbounds float, float* %257, i64 88
  %300 = bitcast float* %299 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %300, i32 0, i32 1, i32 1)
  %301 = getelementptr inbounds float, float* %260, i64 88
  %302 = bitcast float* %301 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %302, i32 0, i32 1, i32 1)
  %303 = getelementptr inbounds float, float* %257, i64 96
  %304 = bitcast float* %303 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %304, i32 0, i32 1, i32 1)
  %305 = getelementptr inbounds float, float* %260, i64 96
  %306 = bitcast float* %305 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %306, i32 0, i32 1, i32 1)
  %307 = getelementptr inbounds float, float* %257, i64 104
  %308 = bitcast float* %307 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %308, i32 0, i32 1, i32 1)
  %309 = getelementptr inbounds float, float* %260, i64 104
  %310 = bitcast float* %309 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %310, i32 0, i32 1, i32 1)
  %311 = getelementptr inbounds float, float* %257, i64 112
  %312 = bitcast float* %311 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %312, i32 0, i32 1, i32 1)
  %313 = getelementptr inbounds float, float* %260, i64 112
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %314, i32 0, i32 1, i32 1)
  %315 = bitcast float* %257 to <8 x float>*
  %316 = load <8 x float>, <8 x float>* %315, align 1, !tbaa !12
  %317 = or i64 %256, 8
  %318 = getelementptr inbounds float, float* %5, i64 %317
  %319 = bitcast float* %318 to <8 x float>*
  %320 = load <8 x float>, <8 x float>* %319, align 1, !tbaa !12
  %321 = add nuw nsw i64 %256, 16
  %322 = getelementptr inbounds float, float* %5, i64 %321
  %323 = bitcast float* %322 to <8 x float>*
  %324 = load <8 x float>, <8 x float>* %323, align 1, !tbaa !12
  %325 = add nuw nsw i64 %256, 24
  %326 = getelementptr inbounds float, float* %5, i64 %325
  %327 = bitcast float* %326 to <8 x float>*
  %328 = load <8 x float>, <8 x float>* %327, align 1, !tbaa !12
  %329 = add nuw nsw i64 %256, 32
  %330 = getelementptr inbounds float, float* %5, i64 %329
  %331 = bitcast float* %330 to <8 x float>*
  %332 = load <8 x float>, <8 x float>* %331, align 1, !tbaa !12
  %333 = add nuw nsw i64 %256, 40
  %334 = getelementptr inbounds float, float* %5, i64 %333
  %335 = bitcast float* %334 to <8 x float>*
  %336 = load <8 x float>, <8 x float>* %335, align 1, !tbaa !12
  %337 = add nuw nsw i64 %256, 48
  %338 = getelementptr inbounds float, float* %5, i64 %337
  %339 = bitcast float* %338 to <8 x float>*
  %340 = load <8 x float>, <8 x float>* %339, align 1, !tbaa !12
  %341 = add nuw nsw i64 %256, 56
  %342 = getelementptr inbounds float, float* %5, i64 %341
  %343 = bitcast float* %342 to <8 x float>*
  %344 = load <8 x float>, <8 x float>* %343, align 1, !tbaa !12
  %345 = add nuw nsw i64 %256, 64
  %346 = getelementptr inbounds float, float* %5, i64 %345
  %347 = bitcast float* %346 to <8 x float>*
  %348 = load <8 x float>, <8 x float>* %347, align 1, !tbaa !12
  %349 = add nuw nsw i64 %256, 72
  %350 = getelementptr inbounds float, float* %5, i64 %349
  %351 = bitcast float* %350 to <8 x float>*
  %352 = load <8 x float>, <8 x float>* %351, align 1, !tbaa !12
  %353 = add nuw nsw i64 %256, 80
  %354 = getelementptr inbounds float, float* %5, i64 %353
  %355 = bitcast float* %354 to <8 x float>*
  %356 = load <8 x float>, <8 x float>* %355, align 1, !tbaa !12
  %357 = add nuw nsw i64 %256, 88
  %358 = getelementptr inbounds float, float* %5, i64 %357
  %359 = bitcast float* %358 to <8 x float>*
  %360 = load <8 x float>, <8 x float>* %359, align 1, !tbaa !12
  %361 = add nuw nsw i64 %256, 96
  %362 = getelementptr inbounds float, float* %5, i64 %361
  %363 = bitcast float* %362 to <8 x float>*
  %364 = load <8 x float>, <8 x float>* %363, align 1, !tbaa !12
  %365 = add nuw nsw i64 %256, 104
  %366 = getelementptr inbounds float, float* %5, i64 %365
  %367 = bitcast float* %366 to <8 x float>*
  %368 = load <8 x float>, <8 x float>* %367, align 1, !tbaa !12
  %369 = add nsw i64 %256, %46
  %370 = getelementptr inbounds float, float* %3, i64 %369
  %371 = bitcast float* %370 to <8 x float>*
  %372 = load <8 x float>, <8 x float>* %371, align 1, !tbaa !12
  %373 = add nsw i64 %369, 8
  %374 = getelementptr inbounds float, float* %3, i64 %373
  %375 = bitcast float* %374 to <8 x float>*
  %376 = load <8 x float>, <8 x float>* %375, align 1, !tbaa !12
  %377 = add nsw i64 %369, 16
  %378 = getelementptr inbounds float, float* %3, i64 %377
  %379 = bitcast float* %378 to <8 x float>*
  %380 = load <8 x float>, <8 x float>* %379, align 1, !tbaa !12
  %381 = add nsw i64 %369, 24
  %382 = getelementptr inbounds float, float* %3, i64 %381
  %383 = bitcast float* %382 to <8 x float>*
  %384 = load <8 x float>, <8 x float>* %383, align 1, !tbaa !12
  %385 = add nsw i64 %369, 32
  %386 = getelementptr inbounds float, float* %3, i64 %385
  %387 = bitcast float* %386 to <8 x float>*
  %388 = load <8 x float>, <8 x float>* %387, align 1, !tbaa !12
  %389 = add nsw i64 %369, 40
  %390 = getelementptr inbounds float, float* %3, i64 %389
  %391 = bitcast float* %390 to <8 x float>*
  %392 = load <8 x float>, <8 x float>* %391, align 1, !tbaa !12
  %393 = add nsw i64 %369, 48
  %394 = getelementptr inbounds float, float* %3, i64 %393
  %395 = bitcast float* %394 to <8 x float>*
  %396 = load <8 x float>, <8 x float>* %395, align 1, !tbaa !12
  %397 = add nsw i64 %369, 56
  %398 = getelementptr inbounds float, float* %3, i64 %397
  %399 = bitcast float* %398 to <8 x float>*
  %400 = load <8 x float>, <8 x float>* %399, align 1, !tbaa !12
  %401 = add nsw i64 %369, 64
  %402 = getelementptr inbounds float, float* %3, i64 %401
  %403 = bitcast float* %402 to <8 x float>*
  %404 = load <8 x float>, <8 x float>* %403, align 1, !tbaa !12
  %405 = add nsw i64 %369, 72
  %406 = getelementptr inbounds float, float* %3, i64 %405
  %407 = bitcast float* %406 to <8 x float>*
  %408 = load <8 x float>, <8 x float>* %407, align 1, !tbaa !12
  %409 = add nsw i64 %369, 80
  %410 = getelementptr inbounds float, float* %3, i64 %409
  %411 = bitcast float* %410 to <8 x float>*
  %412 = load <8 x float>, <8 x float>* %411, align 1, !tbaa !12
  %413 = add nsw i64 %369, 88
  %414 = getelementptr inbounds float, float* %3, i64 %413
  %415 = bitcast float* %414 to <8 x float>*
  %416 = load <8 x float>, <8 x float>* %415, align 1, !tbaa !12
  %417 = add nsw i64 %369, 96
  %418 = getelementptr inbounds float, float* %3, i64 %417
  %419 = bitcast float* %418 to <8 x float>*
  %420 = load <8 x float>, <8 x float>* %419, align 1, !tbaa !12
  %421 = add nsw i64 %369, 104
  %422 = getelementptr inbounds float, float* %3, i64 %421
  %423 = bitcast float* %422 to <8 x float>*
  %424 = load <8 x float>, <8 x float>* %423, align 1, !tbaa !12
  %425 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %372, <8 x float> %30, <8 x float> %316) #10
  %426 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %376, <8 x float> %30, <8 x float> %320) #10
  %427 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %380, <8 x float> %30, <8 x float> %324) #10
  %428 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %384, <8 x float> %30, <8 x float> %328) #10
  %429 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %30, <8 x float> %332) #10
  %430 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %392, <8 x float> %30, <8 x float> %336) #10
  %431 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %396, <8 x float> %30, <8 x float> %340) #10
  %432 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %400, <8 x float> %30, <8 x float> %344) #10
  %433 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %404, <8 x float> %30, <8 x float> %348) #10
  %434 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %408, <8 x float> %30, <8 x float> %352) #10
  %435 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> %30, <8 x float> %356) #10
  %436 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %416, <8 x float> %30, <8 x float> %360) #10
  %437 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %420, <8 x float> %30, <8 x float> %364) #10
  %438 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %424, <8 x float> %30, <8 x float> %368) #10
  store <8 x float> %425, <8 x float>* %315, align 1, !tbaa !12
  store <8 x float> %426, <8 x float>* %319, align 1, !tbaa !12
  store <8 x float> %427, <8 x float>* %323, align 1, !tbaa !12
  store <8 x float> %428, <8 x float>* %327, align 1, !tbaa !12
  store <8 x float> %429, <8 x float>* %331, align 1, !tbaa !12
  store <8 x float> %430, <8 x float>* %335, align 1, !tbaa !12
  store <8 x float> %431, <8 x float>* %339, align 1, !tbaa !12
  store <8 x float> %432, <8 x float>* %343, align 1, !tbaa !12
  store <8 x float> %433, <8 x float>* %347, align 1, !tbaa !12
  store <8 x float> %434, <8 x float>* %351, align 1, !tbaa !12
  store <8 x float> %435, <8 x float>* %355, align 1, !tbaa !12
  store <8 x float> %436, <8 x float>* %359, align 1, !tbaa !12
  store <8 x float> %437, <8 x float>* %363, align 1, !tbaa !12
  store <8 x float> %438, <8 x float>* %367, align 1, !tbaa !12
  %439 = add nuw nsw i64 %256, 112
  %440 = icmp ult i64 %439, %47
  br i1 %440, label %255, label %249

441:                                              ; preds = %446, %20, %42, %249
  %442 = add nuw nsw i64 %21, 3
  %443 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %444 = sext i32 %443 to i64
  %445 = icmp slt i64 %442, %444
  br i1 %445, label %20, label %8

446:                                              ; preds = %250, %446
  %447 = phi i64 [ 0, %250 ], [ %630, %446 ]
  %448 = getelementptr inbounds float, float* %5, i64 %447
  %449 = getelementptr inbounds float, float* %448, i64 8
  %450 = bitcast float* %449 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %450, i32 0, i32 1, i32 1)
  %451 = getelementptr inbounds float, float* %3, i64 %447
  %452 = getelementptr inbounds float, float* %451, i64 8
  %453 = bitcast float* %452 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %453, i32 0, i32 1, i32 1)
  %454 = getelementptr inbounds float, float* %448, i64 16
  %455 = bitcast float* %454 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %455, i32 0, i32 1, i32 1)
  %456 = getelementptr inbounds float, float* %451, i64 16
  %457 = bitcast float* %456 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %457, i32 0, i32 1, i32 1)
  %458 = getelementptr inbounds float, float* %448, i64 24
  %459 = bitcast float* %458 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %459, i32 0, i32 1, i32 1)
  %460 = getelementptr inbounds float, float* %451, i64 24
  %461 = bitcast float* %460 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %461, i32 0, i32 1, i32 1)
  %462 = getelementptr inbounds float, float* %448, i64 32
  %463 = bitcast float* %462 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %463, i32 0, i32 1, i32 1)
  %464 = getelementptr inbounds float, float* %451, i64 32
  %465 = bitcast float* %464 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %465, i32 0, i32 1, i32 1)
  %466 = getelementptr inbounds float, float* %448, i64 40
  %467 = bitcast float* %466 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %467, i32 0, i32 1, i32 1)
  %468 = getelementptr inbounds float, float* %451, i64 40
  %469 = bitcast float* %468 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %469, i32 0, i32 1, i32 1)
  %470 = getelementptr inbounds float, float* %448, i64 48
  %471 = bitcast float* %470 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %471, i32 0, i32 1, i32 1)
  %472 = getelementptr inbounds float, float* %451, i64 48
  %473 = bitcast float* %472 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %473, i32 0, i32 1, i32 1)
  %474 = getelementptr inbounds float, float* %448, i64 56
  %475 = bitcast float* %474 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %475, i32 0, i32 1, i32 1)
  %476 = getelementptr inbounds float, float* %451, i64 56
  %477 = bitcast float* %476 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %477, i32 0, i32 1, i32 1)
  %478 = getelementptr inbounds float, float* %448, i64 64
  %479 = bitcast float* %478 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %479, i32 0, i32 1, i32 1)
  %480 = getelementptr inbounds float, float* %451, i64 64
  %481 = bitcast float* %480 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %481, i32 0, i32 1, i32 1)
  %482 = getelementptr inbounds float, float* %448, i64 72
  %483 = bitcast float* %482 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %483, i32 0, i32 1, i32 1)
  %484 = getelementptr inbounds float, float* %451, i64 72
  %485 = bitcast float* %484 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %485, i32 0, i32 1, i32 1)
  %486 = getelementptr inbounds float, float* %448, i64 80
  %487 = bitcast float* %486 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %487, i32 0, i32 1, i32 1)
  %488 = getelementptr inbounds float, float* %451, i64 80
  %489 = bitcast float* %488 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %489, i32 0, i32 1, i32 1)
  %490 = getelementptr inbounds float, float* %448, i64 88
  %491 = bitcast float* %490 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %491, i32 0, i32 1, i32 1)
  %492 = getelementptr inbounds float, float* %451, i64 88
  %493 = bitcast float* %492 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %493, i32 0, i32 1, i32 1)
  %494 = getelementptr inbounds float, float* %448, i64 96
  %495 = bitcast float* %494 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %495, i32 0, i32 1, i32 1)
  %496 = getelementptr inbounds float, float* %451, i64 96
  %497 = bitcast float* %496 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %497, i32 0, i32 1, i32 1)
  %498 = getelementptr inbounds float, float* %448, i64 104
  %499 = bitcast float* %498 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %499, i32 0, i32 1, i32 1)
  %500 = getelementptr inbounds float, float* %451, i64 104
  %501 = bitcast float* %500 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %501, i32 0, i32 1, i32 1)
  %502 = getelementptr inbounds float, float* %448, i64 112
  %503 = bitcast float* %502 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %503, i32 0, i32 1, i32 1)
  %504 = getelementptr inbounds float, float* %451, i64 112
  %505 = bitcast float* %504 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %505, i32 0, i32 1, i32 1)
  %506 = bitcast float* %448 to <8 x float>*
  %507 = load <8 x float>, <8 x float>* %506, align 1, !tbaa !12
  %508 = or i64 %447, 8
  %509 = getelementptr inbounds float, float* %5, i64 %508
  %510 = bitcast float* %509 to <8 x float>*
  %511 = load <8 x float>, <8 x float>* %510, align 1, !tbaa !12
  %512 = add nuw nsw i64 %447, 16
  %513 = getelementptr inbounds float, float* %5, i64 %512
  %514 = bitcast float* %513 to <8 x float>*
  %515 = load <8 x float>, <8 x float>* %514, align 1, !tbaa !12
  %516 = add nuw nsw i64 %447, 24
  %517 = getelementptr inbounds float, float* %5, i64 %516
  %518 = bitcast float* %517 to <8 x float>*
  %519 = load <8 x float>, <8 x float>* %518, align 1, !tbaa !12
  %520 = add nuw nsw i64 %447, 32
  %521 = getelementptr inbounds float, float* %5, i64 %520
  %522 = bitcast float* %521 to <8 x float>*
  %523 = load <8 x float>, <8 x float>* %522, align 1, !tbaa !12
  %524 = add nuw nsw i64 %447, 40
  %525 = getelementptr inbounds float, float* %5, i64 %524
  %526 = bitcast float* %525 to <8 x float>*
  %527 = load <8 x float>, <8 x float>* %526, align 1, !tbaa !12
  %528 = add nuw nsw i64 %447, 48
  %529 = getelementptr inbounds float, float* %5, i64 %528
  %530 = bitcast float* %529 to <8 x float>*
  %531 = load <8 x float>, <8 x float>* %530, align 1, !tbaa !12
  %532 = add nuw nsw i64 %447, 56
  %533 = getelementptr inbounds float, float* %5, i64 %532
  %534 = bitcast float* %533 to <8 x float>*
  %535 = load <8 x float>, <8 x float>* %534, align 1, !tbaa !12
  %536 = add nuw nsw i64 %447, 64
  %537 = getelementptr inbounds float, float* %5, i64 %536
  %538 = bitcast float* %537 to <8 x float>*
  %539 = load <8 x float>, <8 x float>* %538, align 1, !tbaa !12
  %540 = add nuw nsw i64 %447, 72
  %541 = getelementptr inbounds float, float* %5, i64 %540
  %542 = bitcast float* %541 to <8 x float>*
  %543 = load <8 x float>, <8 x float>* %542, align 1, !tbaa !12
  %544 = add nuw nsw i64 %447, 80
  %545 = getelementptr inbounds float, float* %5, i64 %544
  %546 = bitcast float* %545 to <8 x float>*
  %547 = load <8 x float>, <8 x float>* %546, align 1, !tbaa !12
  %548 = add nuw nsw i64 %447, 88
  %549 = getelementptr inbounds float, float* %5, i64 %548
  %550 = bitcast float* %549 to <8 x float>*
  %551 = load <8 x float>, <8 x float>* %550, align 1, !tbaa !12
  %552 = add nuw nsw i64 %447, 96
  %553 = getelementptr inbounds float, float* %5, i64 %552
  %554 = bitcast float* %553 to <8 x float>*
  %555 = load <8 x float>, <8 x float>* %554, align 1, !tbaa !12
  %556 = add nuw nsw i64 %447, 104
  %557 = getelementptr inbounds float, float* %5, i64 %556
  %558 = bitcast float* %557 to <8 x float>*
  %559 = load <8 x float>, <8 x float>* %558, align 1, !tbaa !12
  %560 = add nsw i64 %447, %253
  %561 = getelementptr inbounds float, float* %3, i64 %560
  %562 = bitcast float* %561 to <8 x float>*
  %563 = load <8 x float>, <8 x float>* %562, align 1, !tbaa !12
  %564 = add nsw i64 %560, 8
  %565 = getelementptr inbounds float, float* %3, i64 %564
  %566 = bitcast float* %565 to <8 x float>*
  %567 = load <8 x float>, <8 x float>* %566, align 1, !tbaa !12
  %568 = add nsw i64 %560, 16
  %569 = getelementptr inbounds float, float* %3, i64 %568
  %570 = bitcast float* %569 to <8 x float>*
  %571 = load <8 x float>, <8 x float>* %570, align 1, !tbaa !12
  %572 = add nsw i64 %560, 24
  %573 = getelementptr inbounds float, float* %3, i64 %572
  %574 = bitcast float* %573 to <8 x float>*
  %575 = load <8 x float>, <8 x float>* %574, align 1, !tbaa !12
  %576 = add nsw i64 %560, 32
  %577 = getelementptr inbounds float, float* %3, i64 %576
  %578 = bitcast float* %577 to <8 x float>*
  %579 = load <8 x float>, <8 x float>* %578, align 1, !tbaa !12
  %580 = add nsw i64 %560, 40
  %581 = getelementptr inbounds float, float* %3, i64 %580
  %582 = bitcast float* %581 to <8 x float>*
  %583 = load <8 x float>, <8 x float>* %582, align 1, !tbaa !12
  %584 = add nsw i64 %560, 48
  %585 = getelementptr inbounds float, float* %3, i64 %584
  %586 = bitcast float* %585 to <8 x float>*
  %587 = load <8 x float>, <8 x float>* %586, align 1, !tbaa !12
  %588 = add nsw i64 %560, 56
  %589 = getelementptr inbounds float, float* %3, i64 %588
  %590 = bitcast float* %589 to <8 x float>*
  %591 = load <8 x float>, <8 x float>* %590, align 1, !tbaa !12
  %592 = add nsw i64 %560, 64
  %593 = getelementptr inbounds float, float* %3, i64 %592
  %594 = bitcast float* %593 to <8 x float>*
  %595 = load <8 x float>, <8 x float>* %594, align 1, !tbaa !12
  %596 = add nsw i64 %560, 72
  %597 = getelementptr inbounds float, float* %3, i64 %596
  %598 = bitcast float* %597 to <8 x float>*
  %599 = load <8 x float>, <8 x float>* %598, align 1, !tbaa !12
  %600 = add nsw i64 %560, 80
  %601 = getelementptr inbounds float, float* %3, i64 %600
  %602 = bitcast float* %601 to <8 x float>*
  %603 = load <8 x float>, <8 x float>* %602, align 1, !tbaa !12
  %604 = add nsw i64 %560, 88
  %605 = getelementptr inbounds float, float* %3, i64 %604
  %606 = bitcast float* %605 to <8 x float>*
  %607 = load <8 x float>, <8 x float>* %606, align 1, !tbaa !12
  %608 = add nsw i64 %560, 96
  %609 = getelementptr inbounds float, float* %3, i64 %608
  %610 = bitcast float* %609 to <8 x float>*
  %611 = load <8 x float>, <8 x float>* %610, align 1, !tbaa !12
  %612 = add nsw i64 %560, 104
  %613 = getelementptr inbounds float, float* %3, i64 %612
  %614 = bitcast float* %613 to <8 x float>*
  %615 = load <8 x float>, <8 x float>* %614, align 1, !tbaa !12
  %616 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %563, <8 x float> %35, <8 x float> %507) #10
  %617 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %567, <8 x float> %35, <8 x float> %511) #10
  %618 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %571, <8 x float> %35, <8 x float> %515) #10
  %619 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %575, <8 x float> %35, <8 x float> %519) #10
  %620 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %579, <8 x float> %35, <8 x float> %523) #10
  %621 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %583, <8 x float> %35, <8 x float> %527) #10
  %622 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %587, <8 x float> %35, <8 x float> %531) #10
  %623 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %591, <8 x float> %35, <8 x float> %535) #10
  %624 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %595, <8 x float> %35, <8 x float> %539) #10
  %625 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %599, <8 x float> %35, <8 x float> %543) #10
  %626 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %603, <8 x float> %35, <8 x float> %547) #10
  %627 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %607, <8 x float> %35, <8 x float> %551) #10
  %628 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %611, <8 x float> %35, <8 x float> %555) #10
  %629 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %615, <8 x float> %35, <8 x float> %559) #10
  store <8 x float> %616, <8 x float>* %506, align 1, !tbaa !12
  store <8 x float> %617, <8 x float>* %510, align 1, !tbaa !12
  store <8 x float> %618, <8 x float>* %514, align 1, !tbaa !12
  store <8 x float> %619, <8 x float>* %518, align 1, !tbaa !12
  store <8 x float> %620, <8 x float>* %522, align 1, !tbaa !12
  store <8 x float> %621, <8 x float>* %526, align 1, !tbaa !12
  store <8 x float> %622, <8 x float>* %530, align 1, !tbaa !12
  store <8 x float> %623, <8 x float>* %534, align 1, !tbaa !12
  store <8 x float> %624, <8 x float>* %538, align 1, !tbaa !12
  store <8 x float> %625, <8 x float>* %542, align 1, !tbaa !12
  store <8 x float> %626, <8 x float>* %546, align 1, !tbaa !12
  store <8 x float> %627, <8 x float>* %550, align 1, !tbaa !12
  store <8 x float> %628, <8 x float>* %554, align 1, !tbaa !12
  store <8 x float> %629, <8 x float>* %558, align 1, !tbaa !12
  %630 = add nuw nsw i64 %447, 112
  %631 = icmp ult i64 %630, %254
  br i1 %631, label %446, label %441
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 87
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui14_uk3.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
