; ModuleID = 'codes/matvec_ui10_uk8.cpp'
source_filename = "codes/matvec_ui10_uk8.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui10_uk8.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 80
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = sdiv i32 %4, 64
  %6 = shl nsw i32 %5, 6
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1070, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1070
  %21 = phi i64 [ %1071, %1070 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = or i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = or i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = or i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = or i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = or i64 %21, 7
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %1070

63:                                               ; preds = %20
  %64 = zext i32 %61 to i64
  %65 = trunc i64 %21 to i32
  %66 = mul nsw i32 %61, %65
  br label %73

67:                                               ; preds = %73
  br i1 %62, label %68, label %498

68:                                               ; preds = %67
  %69 = trunc i64 %26 to i32
  %70 = mul nsw i32 %61, %69
  %71 = sext i32 %70 to i64
  %72 = zext i32 %61 to i64
  br label %224

73:                                               ; preds = %63, %73
  %74 = phi i64 [ 0, %63 ], [ %216, %73 ]
  %75 = getelementptr inbounds float, float* %5, i64 %74
  %76 = getelementptr inbounds float, float* %75, i64 8
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %77, i32 0, i32 1, i32 1)
  %78 = getelementptr inbounds float, float* %3, i64 %74
  %79 = getelementptr inbounds float, float* %78, i64 8
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %75, i64 16
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %78, i64 16
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %75, i64 24
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %78, i64 24
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %75, i64 32
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %78, i64 32
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %75, i64 40
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %78, i64 40
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %75, i64 48
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %78, i64 48
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %75, i64 56
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %78, i64 56
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %75, i64 64
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %78, i64 64
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %75, i64 72
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %78, i64 72
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = getelementptr inbounds float, float* %75, i64 80
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %78, i64 80
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = bitcast float* %75 to <8 x float>*
  %118 = load <8 x float>, <8 x float>* %117, align 1, !tbaa !12
  %119 = or i64 %74, 8
  %120 = getelementptr inbounds float, float* %5, i64 %119
  %121 = bitcast float* %120 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 1, !tbaa !12
  %123 = add nuw nsw i64 %74, 16
  %124 = getelementptr inbounds float, float* %5, i64 %123
  %125 = bitcast float* %124 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 1, !tbaa !12
  %127 = add nuw nsw i64 %74, 24
  %128 = getelementptr inbounds float, float* %5, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !tbaa !12
  %131 = add nuw nsw i64 %74, 32
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = add nuw nsw i64 %74, 40
  %136 = getelementptr inbounds float, float* %5, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 1, !tbaa !12
  %139 = add nuw nsw i64 %74, 48
  %140 = getelementptr inbounds float, float* %5, i64 %139
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 1, !tbaa !12
  %143 = add nuw nsw i64 %74, 56
  %144 = getelementptr inbounds float, float* %5, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 1, !tbaa !12
  %147 = add nuw nsw i64 %74, 64
  %148 = getelementptr inbounds float, float* %5, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 1, !tbaa !12
  %151 = add nuw nsw i64 %74, 72
  %152 = getelementptr inbounds float, float* %5, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 1, !tbaa !12
  %155 = trunc i64 %74 to i32
  %156 = add nsw i32 %66, %155
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %3, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 1, !tbaa !12
  %161 = add nsw i32 %156, 8
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %3, i64 %162
  %164 = bitcast float* %163 to <8 x float>*
  %165 = load <8 x float>, <8 x float>* %164, align 1, !tbaa !12
  %166 = add nsw i32 %156, 16
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds float, float* %3, i64 %167
  %169 = bitcast float* %168 to <8 x float>*
  %170 = load <8 x float>, <8 x float>* %169, align 1, !tbaa !12
  %171 = add nsw i32 %156, 24
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds float, float* %3, i64 %172
  %174 = bitcast float* %173 to <8 x float>*
  %175 = load <8 x float>, <8 x float>* %174, align 1, !tbaa !12
  %176 = add nsw i32 %156, 32
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds float, float* %3, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 1, !tbaa !12
  %181 = add nsw i32 %156, 40
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds float, float* %3, i64 %182
  %184 = bitcast float* %183 to <8 x float>*
  %185 = load <8 x float>, <8 x float>* %184, align 1, !tbaa !12
  %186 = add nsw i32 %156, 48
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds float, float* %3, i64 %187
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 1, !tbaa !12
  %191 = add nsw i32 %156, 56
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds float, float* %3, i64 %192
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 1, !tbaa !12
  %196 = add nsw i32 %156, 64
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds float, float* %3, i64 %197
  %199 = bitcast float* %198 to <8 x float>*
  %200 = load <8 x float>, <8 x float>* %199, align 1, !tbaa !12
  %201 = add nsw i32 %156, 72
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds float, float* %3, i64 %202
  %204 = bitcast float* %203 to <8 x float>*
  %205 = load <8 x float>, <8 x float>* %204, align 1, !tbaa !12
  %206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %160, <8 x float> %25, <8 x float> %118) #10
  %207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %165, <8 x float> %25, <8 x float> %122) #10
  %208 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %170, <8 x float> %25, <8 x float> %126) #10
  %209 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %175, <8 x float> %25, <8 x float> %130) #10
  %210 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %180, <8 x float> %25, <8 x float> %134) #10
  %211 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %185, <8 x float> %25, <8 x float> %138) #10
  %212 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %190, <8 x float> %25, <8 x float> %142) #10
  %213 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %195, <8 x float> %25, <8 x float> %146) #10
  %214 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %200, <8 x float> %25, <8 x float> %150) #10
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %205, <8 x float> %25, <8 x float> %154) #10
  store <8 x float> %206, <8 x float>* %117, align 1, !tbaa !12
  store <8 x float> %207, <8 x float>* %121, align 1, !tbaa !12
  store <8 x float> %208, <8 x float>* %125, align 1, !tbaa !12
  store <8 x float> %209, <8 x float>* %129, align 1, !tbaa !12
  store <8 x float> %210, <8 x float>* %133, align 1, !tbaa !12
  store <8 x float> %211, <8 x float>* %137, align 1, !tbaa !12
  store <8 x float> %212, <8 x float>* %141, align 1, !tbaa !12
  store <8 x float> %213, <8 x float>* %145, align 1, !tbaa !12
  store <8 x float> %214, <8 x float>* %149, align 1, !tbaa !12
  store <8 x float> %215, <8 x float>* %153, align 1, !tbaa !12
  %216 = add nuw nsw i64 %74, 80
  %217 = icmp ult i64 %216, %64
  br i1 %217, label %73, label %67

218:                                              ; preds = %224
  br i1 %62, label %219, label %498

219:                                              ; preds = %218
  %220 = trunc i64 %31 to i32
  %221 = mul nsw i32 %61, %220
  %222 = sext i32 %221 to i64
  %223 = zext i32 %61 to i64
  br label %364

224:                                              ; preds = %68, %224
  %225 = phi i64 [ 0, %68 ], [ %356, %224 ]
  %226 = getelementptr inbounds float, float* %5, i64 %225
  %227 = getelementptr inbounds float, float* %226, i64 8
  %228 = bitcast float* %227 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %228, i32 0, i32 1, i32 1)
  %229 = getelementptr inbounds float, float* %3, i64 %225
  %230 = getelementptr inbounds float, float* %229, i64 8
  %231 = bitcast float* %230 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %231, i32 0, i32 1, i32 1)
  %232 = getelementptr inbounds float, float* %226, i64 16
  %233 = bitcast float* %232 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %233, i32 0, i32 1, i32 1)
  %234 = getelementptr inbounds float, float* %229, i64 16
  %235 = bitcast float* %234 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %235, i32 0, i32 1, i32 1)
  %236 = getelementptr inbounds float, float* %226, i64 24
  %237 = bitcast float* %236 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %237, i32 0, i32 1, i32 1)
  %238 = getelementptr inbounds float, float* %229, i64 24
  %239 = bitcast float* %238 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %239, i32 0, i32 1, i32 1)
  %240 = getelementptr inbounds float, float* %226, i64 32
  %241 = bitcast float* %240 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %241, i32 0, i32 1, i32 1)
  %242 = getelementptr inbounds float, float* %229, i64 32
  %243 = bitcast float* %242 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %243, i32 0, i32 1, i32 1)
  %244 = getelementptr inbounds float, float* %226, i64 40
  %245 = bitcast float* %244 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %245, i32 0, i32 1, i32 1)
  %246 = getelementptr inbounds float, float* %229, i64 40
  %247 = bitcast float* %246 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %247, i32 0, i32 1, i32 1)
  %248 = getelementptr inbounds float, float* %226, i64 48
  %249 = bitcast float* %248 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %249, i32 0, i32 1, i32 1)
  %250 = getelementptr inbounds float, float* %229, i64 48
  %251 = bitcast float* %250 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %251, i32 0, i32 1, i32 1)
  %252 = getelementptr inbounds float, float* %226, i64 56
  %253 = bitcast float* %252 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %253, i32 0, i32 1, i32 1)
  %254 = getelementptr inbounds float, float* %229, i64 56
  %255 = bitcast float* %254 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %255, i32 0, i32 1, i32 1)
  %256 = getelementptr inbounds float, float* %226, i64 64
  %257 = bitcast float* %256 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %257, i32 0, i32 1, i32 1)
  %258 = getelementptr inbounds float, float* %229, i64 64
  %259 = bitcast float* %258 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %259, i32 0, i32 1, i32 1)
  %260 = getelementptr inbounds float, float* %226, i64 72
  %261 = bitcast float* %260 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %261, i32 0, i32 1, i32 1)
  %262 = getelementptr inbounds float, float* %229, i64 72
  %263 = bitcast float* %262 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %263, i32 0, i32 1, i32 1)
  %264 = getelementptr inbounds float, float* %226, i64 80
  %265 = bitcast float* %264 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %265, i32 0, i32 1, i32 1)
  %266 = getelementptr inbounds float, float* %229, i64 80
  %267 = bitcast float* %266 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %267, i32 0, i32 1, i32 1)
  %268 = bitcast float* %226 to <8 x float>*
  %269 = load <8 x float>, <8 x float>* %268, align 1, !tbaa !12
  %270 = or i64 %225, 8
  %271 = getelementptr inbounds float, float* %5, i64 %270
  %272 = bitcast float* %271 to <8 x float>*
  %273 = load <8 x float>, <8 x float>* %272, align 1, !tbaa !12
  %274 = add nuw nsw i64 %225, 16
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = bitcast float* %275 to <8 x float>*
  %277 = load <8 x float>, <8 x float>* %276, align 1, !tbaa !12
  %278 = add nuw nsw i64 %225, 24
  %279 = getelementptr inbounds float, float* %5, i64 %278
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !tbaa !12
  %282 = add nuw nsw i64 %225, 32
  %283 = getelementptr inbounds float, float* %5, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 1, !tbaa !12
  %286 = add nuw nsw i64 %225, 40
  %287 = getelementptr inbounds float, float* %5, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 1, !tbaa !12
  %290 = add nuw nsw i64 %225, 48
  %291 = getelementptr inbounds float, float* %5, i64 %290
  %292 = bitcast float* %291 to <8 x float>*
  %293 = load <8 x float>, <8 x float>* %292, align 1, !tbaa !12
  %294 = add nuw nsw i64 %225, 56
  %295 = getelementptr inbounds float, float* %5, i64 %294
  %296 = bitcast float* %295 to <8 x float>*
  %297 = load <8 x float>, <8 x float>* %296, align 1, !tbaa !12
  %298 = add nuw nsw i64 %225, 64
  %299 = getelementptr inbounds float, float* %5, i64 %298
  %300 = bitcast float* %299 to <8 x float>*
  %301 = load <8 x float>, <8 x float>* %300, align 1, !tbaa !12
  %302 = add nuw nsw i64 %225, 72
  %303 = getelementptr inbounds float, float* %5, i64 %302
  %304 = bitcast float* %303 to <8 x float>*
  %305 = load <8 x float>, <8 x float>* %304, align 1, !tbaa !12
  %306 = add nsw i64 %225, %71
  %307 = getelementptr inbounds float, float* %3, i64 %306
  %308 = bitcast float* %307 to <8 x float>*
  %309 = load <8 x float>, <8 x float>* %308, align 1, !tbaa !12
  %310 = add nsw i64 %306, 8
  %311 = getelementptr inbounds float, float* %3, i64 %310
  %312 = bitcast float* %311 to <8 x float>*
  %313 = load <8 x float>, <8 x float>* %312, align 1, !tbaa !12
  %314 = add nsw i64 %306, 16
  %315 = getelementptr inbounds float, float* %3, i64 %314
  %316 = bitcast float* %315 to <8 x float>*
  %317 = load <8 x float>, <8 x float>* %316, align 1, !tbaa !12
  %318 = add nsw i64 %306, 24
  %319 = getelementptr inbounds float, float* %3, i64 %318
  %320 = bitcast float* %319 to <8 x float>*
  %321 = load <8 x float>, <8 x float>* %320, align 1, !tbaa !12
  %322 = add nsw i64 %306, 32
  %323 = getelementptr inbounds float, float* %3, i64 %322
  %324 = bitcast float* %323 to <8 x float>*
  %325 = load <8 x float>, <8 x float>* %324, align 1, !tbaa !12
  %326 = add nsw i64 %306, 40
  %327 = getelementptr inbounds float, float* %3, i64 %326
  %328 = bitcast float* %327 to <8 x float>*
  %329 = load <8 x float>, <8 x float>* %328, align 1, !tbaa !12
  %330 = add nsw i64 %306, 48
  %331 = getelementptr inbounds float, float* %3, i64 %330
  %332 = bitcast float* %331 to <8 x float>*
  %333 = load <8 x float>, <8 x float>* %332, align 1, !tbaa !12
  %334 = add nsw i64 %306, 56
  %335 = getelementptr inbounds float, float* %3, i64 %334
  %336 = bitcast float* %335 to <8 x float>*
  %337 = load <8 x float>, <8 x float>* %336, align 1, !tbaa !12
  %338 = add nsw i64 %306, 64
  %339 = getelementptr inbounds float, float* %3, i64 %338
  %340 = bitcast float* %339 to <8 x float>*
  %341 = load <8 x float>, <8 x float>* %340, align 1, !tbaa !12
  %342 = add nsw i64 %306, 72
  %343 = getelementptr inbounds float, float* %3, i64 %342
  %344 = bitcast float* %343 to <8 x float>*
  %345 = load <8 x float>, <8 x float>* %344, align 1, !tbaa !12
  %346 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %309, <8 x float> %30, <8 x float> %269) #10
  %347 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %313, <8 x float> %30, <8 x float> %273) #10
  %348 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %317, <8 x float> %30, <8 x float> %277) #10
  %349 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %321, <8 x float> %30, <8 x float> %281) #10
  %350 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %325, <8 x float> %30, <8 x float> %285) #10
  %351 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %329, <8 x float> %30, <8 x float> %289) #10
  %352 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %333, <8 x float> %30, <8 x float> %293) #10
  %353 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %337, <8 x float> %30, <8 x float> %297) #10
  %354 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %341, <8 x float> %30, <8 x float> %301) #10
  %355 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %345, <8 x float> %30, <8 x float> %305) #10
  store <8 x float> %346, <8 x float>* %268, align 1, !tbaa !12
  store <8 x float> %347, <8 x float>* %272, align 1, !tbaa !12
  store <8 x float> %348, <8 x float>* %276, align 1, !tbaa !12
  store <8 x float> %349, <8 x float>* %280, align 1, !tbaa !12
  store <8 x float> %350, <8 x float>* %284, align 1, !tbaa !12
  store <8 x float> %351, <8 x float>* %288, align 1, !tbaa !12
  store <8 x float> %352, <8 x float>* %292, align 1, !tbaa !12
  store <8 x float> %353, <8 x float>* %296, align 1, !tbaa !12
  store <8 x float> %354, <8 x float>* %300, align 1, !tbaa !12
  store <8 x float> %355, <8 x float>* %304, align 1, !tbaa !12
  %356 = add nuw nsw i64 %225, 80
  %357 = icmp ult i64 %356, %72
  br i1 %357, label %224, label %218

358:                                              ; preds = %364
  br i1 %62, label %359, label %498

359:                                              ; preds = %358
  %360 = trunc i64 %36 to i32
  %361 = mul nsw i32 %61, %360
  %362 = sext i32 %361 to i64
  %363 = zext i32 %61 to i64
  br label %505

364:                                              ; preds = %219, %364
  %365 = phi i64 [ 0, %219 ], [ %496, %364 ]
  %366 = getelementptr inbounds float, float* %5, i64 %365
  %367 = getelementptr inbounds float, float* %366, i64 8
  %368 = bitcast float* %367 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %368, i32 0, i32 1, i32 1)
  %369 = getelementptr inbounds float, float* %3, i64 %365
  %370 = getelementptr inbounds float, float* %369, i64 8
  %371 = bitcast float* %370 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %371, i32 0, i32 1, i32 1)
  %372 = getelementptr inbounds float, float* %366, i64 16
  %373 = bitcast float* %372 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %373, i32 0, i32 1, i32 1)
  %374 = getelementptr inbounds float, float* %369, i64 16
  %375 = bitcast float* %374 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %375, i32 0, i32 1, i32 1)
  %376 = getelementptr inbounds float, float* %366, i64 24
  %377 = bitcast float* %376 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %377, i32 0, i32 1, i32 1)
  %378 = getelementptr inbounds float, float* %369, i64 24
  %379 = bitcast float* %378 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %379, i32 0, i32 1, i32 1)
  %380 = getelementptr inbounds float, float* %366, i64 32
  %381 = bitcast float* %380 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %381, i32 0, i32 1, i32 1)
  %382 = getelementptr inbounds float, float* %369, i64 32
  %383 = bitcast float* %382 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %383, i32 0, i32 1, i32 1)
  %384 = getelementptr inbounds float, float* %366, i64 40
  %385 = bitcast float* %384 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %385, i32 0, i32 1, i32 1)
  %386 = getelementptr inbounds float, float* %369, i64 40
  %387 = bitcast float* %386 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %387, i32 0, i32 1, i32 1)
  %388 = getelementptr inbounds float, float* %366, i64 48
  %389 = bitcast float* %388 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %389, i32 0, i32 1, i32 1)
  %390 = getelementptr inbounds float, float* %369, i64 48
  %391 = bitcast float* %390 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %391, i32 0, i32 1, i32 1)
  %392 = getelementptr inbounds float, float* %366, i64 56
  %393 = bitcast float* %392 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %393, i32 0, i32 1, i32 1)
  %394 = getelementptr inbounds float, float* %369, i64 56
  %395 = bitcast float* %394 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %395, i32 0, i32 1, i32 1)
  %396 = getelementptr inbounds float, float* %366, i64 64
  %397 = bitcast float* %396 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %397, i32 0, i32 1, i32 1)
  %398 = getelementptr inbounds float, float* %369, i64 64
  %399 = bitcast float* %398 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %399, i32 0, i32 1, i32 1)
  %400 = getelementptr inbounds float, float* %366, i64 72
  %401 = bitcast float* %400 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %401, i32 0, i32 1, i32 1)
  %402 = getelementptr inbounds float, float* %369, i64 72
  %403 = bitcast float* %402 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %403, i32 0, i32 1, i32 1)
  %404 = getelementptr inbounds float, float* %366, i64 80
  %405 = bitcast float* %404 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %405, i32 0, i32 1, i32 1)
  %406 = getelementptr inbounds float, float* %369, i64 80
  %407 = bitcast float* %406 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %407, i32 0, i32 1, i32 1)
  %408 = bitcast float* %366 to <8 x float>*
  %409 = load <8 x float>, <8 x float>* %408, align 1, !tbaa !12
  %410 = or i64 %365, 8
  %411 = getelementptr inbounds float, float* %5, i64 %410
  %412 = bitcast float* %411 to <8 x float>*
  %413 = load <8 x float>, <8 x float>* %412, align 1, !tbaa !12
  %414 = add nuw nsw i64 %365, 16
  %415 = getelementptr inbounds float, float* %5, i64 %414
  %416 = bitcast float* %415 to <8 x float>*
  %417 = load <8 x float>, <8 x float>* %416, align 1, !tbaa !12
  %418 = add nuw nsw i64 %365, 24
  %419 = getelementptr inbounds float, float* %5, i64 %418
  %420 = bitcast float* %419 to <8 x float>*
  %421 = load <8 x float>, <8 x float>* %420, align 1, !tbaa !12
  %422 = add nuw nsw i64 %365, 32
  %423 = getelementptr inbounds float, float* %5, i64 %422
  %424 = bitcast float* %423 to <8 x float>*
  %425 = load <8 x float>, <8 x float>* %424, align 1, !tbaa !12
  %426 = add nuw nsw i64 %365, 40
  %427 = getelementptr inbounds float, float* %5, i64 %426
  %428 = bitcast float* %427 to <8 x float>*
  %429 = load <8 x float>, <8 x float>* %428, align 1, !tbaa !12
  %430 = add nuw nsw i64 %365, 48
  %431 = getelementptr inbounds float, float* %5, i64 %430
  %432 = bitcast float* %431 to <8 x float>*
  %433 = load <8 x float>, <8 x float>* %432, align 1, !tbaa !12
  %434 = add nuw nsw i64 %365, 56
  %435 = getelementptr inbounds float, float* %5, i64 %434
  %436 = bitcast float* %435 to <8 x float>*
  %437 = load <8 x float>, <8 x float>* %436, align 1, !tbaa !12
  %438 = add nuw nsw i64 %365, 64
  %439 = getelementptr inbounds float, float* %5, i64 %438
  %440 = bitcast float* %439 to <8 x float>*
  %441 = load <8 x float>, <8 x float>* %440, align 1, !tbaa !12
  %442 = add nuw nsw i64 %365, 72
  %443 = getelementptr inbounds float, float* %5, i64 %442
  %444 = bitcast float* %443 to <8 x float>*
  %445 = load <8 x float>, <8 x float>* %444, align 1, !tbaa !12
  %446 = add nsw i64 %365, %222
  %447 = getelementptr inbounds float, float* %3, i64 %446
  %448 = bitcast float* %447 to <8 x float>*
  %449 = load <8 x float>, <8 x float>* %448, align 1, !tbaa !12
  %450 = add nsw i64 %446, 8
  %451 = getelementptr inbounds float, float* %3, i64 %450
  %452 = bitcast float* %451 to <8 x float>*
  %453 = load <8 x float>, <8 x float>* %452, align 1, !tbaa !12
  %454 = add nsw i64 %446, 16
  %455 = getelementptr inbounds float, float* %3, i64 %454
  %456 = bitcast float* %455 to <8 x float>*
  %457 = load <8 x float>, <8 x float>* %456, align 1, !tbaa !12
  %458 = add nsw i64 %446, 24
  %459 = getelementptr inbounds float, float* %3, i64 %458
  %460 = bitcast float* %459 to <8 x float>*
  %461 = load <8 x float>, <8 x float>* %460, align 1, !tbaa !12
  %462 = add nsw i64 %446, 32
  %463 = getelementptr inbounds float, float* %3, i64 %462
  %464 = bitcast float* %463 to <8 x float>*
  %465 = load <8 x float>, <8 x float>* %464, align 1, !tbaa !12
  %466 = add nsw i64 %446, 40
  %467 = getelementptr inbounds float, float* %3, i64 %466
  %468 = bitcast float* %467 to <8 x float>*
  %469 = load <8 x float>, <8 x float>* %468, align 1, !tbaa !12
  %470 = add nsw i64 %446, 48
  %471 = getelementptr inbounds float, float* %3, i64 %470
  %472 = bitcast float* %471 to <8 x float>*
  %473 = load <8 x float>, <8 x float>* %472, align 1, !tbaa !12
  %474 = add nsw i64 %446, 56
  %475 = getelementptr inbounds float, float* %3, i64 %474
  %476 = bitcast float* %475 to <8 x float>*
  %477 = load <8 x float>, <8 x float>* %476, align 1, !tbaa !12
  %478 = add nsw i64 %446, 64
  %479 = getelementptr inbounds float, float* %3, i64 %478
  %480 = bitcast float* %479 to <8 x float>*
  %481 = load <8 x float>, <8 x float>* %480, align 1, !tbaa !12
  %482 = add nsw i64 %446, 72
  %483 = getelementptr inbounds float, float* %3, i64 %482
  %484 = bitcast float* %483 to <8 x float>*
  %485 = load <8 x float>, <8 x float>* %484, align 1, !tbaa !12
  %486 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %449, <8 x float> %35, <8 x float> %409) #10
  %487 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %453, <8 x float> %35, <8 x float> %413) #10
  %488 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %457, <8 x float> %35, <8 x float> %417) #10
  %489 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %461, <8 x float> %35, <8 x float> %421) #10
  %490 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %465, <8 x float> %35, <8 x float> %425) #10
  %491 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %469, <8 x float> %35, <8 x float> %429) #10
  %492 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %473, <8 x float> %35, <8 x float> %433) #10
  %493 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %477, <8 x float> %35, <8 x float> %437) #10
  %494 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %481, <8 x float> %35, <8 x float> %441) #10
  %495 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %485, <8 x float> %35, <8 x float> %445) #10
  store <8 x float> %486, <8 x float>* %408, align 1, !tbaa !12
  store <8 x float> %487, <8 x float>* %412, align 1, !tbaa !12
  store <8 x float> %488, <8 x float>* %416, align 1, !tbaa !12
  store <8 x float> %489, <8 x float>* %420, align 1, !tbaa !12
  store <8 x float> %490, <8 x float>* %424, align 1, !tbaa !12
  store <8 x float> %491, <8 x float>* %428, align 1, !tbaa !12
  store <8 x float> %492, <8 x float>* %432, align 1, !tbaa !12
  store <8 x float> %493, <8 x float>* %436, align 1, !tbaa !12
  store <8 x float> %494, <8 x float>* %440, align 1, !tbaa !12
  store <8 x float> %495, <8 x float>* %444, align 1, !tbaa !12
  %496 = add nuw nsw i64 %365, 80
  %497 = icmp ult i64 %496, %223
  br i1 %497, label %364, label %358

498:                                              ; preds = %505, %67, %218, %358
  %499 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %500 = icmp sgt i32 %499, 0
  br i1 %500, label %501, label %1070

501:                                              ; preds = %498
  %502 = zext i32 %499 to i64
  %503 = trunc i64 %41 to i32
  %504 = mul nsw i32 %499, %503
  br label %645

505:                                              ; preds = %359, %505
  %506 = phi i64 [ 0, %359 ], [ %637, %505 ]
  %507 = getelementptr inbounds float, float* %5, i64 %506
  %508 = getelementptr inbounds float, float* %507, i64 8
  %509 = bitcast float* %508 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %509, i32 0, i32 1, i32 1)
  %510 = getelementptr inbounds float, float* %3, i64 %506
  %511 = getelementptr inbounds float, float* %510, i64 8
  %512 = bitcast float* %511 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %512, i32 0, i32 1, i32 1)
  %513 = getelementptr inbounds float, float* %507, i64 16
  %514 = bitcast float* %513 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %514, i32 0, i32 1, i32 1)
  %515 = getelementptr inbounds float, float* %510, i64 16
  %516 = bitcast float* %515 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %516, i32 0, i32 1, i32 1)
  %517 = getelementptr inbounds float, float* %507, i64 24
  %518 = bitcast float* %517 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %518, i32 0, i32 1, i32 1)
  %519 = getelementptr inbounds float, float* %510, i64 24
  %520 = bitcast float* %519 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %520, i32 0, i32 1, i32 1)
  %521 = getelementptr inbounds float, float* %507, i64 32
  %522 = bitcast float* %521 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %522, i32 0, i32 1, i32 1)
  %523 = getelementptr inbounds float, float* %510, i64 32
  %524 = bitcast float* %523 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %524, i32 0, i32 1, i32 1)
  %525 = getelementptr inbounds float, float* %507, i64 40
  %526 = bitcast float* %525 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %526, i32 0, i32 1, i32 1)
  %527 = getelementptr inbounds float, float* %510, i64 40
  %528 = bitcast float* %527 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %528, i32 0, i32 1, i32 1)
  %529 = getelementptr inbounds float, float* %507, i64 48
  %530 = bitcast float* %529 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %530, i32 0, i32 1, i32 1)
  %531 = getelementptr inbounds float, float* %510, i64 48
  %532 = bitcast float* %531 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %532, i32 0, i32 1, i32 1)
  %533 = getelementptr inbounds float, float* %507, i64 56
  %534 = bitcast float* %533 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %534, i32 0, i32 1, i32 1)
  %535 = getelementptr inbounds float, float* %510, i64 56
  %536 = bitcast float* %535 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %536, i32 0, i32 1, i32 1)
  %537 = getelementptr inbounds float, float* %507, i64 64
  %538 = bitcast float* %537 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %538, i32 0, i32 1, i32 1)
  %539 = getelementptr inbounds float, float* %510, i64 64
  %540 = bitcast float* %539 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %540, i32 0, i32 1, i32 1)
  %541 = getelementptr inbounds float, float* %507, i64 72
  %542 = bitcast float* %541 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %542, i32 0, i32 1, i32 1)
  %543 = getelementptr inbounds float, float* %510, i64 72
  %544 = bitcast float* %543 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %544, i32 0, i32 1, i32 1)
  %545 = getelementptr inbounds float, float* %507, i64 80
  %546 = bitcast float* %545 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %546, i32 0, i32 1, i32 1)
  %547 = getelementptr inbounds float, float* %510, i64 80
  %548 = bitcast float* %547 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %548, i32 0, i32 1, i32 1)
  %549 = bitcast float* %507 to <8 x float>*
  %550 = load <8 x float>, <8 x float>* %549, align 1, !tbaa !12
  %551 = or i64 %506, 8
  %552 = getelementptr inbounds float, float* %5, i64 %551
  %553 = bitcast float* %552 to <8 x float>*
  %554 = load <8 x float>, <8 x float>* %553, align 1, !tbaa !12
  %555 = add nuw nsw i64 %506, 16
  %556 = getelementptr inbounds float, float* %5, i64 %555
  %557 = bitcast float* %556 to <8 x float>*
  %558 = load <8 x float>, <8 x float>* %557, align 1, !tbaa !12
  %559 = add nuw nsw i64 %506, 24
  %560 = getelementptr inbounds float, float* %5, i64 %559
  %561 = bitcast float* %560 to <8 x float>*
  %562 = load <8 x float>, <8 x float>* %561, align 1, !tbaa !12
  %563 = add nuw nsw i64 %506, 32
  %564 = getelementptr inbounds float, float* %5, i64 %563
  %565 = bitcast float* %564 to <8 x float>*
  %566 = load <8 x float>, <8 x float>* %565, align 1, !tbaa !12
  %567 = add nuw nsw i64 %506, 40
  %568 = getelementptr inbounds float, float* %5, i64 %567
  %569 = bitcast float* %568 to <8 x float>*
  %570 = load <8 x float>, <8 x float>* %569, align 1, !tbaa !12
  %571 = add nuw nsw i64 %506, 48
  %572 = getelementptr inbounds float, float* %5, i64 %571
  %573 = bitcast float* %572 to <8 x float>*
  %574 = load <8 x float>, <8 x float>* %573, align 1, !tbaa !12
  %575 = add nuw nsw i64 %506, 56
  %576 = getelementptr inbounds float, float* %5, i64 %575
  %577 = bitcast float* %576 to <8 x float>*
  %578 = load <8 x float>, <8 x float>* %577, align 1, !tbaa !12
  %579 = add nuw nsw i64 %506, 64
  %580 = getelementptr inbounds float, float* %5, i64 %579
  %581 = bitcast float* %580 to <8 x float>*
  %582 = load <8 x float>, <8 x float>* %581, align 1, !tbaa !12
  %583 = add nuw nsw i64 %506, 72
  %584 = getelementptr inbounds float, float* %5, i64 %583
  %585 = bitcast float* %584 to <8 x float>*
  %586 = load <8 x float>, <8 x float>* %585, align 1, !tbaa !12
  %587 = add nsw i64 %506, %362
  %588 = getelementptr inbounds float, float* %3, i64 %587
  %589 = bitcast float* %588 to <8 x float>*
  %590 = load <8 x float>, <8 x float>* %589, align 1, !tbaa !12
  %591 = add nsw i64 %587, 8
  %592 = getelementptr inbounds float, float* %3, i64 %591
  %593 = bitcast float* %592 to <8 x float>*
  %594 = load <8 x float>, <8 x float>* %593, align 1, !tbaa !12
  %595 = add nsw i64 %587, 16
  %596 = getelementptr inbounds float, float* %3, i64 %595
  %597 = bitcast float* %596 to <8 x float>*
  %598 = load <8 x float>, <8 x float>* %597, align 1, !tbaa !12
  %599 = add nsw i64 %587, 24
  %600 = getelementptr inbounds float, float* %3, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 1, !tbaa !12
  %603 = add nsw i64 %587, 32
  %604 = getelementptr inbounds float, float* %3, i64 %603
  %605 = bitcast float* %604 to <8 x float>*
  %606 = load <8 x float>, <8 x float>* %605, align 1, !tbaa !12
  %607 = add nsw i64 %587, 40
  %608 = getelementptr inbounds float, float* %3, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  %610 = load <8 x float>, <8 x float>* %609, align 1, !tbaa !12
  %611 = add nsw i64 %587, 48
  %612 = getelementptr inbounds float, float* %3, i64 %611
  %613 = bitcast float* %612 to <8 x float>*
  %614 = load <8 x float>, <8 x float>* %613, align 1, !tbaa !12
  %615 = add nsw i64 %587, 56
  %616 = getelementptr inbounds float, float* %3, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 1, !tbaa !12
  %619 = add nsw i64 %587, 64
  %620 = getelementptr inbounds float, float* %3, i64 %619
  %621 = bitcast float* %620 to <8 x float>*
  %622 = load <8 x float>, <8 x float>* %621, align 1, !tbaa !12
  %623 = add nsw i64 %587, 72
  %624 = getelementptr inbounds float, float* %3, i64 %623
  %625 = bitcast float* %624 to <8 x float>*
  %626 = load <8 x float>, <8 x float>* %625, align 1, !tbaa !12
  %627 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %590, <8 x float> %40, <8 x float> %550) #10
  %628 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %594, <8 x float> %40, <8 x float> %554) #10
  %629 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %598, <8 x float> %40, <8 x float> %558) #10
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %602, <8 x float> %40, <8 x float> %562) #10
  %631 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %606, <8 x float> %40, <8 x float> %566) #10
  %632 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %610, <8 x float> %40, <8 x float> %570) #10
  %633 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %614, <8 x float> %40, <8 x float> %574) #10
  %634 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %618, <8 x float> %40, <8 x float> %578) #10
  %635 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %622, <8 x float> %40, <8 x float> %582) #10
  %636 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %626, <8 x float> %40, <8 x float> %586) #10
  store <8 x float> %627, <8 x float>* %549, align 1, !tbaa !12
  store <8 x float> %628, <8 x float>* %553, align 1, !tbaa !12
  store <8 x float> %629, <8 x float>* %557, align 1, !tbaa !12
  store <8 x float> %630, <8 x float>* %561, align 1, !tbaa !12
  store <8 x float> %631, <8 x float>* %565, align 1, !tbaa !12
  store <8 x float> %632, <8 x float>* %569, align 1, !tbaa !12
  store <8 x float> %633, <8 x float>* %573, align 1, !tbaa !12
  store <8 x float> %634, <8 x float>* %577, align 1, !tbaa !12
  store <8 x float> %635, <8 x float>* %581, align 1, !tbaa !12
  store <8 x float> %636, <8 x float>* %585, align 1, !tbaa !12
  %637 = add nuw nsw i64 %506, 80
  %638 = icmp ult i64 %637, %363
  br i1 %638, label %505, label %498

639:                                              ; preds = %645
  br i1 %500, label %640, label %1070

640:                                              ; preds = %639
  %641 = trunc i64 %46 to i32
  %642 = mul nsw i32 %499, %641
  %643 = sext i32 %642 to i64
  %644 = zext i32 %499 to i64
  br label %796

645:                                              ; preds = %501, %645
  %646 = phi i64 [ 0, %501 ], [ %788, %645 ]
  %647 = getelementptr inbounds float, float* %5, i64 %646
  %648 = getelementptr inbounds float, float* %647, i64 8
  %649 = bitcast float* %648 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %649, i32 0, i32 1, i32 1)
  %650 = getelementptr inbounds float, float* %3, i64 %646
  %651 = getelementptr inbounds float, float* %650, i64 8
  %652 = bitcast float* %651 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %652, i32 0, i32 1, i32 1)
  %653 = getelementptr inbounds float, float* %647, i64 16
  %654 = bitcast float* %653 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %654, i32 0, i32 1, i32 1)
  %655 = getelementptr inbounds float, float* %650, i64 16
  %656 = bitcast float* %655 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %656, i32 0, i32 1, i32 1)
  %657 = getelementptr inbounds float, float* %647, i64 24
  %658 = bitcast float* %657 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %658, i32 0, i32 1, i32 1)
  %659 = getelementptr inbounds float, float* %650, i64 24
  %660 = bitcast float* %659 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %660, i32 0, i32 1, i32 1)
  %661 = getelementptr inbounds float, float* %647, i64 32
  %662 = bitcast float* %661 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %662, i32 0, i32 1, i32 1)
  %663 = getelementptr inbounds float, float* %650, i64 32
  %664 = bitcast float* %663 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %664, i32 0, i32 1, i32 1)
  %665 = getelementptr inbounds float, float* %647, i64 40
  %666 = bitcast float* %665 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %666, i32 0, i32 1, i32 1)
  %667 = getelementptr inbounds float, float* %650, i64 40
  %668 = bitcast float* %667 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %668, i32 0, i32 1, i32 1)
  %669 = getelementptr inbounds float, float* %647, i64 48
  %670 = bitcast float* %669 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %670, i32 0, i32 1, i32 1)
  %671 = getelementptr inbounds float, float* %650, i64 48
  %672 = bitcast float* %671 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %672, i32 0, i32 1, i32 1)
  %673 = getelementptr inbounds float, float* %647, i64 56
  %674 = bitcast float* %673 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %674, i32 0, i32 1, i32 1)
  %675 = getelementptr inbounds float, float* %650, i64 56
  %676 = bitcast float* %675 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %676, i32 0, i32 1, i32 1)
  %677 = getelementptr inbounds float, float* %647, i64 64
  %678 = bitcast float* %677 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %678, i32 0, i32 1, i32 1)
  %679 = getelementptr inbounds float, float* %650, i64 64
  %680 = bitcast float* %679 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %680, i32 0, i32 1, i32 1)
  %681 = getelementptr inbounds float, float* %647, i64 72
  %682 = bitcast float* %681 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %682, i32 0, i32 1, i32 1)
  %683 = getelementptr inbounds float, float* %650, i64 72
  %684 = bitcast float* %683 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %684, i32 0, i32 1, i32 1)
  %685 = getelementptr inbounds float, float* %647, i64 80
  %686 = bitcast float* %685 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %686, i32 0, i32 1, i32 1)
  %687 = getelementptr inbounds float, float* %650, i64 80
  %688 = bitcast float* %687 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %688, i32 0, i32 1, i32 1)
  %689 = bitcast float* %647 to <8 x float>*
  %690 = load <8 x float>, <8 x float>* %689, align 1, !tbaa !12
  %691 = or i64 %646, 8
  %692 = getelementptr inbounds float, float* %5, i64 %691
  %693 = bitcast float* %692 to <8 x float>*
  %694 = load <8 x float>, <8 x float>* %693, align 1, !tbaa !12
  %695 = add nuw nsw i64 %646, 16
  %696 = getelementptr inbounds float, float* %5, i64 %695
  %697 = bitcast float* %696 to <8 x float>*
  %698 = load <8 x float>, <8 x float>* %697, align 1, !tbaa !12
  %699 = add nuw nsw i64 %646, 24
  %700 = getelementptr inbounds float, float* %5, i64 %699
  %701 = bitcast float* %700 to <8 x float>*
  %702 = load <8 x float>, <8 x float>* %701, align 1, !tbaa !12
  %703 = add nuw nsw i64 %646, 32
  %704 = getelementptr inbounds float, float* %5, i64 %703
  %705 = bitcast float* %704 to <8 x float>*
  %706 = load <8 x float>, <8 x float>* %705, align 1, !tbaa !12
  %707 = add nuw nsw i64 %646, 40
  %708 = getelementptr inbounds float, float* %5, i64 %707
  %709 = bitcast float* %708 to <8 x float>*
  %710 = load <8 x float>, <8 x float>* %709, align 1, !tbaa !12
  %711 = add nuw nsw i64 %646, 48
  %712 = getelementptr inbounds float, float* %5, i64 %711
  %713 = bitcast float* %712 to <8 x float>*
  %714 = load <8 x float>, <8 x float>* %713, align 1, !tbaa !12
  %715 = add nuw nsw i64 %646, 56
  %716 = getelementptr inbounds float, float* %5, i64 %715
  %717 = bitcast float* %716 to <8 x float>*
  %718 = load <8 x float>, <8 x float>* %717, align 1, !tbaa !12
  %719 = add nuw nsw i64 %646, 64
  %720 = getelementptr inbounds float, float* %5, i64 %719
  %721 = bitcast float* %720 to <8 x float>*
  %722 = load <8 x float>, <8 x float>* %721, align 1, !tbaa !12
  %723 = add nuw nsw i64 %646, 72
  %724 = getelementptr inbounds float, float* %5, i64 %723
  %725 = bitcast float* %724 to <8 x float>*
  %726 = load <8 x float>, <8 x float>* %725, align 1, !tbaa !12
  %727 = trunc i64 %646 to i32
  %728 = add nsw i32 %504, %727
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds float, float* %3, i64 %729
  %731 = bitcast float* %730 to <8 x float>*
  %732 = load <8 x float>, <8 x float>* %731, align 1, !tbaa !12
  %733 = add nsw i32 %728, 8
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds float, float* %3, i64 %734
  %736 = bitcast float* %735 to <8 x float>*
  %737 = load <8 x float>, <8 x float>* %736, align 1, !tbaa !12
  %738 = add nsw i32 %728, 16
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds float, float* %3, i64 %739
  %741 = bitcast float* %740 to <8 x float>*
  %742 = load <8 x float>, <8 x float>* %741, align 1, !tbaa !12
  %743 = add nsw i32 %728, 24
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds float, float* %3, i64 %744
  %746 = bitcast float* %745 to <8 x float>*
  %747 = load <8 x float>, <8 x float>* %746, align 1, !tbaa !12
  %748 = add nsw i32 %728, 32
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds float, float* %3, i64 %749
  %751 = bitcast float* %750 to <8 x float>*
  %752 = load <8 x float>, <8 x float>* %751, align 1, !tbaa !12
  %753 = add nsw i32 %728, 40
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds float, float* %3, i64 %754
  %756 = bitcast float* %755 to <8 x float>*
  %757 = load <8 x float>, <8 x float>* %756, align 1, !tbaa !12
  %758 = add nsw i32 %728, 48
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds float, float* %3, i64 %759
  %761 = bitcast float* %760 to <8 x float>*
  %762 = load <8 x float>, <8 x float>* %761, align 1, !tbaa !12
  %763 = add nsw i32 %728, 56
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds float, float* %3, i64 %764
  %766 = bitcast float* %765 to <8 x float>*
  %767 = load <8 x float>, <8 x float>* %766, align 1, !tbaa !12
  %768 = add nsw i32 %728, 64
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds float, float* %3, i64 %769
  %771 = bitcast float* %770 to <8 x float>*
  %772 = load <8 x float>, <8 x float>* %771, align 1, !tbaa !12
  %773 = add nsw i32 %728, 72
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds float, float* %3, i64 %774
  %776 = bitcast float* %775 to <8 x float>*
  %777 = load <8 x float>, <8 x float>* %776, align 1, !tbaa !12
  %778 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %732, <8 x float> %45, <8 x float> %690) #10
  %779 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %737, <8 x float> %45, <8 x float> %694) #10
  %780 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %742, <8 x float> %45, <8 x float> %698) #10
  %781 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %747, <8 x float> %45, <8 x float> %702) #10
  %782 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %752, <8 x float> %45, <8 x float> %706) #10
  %783 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %757, <8 x float> %45, <8 x float> %710) #10
  %784 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %762, <8 x float> %45, <8 x float> %714) #10
  %785 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %767, <8 x float> %45, <8 x float> %718) #10
  %786 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %772, <8 x float> %45, <8 x float> %722) #10
  %787 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %777, <8 x float> %45, <8 x float> %726) #10
  store <8 x float> %778, <8 x float>* %689, align 1, !tbaa !12
  store <8 x float> %779, <8 x float>* %693, align 1, !tbaa !12
  store <8 x float> %780, <8 x float>* %697, align 1, !tbaa !12
  store <8 x float> %781, <8 x float>* %701, align 1, !tbaa !12
  store <8 x float> %782, <8 x float>* %705, align 1, !tbaa !12
  store <8 x float> %783, <8 x float>* %709, align 1, !tbaa !12
  store <8 x float> %784, <8 x float>* %713, align 1, !tbaa !12
  store <8 x float> %785, <8 x float>* %717, align 1, !tbaa !12
  store <8 x float> %786, <8 x float>* %721, align 1, !tbaa !12
  store <8 x float> %787, <8 x float>* %725, align 1, !tbaa !12
  %788 = add nuw nsw i64 %646, 80
  %789 = icmp ult i64 %788, %502
  br i1 %789, label %645, label %639

790:                                              ; preds = %796
  br i1 %500, label %791, label %1070

791:                                              ; preds = %790
  %792 = trunc i64 %51 to i32
  %793 = mul nsw i32 %499, %792
  %794 = sext i32 %793 to i64
  %795 = zext i32 %499 to i64
  br label %936

796:                                              ; preds = %640, %796
  %797 = phi i64 [ 0, %640 ], [ %928, %796 ]
  %798 = getelementptr inbounds float, float* %5, i64 %797
  %799 = getelementptr inbounds float, float* %798, i64 8
  %800 = bitcast float* %799 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %800, i32 0, i32 1, i32 1)
  %801 = getelementptr inbounds float, float* %3, i64 %797
  %802 = getelementptr inbounds float, float* %801, i64 8
  %803 = bitcast float* %802 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %803, i32 0, i32 1, i32 1)
  %804 = getelementptr inbounds float, float* %798, i64 16
  %805 = bitcast float* %804 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %805, i32 0, i32 1, i32 1)
  %806 = getelementptr inbounds float, float* %801, i64 16
  %807 = bitcast float* %806 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %807, i32 0, i32 1, i32 1)
  %808 = getelementptr inbounds float, float* %798, i64 24
  %809 = bitcast float* %808 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %809, i32 0, i32 1, i32 1)
  %810 = getelementptr inbounds float, float* %801, i64 24
  %811 = bitcast float* %810 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %811, i32 0, i32 1, i32 1)
  %812 = getelementptr inbounds float, float* %798, i64 32
  %813 = bitcast float* %812 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %813, i32 0, i32 1, i32 1)
  %814 = getelementptr inbounds float, float* %801, i64 32
  %815 = bitcast float* %814 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %815, i32 0, i32 1, i32 1)
  %816 = getelementptr inbounds float, float* %798, i64 40
  %817 = bitcast float* %816 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %817, i32 0, i32 1, i32 1)
  %818 = getelementptr inbounds float, float* %801, i64 40
  %819 = bitcast float* %818 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %819, i32 0, i32 1, i32 1)
  %820 = getelementptr inbounds float, float* %798, i64 48
  %821 = bitcast float* %820 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %821, i32 0, i32 1, i32 1)
  %822 = getelementptr inbounds float, float* %801, i64 48
  %823 = bitcast float* %822 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %823, i32 0, i32 1, i32 1)
  %824 = getelementptr inbounds float, float* %798, i64 56
  %825 = bitcast float* %824 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %825, i32 0, i32 1, i32 1)
  %826 = getelementptr inbounds float, float* %801, i64 56
  %827 = bitcast float* %826 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %827, i32 0, i32 1, i32 1)
  %828 = getelementptr inbounds float, float* %798, i64 64
  %829 = bitcast float* %828 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %829, i32 0, i32 1, i32 1)
  %830 = getelementptr inbounds float, float* %801, i64 64
  %831 = bitcast float* %830 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %831, i32 0, i32 1, i32 1)
  %832 = getelementptr inbounds float, float* %798, i64 72
  %833 = bitcast float* %832 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %833, i32 0, i32 1, i32 1)
  %834 = getelementptr inbounds float, float* %801, i64 72
  %835 = bitcast float* %834 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %835, i32 0, i32 1, i32 1)
  %836 = getelementptr inbounds float, float* %798, i64 80
  %837 = bitcast float* %836 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %837, i32 0, i32 1, i32 1)
  %838 = getelementptr inbounds float, float* %801, i64 80
  %839 = bitcast float* %838 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %839, i32 0, i32 1, i32 1)
  %840 = bitcast float* %798 to <8 x float>*
  %841 = load <8 x float>, <8 x float>* %840, align 1, !tbaa !12
  %842 = or i64 %797, 8
  %843 = getelementptr inbounds float, float* %5, i64 %842
  %844 = bitcast float* %843 to <8 x float>*
  %845 = load <8 x float>, <8 x float>* %844, align 1, !tbaa !12
  %846 = add nuw nsw i64 %797, 16
  %847 = getelementptr inbounds float, float* %5, i64 %846
  %848 = bitcast float* %847 to <8 x float>*
  %849 = load <8 x float>, <8 x float>* %848, align 1, !tbaa !12
  %850 = add nuw nsw i64 %797, 24
  %851 = getelementptr inbounds float, float* %5, i64 %850
  %852 = bitcast float* %851 to <8 x float>*
  %853 = load <8 x float>, <8 x float>* %852, align 1, !tbaa !12
  %854 = add nuw nsw i64 %797, 32
  %855 = getelementptr inbounds float, float* %5, i64 %854
  %856 = bitcast float* %855 to <8 x float>*
  %857 = load <8 x float>, <8 x float>* %856, align 1, !tbaa !12
  %858 = add nuw nsw i64 %797, 40
  %859 = getelementptr inbounds float, float* %5, i64 %858
  %860 = bitcast float* %859 to <8 x float>*
  %861 = load <8 x float>, <8 x float>* %860, align 1, !tbaa !12
  %862 = add nuw nsw i64 %797, 48
  %863 = getelementptr inbounds float, float* %5, i64 %862
  %864 = bitcast float* %863 to <8 x float>*
  %865 = load <8 x float>, <8 x float>* %864, align 1, !tbaa !12
  %866 = add nuw nsw i64 %797, 56
  %867 = getelementptr inbounds float, float* %5, i64 %866
  %868 = bitcast float* %867 to <8 x float>*
  %869 = load <8 x float>, <8 x float>* %868, align 1, !tbaa !12
  %870 = add nuw nsw i64 %797, 64
  %871 = getelementptr inbounds float, float* %5, i64 %870
  %872 = bitcast float* %871 to <8 x float>*
  %873 = load <8 x float>, <8 x float>* %872, align 1, !tbaa !12
  %874 = add nuw nsw i64 %797, 72
  %875 = getelementptr inbounds float, float* %5, i64 %874
  %876 = bitcast float* %875 to <8 x float>*
  %877 = load <8 x float>, <8 x float>* %876, align 1, !tbaa !12
  %878 = add nsw i64 %797, %643
  %879 = getelementptr inbounds float, float* %3, i64 %878
  %880 = bitcast float* %879 to <8 x float>*
  %881 = load <8 x float>, <8 x float>* %880, align 1, !tbaa !12
  %882 = add nsw i64 %878, 8
  %883 = getelementptr inbounds float, float* %3, i64 %882
  %884 = bitcast float* %883 to <8 x float>*
  %885 = load <8 x float>, <8 x float>* %884, align 1, !tbaa !12
  %886 = add nsw i64 %878, 16
  %887 = getelementptr inbounds float, float* %3, i64 %886
  %888 = bitcast float* %887 to <8 x float>*
  %889 = load <8 x float>, <8 x float>* %888, align 1, !tbaa !12
  %890 = add nsw i64 %878, 24
  %891 = getelementptr inbounds float, float* %3, i64 %890
  %892 = bitcast float* %891 to <8 x float>*
  %893 = load <8 x float>, <8 x float>* %892, align 1, !tbaa !12
  %894 = add nsw i64 %878, 32
  %895 = getelementptr inbounds float, float* %3, i64 %894
  %896 = bitcast float* %895 to <8 x float>*
  %897 = load <8 x float>, <8 x float>* %896, align 1, !tbaa !12
  %898 = add nsw i64 %878, 40
  %899 = getelementptr inbounds float, float* %3, i64 %898
  %900 = bitcast float* %899 to <8 x float>*
  %901 = load <8 x float>, <8 x float>* %900, align 1, !tbaa !12
  %902 = add nsw i64 %878, 48
  %903 = getelementptr inbounds float, float* %3, i64 %902
  %904 = bitcast float* %903 to <8 x float>*
  %905 = load <8 x float>, <8 x float>* %904, align 1, !tbaa !12
  %906 = add nsw i64 %878, 56
  %907 = getelementptr inbounds float, float* %3, i64 %906
  %908 = bitcast float* %907 to <8 x float>*
  %909 = load <8 x float>, <8 x float>* %908, align 1, !tbaa !12
  %910 = add nsw i64 %878, 64
  %911 = getelementptr inbounds float, float* %3, i64 %910
  %912 = bitcast float* %911 to <8 x float>*
  %913 = load <8 x float>, <8 x float>* %912, align 1, !tbaa !12
  %914 = add nsw i64 %878, 72
  %915 = getelementptr inbounds float, float* %3, i64 %914
  %916 = bitcast float* %915 to <8 x float>*
  %917 = load <8 x float>, <8 x float>* %916, align 1, !tbaa !12
  %918 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %881, <8 x float> %50, <8 x float> %841) #10
  %919 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %885, <8 x float> %50, <8 x float> %845) #10
  %920 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %889, <8 x float> %50, <8 x float> %849) #10
  %921 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %893, <8 x float> %50, <8 x float> %853) #10
  %922 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %897, <8 x float> %50, <8 x float> %857) #10
  %923 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %901, <8 x float> %50, <8 x float> %861) #10
  %924 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %905, <8 x float> %50, <8 x float> %865) #10
  %925 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %909, <8 x float> %50, <8 x float> %869) #10
  %926 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %913, <8 x float> %50, <8 x float> %873) #10
  %927 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %917, <8 x float> %50, <8 x float> %877) #10
  store <8 x float> %918, <8 x float>* %840, align 1, !tbaa !12
  store <8 x float> %919, <8 x float>* %844, align 1, !tbaa !12
  store <8 x float> %920, <8 x float>* %848, align 1, !tbaa !12
  store <8 x float> %921, <8 x float>* %852, align 1, !tbaa !12
  store <8 x float> %922, <8 x float>* %856, align 1, !tbaa !12
  store <8 x float> %923, <8 x float>* %860, align 1, !tbaa !12
  store <8 x float> %924, <8 x float>* %864, align 1, !tbaa !12
  store <8 x float> %925, <8 x float>* %868, align 1, !tbaa !12
  store <8 x float> %926, <8 x float>* %872, align 1, !tbaa !12
  store <8 x float> %927, <8 x float>* %876, align 1, !tbaa !12
  %928 = add nuw nsw i64 %797, 80
  %929 = icmp ult i64 %928, %644
  br i1 %929, label %796, label %790

930:                                              ; preds = %936
  br i1 %500, label %931, label %1070

931:                                              ; preds = %930
  %932 = trunc i64 %56 to i32
  %933 = mul nsw i32 %499, %932
  %934 = sext i32 %933 to i64
  %935 = zext i32 %499 to i64
  br label %1075

936:                                              ; preds = %791, %936
  %937 = phi i64 [ 0, %791 ], [ %1068, %936 ]
  %938 = getelementptr inbounds float, float* %5, i64 %937
  %939 = getelementptr inbounds float, float* %938, i64 8
  %940 = bitcast float* %939 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %940, i32 0, i32 1, i32 1)
  %941 = getelementptr inbounds float, float* %3, i64 %937
  %942 = getelementptr inbounds float, float* %941, i64 8
  %943 = bitcast float* %942 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %943, i32 0, i32 1, i32 1)
  %944 = getelementptr inbounds float, float* %938, i64 16
  %945 = bitcast float* %944 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %945, i32 0, i32 1, i32 1)
  %946 = getelementptr inbounds float, float* %941, i64 16
  %947 = bitcast float* %946 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %947, i32 0, i32 1, i32 1)
  %948 = getelementptr inbounds float, float* %938, i64 24
  %949 = bitcast float* %948 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %949, i32 0, i32 1, i32 1)
  %950 = getelementptr inbounds float, float* %941, i64 24
  %951 = bitcast float* %950 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %951, i32 0, i32 1, i32 1)
  %952 = getelementptr inbounds float, float* %938, i64 32
  %953 = bitcast float* %952 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %953, i32 0, i32 1, i32 1)
  %954 = getelementptr inbounds float, float* %941, i64 32
  %955 = bitcast float* %954 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %955, i32 0, i32 1, i32 1)
  %956 = getelementptr inbounds float, float* %938, i64 40
  %957 = bitcast float* %956 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %957, i32 0, i32 1, i32 1)
  %958 = getelementptr inbounds float, float* %941, i64 40
  %959 = bitcast float* %958 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %959, i32 0, i32 1, i32 1)
  %960 = getelementptr inbounds float, float* %938, i64 48
  %961 = bitcast float* %960 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %961, i32 0, i32 1, i32 1)
  %962 = getelementptr inbounds float, float* %941, i64 48
  %963 = bitcast float* %962 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %963, i32 0, i32 1, i32 1)
  %964 = getelementptr inbounds float, float* %938, i64 56
  %965 = bitcast float* %964 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %965, i32 0, i32 1, i32 1)
  %966 = getelementptr inbounds float, float* %941, i64 56
  %967 = bitcast float* %966 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %967, i32 0, i32 1, i32 1)
  %968 = getelementptr inbounds float, float* %938, i64 64
  %969 = bitcast float* %968 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %969, i32 0, i32 1, i32 1)
  %970 = getelementptr inbounds float, float* %941, i64 64
  %971 = bitcast float* %970 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %971, i32 0, i32 1, i32 1)
  %972 = getelementptr inbounds float, float* %938, i64 72
  %973 = bitcast float* %972 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %973, i32 0, i32 1, i32 1)
  %974 = getelementptr inbounds float, float* %941, i64 72
  %975 = bitcast float* %974 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %975, i32 0, i32 1, i32 1)
  %976 = getelementptr inbounds float, float* %938, i64 80
  %977 = bitcast float* %976 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %977, i32 0, i32 1, i32 1)
  %978 = getelementptr inbounds float, float* %941, i64 80
  %979 = bitcast float* %978 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %979, i32 0, i32 1, i32 1)
  %980 = bitcast float* %938 to <8 x float>*
  %981 = load <8 x float>, <8 x float>* %980, align 1, !tbaa !12
  %982 = or i64 %937, 8
  %983 = getelementptr inbounds float, float* %5, i64 %982
  %984 = bitcast float* %983 to <8 x float>*
  %985 = load <8 x float>, <8 x float>* %984, align 1, !tbaa !12
  %986 = add nuw nsw i64 %937, 16
  %987 = getelementptr inbounds float, float* %5, i64 %986
  %988 = bitcast float* %987 to <8 x float>*
  %989 = load <8 x float>, <8 x float>* %988, align 1, !tbaa !12
  %990 = add nuw nsw i64 %937, 24
  %991 = getelementptr inbounds float, float* %5, i64 %990
  %992 = bitcast float* %991 to <8 x float>*
  %993 = load <8 x float>, <8 x float>* %992, align 1, !tbaa !12
  %994 = add nuw nsw i64 %937, 32
  %995 = getelementptr inbounds float, float* %5, i64 %994
  %996 = bitcast float* %995 to <8 x float>*
  %997 = load <8 x float>, <8 x float>* %996, align 1, !tbaa !12
  %998 = add nuw nsw i64 %937, 40
  %999 = getelementptr inbounds float, float* %5, i64 %998
  %1000 = bitcast float* %999 to <8 x float>*
  %1001 = load <8 x float>, <8 x float>* %1000, align 1, !tbaa !12
  %1002 = add nuw nsw i64 %937, 48
  %1003 = getelementptr inbounds float, float* %5, i64 %1002
  %1004 = bitcast float* %1003 to <8 x float>*
  %1005 = load <8 x float>, <8 x float>* %1004, align 1, !tbaa !12
  %1006 = add nuw nsw i64 %937, 56
  %1007 = getelementptr inbounds float, float* %5, i64 %1006
  %1008 = bitcast float* %1007 to <8 x float>*
  %1009 = load <8 x float>, <8 x float>* %1008, align 1, !tbaa !12
  %1010 = add nuw nsw i64 %937, 64
  %1011 = getelementptr inbounds float, float* %5, i64 %1010
  %1012 = bitcast float* %1011 to <8 x float>*
  %1013 = load <8 x float>, <8 x float>* %1012, align 1, !tbaa !12
  %1014 = add nuw nsw i64 %937, 72
  %1015 = getelementptr inbounds float, float* %5, i64 %1014
  %1016 = bitcast float* %1015 to <8 x float>*
  %1017 = load <8 x float>, <8 x float>* %1016, align 1, !tbaa !12
  %1018 = add nsw i64 %937, %794
  %1019 = getelementptr inbounds float, float* %3, i64 %1018
  %1020 = bitcast float* %1019 to <8 x float>*
  %1021 = load <8 x float>, <8 x float>* %1020, align 1, !tbaa !12
  %1022 = add nsw i64 %1018, 8
  %1023 = getelementptr inbounds float, float* %3, i64 %1022
  %1024 = bitcast float* %1023 to <8 x float>*
  %1025 = load <8 x float>, <8 x float>* %1024, align 1, !tbaa !12
  %1026 = add nsw i64 %1018, 16
  %1027 = getelementptr inbounds float, float* %3, i64 %1026
  %1028 = bitcast float* %1027 to <8 x float>*
  %1029 = load <8 x float>, <8 x float>* %1028, align 1, !tbaa !12
  %1030 = add nsw i64 %1018, 24
  %1031 = getelementptr inbounds float, float* %3, i64 %1030
  %1032 = bitcast float* %1031 to <8 x float>*
  %1033 = load <8 x float>, <8 x float>* %1032, align 1, !tbaa !12
  %1034 = add nsw i64 %1018, 32
  %1035 = getelementptr inbounds float, float* %3, i64 %1034
  %1036 = bitcast float* %1035 to <8 x float>*
  %1037 = load <8 x float>, <8 x float>* %1036, align 1, !tbaa !12
  %1038 = add nsw i64 %1018, 40
  %1039 = getelementptr inbounds float, float* %3, i64 %1038
  %1040 = bitcast float* %1039 to <8 x float>*
  %1041 = load <8 x float>, <8 x float>* %1040, align 1, !tbaa !12
  %1042 = add nsw i64 %1018, 48
  %1043 = getelementptr inbounds float, float* %3, i64 %1042
  %1044 = bitcast float* %1043 to <8 x float>*
  %1045 = load <8 x float>, <8 x float>* %1044, align 1, !tbaa !12
  %1046 = add nsw i64 %1018, 56
  %1047 = getelementptr inbounds float, float* %3, i64 %1046
  %1048 = bitcast float* %1047 to <8 x float>*
  %1049 = load <8 x float>, <8 x float>* %1048, align 1, !tbaa !12
  %1050 = add nsw i64 %1018, 64
  %1051 = getelementptr inbounds float, float* %3, i64 %1050
  %1052 = bitcast float* %1051 to <8 x float>*
  %1053 = load <8 x float>, <8 x float>* %1052, align 1, !tbaa !12
  %1054 = add nsw i64 %1018, 72
  %1055 = getelementptr inbounds float, float* %3, i64 %1054
  %1056 = bitcast float* %1055 to <8 x float>*
  %1057 = load <8 x float>, <8 x float>* %1056, align 1, !tbaa !12
  %1058 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1021, <8 x float> %55, <8 x float> %981) #10
  %1059 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1025, <8 x float> %55, <8 x float> %985) #10
  %1060 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1029, <8 x float> %55, <8 x float> %989) #10
  %1061 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1033, <8 x float> %55, <8 x float> %993) #10
  %1062 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1037, <8 x float> %55, <8 x float> %997) #10
  %1063 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1041, <8 x float> %55, <8 x float> %1001) #10
  %1064 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1045, <8 x float> %55, <8 x float> %1005) #10
  %1065 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1049, <8 x float> %55, <8 x float> %1009) #10
  %1066 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1053, <8 x float> %55, <8 x float> %1013) #10
  %1067 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1057, <8 x float> %55, <8 x float> %1017) #10
  store <8 x float> %1058, <8 x float>* %980, align 1, !tbaa !12
  store <8 x float> %1059, <8 x float>* %984, align 1, !tbaa !12
  store <8 x float> %1060, <8 x float>* %988, align 1, !tbaa !12
  store <8 x float> %1061, <8 x float>* %992, align 1, !tbaa !12
  store <8 x float> %1062, <8 x float>* %996, align 1, !tbaa !12
  store <8 x float> %1063, <8 x float>* %1000, align 1, !tbaa !12
  store <8 x float> %1064, <8 x float>* %1004, align 1, !tbaa !12
  store <8 x float> %1065, <8 x float>* %1008, align 1, !tbaa !12
  store <8 x float> %1066, <8 x float>* %1012, align 1, !tbaa !12
  store <8 x float> %1067, <8 x float>* %1016, align 1, !tbaa !12
  %1068 = add nuw nsw i64 %937, 80
  %1069 = icmp ult i64 %1068, %795
  br i1 %1069, label %936, label %930

1070:                                             ; preds = %1075, %20, %498, %639, %790, %930
  %1071 = add nuw nsw i64 %21, 8
  %1072 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1073 = sext i32 %1072 to i64
  %1074 = icmp slt i64 %1071, %1073
  br i1 %1074, label %20, label %8

1075:                                             ; preds = %931, %1075
  %1076 = phi i64 [ 0, %931 ], [ %1207, %1075 ]
  %1077 = getelementptr inbounds float, float* %5, i64 %1076
  %1078 = getelementptr inbounds float, float* %1077, i64 8
  %1079 = bitcast float* %1078 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1079, i32 0, i32 1, i32 1)
  %1080 = getelementptr inbounds float, float* %3, i64 %1076
  %1081 = getelementptr inbounds float, float* %1080, i64 8
  %1082 = bitcast float* %1081 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1082, i32 0, i32 1, i32 1)
  %1083 = getelementptr inbounds float, float* %1077, i64 16
  %1084 = bitcast float* %1083 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1084, i32 0, i32 1, i32 1)
  %1085 = getelementptr inbounds float, float* %1080, i64 16
  %1086 = bitcast float* %1085 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1086, i32 0, i32 1, i32 1)
  %1087 = getelementptr inbounds float, float* %1077, i64 24
  %1088 = bitcast float* %1087 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1088, i32 0, i32 1, i32 1)
  %1089 = getelementptr inbounds float, float* %1080, i64 24
  %1090 = bitcast float* %1089 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1090, i32 0, i32 1, i32 1)
  %1091 = getelementptr inbounds float, float* %1077, i64 32
  %1092 = bitcast float* %1091 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1092, i32 0, i32 1, i32 1)
  %1093 = getelementptr inbounds float, float* %1080, i64 32
  %1094 = bitcast float* %1093 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1094, i32 0, i32 1, i32 1)
  %1095 = getelementptr inbounds float, float* %1077, i64 40
  %1096 = bitcast float* %1095 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1096, i32 0, i32 1, i32 1)
  %1097 = getelementptr inbounds float, float* %1080, i64 40
  %1098 = bitcast float* %1097 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1098, i32 0, i32 1, i32 1)
  %1099 = getelementptr inbounds float, float* %1077, i64 48
  %1100 = bitcast float* %1099 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1100, i32 0, i32 1, i32 1)
  %1101 = getelementptr inbounds float, float* %1080, i64 48
  %1102 = bitcast float* %1101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1102, i32 0, i32 1, i32 1)
  %1103 = getelementptr inbounds float, float* %1077, i64 56
  %1104 = bitcast float* %1103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1104, i32 0, i32 1, i32 1)
  %1105 = getelementptr inbounds float, float* %1080, i64 56
  %1106 = bitcast float* %1105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1106, i32 0, i32 1, i32 1)
  %1107 = getelementptr inbounds float, float* %1077, i64 64
  %1108 = bitcast float* %1107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1108, i32 0, i32 1, i32 1)
  %1109 = getelementptr inbounds float, float* %1080, i64 64
  %1110 = bitcast float* %1109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1110, i32 0, i32 1, i32 1)
  %1111 = getelementptr inbounds float, float* %1077, i64 72
  %1112 = bitcast float* %1111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1112, i32 0, i32 1, i32 1)
  %1113 = getelementptr inbounds float, float* %1080, i64 72
  %1114 = bitcast float* %1113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1114, i32 0, i32 1, i32 1)
  %1115 = getelementptr inbounds float, float* %1077, i64 80
  %1116 = bitcast float* %1115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1116, i32 0, i32 1, i32 1)
  %1117 = getelementptr inbounds float, float* %1080, i64 80
  %1118 = bitcast float* %1117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1118, i32 0, i32 1, i32 1)
  %1119 = bitcast float* %1077 to <8 x float>*
  %1120 = load <8 x float>, <8 x float>* %1119, align 1, !tbaa !12
  %1121 = or i64 %1076, 8
  %1122 = getelementptr inbounds float, float* %5, i64 %1121
  %1123 = bitcast float* %1122 to <8 x float>*
  %1124 = load <8 x float>, <8 x float>* %1123, align 1, !tbaa !12
  %1125 = add nuw nsw i64 %1076, 16
  %1126 = getelementptr inbounds float, float* %5, i64 %1125
  %1127 = bitcast float* %1126 to <8 x float>*
  %1128 = load <8 x float>, <8 x float>* %1127, align 1, !tbaa !12
  %1129 = add nuw nsw i64 %1076, 24
  %1130 = getelementptr inbounds float, float* %5, i64 %1129
  %1131 = bitcast float* %1130 to <8 x float>*
  %1132 = load <8 x float>, <8 x float>* %1131, align 1, !tbaa !12
  %1133 = add nuw nsw i64 %1076, 32
  %1134 = getelementptr inbounds float, float* %5, i64 %1133
  %1135 = bitcast float* %1134 to <8 x float>*
  %1136 = load <8 x float>, <8 x float>* %1135, align 1, !tbaa !12
  %1137 = add nuw nsw i64 %1076, 40
  %1138 = getelementptr inbounds float, float* %5, i64 %1137
  %1139 = bitcast float* %1138 to <8 x float>*
  %1140 = load <8 x float>, <8 x float>* %1139, align 1, !tbaa !12
  %1141 = add nuw nsw i64 %1076, 48
  %1142 = getelementptr inbounds float, float* %5, i64 %1141
  %1143 = bitcast float* %1142 to <8 x float>*
  %1144 = load <8 x float>, <8 x float>* %1143, align 1, !tbaa !12
  %1145 = add nuw nsw i64 %1076, 56
  %1146 = getelementptr inbounds float, float* %5, i64 %1145
  %1147 = bitcast float* %1146 to <8 x float>*
  %1148 = load <8 x float>, <8 x float>* %1147, align 1, !tbaa !12
  %1149 = add nuw nsw i64 %1076, 64
  %1150 = getelementptr inbounds float, float* %5, i64 %1149
  %1151 = bitcast float* %1150 to <8 x float>*
  %1152 = load <8 x float>, <8 x float>* %1151, align 1, !tbaa !12
  %1153 = add nuw nsw i64 %1076, 72
  %1154 = getelementptr inbounds float, float* %5, i64 %1153
  %1155 = bitcast float* %1154 to <8 x float>*
  %1156 = load <8 x float>, <8 x float>* %1155, align 1, !tbaa !12
  %1157 = add nsw i64 %1076, %934
  %1158 = getelementptr inbounds float, float* %3, i64 %1157
  %1159 = bitcast float* %1158 to <8 x float>*
  %1160 = load <8 x float>, <8 x float>* %1159, align 1, !tbaa !12
  %1161 = add nsw i64 %1157, 8
  %1162 = getelementptr inbounds float, float* %3, i64 %1161
  %1163 = bitcast float* %1162 to <8 x float>*
  %1164 = load <8 x float>, <8 x float>* %1163, align 1, !tbaa !12
  %1165 = add nsw i64 %1157, 16
  %1166 = getelementptr inbounds float, float* %3, i64 %1165
  %1167 = bitcast float* %1166 to <8 x float>*
  %1168 = load <8 x float>, <8 x float>* %1167, align 1, !tbaa !12
  %1169 = add nsw i64 %1157, 24
  %1170 = getelementptr inbounds float, float* %3, i64 %1169
  %1171 = bitcast float* %1170 to <8 x float>*
  %1172 = load <8 x float>, <8 x float>* %1171, align 1, !tbaa !12
  %1173 = add nsw i64 %1157, 32
  %1174 = getelementptr inbounds float, float* %3, i64 %1173
  %1175 = bitcast float* %1174 to <8 x float>*
  %1176 = load <8 x float>, <8 x float>* %1175, align 1, !tbaa !12
  %1177 = add nsw i64 %1157, 40
  %1178 = getelementptr inbounds float, float* %3, i64 %1177
  %1179 = bitcast float* %1178 to <8 x float>*
  %1180 = load <8 x float>, <8 x float>* %1179, align 1, !tbaa !12
  %1181 = add nsw i64 %1157, 48
  %1182 = getelementptr inbounds float, float* %3, i64 %1181
  %1183 = bitcast float* %1182 to <8 x float>*
  %1184 = load <8 x float>, <8 x float>* %1183, align 1, !tbaa !12
  %1185 = add nsw i64 %1157, 56
  %1186 = getelementptr inbounds float, float* %3, i64 %1185
  %1187 = bitcast float* %1186 to <8 x float>*
  %1188 = load <8 x float>, <8 x float>* %1187, align 1, !tbaa !12
  %1189 = add nsw i64 %1157, 64
  %1190 = getelementptr inbounds float, float* %3, i64 %1189
  %1191 = bitcast float* %1190 to <8 x float>*
  %1192 = load <8 x float>, <8 x float>* %1191, align 1, !tbaa !12
  %1193 = add nsw i64 %1157, 72
  %1194 = getelementptr inbounds float, float* %3, i64 %1193
  %1195 = bitcast float* %1194 to <8 x float>*
  %1196 = load <8 x float>, <8 x float>* %1195, align 1, !tbaa !12
  %1197 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1160, <8 x float> %60, <8 x float> %1120) #10
  %1198 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1164, <8 x float> %60, <8 x float> %1124) #10
  %1199 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1168, <8 x float> %60, <8 x float> %1128) #10
  %1200 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1172, <8 x float> %60, <8 x float> %1132) #10
  %1201 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1176, <8 x float> %60, <8 x float> %1136) #10
  %1202 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1180, <8 x float> %60, <8 x float> %1140) #10
  %1203 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1184, <8 x float> %60, <8 x float> %1144) #10
  %1204 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1188, <8 x float> %60, <8 x float> %1148) #10
  %1205 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1192, <8 x float> %60, <8 x float> %1152) #10
  %1206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1196, <8 x float> %60, <8 x float> %1156) #10
  store <8 x float> %1197, <8 x float>* %1119, align 1, !tbaa !12
  store <8 x float> %1198, <8 x float>* %1123, align 1, !tbaa !12
  store <8 x float> %1199, <8 x float>* %1127, align 1, !tbaa !12
  store <8 x float> %1200, <8 x float>* %1131, align 1, !tbaa !12
  store <8 x float> %1201, <8 x float>* %1135, align 1, !tbaa !12
  store <8 x float> %1202, <8 x float>* %1139, align 1, !tbaa !12
  store <8 x float> %1203, <8 x float>* %1143, align 1, !tbaa !12
  store <8 x float> %1204, <8 x float>* %1147, align 1, !tbaa !12
  store <8 x float> %1205, <8 x float>* %1151, align 1, !tbaa !12
  store <8 x float> %1206, <8 x float>* %1155, align 1, !tbaa !12
  %1207 = add nuw nsw i64 %1076, 80
  %1208 = icmp ult i64 %1207, %935
  br i1 %1208, label %1075, label %1070
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 168
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui10_uk8.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
