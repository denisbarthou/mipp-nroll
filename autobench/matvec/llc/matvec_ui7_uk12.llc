; ModuleID = 'codes/matvec_ui7_uk12.cpp'
source_filename = "codes/matvec_ui7_uk12.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui7_uk12.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 56
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 96
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1224, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1224
  %21 = phi i64 [ %1225, %1224 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = or i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = add nuw nsw i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = add nuw nsw i64 %21, 7
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = add nuw nsw i64 %21, 8
  %62 = getelementptr inbounds float, float* %4, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !18
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = add nuw nsw i64 %21, 9
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !18
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = add nuw nsw i64 %21, 10
  %72 = getelementptr inbounds float, float* %4, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !18
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = add nuw nsw i64 %21, 11
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !18
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %1224

83:                                               ; preds = %20
  %84 = zext i32 %81 to i64
  %85 = trunc i64 %21 to i32
  %86 = mul nsw i32 %81, %85
  br label %93

87:                                               ; preds = %93
  br i1 %82, label %88, label %499

88:                                               ; preds = %87
  %89 = trunc i64 %26 to i32
  %90 = mul nsw i32 %81, %89
  %91 = sext i32 %90 to i64
  %92 = zext i32 %81 to i64
  br label %202

93:                                               ; preds = %83, %93
  %94 = phi i64 [ 0, %83 ], [ %194, %93 ]
  %95 = getelementptr inbounds float, float* %5, i64 %94
  %96 = getelementptr inbounds float, float* %95, i64 8
  %97 = bitcast float* %96 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %97, i32 0, i32 1, i32 1)
  %98 = getelementptr inbounds float, float* %3, i64 %94
  %99 = getelementptr inbounds float, float* %98, i64 8
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %95, i64 16
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %98, i64 16
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %95, i64 24
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %98, i64 24
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %95, i64 32
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %98, i64 32
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = getelementptr inbounds float, float* %95, i64 40
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %98, i64 40
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %95, i64 48
  %118 = bitcast float* %117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %118, i32 0, i32 1, i32 1)
  %119 = getelementptr inbounds float, float* %98, i64 48
  %120 = bitcast float* %119 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %120, i32 0, i32 1, i32 1)
  %121 = getelementptr inbounds float, float* %95, i64 56
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %122, i32 0, i32 1, i32 1)
  %123 = getelementptr inbounds float, float* %98, i64 56
  %124 = bitcast float* %123 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %124, i32 0, i32 1, i32 1)
  %125 = bitcast float* %95 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 1, !tbaa !12
  %127 = add nuw nsw i64 %94, 8
  %128 = getelementptr inbounds float, float* %5, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !tbaa !12
  %131 = add nuw nsw i64 %94, 16
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = add nuw nsw i64 %94, 24
  %136 = getelementptr inbounds float, float* %5, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 1, !tbaa !12
  %139 = add nuw nsw i64 %94, 32
  %140 = getelementptr inbounds float, float* %5, i64 %139
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 1, !tbaa !12
  %143 = add nuw nsw i64 %94, 40
  %144 = getelementptr inbounds float, float* %5, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 1, !tbaa !12
  %147 = add nuw nsw i64 %94, 48
  %148 = getelementptr inbounds float, float* %5, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 1, !tbaa !12
  %151 = trunc i64 %94 to i32
  %152 = add nsw i32 %86, %151
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %3, i64 %153
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 1, !tbaa !12
  %157 = add nsw i32 %152, 8
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds float, float* %3, i64 %158
  %160 = bitcast float* %159 to <8 x float>*
  %161 = load <8 x float>, <8 x float>* %160, align 1, !tbaa !12
  %162 = add nsw i32 %152, 16
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %3, i64 %163
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 1, !tbaa !12
  %167 = add nsw i32 %152, 24
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %3, i64 %168
  %170 = bitcast float* %169 to <8 x float>*
  %171 = load <8 x float>, <8 x float>* %170, align 1, !tbaa !12
  %172 = add nsw i32 %152, 32
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %3, i64 %173
  %175 = bitcast float* %174 to <8 x float>*
  %176 = load <8 x float>, <8 x float>* %175, align 1, !tbaa !12
  %177 = add nsw i32 %152, 40
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds float, float* %3, i64 %178
  %180 = bitcast float* %179 to <8 x float>*
  %181 = load <8 x float>, <8 x float>* %180, align 1, !tbaa !12
  %182 = add nsw i32 %152, 48
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %3, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 1, !tbaa !12
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %156, <8 x float> %25, <8 x float> %126) #10
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %161, <8 x float> %25, <8 x float> %130) #10
  %189 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %166, <8 x float> %25, <8 x float> %134) #10
  %190 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %171, <8 x float> %25, <8 x float> %138) #10
  %191 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %25, <8 x float> %142) #10
  %192 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %181, <8 x float> %25, <8 x float> %146) #10
  %193 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %186, <8 x float> %25, <8 x float> %150) #10
  store <8 x float> %187, <8 x float>* %125, align 1, !tbaa !12
  store <8 x float> %188, <8 x float>* %129, align 1, !tbaa !12
  store <8 x float> %189, <8 x float>* %133, align 1, !tbaa !12
  store <8 x float> %190, <8 x float>* %137, align 1, !tbaa !12
  store <8 x float> %191, <8 x float>* %141, align 1, !tbaa !12
  store <8 x float> %192, <8 x float>* %145, align 1, !tbaa !12
  store <8 x float> %193, <8 x float>* %149, align 1, !tbaa !12
  %194 = add nuw nsw i64 %94, 56
  %195 = icmp ult i64 %194, %84
  br i1 %195, label %93, label %87

196:                                              ; preds = %202
  br i1 %82, label %197, label %499

197:                                              ; preds = %196
  %198 = trunc i64 %31 to i32
  %199 = mul nsw i32 %81, %198
  %200 = sext i32 %199 to i64
  %201 = zext i32 %81 to i64
  br label %303

202:                                              ; preds = %88, %202
  %203 = phi i64 [ 0, %88 ], [ %295, %202 ]
  %204 = getelementptr inbounds float, float* %5, i64 %203
  %205 = getelementptr inbounds float, float* %204, i64 8
  %206 = bitcast float* %205 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %206, i32 0, i32 1, i32 1)
  %207 = getelementptr inbounds float, float* %3, i64 %203
  %208 = getelementptr inbounds float, float* %207, i64 8
  %209 = bitcast float* %208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %209, i32 0, i32 1, i32 1)
  %210 = getelementptr inbounds float, float* %204, i64 16
  %211 = bitcast float* %210 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %211, i32 0, i32 1, i32 1)
  %212 = getelementptr inbounds float, float* %207, i64 16
  %213 = bitcast float* %212 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %213, i32 0, i32 1, i32 1)
  %214 = getelementptr inbounds float, float* %204, i64 24
  %215 = bitcast float* %214 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %215, i32 0, i32 1, i32 1)
  %216 = getelementptr inbounds float, float* %207, i64 24
  %217 = bitcast float* %216 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %217, i32 0, i32 1, i32 1)
  %218 = getelementptr inbounds float, float* %204, i64 32
  %219 = bitcast float* %218 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %219, i32 0, i32 1, i32 1)
  %220 = getelementptr inbounds float, float* %207, i64 32
  %221 = bitcast float* %220 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %221, i32 0, i32 1, i32 1)
  %222 = getelementptr inbounds float, float* %204, i64 40
  %223 = bitcast float* %222 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %223, i32 0, i32 1, i32 1)
  %224 = getelementptr inbounds float, float* %207, i64 40
  %225 = bitcast float* %224 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %225, i32 0, i32 1, i32 1)
  %226 = getelementptr inbounds float, float* %204, i64 48
  %227 = bitcast float* %226 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %227, i32 0, i32 1, i32 1)
  %228 = getelementptr inbounds float, float* %207, i64 48
  %229 = bitcast float* %228 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %229, i32 0, i32 1, i32 1)
  %230 = getelementptr inbounds float, float* %204, i64 56
  %231 = bitcast float* %230 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %231, i32 0, i32 1, i32 1)
  %232 = getelementptr inbounds float, float* %207, i64 56
  %233 = bitcast float* %232 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %233, i32 0, i32 1, i32 1)
  %234 = bitcast float* %204 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 1, !tbaa !12
  %236 = add nuw nsw i64 %203, 8
  %237 = getelementptr inbounds float, float* %5, i64 %236
  %238 = bitcast float* %237 to <8 x float>*
  %239 = load <8 x float>, <8 x float>* %238, align 1, !tbaa !12
  %240 = add nuw nsw i64 %203, 16
  %241 = getelementptr inbounds float, float* %5, i64 %240
  %242 = bitcast float* %241 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !tbaa !12
  %244 = add nuw nsw i64 %203, 24
  %245 = getelementptr inbounds float, float* %5, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  %247 = load <8 x float>, <8 x float>* %246, align 1, !tbaa !12
  %248 = add nuw nsw i64 %203, 32
  %249 = getelementptr inbounds float, float* %5, i64 %248
  %250 = bitcast float* %249 to <8 x float>*
  %251 = load <8 x float>, <8 x float>* %250, align 1, !tbaa !12
  %252 = add nuw nsw i64 %203, 40
  %253 = getelementptr inbounds float, float* %5, i64 %252
  %254 = bitcast float* %253 to <8 x float>*
  %255 = load <8 x float>, <8 x float>* %254, align 1, !tbaa !12
  %256 = add nuw nsw i64 %203, 48
  %257 = getelementptr inbounds float, float* %5, i64 %256
  %258 = bitcast float* %257 to <8 x float>*
  %259 = load <8 x float>, <8 x float>* %258, align 1, !tbaa !12
  %260 = add nsw i64 %203, %91
  %261 = getelementptr inbounds float, float* %3, i64 %260
  %262 = bitcast float* %261 to <8 x float>*
  %263 = load <8 x float>, <8 x float>* %262, align 1, !tbaa !12
  %264 = add nsw i64 %260, 8
  %265 = getelementptr inbounds float, float* %3, i64 %264
  %266 = bitcast float* %265 to <8 x float>*
  %267 = load <8 x float>, <8 x float>* %266, align 1, !tbaa !12
  %268 = add nsw i64 %260, 16
  %269 = getelementptr inbounds float, float* %3, i64 %268
  %270 = bitcast float* %269 to <8 x float>*
  %271 = load <8 x float>, <8 x float>* %270, align 1, !tbaa !12
  %272 = add nsw i64 %260, 24
  %273 = getelementptr inbounds float, float* %3, i64 %272
  %274 = bitcast float* %273 to <8 x float>*
  %275 = load <8 x float>, <8 x float>* %274, align 1, !tbaa !12
  %276 = add nsw i64 %260, 32
  %277 = getelementptr inbounds float, float* %3, i64 %276
  %278 = bitcast float* %277 to <8 x float>*
  %279 = load <8 x float>, <8 x float>* %278, align 1, !tbaa !12
  %280 = add nsw i64 %260, 40
  %281 = getelementptr inbounds float, float* %3, i64 %280
  %282 = bitcast float* %281 to <8 x float>*
  %283 = load <8 x float>, <8 x float>* %282, align 1, !tbaa !12
  %284 = add nsw i64 %260, 48
  %285 = getelementptr inbounds float, float* %3, i64 %284
  %286 = bitcast float* %285 to <8 x float>*
  %287 = load <8 x float>, <8 x float>* %286, align 1, !tbaa !12
  %288 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> %30, <8 x float> %235) #10
  %289 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %267, <8 x float> %30, <8 x float> %239) #10
  %290 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %271, <8 x float> %30, <8 x float> %243) #10
  %291 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %275, <8 x float> %30, <8 x float> %247) #10
  %292 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %279, <8 x float> %30, <8 x float> %251) #10
  %293 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %283, <8 x float> %30, <8 x float> %255) #10
  %294 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %287, <8 x float> %30, <8 x float> %259) #10
  store <8 x float> %288, <8 x float>* %234, align 1, !tbaa !12
  store <8 x float> %289, <8 x float>* %238, align 1, !tbaa !12
  store <8 x float> %290, <8 x float>* %242, align 1, !tbaa !12
  store <8 x float> %291, <8 x float>* %246, align 1, !tbaa !12
  store <8 x float> %292, <8 x float>* %250, align 1, !tbaa !12
  store <8 x float> %293, <8 x float>* %254, align 1, !tbaa !12
  store <8 x float> %294, <8 x float>* %258, align 1, !tbaa !12
  %295 = add nuw nsw i64 %203, 56
  %296 = icmp ult i64 %295, %92
  br i1 %296, label %202, label %196

297:                                              ; preds = %303
  br i1 %82, label %298, label %499

298:                                              ; preds = %297
  %299 = trunc i64 %36 to i32
  %300 = mul nsw i32 %81, %299
  %301 = sext i32 %300 to i64
  %302 = zext i32 %81 to i64
  br label %404

303:                                              ; preds = %197, %303
  %304 = phi i64 [ 0, %197 ], [ %396, %303 ]
  %305 = getelementptr inbounds float, float* %5, i64 %304
  %306 = getelementptr inbounds float, float* %305, i64 8
  %307 = bitcast float* %306 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %307, i32 0, i32 1, i32 1)
  %308 = getelementptr inbounds float, float* %3, i64 %304
  %309 = getelementptr inbounds float, float* %308, i64 8
  %310 = bitcast float* %309 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %310, i32 0, i32 1, i32 1)
  %311 = getelementptr inbounds float, float* %305, i64 16
  %312 = bitcast float* %311 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %312, i32 0, i32 1, i32 1)
  %313 = getelementptr inbounds float, float* %308, i64 16
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %314, i32 0, i32 1, i32 1)
  %315 = getelementptr inbounds float, float* %305, i64 24
  %316 = bitcast float* %315 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %316, i32 0, i32 1, i32 1)
  %317 = getelementptr inbounds float, float* %308, i64 24
  %318 = bitcast float* %317 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %318, i32 0, i32 1, i32 1)
  %319 = getelementptr inbounds float, float* %305, i64 32
  %320 = bitcast float* %319 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %320, i32 0, i32 1, i32 1)
  %321 = getelementptr inbounds float, float* %308, i64 32
  %322 = bitcast float* %321 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %322, i32 0, i32 1, i32 1)
  %323 = getelementptr inbounds float, float* %305, i64 40
  %324 = bitcast float* %323 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %324, i32 0, i32 1, i32 1)
  %325 = getelementptr inbounds float, float* %308, i64 40
  %326 = bitcast float* %325 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %326, i32 0, i32 1, i32 1)
  %327 = getelementptr inbounds float, float* %305, i64 48
  %328 = bitcast float* %327 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %328, i32 0, i32 1, i32 1)
  %329 = getelementptr inbounds float, float* %308, i64 48
  %330 = bitcast float* %329 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %330, i32 0, i32 1, i32 1)
  %331 = getelementptr inbounds float, float* %305, i64 56
  %332 = bitcast float* %331 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %332, i32 0, i32 1, i32 1)
  %333 = getelementptr inbounds float, float* %308, i64 56
  %334 = bitcast float* %333 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %334, i32 0, i32 1, i32 1)
  %335 = bitcast float* %305 to <8 x float>*
  %336 = load <8 x float>, <8 x float>* %335, align 1, !tbaa !12
  %337 = add nuw nsw i64 %304, 8
  %338 = getelementptr inbounds float, float* %5, i64 %337
  %339 = bitcast float* %338 to <8 x float>*
  %340 = load <8 x float>, <8 x float>* %339, align 1, !tbaa !12
  %341 = add nuw nsw i64 %304, 16
  %342 = getelementptr inbounds float, float* %5, i64 %341
  %343 = bitcast float* %342 to <8 x float>*
  %344 = load <8 x float>, <8 x float>* %343, align 1, !tbaa !12
  %345 = add nuw nsw i64 %304, 24
  %346 = getelementptr inbounds float, float* %5, i64 %345
  %347 = bitcast float* %346 to <8 x float>*
  %348 = load <8 x float>, <8 x float>* %347, align 1, !tbaa !12
  %349 = add nuw nsw i64 %304, 32
  %350 = getelementptr inbounds float, float* %5, i64 %349
  %351 = bitcast float* %350 to <8 x float>*
  %352 = load <8 x float>, <8 x float>* %351, align 1, !tbaa !12
  %353 = add nuw nsw i64 %304, 40
  %354 = getelementptr inbounds float, float* %5, i64 %353
  %355 = bitcast float* %354 to <8 x float>*
  %356 = load <8 x float>, <8 x float>* %355, align 1, !tbaa !12
  %357 = add nuw nsw i64 %304, 48
  %358 = getelementptr inbounds float, float* %5, i64 %357
  %359 = bitcast float* %358 to <8 x float>*
  %360 = load <8 x float>, <8 x float>* %359, align 1, !tbaa !12
  %361 = add nsw i64 %304, %200
  %362 = getelementptr inbounds float, float* %3, i64 %361
  %363 = bitcast float* %362 to <8 x float>*
  %364 = load <8 x float>, <8 x float>* %363, align 1, !tbaa !12
  %365 = add nsw i64 %361, 8
  %366 = getelementptr inbounds float, float* %3, i64 %365
  %367 = bitcast float* %366 to <8 x float>*
  %368 = load <8 x float>, <8 x float>* %367, align 1, !tbaa !12
  %369 = add nsw i64 %361, 16
  %370 = getelementptr inbounds float, float* %3, i64 %369
  %371 = bitcast float* %370 to <8 x float>*
  %372 = load <8 x float>, <8 x float>* %371, align 1, !tbaa !12
  %373 = add nsw i64 %361, 24
  %374 = getelementptr inbounds float, float* %3, i64 %373
  %375 = bitcast float* %374 to <8 x float>*
  %376 = load <8 x float>, <8 x float>* %375, align 1, !tbaa !12
  %377 = add nsw i64 %361, 32
  %378 = getelementptr inbounds float, float* %3, i64 %377
  %379 = bitcast float* %378 to <8 x float>*
  %380 = load <8 x float>, <8 x float>* %379, align 1, !tbaa !12
  %381 = add nsw i64 %361, 40
  %382 = getelementptr inbounds float, float* %3, i64 %381
  %383 = bitcast float* %382 to <8 x float>*
  %384 = load <8 x float>, <8 x float>* %383, align 1, !tbaa !12
  %385 = add nsw i64 %361, 48
  %386 = getelementptr inbounds float, float* %3, i64 %385
  %387 = bitcast float* %386 to <8 x float>*
  %388 = load <8 x float>, <8 x float>* %387, align 1, !tbaa !12
  %389 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %364, <8 x float> %35, <8 x float> %336) #10
  %390 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %368, <8 x float> %35, <8 x float> %340) #10
  %391 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %372, <8 x float> %35, <8 x float> %344) #10
  %392 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %376, <8 x float> %35, <8 x float> %348) #10
  %393 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %380, <8 x float> %35, <8 x float> %352) #10
  %394 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %384, <8 x float> %35, <8 x float> %356) #10
  %395 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %35, <8 x float> %360) #10
  store <8 x float> %389, <8 x float>* %335, align 1, !tbaa !12
  store <8 x float> %390, <8 x float>* %339, align 1, !tbaa !12
  store <8 x float> %391, <8 x float>* %343, align 1, !tbaa !12
  store <8 x float> %392, <8 x float>* %347, align 1, !tbaa !12
  store <8 x float> %393, <8 x float>* %351, align 1, !tbaa !12
  store <8 x float> %394, <8 x float>* %355, align 1, !tbaa !12
  store <8 x float> %395, <8 x float>* %359, align 1, !tbaa !12
  %396 = add nuw nsw i64 %304, 56
  %397 = icmp ult i64 %396, %201
  br i1 %397, label %303, label %297

398:                                              ; preds = %404
  br i1 %82, label %399, label %499

399:                                              ; preds = %398
  %400 = trunc i64 %41 to i32
  %401 = mul nsw i32 %81, %400
  %402 = sext i32 %401 to i64
  %403 = zext i32 %81 to i64
  br label %506

404:                                              ; preds = %298, %404
  %405 = phi i64 [ 0, %298 ], [ %497, %404 ]
  %406 = getelementptr inbounds float, float* %5, i64 %405
  %407 = getelementptr inbounds float, float* %406, i64 8
  %408 = bitcast float* %407 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %408, i32 0, i32 1, i32 1)
  %409 = getelementptr inbounds float, float* %3, i64 %405
  %410 = getelementptr inbounds float, float* %409, i64 8
  %411 = bitcast float* %410 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %411, i32 0, i32 1, i32 1)
  %412 = getelementptr inbounds float, float* %406, i64 16
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %413, i32 0, i32 1, i32 1)
  %414 = getelementptr inbounds float, float* %409, i64 16
  %415 = bitcast float* %414 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %415, i32 0, i32 1, i32 1)
  %416 = getelementptr inbounds float, float* %406, i64 24
  %417 = bitcast float* %416 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %417, i32 0, i32 1, i32 1)
  %418 = getelementptr inbounds float, float* %409, i64 24
  %419 = bitcast float* %418 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %419, i32 0, i32 1, i32 1)
  %420 = getelementptr inbounds float, float* %406, i64 32
  %421 = bitcast float* %420 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %421, i32 0, i32 1, i32 1)
  %422 = getelementptr inbounds float, float* %409, i64 32
  %423 = bitcast float* %422 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %423, i32 0, i32 1, i32 1)
  %424 = getelementptr inbounds float, float* %406, i64 40
  %425 = bitcast float* %424 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %425, i32 0, i32 1, i32 1)
  %426 = getelementptr inbounds float, float* %409, i64 40
  %427 = bitcast float* %426 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %427, i32 0, i32 1, i32 1)
  %428 = getelementptr inbounds float, float* %406, i64 48
  %429 = bitcast float* %428 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %429, i32 0, i32 1, i32 1)
  %430 = getelementptr inbounds float, float* %409, i64 48
  %431 = bitcast float* %430 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %431, i32 0, i32 1, i32 1)
  %432 = getelementptr inbounds float, float* %406, i64 56
  %433 = bitcast float* %432 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %433, i32 0, i32 1, i32 1)
  %434 = getelementptr inbounds float, float* %409, i64 56
  %435 = bitcast float* %434 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %435, i32 0, i32 1, i32 1)
  %436 = bitcast float* %406 to <8 x float>*
  %437 = load <8 x float>, <8 x float>* %436, align 1, !tbaa !12
  %438 = add nuw nsw i64 %405, 8
  %439 = getelementptr inbounds float, float* %5, i64 %438
  %440 = bitcast float* %439 to <8 x float>*
  %441 = load <8 x float>, <8 x float>* %440, align 1, !tbaa !12
  %442 = add nuw nsw i64 %405, 16
  %443 = getelementptr inbounds float, float* %5, i64 %442
  %444 = bitcast float* %443 to <8 x float>*
  %445 = load <8 x float>, <8 x float>* %444, align 1, !tbaa !12
  %446 = add nuw nsw i64 %405, 24
  %447 = getelementptr inbounds float, float* %5, i64 %446
  %448 = bitcast float* %447 to <8 x float>*
  %449 = load <8 x float>, <8 x float>* %448, align 1, !tbaa !12
  %450 = add nuw nsw i64 %405, 32
  %451 = getelementptr inbounds float, float* %5, i64 %450
  %452 = bitcast float* %451 to <8 x float>*
  %453 = load <8 x float>, <8 x float>* %452, align 1, !tbaa !12
  %454 = add nuw nsw i64 %405, 40
  %455 = getelementptr inbounds float, float* %5, i64 %454
  %456 = bitcast float* %455 to <8 x float>*
  %457 = load <8 x float>, <8 x float>* %456, align 1, !tbaa !12
  %458 = add nuw nsw i64 %405, 48
  %459 = getelementptr inbounds float, float* %5, i64 %458
  %460 = bitcast float* %459 to <8 x float>*
  %461 = load <8 x float>, <8 x float>* %460, align 1, !tbaa !12
  %462 = add nsw i64 %405, %301
  %463 = getelementptr inbounds float, float* %3, i64 %462
  %464 = bitcast float* %463 to <8 x float>*
  %465 = load <8 x float>, <8 x float>* %464, align 1, !tbaa !12
  %466 = add nsw i64 %462, 8
  %467 = getelementptr inbounds float, float* %3, i64 %466
  %468 = bitcast float* %467 to <8 x float>*
  %469 = load <8 x float>, <8 x float>* %468, align 1, !tbaa !12
  %470 = add nsw i64 %462, 16
  %471 = getelementptr inbounds float, float* %3, i64 %470
  %472 = bitcast float* %471 to <8 x float>*
  %473 = load <8 x float>, <8 x float>* %472, align 1, !tbaa !12
  %474 = add nsw i64 %462, 24
  %475 = getelementptr inbounds float, float* %3, i64 %474
  %476 = bitcast float* %475 to <8 x float>*
  %477 = load <8 x float>, <8 x float>* %476, align 1, !tbaa !12
  %478 = add nsw i64 %462, 32
  %479 = getelementptr inbounds float, float* %3, i64 %478
  %480 = bitcast float* %479 to <8 x float>*
  %481 = load <8 x float>, <8 x float>* %480, align 1, !tbaa !12
  %482 = add nsw i64 %462, 40
  %483 = getelementptr inbounds float, float* %3, i64 %482
  %484 = bitcast float* %483 to <8 x float>*
  %485 = load <8 x float>, <8 x float>* %484, align 1, !tbaa !12
  %486 = add nsw i64 %462, 48
  %487 = getelementptr inbounds float, float* %3, i64 %486
  %488 = bitcast float* %487 to <8 x float>*
  %489 = load <8 x float>, <8 x float>* %488, align 1, !tbaa !12
  %490 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %465, <8 x float> %40, <8 x float> %437) #10
  %491 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %469, <8 x float> %40, <8 x float> %441) #10
  %492 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %473, <8 x float> %40, <8 x float> %445) #10
  %493 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %477, <8 x float> %40, <8 x float> %449) #10
  %494 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %481, <8 x float> %40, <8 x float> %453) #10
  %495 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %485, <8 x float> %40, <8 x float> %457) #10
  %496 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %489, <8 x float> %40, <8 x float> %461) #10
  store <8 x float> %490, <8 x float>* %436, align 1, !tbaa !12
  store <8 x float> %491, <8 x float>* %440, align 1, !tbaa !12
  store <8 x float> %492, <8 x float>* %444, align 1, !tbaa !12
  store <8 x float> %493, <8 x float>* %448, align 1, !tbaa !12
  store <8 x float> %494, <8 x float>* %452, align 1, !tbaa !12
  store <8 x float> %495, <8 x float>* %456, align 1, !tbaa !12
  store <8 x float> %496, <8 x float>* %460, align 1, !tbaa !12
  %497 = add nuw nsw i64 %405, 56
  %498 = icmp ult i64 %497, %302
  br i1 %498, label %404, label %398

499:                                              ; preds = %506, %87, %196, %297, %398
  %500 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %501 = icmp sgt i32 %500, 0
  br i1 %501, label %502, label %1224

502:                                              ; preds = %499
  %503 = zext i32 %500 to i64
  %504 = trunc i64 %46 to i32
  %505 = mul nsw i32 %500, %504
  br label %607

506:                                              ; preds = %399, %506
  %507 = phi i64 [ 0, %399 ], [ %599, %506 ]
  %508 = getelementptr inbounds float, float* %5, i64 %507
  %509 = getelementptr inbounds float, float* %508, i64 8
  %510 = bitcast float* %509 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %510, i32 0, i32 1, i32 1)
  %511 = getelementptr inbounds float, float* %3, i64 %507
  %512 = getelementptr inbounds float, float* %511, i64 8
  %513 = bitcast float* %512 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %513, i32 0, i32 1, i32 1)
  %514 = getelementptr inbounds float, float* %508, i64 16
  %515 = bitcast float* %514 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %515, i32 0, i32 1, i32 1)
  %516 = getelementptr inbounds float, float* %511, i64 16
  %517 = bitcast float* %516 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %517, i32 0, i32 1, i32 1)
  %518 = getelementptr inbounds float, float* %508, i64 24
  %519 = bitcast float* %518 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %519, i32 0, i32 1, i32 1)
  %520 = getelementptr inbounds float, float* %511, i64 24
  %521 = bitcast float* %520 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %521, i32 0, i32 1, i32 1)
  %522 = getelementptr inbounds float, float* %508, i64 32
  %523 = bitcast float* %522 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %523, i32 0, i32 1, i32 1)
  %524 = getelementptr inbounds float, float* %511, i64 32
  %525 = bitcast float* %524 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %525, i32 0, i32 1, i32 1)
  %526 = getelementptr inbounds float, float* %508, i64 40
  %527 = bitcast float* %526 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %527, i32 0, i32 1, i32 1)
  %528 = getelementptr inbounds float, float* %511, i64 40
  %529 = bitcast float* %528 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %529, i32 0, i32 1, i32 1)
  %530 = getelementptr inbounds float, float* %508, i64 48
  %531 = bitcast float* %530 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %531, i32 0, i32 1, i32 1)
  %532 = getelementptr inbounds float, float* %511, i64 48
  %533 = bitcast float* %532 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %533, i32 0, i32 1, i32 1)
  %534 = getelementptr inbounds float, float* %508, i64 56
  %535 = bitcast float* %534 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %535, i32 0, i32 1, i32 1)
  %536 = getelementptr inbounds float, float* %511, i64 56
  %537 = bitcast float* %536 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %537, i32 0, i32 1, i32 1)
  %538 = bitcast float* %508 to <8 x float>*
  %539 = load <8 x float>, <8 x float>* %538, align 1, !tbaa !12
  %540 = add nuw nsw i64 %507, 8
  %541 = getelementptr inbounds float, float* %5, i64 %540
  %542 = bitcast float* %541 to <8 x float>*
  %543 = load <8 x float>, <8 x float>* %542, align 1, !tbaa !12
  %544 = add nuw nsw i64 %507, 16
  %545 = getelementptr inbounds float, float* %5, i64 %544
  %546 = bitcast float* %545 to <8 x float>*
  %547 = load <8 x float>, <8 x float>* %546, align 1, !tbaa !12
  %548 = add nuw nsw i64 %507, 24
  %549 = getelementptr inbounds float, float* %5, i64 %548
  %550 = bitcast float* %549 to <8 x float>*
  %551 = load <8 x float>, <8 x float>* %550, align 1, !tbaa !12
  %552 = add nuw nsw i64 %507, 32
  %553 = getelementptr inbounds float, float* %5, i64 %552
  %554 = bitcast float* %553 to <8 x float>*
  %555 = load <8 x float>, <8 x float>* %554, align 1, !tbaa !12
  %556 = add nuw nsw i64 %507, 40
  %557 = getelementptr inbounds float, float* %5, i64 %556
  %558 = bitcast float* %557 to <8 x float>*
  %559 = load <8 x float>, <8 x float>* %558, align 1, !tbaa !12
  %560 = add nuw nsw i64 %507, 48
  %561 = getelementptr inbounds float, float* %5, i64 %560
  %562 = bitcast float* %561 to <8 x float>*
  %563 = load <8 x float>, <8 x float>* %562, align 1, !tbaa !12
  %564 = add nsw i64 %507, %402
  %565 = getelementptr inbounds float, float* %3, i64 %564
  %566 = bitcast float* %565 to <8 x float>*
  %567 = load <8 x float>, <8 x float>* %566, align 1, !tbaa !12
  %568 = add nsw i64 %564, 8
  %569 = getelementptr inbounds float, float* %3, i64 %568
  %570 = bitcast float* %569 to <8 x float>*
  %571 = load <8 x float>, <8 x float>* %570, align 1, !tbaa !12
  %572 = add nsw i64 %564, 16
  %573 = getelementptr inbounds float, float* %3, i64 %572
  %574 = bitcast float* %573 to <8 x float>*
  %575 = load <8 x float>, <8 x float>* %574, align 1, !tbaa !12
  %576 = add nsw i64 %564, 24
  %577 = getelementptr inbounds float, float* %3, i64 %576
  %578 = bitcast float* %577 to <8 x float>*
  %579 = load <8 x float>, <8 x float>* %578, align 1, !tbaa !12
  %580 = add nsw i64 %564, 32
  %581 = getelementptr inbounds float, float* %3, i64 %580
  %582 = bitcast float* %581 to <8 x float>*
  %583 = load <8 x float>, <8 x float>* %582, align 1, !tbaa !12
  %584 = add nsw i64 %564, 40
  %585 = getelementptr inbounds float, float* %3, i64 %584
  %586 = bitcast float* %585 to <8 x float>*
  %587 = load <8 x float>, <8 x float>* %586, align 1, !tbaa !12
  %588 = add nsw i64 %564, 48
  %589 = getelementptr inbounds float, float* %3, i64 %588
  %590 = bitcast float* %589 to <8 x float>*
  %591 = load <8 x float>, <8 x float>* %590, align 1, !tbaa !12
  %592 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %567, <8 x float> %45, <8 x float> %539) #10
  %593 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %571, <8 x float> %45, <8 x float> %543) #10
  %594 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %575, <8 x float> %45, <8 x float> %547) #10
  %595 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %579, <8 x float> %45, <8 x float> %551) #10
  %596 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %583, <8 x float> %45, <8 x float> %555) #10
  %597 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %587, <8 x float> %45, <8 x float> %559) #10
  %598 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %591, <8 x float> %45, <8 x float> %563) #10
  store <8 x float> %592, <8 x float>* %538, align 1, !tbaa !12
  store <8 x float> %593, <8 x float>* %542, align 1, !tbaa !12
  store <8 x float> %594, <8 x float>* %546, align 1, !tbaa !12
  store <8 x float> %595, <8 x float>* %550, align 1, !tbaa !12
  store <8 x float> %596, <8 x float>* %554, align 1, !tbaa !12
  store <8 x float> %597, <8 x float>* %558, align 1, !tbaa !12
  store <8 x float> %598, <8 x float>* %562, align 1, !tbaa !12
  %599 = add nuw nsw i64 %507, 56
  %600 = icmp ult i64 %599, %403
  br i1 %600, label %506, label %499

601:                                              ; preds = %607
  br i1 %501, label %602, label %1013

602:                                              ; preds = %601
  %603 = trunc i64 %51 to i32
  %604 = mul nsw i32 %500, %603
  %605 = sext i32 %604 to i64
  %606 = zext i32 %500 to i64
  br label %716

607:                                              ; preds = %502, %607
  %608 = phi i64 [ 0, %502 ], [ %708, %607 ]
  %609 = getelementptr inbounds float, float* %5, i64 %608
  %610 = getelementptr inbounds float, float* %609, i64 8
  %611 = bitcast float* %610 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %611, i32 0, i32 1, i32 1)
  %612 = getelementptr inbounds float, float* %3, i64 %608
  %613 = getelementptr inbounds float, float* %612, i64 8
  %614 = bitcast float* %613 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %614, i32 0, i32 1, i32 1)
  %615 = getelementptr inbounds float, float* %609, i64 16
  %616 = bitcast float* %615 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %616, i32 0, i32 1, i32 1)
  %617 = getelementptr inbounds float, float* %612, i64 16
  %618 = bitcast float* %617 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %618, i32 0, i32 1, i32 1)
  %619 = getelementptr inbounds float, float* %609, i64 24
  %620 = bitcast float* %619 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %620, i32 0, i32 1, i32 1)
  %621 = getelementptr inbounds float, float* %612, i64 24
  %622 = bitcast float* %621 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %622, i32 0, i32 1, i32 1)
  %623 = getelementptr inbounds float, float* %609, i64 32
  %624 = bitcast float* %623 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %624, i32 0, i32 1, i32 1)
  %625 = getelementptr inbounds float, float* %612, i64 32
  %626 = bitcast float* %625 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %626, i32 0, i32 1, i32 1)
  %627 = getelementptr inbounds float, float* %609, i64 40
  %628 = bitcast float* %627 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %628, i32 0, i32 1, i32 1)
  %629 = getelementptr inbounds float, float* %612, i64 40
  %630 = bitcast float* %629 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %630, i32 0, i32 1, i32 1)
  %631 = getelementptr inbounds float, float* %609, i64 48
  %632 = bitcast float* %631 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %632, i32 0, i32 1, i32 1)
  %633 = getelementptr inbounds float, float* %612, i64 48
  %634 = bitcast float* %633 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %634, i32 0, i32 1, i32 1)
  %635 = getelementptr inbounds float, float* %609, i64 56
  %636 = bitcast float* %635 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %636, i32 0, i32 1, i32 1)
  %637 = getelementptr inbounds float, float* %612, i64 56
  %638 = bitcast float* %637 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %638, i32 0, i32 1, i32 1)
  %639 = bitcast float* %609 to <8 x float>*
  %640 = load <8 x float>, <8 x float>* %639, align 1, !tbaa !12
  %641 = add nuw nsw i64 %608, 8
  %642 = getelementptr inbounds float, float* %5, i64 %641
  %643 = bitcast float* %642 to <8 x float>*
  %644 = load <8 x float>, <8 x float>* %643, align 1, !tbaa !12
  %645 = add nuw nsw i64 %608, 16
  %646 = getelementptr inbounds float, float* %5, i64 %645
  %647 = bitcast float* %646 to <8 x float>*
  %648 = load <8 x float>, <8 x float>* %647, align 1, !tbaa !12
  %649 = add nuw nsw i64 %608, 24
  %650 = getelementptr inbounds float, float* %5, i64 %649
  %651 = bitcast float* %650 to <8 x float>*
  %652 = load <8 x float>, <8 x float>* %651, align 1, !tbaa !12
  %653 = add nuw nsw i64 %608, 32
  %654 = getelementptr inbounds float, float* %5, i64 %653
  %655 = bitcast float* %654 to <8 x float>*
  %656 = load <8 x float>, <8 x float>* %655, align 1, !tbaa !12
  %657 = add nuw nsw i64 %608, 40
  %658 = getelementptr inbounds float, float* %5, i64 %657
  %659 = bitcast float* %658 to <8 x float>*
  %660 = load <8 x float>, <8 x float>* %659, align 1, !tbaa !12
  %661 = add nuw nsw i64 %608, 48
  %662 = getelementptr inbounds float, float* %5, i64 %661
  %663 = bitcast float* %662 to <8 x float>*
  %664 = load <8 x float>, <8 x float>* %663, align 1, !tbaa !12
  %665 = trunc i64 %608 to i32
  %666 = add nsw i32 %505, %665
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds float, float* %3, i64 %667
  %669 = bitcast float* %668 to <8 x float>*
  %670 = load <8 x float>, <8 x float>* %669, align 1, !tbaa !12
  %671 = add nsw i32 %666, 8
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds float, float* %3, i64 %672
  %674 = bitcast float* %673 to <8 x float>*
  %675 = load <8 x float>, <8 x float>* %674, align 1, !tbaa !12
  %676 = add nsw i32 %666, 16
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds float, float* %3, i64 %677
  %679 = bitcast float* %678 to <8 x float>*
  %680 = load <8 x float>, <8 x float>* %679, align 1, !tbaa !12
  %681 = add nsw i32 %666, 24
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds float, float* %3, i64 %682
  %684 = bitcast float* %683 to <8 x float>*
  %685 = load <8 x float>, <8 x float>* %684, align 1, !tbaa !12
  %686 = add nsw i32 %666, 32
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds float, float* %3, i64 %687
  %689 = bitcast float* %688 to <8 x float>*
  %690 = load <8 x float>, <8 x float>* %689, align 1, !tbaa !12
  %691 = add nsw i32 %666, 40
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds float, float* %3, i64 %692
  %694 = bitcast float* %693 to <8 x float>*
  %695 = load <8 x float>, <8 x float>* %694, align 1, !tbaa !12
  %696 = add nsw i32 %666, 48
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds float, float* %3, i64 %697
  %699 = bitcast float* %698 to <8 x float>*
  %700 = load <8 x float>, <8 x float>* %699, align 1, !tbaa !12
  %701 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %670, <8 x float> %50, <8 x float> %640) #10
  %702 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %675, <8 x float> %50, <8 x float> %644) #10
  %703 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %680, <8 x float> %50, <8 x float> %648) #10
  %704 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %685, <8 x float> %50, <8 x float> %652) #10
  %705 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %690, <8 x float> %50, <8 x float> %656) #10
  %706 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %695, <8 x float> %50, <8 x float> %660) #10
  %707 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %700, <8 x float> %50, <8 x float> %664) #10
  store <8 x float> %701, <8 x float>* %639, align 1, !tbaa !12
  store <8 x float> %702, <8 x float>* %643, align 1, !tbaa !12
  store <8 x float> %703, <8 x float>* %647, align 1, !tbaa !12
  store <8 x float> %704, <8 x float>* %651, align 1, !tbaa !12
  store <8 x float> %705, <8 x float>* %655, align 1, !tbaa !12
  store <8 x float> %706, <8 x float>* %659, align 1, !tbaa !12
  store <8 x float> %707, <8 x float>* %663, align 1, !tbaa !12
  %708 = add nuw nsw i64 %608, 56
  %709 = icmp ult i64 %708, %503
  br i1 %709, label %607, label %601

710:                                              ; preds = %716
  br i1 %501, label %711, label %1013

711:                                              ; preds = %710
  %712 = trunc i64 %56 to i32
  %713 = mul nsw i32 %500, %712
  %714 = sext i32 %713 to i64
  %715 = zext i32 %500 to i64
  br label %817

716:                                              ; preds = %602, %716
  %717 = phi i64 [ 0, %602 ], [ %809, %716 ]
  %718 = getelementptr inbounds float, float* %5, i64 %717
  %719 = getelementptr inbounds float, float* %718, i64 8
  %720 = bitcast float* %719 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %720, i32 0, i32 1, i32 1)
  %721 = getelementptr inbounds float, float* %3, i64 %717
  %722 = getelementptr inbounds float, float* %721, i64 8
  %723 = bitcast float* %722 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %723, i32 0, i32 1, i32 1)
  %724 = getelementptr inbounds float, float* %718, i64 16
  %725 = bitcast float* %724 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %725, i32 0, i32 1, i32 1)
  %726 = getelementptr inbounds float, float* %721, i64 16
  %727 = bitcast float* %726 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %727, i32 0, i32 1, i32 1)
  %728 = getelementptr inbounds float, float* %718, i64 24
  %729 = bitcast float* %728 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %729, i32 0, i32 1, i32 1)
  %730 = getelementptr inbounds float, float* %721, i64 24
  %731 = bitcast float* %730 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %731, i32 0, i32 1, i32 1)
  %732 = getelementptr inbounds float, float* %718, i64 32
  %733 = bitcast float* %732 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %733, i32 0, i32 1, i32 1)
  %734 = getelementptr inbounds float, float* %721, i64 32
  %735 = bitcast float* %734 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %735, i32 0, i32 1, i32 1)
  %736 = getelementptr inbounds float, float* %718, i64 40
  %737 = bitcast float* %736 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %737, i32 0, i32 1, i32 1)
  %738 = getelementptr inbounds float, float* %721, i64 40
  %739 = bitcast float* %738 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %739, i32 0, i32 1, i32 1)
  %740 = getelementptr inbounds float, float* %718, i64 48
  %741 = bitcast float* %740 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %741, i32 0, i32 1, i32 1)
  %742 = getelementptr inbounds float, float* %721, i64 48
  %743 = bitcast float* %742 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %743, i32 0, i32 1, i32 1)
  %744 = getelementptr inbounds float, float* %718, i64 56
  %745 = bitcast float* %744 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %745, i32 0, i32 1, i32 1)
  %746 = getelementptr inbounds float, float* %721, i64 56
  %747 = bitcast float* %746 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %747, i32 0, i32 1, i32 1)
  %748 = bitcast float* %718 to <8 x float>*
  %749 = load <8 x float>, <8 x float>* %748, align 1, !tbaa !12
  %750 = add nuw nsw i64 %717, 8
  %751 = getelementptr inbounds float, float* %5, i64 %750
  %752 = bitcast float* %751 to <8 x float>*
  %753 = load <8 x float>, <8 x float>* %752, align 1, !tbaa !12
  %754 = add nuw nsw i64 %717, 16
  %755 = getelementptr inbounds float, float* %5, i64 %754
  %756 = bitcast float* %755 to <8 x float>*
  %757 = load <8 x float>, <8 x float>* %756, align 1, !tbaa !12
  %758 = add nuw nsw i64 %717, 24
  %759 = getelementptr inbounds float, float* %5, i64 %758
  %760 = bitcast float* %759 to <8 x float>*
  %761 = load <8 x float>, <8 x float>* %760, align 1, !tbaa !12
  %762 = add nuw nsw i64 %717, 32
  %763 = getelementptr inbounds float, float* %5, i64 %762
  %764 = bitcast float* %763 to <8 x float>*
  %765 = load <8 x float>, <8 x float>* %764, align 1, !tbaa !12
  %766 = add nuw nsw i64 %717, 40
  %767 = getelementptr inbounds float, float* %5, i64 %766
  %768 = bitcast float* %767 to <8 x float>*
  %769 = load <8 x float>, <8 x float>* %768, align 1, !tbaa !12
  %770 = add nuw nsw i64 %717, 48
  %771 = getelementptr inbounds float, float* %5, i64 %770
  %772 = bitcast float* %771 to <8 x float>*
  %773 = load <8 x float>, <8 x float>* %772, align 1, !tbaa !12
  %774 = add nsw i64 %717, %605
  %775 = getelementptr inbounds float, float* %3, i64 %774
  %776 = bitcast float* %775 to <8 x float>*
  %777 = load <8 x float>, <8 x float>* %776, align 1, !tbaa !12
  %778 = add nsw i64 %774, 8
  %779 = getelementptr inbounds float, float* %3, i64 %778
  %780 = bitcast float* %779 to <8 x float>*
  %781 = load <8 x float>, <8 x float>* %780, align 1, !tbaa !12
  %782 = add nsw i64 %774, 16
  %783 = getelementptr inbounds float, float* %3, i64 %782
  %784 = bitcast float* %783 to <8 x float>*
  %785 = load <8 x float>, <8 x float>* %784, align 1, !tbaa !12
  %786 = add nsw i64 %774, 24
  %787 = getelementptr inbounds float, float* %3, i64 %786
  %788 = bitcast float* %787 to <8 x float>*
  %789 = load <8 x float>, <8 x float>* %788, align 1, !tbaa !12
  %790 = add nsw i64 %774, 32
  %791 = getelementptr inbounds float, float* %3, i64 %790
  %792 = bitcast float* %791 to <8 x float>*
  %793 = load <8 x float>, <8 x float>* %792, align 1, !tbaa !12
  %794 = add nsw i64 %774, 40
  %795 = getelementptr inbounds float, float* %3, i64 %794
  %796 = bitcast float* %795 to <8 x float>*
  %797 = load <8 x float>, <8 x float>* %796, align 1, !tbaa !12
  %798 = add nsw i64 %774, 48
  %799 = getelementptr inbounds float, float* %3, i64 %798
  %800 = bitcast float* %799 to <8 x float>*
  %801 = load <8 x float>, <8 x float>* %800, align 1, !tbaa !12
  %802 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %777, <8 x float> %55, <8 x float> %749) #10
  %803 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %781, <8 x float> %55, <8 x float> %753) #10
  %804 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %785, <8 x float> %55, <8 x float> %757) #10
  %805 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %789, <8 x float> %55, <8 x float> %761) #10
  %806 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %793, <8 x float> %55, <8 x float> %765) #10
  %807 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %797, <8 x float> %55, <8 x float> %769) #10
  %808 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %801, <8 x float> %55, <8 x float> %773) #10
  store <8 x float> %802, <8 x float>* %748, align 1, !tbaa !12
  store <8 x float> %803, <8 x float>* %752, align 1, !tbaa !12
  store <8 x float> %804, <8 x float>* %756, align 1, !tbaa !12
  store <8 x float> %805, <8 x float>* %760, align 1, !tbaa !12
  store <8 x float> %806, <8 x float>* %764, align 1, !tbaa !12
  store <8 x float> %807, <8 x float>* %768, align 1, !tbaa !12
  store <8 x float> %808, <8 x float>* %772, align 1, !tbaa !12
  %809 = add nuw nsw i64 %717, 56
  %810 = icmp ult i64 %809, %606
  br i1 %810, label %716, label %710

811:                                              ; preds = %817
  br i1 %501, label %812, label %1013

812:                                              ; preds = %811
  %813 = trunc i64 %61 to i32
  %814 = mul nsw i32 %500, %813
  %815 = sext i32 %814 to i64
  %816 = zext i32 %500 to i64
  br label %918

817:                                              ; preds = %711, %817
  %818 = phi i64 [ 0, %711 ], [ %910, %817 ]
  %819 = getelementptr inbounds float, float* %5, i64 %818
  %820 = getelementptr inbounds float, float* %819, i64 8
  %821 = bitcast float* %820 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %821, i32 0, i32 1, i32 1)
  %822 = getelementptr inbounds float, float* %3, i64 %818
  %823 = getelementptr inbounds float, float* %822, i64 8
  %824 = bitcast float* %823 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %824, i32 0, i32 1, i32 1)
  %825 = getelementptr inbounds float, float* %819, i64 16
  %826 = bitcast float* %825 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %826, i32 0, i32 1, i32 1)
  %827 = getelementptr inbounds float, float* %822, i64 16
  %828 = bitcast float* %827 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %828, i32 0, i32 1, i32 1)
  %829 = getelementptr inbounds float, float* %819, i64 24
  %830 = bitcast float* %829 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %830, i32 0, i32 1, i32 1)
  %831 = getelementptr inbounds float, float* %822, i64 24
  %832 = bitcast float* %831 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %832, i32 0, i32 1, i32 1)
  %833 = getelementptr inbounds float, float* %819, i64 32
  %834 = bitcast float* %833 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %834, i32 0, i32 1, i32 1)
  %835 = getelementptr inbounds float, float* %822, i64 32
  %836 = bitcast float* %835 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %836, i32 0, i32 1, i32 1)
  %837 = getelementptr inbounds float, float* %819, i64 40
  %838 = bitcast float* %837 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %838, i32 0, i32 1, i32 1)
  %839 = getelementptr inbounds float, float* %822, i64 40
  %840 = bitcast float* %839 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %840, i32 0, i32 1, i32 1)
  %841 = getelementptr inbounds float, float* %819, i64 48
  %842 = bitcast float* %841 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %842, i32 0, i32 1, i32 1)
  %843 = getelementptr inbounds float, float* %822, i64 48
  %844 = bitcast float* %843 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %844, i32 0, i32 1, i32 1)
  %845 = getelementptr inbounds float, float* %819, i64 56
  %846 = bitcast float* %845 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %846, i32 0, i32 1, i32 1)
  %847 = getelementptr inbounds float, float* %822, i64 56
  %848 = bitcast float* %847 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %848, i32 0, i32 1, i32 1)
  %849 = bitcast float* %819 to <8 x float>*
  %850 = load <8 x float>, <8 x float>* %849, align 1, !tbaa !12
  %851 = add nuw nsw i64 %818, 8
  %852 = getelementptr inbounds float, float* %5, i64 %851
  %853 = bitcast float* %852 to <8 x float>*
  %854 = load <8 x float>, <8 x float>* %853, align 1, !tbaa !12
  %855 = add nuw nsw i64 %818, 16
  %856 = getelementptr inbounds float, float* %5, i64 %855
  %857 = bitcast float* %856 to <8 x float>*
  %858 = load <8 x float>, <8 x float>* %857, align 1, !tbaa !12
  %859 = add nuw nsw i64 %818, 24
  %860 = getelementptr inbounds float, float* %5, i64 %859
  %861 = bitcast float* %860 to <8 x float>*
  %862 = load <8 x float>, <8 x float>* %861, align 1, !tbaa !12
  %863 = add nuw nsw i64 %818, 32
  %864 = getelementptr inbounds float, float* %5, i64 %863
  %865 = bitcast float* %864 to <8 x float>*
  %866 = load <8 x float>, <8 x float>* %865, align 1, !tbaa !12
  %867 = add nuw nsw i64 %818, 40
  %868 = getelementptr inbounds float, float* %5, i64 %867
  %869 = bitcast float* %868 to <8 x float>*
  %870 = load <8 x float>, <8 x float>* %869, align 1, !tbaa !12
  %871 = add nuw nsw i64 %818, 48
  %872 = getelementptr inbounds float, float* %5, i64 %871
  %873 = bitcast float* %872 to <8 x float>*
  %874 = load <8 x float>, <8 x float>* %873, align 1, !tbaa !12
  %875 = add nsw i64 %818, %714
  %876 = getelementptr inbounds float, float* %3, i64 %875
  %877 = bitcast float* %876 to <8 x float>*
  %878 = load <8 x float>, <8 x float>* %877, align 1, !tbaa !12
  %879 = add nsw i64 %875, 8
  %880 = getelementptr inbounds float, float* %3, i64 %879
  %881 = bitcast float* %880 to <8 x float>*
  %882 = load <8 x float>, <8 x float>* %881, align 1, !tbaa !12
  %883 = add nsw i64 %875, 16
  %884 = getelementptr inbounds float, float* %3, i64 %883
  %885 = bitcast float* %884 to <8 x float>*
  %886 = load <8 x float>, <8 x float>* %885, align 1, !tbaa !12
  %887 = add nsw i64 %875, 24
  %888 = getelementptr inbounds float, float* %3, i64 %887
  %889 = bitcast float* %888 to <8 x float>*
  %890 = load <8 x float>, <8 x float>* %889, align 1, !tbaa !12
  %891 = add nsw i64 %875, 32
  %892 = getelementptr inbounds float, float* %3, i64 %891
  %893 = bitcast float* %892 to <8 x float>*
  %894 = load <8 x float>, <8 x float>* %893, align 1, !tbaa !12
  %895 = add nsw i64 %875, 40
  %896 = getelementptr inbounds float, float* %3, i64 %895
  %897 = bitcast float* %896 to <8 x float>*
  %898 = load <8 x float>, <8 x float>* %897, align 1, !tbaa !12
  %899 = add nsw i64 %875, 48
  %900 = getelementptr inbounds float, float* %3, i64 %899
  %901 = bitcast float* %900 to <8 x float>*
  %902 = load <8 x float>, <8 x float>* %901, align 1, !tbaa !12
  %903 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %878, <8 x float> %60, <8 x float> %850) #10
  %904 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %882, <8 x float> %60, <8 x float> %854) #10
  %905 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %886, <8 x float> %60, <8 x float> %858) #10
  %906 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %890, <8 x float> %60, <8 x float> %862) #10
  %907 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %894, <8 x float> %60, <8 x float> %866) #10
  %908 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %898, <8 x float> %60, <8 x float> %870) #10
  %909 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %902, <8 x float> %60, <8 x float> %874) #10
  store <8 x float> %903, <8 x float>* %849, align 1, !tbaa !12
  store <8 x float> %904, <8 x float>* %853, align 1, !tbaa !12
  store <8 x float> %905, <8 x float>* %857, align 1, !tbaa !12
  store <8 x float> %906, <8 x float>* %861, align 1, !tbaa !12
  store <8 x float> %907, <8 x float>* %865, align 1, !tbaa !12
  store <8 x float> %908, <8 x float>* %869, align 1, !tbaa !12
  store <8 x float> %909, <8 x float>* %873, align 1, !tbaa !12
  %910 = add nuw nsw i64 %818, 56
  %911 = icmp ult i64 %910, %715
  br i1 %911, label %817, label %811

912:                                              ; preds = %918
  br i1 %501, label %913, label %1013

913:                                              ; preds = %912
  %914 = trunc i64 %66 to i32
  %915 = mul nsw i32 %500, %914
  %916 = sext i32 %915 to i64
  %917 = zext i32 %500 to i64
  br label %1020

918:                                              ; preds = %812, %918
  %919 = phi i64 [ 0, %812 ], [ %1011, %918 ]
  %920 = getelementptr inbounds float, float* %5, i64 %919
  %921 = getelementptr inbounds float, float* %920, i64 8
  %922 = bitcast float* %921 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %922, i32 0, i32 1, i32 1)
  %923 = getelementptr inbounds float, float* %3, i64 %919
  %924 = getelementptr inbounds float, float* %923, i64 8
  %925 = bitcast float* %924 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %925, i32 0, i32 1, i32 1)
  %926 = getelementptr inbounds float, float* %920, i64 16
  %927 = bitcast float* %926 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %927, i32 0, i32 1, i32 1)
  %928 = getelementptr inbounds float, float* %923, i64 16
  %929 = bitcast float* %928 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %929, i32 0, i32 1, i32 1)
  %930 = getelementptr inbounds float, float* %920, i64 24
  %931 = bitcast float* %930 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %931, i32 0, i32 1, i32 1)
  %932 = getelementptr inbounds float, float* %923, i64 24
  %933 = bitcast float* %932 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %933, i32 0, i32 1, i32 1)
  %934 = getelementptr inbounds float, float* %920, i64 32
  %935 = bitcast float* %934 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %935, i32 0, i32 1, i32 1)
  %936 = getelementptr inbounds float, float* %923, i64 32
  %937 = bitcast float* %936 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %937, i32 0, i32 1, i32 1)
  %938 = getelementptr inbounds float, float* %920, i64 40
  %939 = bitcast float* %938 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %939, i32 0, i32 1, i32 1)
  %940 = getelementptr inbounds float, float* %923, i64 40
  %941 = bitcast float* %940 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %941, i32 0, i32 1, i32 1)
  %942 = getelementptr inbounds float, float* %920, i64 48
  %943 = bitcast float* %942 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %943, i32 0, i32 1, i32 1)
  %944 = getelementptr inbounds float, float* %923, i64 48
  %945 = bitcast float* %944 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %945, i32 0, i32 1, i32 1)
  %946 = getelementptr inbounds float, float* %920, i64 56
  %947 = bitcast float* %946 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %947, i32 0, i32 1, i32 1)
  %948 = getelementptr inbounds float, float* %923, i64 56
  %949 = bitcast float* %948 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %949, i32 0, i32 1, i32 1)
  %950 = bitcast float* %920 to <8 x float>*
  %951 = load <8 x float>, <8 x float>* %950, align 1, !tbaa !12
  %952 = add nuw nsw i64 %919, 8
  %953 = getelementptr inbounds float, float* %5, i64 %952
  %954 = bitcast float* %953 to <8 x float>*
  %955 = load <8 x float>, <8 x float>* %954, align 1, !tbaa !12
  %956 = add nuw nsw i64 %919, 16
  %957 = getelementptr inbounds float, float* %5, i64 %956
  %958 = bitcast float* %957 to <8 x float>*
  %959 = load <8 x float>, <8 x float>* %958, align 1, !tbaa !12
  %960 = add nuw nsw i64 %919, 24
  %961 = getelementptr inbounds float, float* %5, i64 %960
  %962 = bitcast float* %961 to <8 x float>*
  %963 = load <8 x float>, <8 x float>* %962, align 1, !tbaa !12
  %964 = add nuw nsw i64 %919, 32
  %965 = getelementptr inbounds float, float* %5, i64 %964
  %966 = bitcast float* %965 to <8 x float>*
  %967 = load <8 x float>, <8 x float>* %966, align 1, !tbaa !12
  %968 = add nuw nsw i64 %919, 40
  %969 = getelementptr inbounds float, float* %5, i64 %968
  %970 = bitcast float* %969 to <8 x float>*
  %971 = load <8 x float>, <8 x float>* %970, align 1, !tbaa !12
  %972 = add nuw nsw i64 %919, 48
  %973 = getelementptr inbounds float, float* %5, i64 %972
  %974 = bitcast float* %973 to <8 x float>*
  %975 = load <8 x float>, <8 x float>* %974, align 1, !tbaa !12
  %976 = add nsw i64 %919, %815
  %977 = getelementptr inbounds float, float* %3, i64 %976
  %978 = bitcast float* %977 to <8 x float>*
  %979 = load <8 x float>, <8 x float>* %978, align 1, !tbaa !12
  %980 = add nsw i64 %976, 8
  %981 = getelementptr inbounds float, float* %3, i64 %980
  %982 = bitcast float* %981 to <8 x float>*
  %983 = load <8 x float>, <8 x float>* %982, align 1, !tbaa !12
  %984 = add nsw i64 %976, 16
  %985 = getelementptr inbounds float, float* %3, i64 %984
  %986 = bitcast float* %985 to <8 x float>*
  %987 = load <8 x float>, <8 x float>* %986, align 1, !tbaa !12
  %988 = add nsw i64 %976, 24
  %989 = getelementptr inbounds float, float* %3, i64 %988
  %990 = bitcast float* %989 to <8 x float>*
  %991 = load <8 x float>, <8 x float>* %990, align 1, !tbaa !12
  %992 = add nsw i64 %976, 32
  %993 = getelementptr inbounds float, float* %3, i64 %992
  %994 = bitcast float* %993 to <8 x float>*
  %995 = load <8 x float>, <8 x float>* %994, align 1, !tbaa !12
  %996 = add nsw i64 %976, 40
  %997 = getelementptr inbounds float, float* %3, i64 %996
  %998 = bitcast float* %997 to <8 x float>*
  %999 = load <8 x float>, <8 x float>* %998, align 1, !tbaa !12
  %1000 = add nsw i64 %976, 48
  %1001 = getelementptr inbounds float, float* %3, i64 %1000
  %1002 = bitcast float* %1001 to <8 x float>*
  %1003 = load <8 x float>, <8 x float>* %1002, align 1, !tbaa !12
  %1004 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %65, <8 x float> %951) #10
  %1005 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %983, <8 x float> %65, <8 x float> %955) #10
  %1006 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %987, <8 x float> %65, <8 x float> %959) #10
  %1007 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %991, <8 x float> %65, <8 x float> %963) #10
  %1008 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %995, <8 x float> %65, <8 x float> %967) #10
  %1009 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %999, <8 x float> %65, <8 x float> %971) #10
  %1010 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1003, <8 x float> %65, <8 x float> %975) #10
  store <8 x float> %1004, <8 x float>* %950, align 1, !tbaa !12
  store <8 x float> %1005, <8 x float>* %954, align 1, !tbaa !12
  store <8 x float> %1006, <8 x float>* %958, align 1, !tbaa !12
  store <8 x float> %1007, <8 x float>* %962, align 1, !tbaa !12
  store <8 x float> %1008, <8 x float>* %966, align 1, !tbaa !12
  store <8 x float> %1009, <8 x float>* %970, align 1, !tbaa !12
  store <8 x float> %1010, <8 x float>* %974, align 1, !tbaa !12
  %1011 = add nuw nsw i64 %919, 56
  %1012 = icmp ult i64 %1011, %816
  br i1 %1012, label %918, label %912

1013:                                             ; preds = %1020, %601, %710, %811, %912
  %1014 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %1015 = icmp sgt i32 %1014, 0
  br i1 %1015, label %1016, label %1224

1016:                                             ; preds = %1013
  %1017 = zext i32 %1014 to i64
  %1018 = trunc i64 %71 to i32
  %1019 = mul nsw i32 %1014, %1018
  br label %1121

1020:                                             ; preds = %913, %1020
  %1021 = phi i64 [ 0, %913 ], [ %1113, %1020 ]
  %1022 = getelementptr inbounds float, float* %5, i64 %1021
  %1023 = getelementptr inbounds float, float* %1022, i64 8
  %1024 = bitcast float* %1023 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1024, i32 0, i32 1, i32 1)
  %1025 = getelementptr inbounds float, float* %3, i64 %1021
  %1026 = getelementptr inbounds float, float* %1025, i64 8
  %1027 = bitcast float* %1026 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1027, i32 0, i32 1, i32 1)
  %1028 = getelementptr inbounds float, float* %1022, i64 16
  %1029 = bitcast float* %1028 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1029, i32 0, i32 1, i32 1)
  %1030 = getelementptr inbounds float, float* %1025, i64 16
  %1031 = bitcast float* %1030 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1031, i32 0, i32 1, i32 1)
  %1032 = getelementptr inbounds float, float* %1022, i64 24
  %1033 = bitcast float* %1032 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1033, i32 0, i32 1, i32 1)
  %1034 = getelementptr inbounds float, float* %1025, i64 24
  %1035 = bitcast float* %1034 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1035, i32 0, i32 1, i32 1)
  %1036 = getelementptr inbounds float, float* %1022, i64 32
  %1037 = bitcast float* %1036 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1037, i32 0, i32 1, i32 1)
  %1038 = getelementptr inbounds float, float* %1025, i64 32
  %1039 = bitcast float* %1038 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1039, i32 0, i32 1, i32 1)
  %1040 = getelementptr inbounds float, float* %1022, i64 40
  %1041 = bitcast float* %1040 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1041, i32 0, i32 1, i32 1)
  %1042 = getelementptr inbounds float, float* %1025, i64 40
  %1043 = bitcast float* %1042 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1043, i32 0, i32 1, i32 1)
  %1044 = getelementptr inbounds float, float* %1022, i64 48
  %1045 = bitcast float* %1044 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1045, i32 0, i32 1, i32 1)
  %1046 = getelementptr inbounds float, float* %1025, i64 48
  %1047 = bitcast float* %1046 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1047, i32 0, i32 1, i32 1)
  %1048 = getelementptr inbounds float, float* %1022, i64 56
  %1049 = bitcast float* %1048 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1049, i32 0, i32 1, i32 1)
  %1050 = getelementptr inbounds float, float* %1025, i64 56
  %1051 = bitcast float* %1050 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1051, i32 0, i32 1, i32 1)
  %1052 = bitcast float* %1022 to <8 x float>*
  %1053 = load <8 x float>, <8 x float>* %1052, align 1, !tbaa !12
  %1054 = add nuw nsw i64 %1021, 8
  %1055 = getelementptr inbounds float, float* %5, i64 %1054
  %1056 = bitcast float* %1055 to <8 x float>*
  %1057 = load <8 x float>, <8 x float>* %1056, align 1, !tbaa !12
  %1058 = add nuw nsw i64 %1021, 16
  %1059 = getelementptr inbounds float, float* %5, i64 %1058
  %1060 = bitcast float* %1059 to <8 x float>*
  %1061 = load <8 x float>, <8 x float>* %1060, align 1, !tbaa !12
  %1062 = add nuw nsw i64 %1021, 24
  %1063 = getelementptr inbounds float, float* %5, i64 %1062
  %1064 = bitcast float* %1063 to <8 x float>*
  %1065 = load <8 x float>, <8 x float>* %1064, align 1, !tbaa !12
  %1066 = add nuw nsw i64 %1021, 32
  %1067 = getelementptr inbounds float, float* %5, i64 %1066
  %1068 = bitcast float* %1067 to <8 x float>*
  %1069 = load <8 x float>, <8 x float>* %1068, align 1, !tbaa !12
  %1070 = add nuw nsw i64 %1021, 40
  %1071 = getelementptr inbounds float, float* %5, i64 %1070
  %1072 = bitcast float* %1071 to <8 x float>*
  %1073 = load <8 x float>, <8 x float>* %1072, align 1, !tbaa !12
  %1074 = add nuw nsw i64 %1021, 48
  %1075 = getelementptr inbounds float, float* %5, i64 %1074
  %1076 = bitcast float* %1075 to <8 x float>*
  %1077 = load <8 x float>, <8 x float>* %1076, align 1, !tbaa !12
  %1078 = add nsw i64 %1021, %916
  %1079 = getelementptr inbounds float, float* %3, i64 %1078
  %1080 = bitcast float* %1079 to <8 x float>*
  %1081 = load <8 x float>, <8 x float>* %1080, align 1, !tbaa !12
  %1082 = add nsw i64 %1078, 8
  %1083 = getelementptr inbounds float, float* %3, i64 %1082
  %1084 = bitcast float* %1083 to <8 x float>*
  %1085 = load <8 x float>, <8 x float>* %1084, align 1, !tbaa !12
  %1086 = add nsw i64 %1078, 16
  %1087 = getelementptr inbounds float, float* %3, i64 %1086
  %1088 = bitcast float* %1087 to <8 x float>*
  %1089 = load <8 x float>, <8 x float>* %1088, align 1, !tbaa !12
  %1090 = add nsw i64 %1078, 24
  %1091 = getelementptr inbounds float, float* %3, i64 %1090
  %1092 = bitcast float* %1091 to <8 x float>*
  %1093 = load <8 x float>, <8 x float>* %1092, align 1, !tbaa !12
  %1094 = add nsw i64 %1078, 32
  %1095 = getelementptr inbounds float, float* %3, i64 %1094
  %1096 = bitcast float* %1095 to <8 x float>*
  %1097 = load <8 x float>, <8 x float>* %1096, align 1, !tbaa !12
  %1098 = add nsw i64 %1078, 40
  %1099 = getelementptr inbounds float, float* %3, i64 %1098
  %1100 = bitcast float* %1099 to <8 x float>*
  %1101 = load <8 x float>, <8 x float>* %1100, align 1, !tbaa !12
  %1102 = add nsw i64 %1078, 48
  %1103 = getelementptr inbounds float, float* %3, i64 %1102
  %1104 = bitcast float* %1103 to <8 x float>*
  %1105 = load <8 x float>, <8 x float>* %1104, align 1, !tbaa !12
  %1106 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1081, <8 x float> %70, <8 x float> %1053) #10
  %1107 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1085, <8 x float> %70, <8 x float> %1057) #10
  %1108 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1089, <8 x float> %70, <8 x float> %1061) #10
  %1109 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %70, <8 x float> %1065) #10
  %1110 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1097, <8 x float> %70, <8 x float> %1069) #10
  %1111 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1101, <8 x float> %70, <8 x float> %1073) #10
  %1112 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1105, <8 x float> %70, <8 x float> %1077) #10
  store <8 x float> %1106, <8 x float>* %1052, align 1, !tbaa !12
  store <8 x float> %1107, <8 x float>* %1056, align 1, !tbaa !12
  store <8 x float> %1108, <8 x float>* %1060, align 1, !tbaa !12
  store <8 x float> %1109, <8 x float>* %1064, align 1, !tbaa !12
  store <8 x float> %1110, <8 x float>* %1068, align 1, !tbaa !12
  store <8 x float> %1111, <8 x float>* %1072, align 1, !tbaa !12
  store <8 x float> %1112, <8 x float>* %1076, align 1, !tbaa !12
  %1113 = add nuw nsw i64 %1021, 56
  %1114 = icmp ult i64 %1113, %917
  br i1 %1114, label %1020, label %1013

1115:                                             ; preds = %1121
  br i1 %1015, label %1116, label %1224

1116:                                             ; preds = %1115
  %1117 = trunc i64 %76 to i32
  %1118 = mul nsw i32 %1014, %1117
  %1119 = sext i32 %1118 to i64
  %1120 = zext i32 %1014 to i64
  br label %1229

1121:                                             ; preds = %1016, %1121
  %1122 = phi i64 [ 0, %1016 ], [ %1222, %1121 ]
  %1123 = getelementptr inbounds float, float* %5, i64 %1122
  %1124 = getelementptr inbounds float, float* %1123, i64 8
  %1125 = bitcast float* %1124 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1125, i32 0, i32 1, i32 1)
  %1126 = getelementptr inbounds float, float* %3, i64 %1122
  %1127 = getelementptr inbounds float, float* %1126, i64 8
  %1128 = bitcast float* %1127 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1128, i32 0, i32 1, i32 1)
  %1129 = getelementptr inbounds float, float* %1123, i64 16
  %1130 = bitcast float* %1129 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1130, i32 0, i32 1, i32 1)
  %1131 = getelementptr inbounds float, float* %1126, i64 16
  %1132 = bitcast float* %1131 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1132, i32 0, i32 1, i32 1)
  %1133 = getelementptr inbounds float, float* %1123, i64 24
  %1134 = bitcast float* %1133 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1134, i32 0, i32 1, i32 1)
  %1135 = getelementptr inbounds float, float* %1126, i64 24
  %1136 = bitcast float* %1135 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1136, i32 0, i32 1, i32 1)
  %1137 = getelementptr inbounds float, float* %1123, i64 32
  %1138 = bitcast float* %1137 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1138, i32 0, i32 1, i32 1)
  %1139 = getelementptr inbounds float, float* %1126, i64 32
  %1140 = bitcast float* %1139 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1140, i32 0, i32 1, i32 1)
  %1141 = getelementptr inbounds float, float* %1123, i64 40
  %1142 = bitcast float* %1141 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1142, i32 0, i32 1, i32 1)
  %1143 = getelementptr inbounds float, float* %1126, i64 40
  %1144 = bitcast float* %1143 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1144, i32 0, i32 1, i32 1)
  %1145 = getelementptr inbounds float, float* %1123, i64 48
  %1146 = bitcast float* %1145 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1146, i32 0, i32 1, i32 1)
  %1147 = getelementptr inbounds float, float* %1126, i64 48
  %1148 = bitcast float* %1147 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1148, i32 0, i32 1, i32 1)
  %1149 = getelementptr inbounds float, float* %1123, i64 56
  %1150 = bitcast float* %1149 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1150, i32 0, i32 1, i32 1)
  %1151 = getelementptr inbounds float, float* %1126, i64 56
  %1152 = bitcast float* %1151 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1152, i32 0, i32 1, i32 1)
  %1153 = bitcast float* %1123 to <8 x float>*
  %1154 = load <8 x float>, <8 x float>* %1153, align 1, !tbaa !12
  %1155 = add nuw nsw i64 %1122, 8
  %1156 = getelementptr inbounds float, float* %5, i64 %1155
  %1157 = bitcast float* %1156 to <8 x float>*
  %1158 = load <8 x float>, <8 x float>* %1157, align 1, !tbaa !12
  %1159 = add nuw nsw i64 %1122, 16
  %1160 = getelementptr inbounds float, float* %5, i64 %1159
  %1161 = bitcast float* %1160 to <8 x float>*
  %1162 = load <8 x float>, <8 x float>* %1161, align 1, !tbaa !12
  %1163 = add nuw nsw i64 %1122, 24
  %1164 = getelementptr inbounds float, float* %5, i64 %1163
  %1165 = bitcast float* %1164 to <8 x float>*
  %1166 = load <8 x float>, <8 x float>* %1165, align 1, !tbaa !12
  %1167 = add nuw nsw i64 %1122, 32
  %1168 = getelementptr inbounds float, float* %5, i64 %1167
  %1169 = bitcast float* %1168 to <8 x float>*
  %1170 = load <8 x float>, <8 x float>* %1169, align 1, !tbaa !12
  %1171 = add nuw nsw i64 %1122, 40
  %1172 = getelementptr inbounds float, float* %5, i64 %1171
  %1173 = bitcast float* %1172 to <8 x float>*
  %1174 = load <8 x float>, <8 x float>* %1173, align 1, !tbaa !12
  %1175 = add nuw nsw i64 %1122, 48
  %1176 = getelementptr inbounds float, float* %5, i64 %1175
  %1177 = bitcast float* %1176 to <8 x float>*
  %1178 = load <8 x float>, <8 x float>* %1177, align 1, !tbaa !12
  %1179 = trunc i64 %1122 to i32
  %1180 = add nsw i32 %1019, %1179
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds float, float* %3, i64 %1181
  %1183 = bitcast float* %1182 to <8 x float>*
  %1184 = load <8 x float>, <8 x float>* %1183, align 1, !tbaa !12
  %1185 = add nsw i32 %1180, 8
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds float, float* %3, i64 %1186
  %1188 = bitcast float* %1187 to <8 x float>*
  %1189 = load <8 x float>, <8 x float>* %1188, align 1, !tbaa !12
  %1190 = add nsw i32 %1180, 16
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds float, float* %3, i64 %1191
  %1193 = bitcast float* %1192 to <8 x float>*
  %1194 = load <8 x float>, <8 x float>* %1193, align 1, !tbaa !12
  %1195 = add nsw i32 %1180, 24
  %1196 = sext i32 %1195 to i64
  %1197 = getelementptr inbounds float, float* %3, i64 %1196
  %1198 = bitcast float* %1197 to <8 x float>*
  %1199 = load <8 x float>, <8 x float>* %1198, align 1, !tbaa !12
  %1200 = add nsw i32 %1180, 32
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds float, float* %3, i64 %1201
  %1203 = bitcast float* %1202 to <8 x float>*
  %1204 = load <8 x float>, <8 x float>* %1203, align 1, !tbaa !12
  %1205 = add nsw i32 %1180, 40
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds float, float* %3, i64 %1206
  %1208 = bitcast float* %1207 to <8 x float>*
  %1209 = load <8 x float>, <8 x float>* %1208, align 1, !tbaa !12
  %1210 = add nsw i32 %1180, 48
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds float, float* %3, i64 %1211
  %1213 = bitcast float* %1212 to <8 x float>*
  %1214 = load <8 x float>, <8 x float>* %1213, align 1, !tbaa !12
  %1215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1184, <8 x float> %75, <8 x float> %1154) #10
  %1216 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1189, <8 x float> %75, <8 x float> %1158) #10
  %1217 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1194, <8 x float> %75, <8 x float> %1162) #10
  %1218 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1199, <8 x float> %75, <8 x float> %1166) #10
  %1219 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1204, <8 x float> %75, <8 x float> %1170) #10
  %1220 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1209, <8 x float> %75, <8 x float> %1174) #10
  %1221 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1214, <8 x float> %75, <8 x float> %1178) #10
  store <8 x float> %1215, <8 x float>* %1153, align 1, !tbaa !12
  store <8 x float> %1216, <8 x float>* %1157, align 1, !tbaa !12
  store <8 x float> %1217, <8 x float>* %1161, align 1, !tbaa !12
  store <8 x float> %1218, <8 x float>* %1165, align 1, !tbaa !12
  store <8 x float> %1219, <8 x float>* %1169, align 1, !tbaa !12
  store <8 x float> %1220, <8 x float>* %1173, align 1, !tbaa !12
  store <8 x float> %1221, <8 x float>* %1177, align 1, !tbaa !12
  %1222 = add nuw nsw i64 %1122, 56
  %1223 = icmp ult i64 %1222, %1017
  br i1 %1223, label %1121, label %1115

1224:                                             ; preds = %1229, %20, %499, %1013, %1115
  %1225 = add nuw nsw i64 %21, 12
  %1226 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1227 = sext i32 %1226 to i64
  %1228 = icmp slt i64 %1225, %1227
  br i1 %1228, label %20, label %8

1229:                                             ; preds = %1116, %1229
  %1230 = phi i64 [ 0, %1116 ], [ %1322, %1229 ]
  %1231 = getelementptr inbounds float, float* %5, i64 %1230
  %1232 = getelementptr inbounds float, float* %1231, i64 8
  %1233 = bitcast float* %1232 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1233, i32 0, i32 1, i32 1)
  %1234 = getelementptr inbounds float, float* %3, i64 %1230
  %1235 = getelementptr inbounds float, float* %1234, i64 8
  %1236 = bitcast float* %1235 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1236, i32 0, i32 1, i32 1)
  %1237 = getelementptr inbounds float, float* %1231, i64 16
  %1238 = bitcast float* %1237 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1238, i32 0, i32 1, i32 1)
  %1239 = getelementptr inbounds float, float* %1234, i64 16
  %1240 = bitcast float* %1239 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1240, i32 0, i32 1, i32 1)
  %1241 = getelementptr inbounds float, float* %1231, i64 24
  %1242 = bitcast float* %1241 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1242, i32 0, i32 1, i32 1)
  %1243 = getelementptr inbounds float, float* %1234, i64 24
  %1244 = bitcast float* %1243 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1244, i32 0, i32 1, i32 1)
  %1245 = getelementptr inbounds float, float* %1231, i64 32
  %1246 = bitcast float* %1245 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1246, i32 0, i32 1, i32 1)
  %1247 = getelementptr inbounds float, float* %1234, i64 32
  %1248 = bitcast float* %1247 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1248, i32 0, i32 1, i32 1)
  %1249 = getelementptr inbounds float, float* %1231, i64 40
  %1250 = bitcast float* %1249 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1250, i32 0, i32 1, i32 1)
  %1251 = getelementptr inbounds float, float* %1234, i64 40
  %1252 = bitcast float* %1251 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1252, i32 0, i32 1, i32 1)
  %1253 = getelementptr inbounds float, float* %1231, i64 48
  %1254 = bitcast float* %1253 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1254, i32 0, i32 1, i32 1)
  %1255 = getelementptr inbounds float, float* %1234, i64 48
  %1256 = bitcast float* %1255 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1256, i32 0, i32 1, i32 1)
  %1257 = getelementptr inbounds float, float* %1231, i64 56
  %1258 = bitcast float* %1257 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1258, i32 0, i32 1, i32 1)
  %1259 = getelementptr inbounds float, float* %1234, i64 56
  %1260 = bitcast float* %1259 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1260, i32 0, i32 1, i32 1)
  %1261 = bitcast float* %1231 to <8 x float>*
  %1262 = load <8 x float>, <8 x float>* %1261, align 1, !tbaa !12
  %1263 = add nuw nsw i64 %1230, 8
  %1264 = getelementptr inbounds float, float* %5, i64 %1263
  %1265 = bitcast float* %1264 to <8 x float>*
  %1266 = load <8 x float>, <8 x float>* %1265, align 1, !tbaa !12
  %1267 = add nuw nsw i64 %1230, 16
  %1268 = getelementptr inbounds float, float* %5, i64 %1267
  %1269 = bitcast float* %1268 to <8 x float>*
  %1270 = load <8 x float>, <8 x float>* %1269, align 1, !tbaa !12
  %1271 = add nuw nsw i64 %1230, 24
  %1272 = getelementptr inbounds float, float* %5, i64 %1271
  %1273 = bitcast float* %1272 to <8 x float>*
  %1274 = load <8 x float>, <8 x float>* %1273, align 1, !tbaa !12
  %1275 = add nuw nsw i64 %1230, 32
  %1276 = getelementptr inbounds float, float* %5, i64 %1275
  %1277 = bitcast float* %1276 to <8 x float>*
  %1278 = load <8 x float>, <8 x float>* %1277, align 1, !tbaa !12
  %1279 = add nuw nsw i64 %1230, 40
  %1280 = getelementptr inbounds float, float* %5, i64 %1279
  %1281 = bitcast float* %1280 to <8 x float>*
  %1282 = load <8 x float>, <8 x float>* %1281, align 1, !tbaa !12
  %1283 = add nuw nsw i64 %1230, 48
  %1284 = getelementptr inbounds float, float* %5, i64 %1283
  %1285 = bitcast float* %1284 to <8 x float>*
  %1286 = load <8 x float>, <8 x float>* %1285, align 1, !tbaa !12
  %1287 = add nsw i64 %1230, %1119
  %1288 = getelementptr inbounds float, float* %3, i64 %1287
  %1289 = bitcast float* %1288 to <8 x float>*
  %1290 = load <8 x float>, <8 x float>* %1289, align 1, !tbaa !12
  %1291 = add nsw i64 %1287, 8
  %1292 = getelementptr inbounds float, float* %3, i64 %1291
  %1293 = bitcast float* %1292 to <8 x float>*
  %1294 = load <8 x float>, <8 x float>* %1293, align 1, !tbaa !12
  %1295 = add nsw i64 %1287, 16
  %1296 = getelementptr inbounds float, float* %3, i64 %1295
  %1297 = bitcast float* %1296 to <8 x float>*
  %1298 = load <8 x float>, <8 x float>* %1297, align 1, !tbaa !12
  %1299 = add nsw i64 %1287, 24
  %1300 = getelementptr inbounds float, float* %3, i64 %1299
  %1301 = bitcast float* %1300 to <8 x float>*
  %1302 = load <8 x float>, <8 x float>* %1301, align 1, !tbaa !12
  %1303 = add nsw i64 %1287, 32
  %1304 = getelementptr inbounds float, float* %3, i64 %1303
  %1305 = bitcast float* %1304 to <8 x float>*
  %1306 = load <8 x float>, <8 x float>* %1305, align 1, !tbaa !12
  %1307 = add nsw i64 %1287, 40
  %1308 = getelementptr inbounds float, float* %3, i64 %1307
  %1309 = bitcast float* %1308 to <8 x float>*
  %1310 = load <8 x float>, <8 x float>* %1309, align 1, !tbaa !12
  %1311 = add nsw i64 %1287, 48
  %1312 = getelementptr inbounds float, float* %3, i64 %1311
  %1313 = bitcast float* %1312 to <8 x float>*
  %1314 = load <8 x float>, <8 x float>* %1313, align 1, !tbaa !12
  %1315 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1290, <8 x float> %80, <8 x float> %1262) #10
  %1316 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1294, <8 x float> %80, <8 x float> %1266) #10
  %1317 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1298, <8 x float> %80, <8 x float> %1270) #10
  %1318 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1302, <8 x float> %80, <8 x float> %1274) #10
  %1319 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1306, <8 x float> %80, <8 x float> %1278) #10
  %1320 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1310, <8 x float> %80, <8 x float> %1282) #10
  %1321 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1314, <8 x float> %80, <8 x float> %1286) #10
  store <8 x float> %1315, <8 x float>* %1261, align 1, !tbaa !12
  store <8 x float> %1316, <8 x float>* %1265, align 1, !tbaa !12
  store <8 x float> %1317, <8 x float>* %1269, align 1, !tbaa !12
  store <8 x float> %1318, <8 x float>* %1273, align 1, !tbaa !12
  store <8 x float> %1319, <8 x float>* %1277, align 1, !tbaa !12
  store <8 x float> %1320, <8 x float>* %1281, align 1, !tbaa !12
  store <8 x float> %1321, <8 x float>* %1285, align 1, !tbaa !12
  %1322 = add nuw nsw i64 %1230, 56
  %1323 = icmp ult i64 %1322, %1120
  br i1 %1323, label %1229, label %1224
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 180
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui7_uk12.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
