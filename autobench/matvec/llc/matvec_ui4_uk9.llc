; ModuleID = 'codes/matvec_ui4_uk9.cpp'
source_filename = "codes/matvec_ui4_uk9.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui4_uk9.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = sdiv i32 %1, 32
  %3 = shl nsw i32 %2, 5
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 72
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %9 to i64
  %12 = icmp sgt i32 %9, 0
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = sext i32 %9 to i64
  %16 = sext i32 %9 to i64
  %17 = sext i32 %9 to i64
  %18 = sext i32 %9 to i64
  %19 = sext i32 %9 to i64
  %20 = sext i32 %9 to i64
  %21 = sext i32 %6 to i64
  br label %34

22:                                               ; preds = %570, %0
  %23 = tail call i64 @llvm.x86.rdtsc()
  %24 = uitofp i64 %23 to double
  %25 = fsub double %24, %2
  %26 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %27 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %28 = shl i32 %27, 1
  %29 = add nsw i32 %28, -1
  %30 = mul nsw i32 %29, %26
  %31 = sitofp i32 %30 to float
  %32 = fptrunc double %25 to float
  %33 = fdiv float %31, %32
  ret float %33

34:                                               ; preds = %8, %570
  %35 = phi i64 [ 0, %8 ], [ %571, %570 ]
  %36 = getelementptr inbounds float, float* %4, i64 %35
  %37 = load float, float* %36, align 4, !tbaa !18
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = add nuw nsw i64 %35, 1
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = load float, float* %41, align 4, !tbaa !18
  %43 = insertelement <8 x float> undef, float %42, i32 0
  %44 = shufflevector <8 x float> %43, <8 x float> undef, <8 x i32> zeroinitializer
  %45 = add nuw nsw i64 %35, 2
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !18
  %48 = insertelement <8 x float> undef, float %47, i32 0
  %49 = shufflevector <8 x float> %48, <8 x float> undef, <8 x i32> zeroinitializer
  %50 = add nuw nsw i64 %35, 3
  %51 = getelementptr inbounds float, float* %4, i64 %50
  %52 = load float, float* %51, align 4, !tbaa !18
  %53 = insertelement <8 x float> undef, float %52, i32 0
  %54 = shufflevector <8 x float> %53, <8 x float> undef, <8 x i32> zeroinitializer
  %55 = add nuw nsw i64 %35, 4
  %56 = getelementptr inbounds float, float* %4, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !18
  %58 = insertelement <8 x float> undef, float %57, i32 0
  %59 = shufflevector <8 x float> %58, <8 x float> undef, <8 x i32> zeroinitializer
  %60 = add nuw nsw i64 %35, 5
  %61 = getelementptr inbounds float, float* %4, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !18
  %63 = insertelement <8 x float> undef, float %62, i32 0
  %64 = shufflevector <8 x float> %63, <8 x float> undef, <8 x i32> zeroinitializer
  %65 = add nuw nsw i64 %35, 6
  %66 = getelementptr inbounds float, float* %4, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !18
  %68 = insertelement <8 x float> undef, float %67, i32 0
  %69 = shufflevector <8 x float> %68, <8 x float> undef, <8 x i32> zeroinitializer
  %70 = add nuw nsw i64 %35, 7
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !18
  %73 = insertelement <8 x float> undef, float %72, i32 0
  %74 = shufflevector <8 x float> %73, <8 x float> undef, <8 x i32> zeroinitializer
  %75 = add nuw nsw i64 %35, 8
  %76 = getelementptr inbounds float, float* %4, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !18
  %78 = insertelement <8 x float> undef, float %77, i32 0
  %79 = shufflevector <8 x float> %78, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %80, label %570

80:                                               ; preds = %34
  %81 = trunc i64 %35 to i32
  %82 = mul nsw i32 %9, %81
  br label %88

83:                                               ; preds = %88
  br i1 %12, label %84, label %570

84:                                               ; preds = %83
  %85 = trunc i64 %40 to i32
  %86 = mul nsw i32 %9, %85
  %87 = sext i32 %86 to i64
  br label %154

88:                                               ; preds = %80, %88
  %89 = phi i64 [ 0, %80 ], [ %147, %88 ]
  %90 = getelementptr inbounds float, float* %5, i64 %89
  %91 = getelementptr inbounds float, float* %90, i64 8
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %3, i64 %89
  %94 = getelementptr inbounds float, float* %93, i64 8
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %95, i32 0, i32 1, i32 1)
  %96 = getelementptr inbounds float, float* %90, i64 16
  %97 = bitcast float* %96 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %97, i32 0, i32 1, i32 1)
  %98 = getelementptr inbounds float, float* %93, i64 16
  %99 = bitcast float* %98 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %99, i32 0, i32 1, i32 1)
  %100 = getelementptr inbounds float, float* %90, i64 24
  %101 = bitcast float* %100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %101, i32 0, i32 1, i32 1)
  %102 = getelementptr inbounds float, float* %93, i64 24
  %103 = bitcast float* %102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %103, i32 0, i32 1, i32 1)
  %104 = getelementptr inbounds float, float* %90, i64 32
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %105, i32 0, i32 1, i32 1)
  %106 = getelementptr inbounds float, float* %93, i64 32
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %107, i32 0, i32 1, i32 1)
  %108 = bitcast float* %90 to <8 x float>*
  %109 = load <8 x float>, <8 x float>* %108, align 1, !tbaa !12
  %110 = or i64 %89, 8
  %111 = getelementptr inbounds float, float* %5, i64 %110
  %112 = bitcast float* %111 to <8 x float>*
  %113 = load <8 x float>, <8 x float>* %112, align 1, !tbaa !12
  %114 = or i64 %89, 16
  %115 = getelementptr inbounds float, float* %5, i64 %114
  %116 = bitcast float* %115 to <8 x float>*
  %117 = load <8 x float>, <8 x float>* %116, align 1, !tbaa !12
  %118 = or i64 %89, 24
  %119 = getelementptr inbounds float, float* %5, i64 %118
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !tbaa !12
  %122 = trunc i64 %89 to i32
  %123 = add nsw i32 %82, %122
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds float, float* %3, i64 %124
  %126 = bitcast float* %125 to <8 x float>*
  %127 = load <8 x float>, <8 x float>* %126, align 1, !tbaa !12
  %128 = add nsw i32 %123, 8
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds float, float* %3, i64 %129
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !tbaa !12
  %133 = add nsw i32 %123, 16
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %3, i64 %134
  %136 = bitcast float* %135 to <8 x float>*
  %137 = load <8 x float>, <8 x float>* %136, align 1, !tbaa !12
  %138 = add nsw i32 %123, 24
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds float, float* %3, i64 %139
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 1, !tbaa !12
  %143 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %127, <8 x float> %39, <8 x float> %109) #10
  %144 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %132, <8 x float> %39, <8 x float> %113) #10
  %145 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %39, <8 x float> %117) #10
  %146 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %142, <8 x float> %39, <8 x float> %121) #10
  store <8 x float> %143, <8 x float>* %108, align 1, !tbaa !12
  store <8 x float> %144, <8 x float>* %112, align 1, !tbaa !12
  store <8 x float> %145, <8 x float>* %116, align 1, !tbaa !12
  store <8 x float> %146, <8 x float>* %120, align 1, !tbaa !12
  %147 = add nuw nsw i64 %89, 32
  %148 = icmp ult i64 %147, %11
  br i1 %148, label %88, label %83

149:                                              ; preds = %154
  br i1 %12, label %150, label %570

150:                                              ; preds = %149
  %151 = trunc i64 %45 to i32
  %152 = mul nsw i32 %9, %151
  %153 = sext i32 %152 to i64
  br label %214

154:                                              ; preds = %84, %154
  %155 = phi i64 [ 0, %84 ], [ %208, %154 ]
  %156 = getelementptr inbounds float, float* %5, i64 %155
  %157 = getelementptr inbounds float, float* %156, i64 8
  %158 = bitcast float* %157 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %158, i32 0, i32 1, i32 1)
  %159 = getelementptr inbounds float, float* %3, i64 %155
  %160 = getelementptr inbounds float, float* %159, i64 8
  %161 = bitcast float* %160 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %161, i32 0, i32 1, i32 1)
  %162 = getelementptr inbounds float, float* %156, i64 16
  %163 = bitcast float* %162 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %163, i32 0, i32 1, i32 1)
  %164 = getelementptr inbounds float, float* %159, i64 16
  %165 = bitcast float* %164 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %165, i32 0, i32 1, i32 1)
  %166 = getelementptr inbounds float, float* %156, i64 24
  %167 = bitcast float* %166 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %167, i32 0, i32 1, i32 1)
  %168 = getelementptr inbounds float, float* %159, i64 24
  %169 = bitcast float* %168 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %169, i32 0, i32 1, i32 1)
  %170 = getelementptr inbounds float, float* %156, i64 32
  %171 = bitcast float* %170 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %171, i32 0, i32 1, i32 1)
  %172 = getelementptr inbounds float, float* %159, i64 32
  %173 = bitcast float* %172 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %173, i32 0, i32 1, i32 1)
  %174 = bitcast float* %156 to <8 x float>*
  %175 = load <8 x float>, <8 x float>* %174, align 1, !tbaa !12
  %176 = or i64 %155, 8
  %177 = getelementptr inbounds float, float* %5, i64 %176
  %178 = bitcast float* %177 to <8 x float>*
  %179 = load <8 x float>, <8 x float>* %178, align 1, !tbaa !12
  %180 = or i64 %155, 16
  %181 = getelementptr inbounds float, float* %5, i64 %180
  %182 = bitcast float* %181 to <8 x float>*
  %183 = load <8 x float>, <8 x float>* %182, align 1, !tbaa !12
  %184 = or i64 %155, 24
  %185 = getelementptr inbounds float, float* %5, i64 %184
  %186 = bitcast float* %185 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !tbaa !12
  %188 = add nsw i64 %155, %87
  %189 = getelementptr inbounds float, float* %3, i64 %188
  %190 = bitcast float* %189 to <8 x float>*
  %191 = load <8 x float>, <8 x float>* %190, align 1, !tbaa !12
  %192 = add nsw i64 %188, 8
  %193 = getelementptr inbounds float, float* %3, i64 %192
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 1, !tbaa !12
  %196 = add nsw i64 %188, 16
  %197 = getelementptr inbounds float, float* %3, i64 %196
  %198 = bitcast float* %197 to <8 x float>*
  %199 = load <8 x float>, <8 x float>* %198, align 1, !tbaa !12
  %200 = add nsw i64 %188, 24
  %201 = getelementptr inbounds float, float* %3, i64 %200
  %202 = bitcast float* %201 to <8 x float>*
  %203 = load <8 x float>, <8 x float>* %202, align 1, !tbaa !12
  %204 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %191, <8 x float> %44, <8 x float> %175) #10
  %205 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %195, <8 x float> %44, <8 x float> %179) #10
  %206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %199, <8 x float> %44, <8 x float> %183) #10
  %207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> %44, <8 x float> %187) #10
  store <8 x float> %204, <8 x float>* %174, align 1, !tbaa !12
  store <8 x float> %205, <8 x float>* %178, align 1, !tbaa !12
  store <8 x float> %206, <8 x float>* %182, align 1, !tbaa !12
  store <8 x float> %207, <8 x float>* %186, align 1, !tbaa !12
  %208 = add nuw nsw i64 %155, 32
  %209 = icmp ult i64 %208, %13
  br i1 %209, label %154, label %149

210:                                              ; preds = %214
  %211 = trunc i64 %50 to i32
  %212 = mul nsw i32 %9, %211
  %213 = sext i32 %212 to i64
  br label %274

214:                                              ; preds = %150, %214
  %215 = phi i64 [ 0, %150 ], [ %268, %214 ]
  %216 = getelementptr inbounds float, float* %5, i64 %215
  %217 = getelementptr inbounds float, float* %216, i64 8
  %218 = bitcast float* %217 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %218, i32 0, i32 1, i32 1)
  %219 = getelementptr inbounds float, float* %3, i64 %215
  %220 = getelementptr inbounds float, float* %219, i64 8
  %221 = bitcast float* %220 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %221, i32 0, i32 1, i32 1)
  %222 = getelementptr inbounds float, float* %216, i64 16
  %223 = bitcast float* %222 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %223, i32 0, i32 1, i32 1)
  %224 = getelementptr inbounds float, float* %219, i64 16
  %225 = bitcast float* %224 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %225, i32 0, i32 1, i32 1)
  %226 = getelementptr inbounds float, float* %216, i64 24
  %227 = bitcast float* %226 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %227, i32 0, i32 1, i32 1)
  %228 = getelementptr inbounds float, float* %219, i64 24
  %229 = bitcast float* %228 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %229, i32 0, i32 1, i32 1)
  %230 = getelementptr inbounds float, float* %216, i64 32
  %231 = bitcast float* %230 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %231, i32 0, i32 1, i32 1)
  %232 = getelementptr inbounds float, float* %219, i64 32
  %233 = bitcast float* %232 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %233, i32 0, i32 1, i32 1)
  %234 = bitcast float* %216 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 1, !tbaa !12
  %236 = or i64 %215, 8
  %237 = getelementptr inbounds float, float* %5, i64 %236
  %238 = bitcast float* %237 to <8 x float>*
  %239 = load <8 x float>, <8 x float>* %238, align 1, !tbaa !12
  %240 = or i64 %215, 16
  %241 = getelementptr inbounds float, float* %5, i64 %240
  %242 = bitcast float* %241 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !tbaa !12
  %244 = or i64 %215, 24
  %245 = getelementptr inbounds float, float* %5, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  %247 = load <8 x float>, <8 x float>* %246, align 1, !tbaa !12
  %248 = add nsw i64 %215, %153
  %249 = getelementptr inbounds float, float* %3, i64 %248
  %250 = bitcast float* %249 to <8 x float>*
  %251 = load <8 x float>, <8 x float>* %250, align 1, !tbaa !12
  %252 = add nsw i64 %248, 8
  %253 = getelementptr inbounds float, float* %3, i64 %252
  %254 = bitcast float* %253 to <8 x float>*
  %255 = load <8 x float>, <8 x float>* %254, align 1, !tbaa !12
  %256 = add nsw i64 %248, 16
  %257 = getelementptr inbounds float, float* %3, i64 %256
  %258 = bitcast float* %257 to <8 x float>*
  %259 = load <8 x float>, <8 x float>* %258, align 1, !tbaa !12
  %260 = add nsw i64 %248, 24
  %261 = getelementptr inbounds float, float* %3, i64 %260
  %262 = bitcast float* %261 to <8 x float>*
  %263 = load <8 x float>, <8 x float>* %262, align 1, !tbaa !12
  %264 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %251, <8 x float> %49, <8 x float> %235) #10
  %265 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %255, <8 x float> %49, <8 x float> %239) #10
  %266 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %259, <8 x float> %49, <8 x float> %243) #10
  %267 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> %49, <8 x float> %247) #10
  store <8 x float> %264, <8 x float>* %234, align 1, !tbaa !12
  store <8 x float> %265, <8 x float>* %238, align 1, !tbaa !12
  store <8 x float> %266, <8 x float>* %242, align 1, !tbaa !12
  store <8 x float> %267, <8 x float>* %246, align 1, !tbaa !12
  %268 = add nuw nsw i64 %215, 32
  %269 = icmp ult i64 %268, %14
  br i1 %269, label %214, label %210

270:                                              ; preds = %274
  %271 = trunc i64 %55 to i32
  %272 = mul nsw i32 %9, %271
  %273 = sext i32 %272 to i64
  br label %334

274:                                              ; preds = %210, %274
  %275 = phi i64 [ 0, %210 ], [ %328, %274 ]
  %276 = getelementptr inbounds float, float* %5, i64 %275
  %277 = getelementptr inbounds float, float* %276, i64 8
  %278 = bitcast float* %277 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %278, i32 0, i32 1, i32 1)
  %279 = getelementptr inbounds float, float* %3, i64 %275
  %280 = getelementptr inbounds float, float* %279, i64 8
  %281 = bitcast float* %280 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %281, i32 0, i32 1, i32 1)
  %282 = getelementptr inbounds float, float* %276, i64 16
  %283 = bitcast float* %282 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %283, i32 0, i32 1, i32 1)
  %284 = getelementptr inbounds float, float* %279, i64 16
  %285 = bitcast float* %284 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %285, i32 0, i32 1, i32 1)
  %286 = getelementptr inbounds float, float* %276, i64 24
  %287 = bitcast float* %286 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %287, i32 0, i32 1, i32 1)
  %288 = getelementptr inbounds float, float* %279, i64 24
  %289 = bitcast float* %288 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %289, i32 0, i32 1, i32 1)
  %290 = getelementptr inbounds float, float* %276, i64 32
  %291 = bitcast float* %290 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %291, i32 0, i32 1, i32 1)
  %292 = getelementptr inbounds float, float* %279, i64 32
  %293 = bitcast float* %292 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %293, i32 0, i32 1, i32 1)
  %294 = bitcast float* %276 to <8 x float>*
  %295 = load <8 x float>, <8 x float>* %294, align 1, !tbaa !12
  %296 = or i64 %275, 8
  %297 = getelementptr inbounds float, float* %5, i64 %296
  %298 = bitcast float* %297 to <8 x float>*
  %299 = load <8 x float>, <8 x float>* %298, align 1, !tbaa !12
  %300 = or i64 %275, 16
  %301 = getelementptr inbounds float, float* %5, i64 %300
  %302 = bitcast float* %301 to <8 x float>*
  %303 = load <8 x float>, <8 x float>* %302, align 1, !tbaa !12
  %304 = or i64 %275, 24
  %305 = getelementptr inbounds float, float* %5, i64 %304
  %306 = bitcast float* %305 to <8 x float>*
  %307 = load <8 x float>, <8 x float>* %306, align 1, !tbaa !12
  %308 = add nsw i64 %275, %213
  %309 = getelementptr inbounds float, float* %3, i64 %308
  %310 = bitcast float* %309 to <8 x float>*
  %311 = load <8 x float>, <8 x float>* %310, align 1, !tbaa !12
  %312 = add nsw i64 %308, 8
  %313 = getelementptr inbounds float, float* %3, i64 %312
  %314 = bitcast float* %313 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 1, !tbaa !12
  %316 = add nsw i64 %308, 16
  %317 = getelementptr inbounds float, float* %3, i64 %316
  %318 = bitcast float* %317 to <8 x float>*
  %319 = load <8 x float>, <8 x float>* %318, align 1, !tbaa !12
  %320 = add nsw i64 %308, 24
  %321 = getelementptr inbounds float, float* %3, i64 %320
  %322 = bitcast float* %321 to <8 x float>*
  %323 = load <8 x float>, <8 x float>* %322, align 1, !tbaa !12
  %324 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %311, <8 x float> %54, <8 x float> %295) #10
  %325 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %315, <8 x float> %54, <8 x float> %299) #10
  %326 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %319, <8 x float> %54, <8 x float> %303) #10
  %327 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %323, <8 x float> %54, <8 x float> %307) #10
  store <8 x float> %324, <8 x float>* %294, align 1, !tbaa !12
  store <8 x float> %325, <8 x float>* %298, align 1, !tbaa !12
  store <8 x float> %326, <8 x float>* %302, align 1, !tbaa !12
  store <8 x float> %327, <8 x float>* %306, align 1, !tbaa !12
  %328 = add nuw nsw i64 %275, 32
  %329 = icmp slt i64 %328, %15
  br i1 %329, label %274, label %270

330:                                              ; preds = %334
  %331 = trunc i64 %60 to i32
  %332 = mul nsw i32 %9, %331
  %333 = sext i32 %332 to i64
  br label %394

334:                                              ; preds = %270, %334
  %335 = phi i64 [ 0, %270 ], [ %388, %334 ]
  %336 = getelementptr inbounds float, float* %5, i64 %335
  %337 = getelementptr inbounds float, float* %336, i64 8
  %338 = bitcast float* %337 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %338, i32 0, i32 1, i32 1)
  %339 = getelementptr inbounds float, float* %3, i64 %335
  %340 = getelementptr inbounds float, float* %339, i64 8
  %341 = bitcast float* %340 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %341, i32 0, i32 1, i32 1)
  %342 = getelementptr inbounds float, float* %336, i64 16
  %343 = bitcast float* %342 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %343, i32 0, i32 1, i32 1)
  %344 = getelementptr inbounds float, float* %339, i64 16
  %345 = bitcast float* %344 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %345, i32 0, i32 1, i32 1)
  %346 = getelementptr inbounds float, float* %336, i64 24
  %347 = bitcast float* %346 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %347, i32 0, i32 1, i32 1)
  %348 = getelementptr inbounds float, float* %339, i64 24
  %349 = bitcast float* %348 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %349, i32 0, i32 1, i32 1)
  %350 = getelementptr inbounds float, float* %336, i64 32
  %351 = bitcast float* %350 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %351, i32 0, i32 1, i32 1)
  %352 = getelementptr inbounds float, float* %339, i64 32
  %353 = bitcast float* %352 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %353, i32 0, i32 1, i32 1)
  %354 = bitcast float* %336 to <8 x float>*
  %355 = load <8 x float>, <8 x float>* %354, align 1, !tbaa !12
  %356 = or i64 %335, 8
  %357 = getelementptr inbounds float, float* %5, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  %359 = load <8 x float>, <8 x float>* %358, align 1, !tbaa !12
  %360 = or i64 %335, 16
  %361 = getelementptr inbounds float, float* %5, i64 %360
  %362 = bitcast float* %361 to <8 x float>*
  %363 = load <8 x float>, <8 x float>* %362, align 1, !tbaa !12
  %364 = or i64 %335, 24
  %365 = getelementptr inbounds float, float* %5, i64 %364
  %366 = bitcast float* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 1, !tbaa !12
  %368 = add nsw i64 %335, %273
  %369 = getelementptr inbounds float, float* %3, i64 %368
  %370 = bitcast float* %369 to <8 x float>*
  %371 = load <8 x float>, <8 x float>* %370, align 1, !tbaa !12
  %372 = add nsw i64 %368, 8
  %373 = getelementptr inbounds float, float* %3, i64 %372
  %374 = bitcast float* %373 to <8 x float>*
  %375 = load <8 x float>, <8 x float>* %374, align 1, !tbaa !12
  %376 = add nsw i64 %368, 16
  %377 = getelementptr inbounds float, float* %3, i64 %376
  %378 = bitcast float* %377 to <8 x float>*
  %379 = load <8 x float>, <8 x float>* %378, align 1, !tbaa !12
  %380 = add nsw i64 %368, 24
  %381 = getelementptr inbounds float, float* %3, i64 %380
  %382 = bitcast float* %381 to <8 x float>*
  %383 = load <8 x float>, <8 x float>* %382, align 1, !tbaa !12
  %384 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %371, <8 x float> %59, <8 x float> %355) #10
  %385 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %375, <8 x float> %59, <8 x float> %359) #10
  %386 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %379, <8 x float> %59, <8 x float> %363) #10
  %387 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %383, <8 x float> %59, <8 x float> %367) #10
  store <8 x float> %384, <8 x float>* %354, align 1, !tbaa !12
  store <8 x float> %385, <8 x float>* %358, align 1, !tbaa !12
  store <8 x float> %386, <8 x float>* %362, align 1, !tbaa !12
  store <8 x float> %387, <8 x float>* %366, align 1, !tbaa !12
  %388 = add nuw nsw i64 %335, 32
  %389 = icmp slt i64 %388, %16
  br i1 %389, label %334, label %330

390:                                              ; preds = %394
  %391 = trunc i64 %65 to i32
  %392 = mul nsw i32 %9, %391
  %393 = sext i32 %392 to i64
  br label %454

394:                                              ; preds = %330, %394
  %395 = phi i64 [ 0, %330 ], [ %448, %394 ]
  %396 = getelementptr inbounds float, float* %5, i64 %395
  %397 = getelementptr inbounds float, float* %396, i64 8
  %398 = bitcast float* %397 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %398, i32 0, i32 1, i32 1)
  %399 = getelementptr inbounds float, float* %3, i64 %395
  %400 = getelementptr inbounds float, float* %399, i64 8
  %401 = bitcast float* %400 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %401, i32 0, i32 1, i32 1)
  %402 = getelementptr inbounds float, float* %396, i64 16
  %403 = bitcast float* %402 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %403, i32 0, i32 1, i32 1)
  %404 = getelementptr inbounds float, float* %399, i64 16
  %405 = bitcast float* %404 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %405, i32 0, i32 1, i32 1)
  %406 = getelementptr inbounds float, float* %396, i64 24
  %407 = bitcast float* %406 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %407, i32 0, i32 1, i32 1)
  %408 = getelementptr inbounds float, float* %399, i64 24
  %409 = bitcast float* %408 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %409, i32 0, i32 1, i32 1)
  %410 = getelementptr inbounds float, float* %396, i64 32
  %411 = bitcast float* %410 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %411, i32 0, i32 1, i32 1)
  %412 = getelementptr inbounds float, float* %399, i64 32
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %413, i32 0, i32 1, i32 1)
  %414 = bitcast float* %396 to <8 x float>*
  %415 = load <8 x float>, <8 x float>* %414, align 1, !tbaa !12
  %416 = or i64 %395, 8
  %417 = getelementptr inbounds float, float* %5, i64 %416
  %418 = bitcast float* %417 to <8 x float>*
  %419 = load <8 x float>, <8 x float>* %418, align 1, !tbaa !12
  %420 = or i64 %395, 16
  %421 = getelementptr inbounds float, float* %5, i64 %420
  %422 = bitcast float* %421 to <8 x float>*
  %423 = load <8 x float>, <8 x float>* %422, align 1, !tbaa !12
  %424 = or i64 %395, 24
  %425 = getelementptr inbounds float, float* %5, i64 %424
  %426 = bitcast float* %425 to <8 x float>*
  %427 = load <8 x float>, <8 x float>* %426, align 1, !tbaa !12
  %428 = add nsw i64 %395, %333
  %429 = getelementptr inbounds float, float* %3, i64 %428
  %430 = bitcast float* %429 to <8 x float>*
  %431 = load <8 x float>, <8 x float>* %430, align 1, !tbaa !12
  %432 = add nsw i64 %428, 8
  %433 = getelementptr inbounds float, float* %3, i64 %432
  %434 = bitcast float* %433 to <8 x float>*
  %435 = load <8 x float>, <8 x float>* %434, align 1, !tbaa !12
  %436 = add nsw i64 %428, 16
  %437 = getelementptr inbounds float, float* %3, i64 %436
  %438 = bitcast float* %437 to <8 x float>*
  %439 = load <8 x float>, <8 x float>* %438, align 1, !tbaa !12
  %440 = add nsw i64 %428, 24
  %441 = getelementptr inbounds float, float* %3, i64 %440
  %442 = bitcast float* %441 to <8 x float>*
  %443 = load <8 x float>, <8 x float>* %442, align 1, !tbaa !12
  %444 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %431, <8 x float> %64, <8 x float> %415) #10
  %445 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %435, <8 x float> %64, <8 x float> %419) #10
  %446 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %439, <8 x float> %64, <8 x float> %423) #10
  %447 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %443, <8 x float> %64, <8 x float> %427) #10
  store <8 x float> %444, <8 x float>* %414, align 1, !tbaa !12
  store <8 x float> %445, <8 x float>* %418, align 1, !tbaa !12
  store <8 x float> %446, <8 x float>* %422, align 1, !tbaa !12
  store <8 x float> %447, <8 x float>* %426, align 1, !tbaa !12
  %448 = add nuw nsw i64 %395, 32
  %449 = icmp slt i64 %448, %17
  br i1 %449, label %394, label %390

450:                                              ; preds = %454
  %451 = trunc i64 %70 to i32
  %452 = mul nsw i32 %9, %451
  %453 = sext i32 %452 to i64
  br label %514

454:                                              ; preds = %390, %454
  %455 = phi i64 [ 0, %390 ], [ %508, %454 ]
  %456 = getelementptr inbounds float, float* %5, i64 %455
  %457 = getelementptr inbounds float, float* %456, i64 8
  %458 = bitcast float* %457 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %458, i32 0, i32 1, i32 1)
  %459 = getelementptr inbounds float, float* %3, i64 %455
  %460 = getelementptr inbounds float, float* %459, i64 8
  %461 = bitcast float* %460 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %461, i32 0, i32 1, i32 1)
  %462 = getelementptr inbounds float, float* %456, i64 16
  %463 = bitcast float* %462 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %463, i32 0, i32 1, i32 1)
  %464 = getelementptr inbounds float, float* %459, i64 16
  %465 = bitcast float* %464 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %465, i32 0, i32 1, i32 1)
  %466 = getelementptr inbounds float, float* %456, i64 24
  %467 = bitcast float* %466 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %467, i32 0, i32 1, i32 1)
  %468 = getelementptr inbounds float, float* %459, i64 24
  %469 = bitcast float* %468 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %469, i32 0, i32 1, i32 1)
  %470 = getelementptr inbounds float, float* %456, i64 32
  %471 = bitcast float* %470 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %471, i32 0, i32 1, i32 1)
  %472 = getelementptr inbounds float, float* %459, i64 32
  %473 = bitcast float* %472 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %473, i32 0, i32 1, i32 1)
  %474 = bitcast float* %456 to <8 x float>*
  %475 = load <8 x float>, <8 x float>* %474, align 1, !tbaa !12
  %476 = or i64 %455, 8
  %477 = getelementptr inbounds float, float* %5, i64 %476
  %478 = bitcast float* %477 to <8 x float>*
  %479 = load <8 x float>, <8 x float>* %478, align 1, !tbaa !12
  %480 = or i64 %455, 16
  %481 = getelementptr inbounds float, float* %5, i64 %480
  %482 = bitcast float* %481 to <8 x float>*
  %483 = load <8 x float>, <8 x float>* %482, align 1, !tbaa !12
  %484 = or i64 %455, 24
  %485 = getelementptr inbounds float, float* %5, i64 %484
  %486 = bitcast float* %485 to <8 x float>*
  %487 = load <8 x float>, <8 x float>* %486, align 1, !tbaa !12
  %488 = add nsw i64 %455, %393
  %489 = getelementptr inbounds float, float* %3, i64 %488
  %490 = bitcast float* %489 to <8 x float>*
  %491 = load <8 x float>, <8 x float>* %490, align 1, !tbaa !12
  %492 = add nsw i64 %488, 8
  %493 = getelementptr inbounds float, float* %3, i64 %492
  %494 = bitcast float* %493 to <8 x float>*
  %495 = load <8 x float>, <8 x float>* %494, align 1, !tbaa !12
  %496 = add nsw i64 %488, 16
  %497 = getelementptr inbounds float, float* %3, i64 %496
  %498 = bitcast float* %497 to <8 x float>*
  %499 = load <8 x float>, <8 x float>* %498, align 1, !tbaa !12
  %500 = add nsw i64 %488, 24
  %501 = getelementptr inbounds float, float* %3, i64 %500
  %502 = bitcast float* %501 to <8 x float>*
  %503 = load <8 x float>, <8 x float>* %502, align 1, !tbaa !12
  %504 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %491, <8 x float> %69, <8 x float> %475) #10
  %505 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %495, <8 x float> %69, <8 x float> %479) #10
  %506 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %499, <8 x float> %69, <8 x float> %483) #10
  %507 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %503, <8 x float> %69, <8 x float> %487) #10
  store <8 x float> %504, <8 x float>* %474, align 1, !tbaa !12
  store <8 x float> %505, <8 x float>* %478, align 1, !tbaa !12
  store <8 x float> %506, <8 x float>* %482, align 1, !tbaa !12
  store <8 x float> %507, <8 x float>* %486, align 1, !tbaa !12
  %508 = add nuw nsw i64 %455, 32
  %509 = icmp slt i64 %508, %18
  br i1 %509, label %454, label %450

510:                                              ; preds = %514
  %511 = trunc i64 %75 to i32
  %512 = mul nsw i32 %9, %511
  %513 = sext i32 %512 to i64
  br label %573

514:                                              ; preds = %450, %514
  %515 = phi i64 [ 0, %450 ], [ %568, %514 ]
  %516 = getelementptr inbounds float, float* %5, i64 %515
  %517 = getelementptr inbounds float, float* %516, i64 8
  %518 = bitcast float* %517 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %518, i32 0, i32 1, i32 1)
  %519 = getelementptr inbounds float, float* %3, i64 %515
  %520 = getelementptr inbounds float, float* %519, i64 8
  %521 = bitcast float* %520 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %521, i32 0, i32 1, i32 1)
  %522 = getelementptr inbounds float, float* %516, i64 16
  %523 = bitcast float* %522 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %523, i32 0, i32 1, i32 1)
  %524 = getelementptr inbounds float, float* %519, i64 16
  %525 = bitcast float* %524 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %525, i32 0, i32 1, i32 1)
  %526 = getelementptr inbounds float, float* %516, i64 24
  %527 = bitcast float* %526 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %527, i32 0, i32 1, i32 1)
  %528 = getelementptr inbounds float, float* %519, i64 24
  %529 = bitcast float* %528 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %529, i32 0, i32 1, i32 1)
  %530 = getelementptr inbounds float, float* %516, i64 32
  %531 = bitcast float* %530 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %531, i32 0, i32 1, i32 1)
  %532 = getelementptr inbounds float, float* %519, i64 32
  %533 = bitcast float* %532 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %533, i32 0, i32 1, i32 1)
  %534 = bitcast float* %516 to <8 x float>*
  %535 = load <8 x float>, <8 x float>* %534, align 1, !tbaa !12
  %536 = or i64 %515, 8
  %537 = getelementptr inbounds float, float* %5, i64 %536
  %538 = bitcast float* %537 to <8 x float>*
  %539 = load <8 x float>, <8 x float>* %538, align 1, !tbaa !12
  %540 = or i64 %515, 16
  %541 = getelementptr inbounds float, float* %5, i64 %540
  %542 = bitcast float* %541 to <8 x float>*
  %543 = load <8 x float>, <8 x float>* %542, align 1, !tbaa !12
  %544 = or i64 %515, 24
  %545 = getelementptr inbounds float, float* %5, i64 %544
  %546 = bitcast float* %545 to <8 x float>*
  %547 = load <8 x float>, <8 x float>* %546, align 1, !tbaa !12
  %548 = add nsw i64 %515, %453
  %549 = getelementptr inbounds float, float* %3, i64 %548
  %550 = bitcast float* %549 to <8 x float>*
  %551 = load <8 x float>, <8 x float>* %550, align 1, !tbaa !12
  %552 = add nsw i64 %548, 8
  %553 = getelementptr inbounds float, float* %3, i64 %552
  %554 = bitcast float* %553 to <8 x float>*
  %555 = load <8 x float>, <8 x float>* %554, align 1, !tbaa !12
  %556 = add nsw i64 %548, 16
  %557 = getelementptr inbounds float, float* %3, i64 %556
  %558 = bitcast float* %557 to <8 x float>*
  %559 = load <8 x float>, <8 x float>* %558, align 1, !tbaa !12
  %560 = add nsw i64 %548, 24
  %561 = getelementptr inbounds float, float* %3, i64 %560
  %562 = bitcast float* %561 to <8 x float>*
  %563 = load <8 x float>, <8 x float>* %562, align 1, !tbaa !12
  %564 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %551, <8 x float> %74, <8 x float> %535) #10
  %565 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %555, <8 x float> %74, <8 x float> %539) #10
  %566 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %559, <8 x float> %74, <8 x float> %543) #10
  %567 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %563, <8 x float> %74, <8 x float> %547) #10
  store <8 x float> %564, <8 x float>* %534, align 1, !tbaa !12
  store <8 x float> %565, <8 x float>* %538, align 1, !tbaa !12
  store <8 x float> %566, <8 x float>* %542, align 1, !tbaa !12
  store <8 x float> %567, <8 x float>* %546, align 1, !tbaa !12
  %568 = add nuw nsw i64 %515, 32
  %569 = icmp slt i64 %568, %19
  br i1 %569, label %514, label %510

570:                                              ; preds = %573, %83, %34, %149
  %571 = add nuw nsw i64 %35, 9
  %572 = icmp slt i64 %571, %21
  br i1 %572, label %34, label %22

573:                                              ; preds = %510, %573
  %574 = phi i64 [ 0, %510 ], [ %627, %573 ]
  %575 = getelementptr inbounds float, float* %5, i64 %574
  %576 = getelementptr inbounds float, float* %575, i64 8
  %577 = bitcast float* %576 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %577, i32 0, i32 1, i32 1)
  %578 = getelementptr inbounds float, float* %3, i64 %574
  %579 = getelementptr inbounds float, float* %578, i64 8
  %580 = bitcast float* %579 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %580, i32 0, i32 1, i32 1)
  %581 = getelementptr inbounds float, float* %575, i64 16
  %582 = bitcast float* %581 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %582, i32 0, i32 1, i32 1)
  %583 = getelementptr inbounds float, float* %578, i64 16
  %584 = bitcast float* %583 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %584, i32 0, i32 1, i32 1)
  %585 = getelementptr inbounds float, float* %575, i64 24
  %586 = bitcast float* %585 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %586, i32 0, i32 1, i32 1)
  %587 = getelementptr inbounds float, float* %578, i64 24
  %588 = bitcast float* %587 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %588, i32 0, i32 1, i32 1)
  %589 = getelementptr inbounds float, float* %575, i64 32
  %590 = bitcast float* %589 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %590, i32 0, i32 1, i32 1)
  %591 = getelementptr inbounds float, float* %578, i64 32
  %592 = bitcast float* %591 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %592, i32 0, i32 1, i32 1)
  %593 = bitcast float* %575 to <8 x float>*
  %594 = load <8 x float>, <8 x float>* %593, align 1, !tbaa !12
  %595 = or i64 %574, 8
  %596 = getelementptr inbounds float, float* %5, i64 %595
  %597 = bitcast float* %596 to <8 x float>*
  %598 = load <8 x float>, <8 x float>* %597, align 1, !tbaa !12
  %599 = or i64 %574, 16
  %600 = getelementptr inbounds float, float* %5, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 1, !tbaa !12
  %603 = or i64 %574, 24
  %604 = getelementptr inbounds float, float* %5, i64 %603
  %605 = bitcast float* %604 to <8 x float>*
  %606 = load <8 x float>, <8 x float>* %605, align 1, !tbaa !12
  %607 = add nsw i64 %574, %513
  %608 = getelementptr inbounds float, float* %3, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  %610 = load <8 x float>, <8 x float>* %609, align 1, !tbaa !12
  %611 = add nsw i64 %607, 8
  %612 = getelementptr inbounds float, float* %3, i64 %611
  %613 = bitcast float* %612 to <8 x float>*
  %614 = load <8 x float>, <8 x float>* %613, align 1, !tbaa !12
  %615 = add nsw i64 %607, 16
  %616 = getelementptr inbounds float, float* %3, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 1, !tbaa !12
  %619 = add nsw i64 %607, 24
  %620 = getelementptr inbounds float, float* %3, i64 %619
  %621 = bitcast float* %620 to <8 x float>*
  %622 = load <8 x float>, <8 x float>* %621, align 1, !tbaa !12
  %623 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %610, <8 x float> %79, <8 x float> %594) #10
  %624 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %614, <8 x float> %79, <8 x float> %598) #10
  %625 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %618, <8 x float> %79, <8 x float> %602) #10
  %626 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %622, <8 x float> %79, <8 x float> %606) #10
  store <8 x float> %623, <8 x float>* %593, align 1, !tbaa !12
  store <8 x float> %624, <8 x float>* %597, align 1, !tbaa !12
  store <8 x float> %625, <8 x float>* %601, align 1, !tbaa !12
  store <8 x float> %626, <8 x float>* %605, align 1, !tbaa !12
  %627 = add nuw nsw i64 %574, 32
  %628 = icmp slt i64 %627, %20
  br i1 %628, label %573, label %570
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 81
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui4_uk9.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
