; ModuleID = 'codes/matvec_ui3_uk13.cpp'
source_filename = "codes/matvec_ui3_uk13.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui3_uk13.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 24
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 104
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %9 to i64
  %12 = zext i32 %9 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = zext i32 %9 to i64
  %16 = zext i32 %9 to i64
  %17 = zext i32 %9 to i64
  %18 = zext i32 %9 to i64
  %19 = zext i32 %9 to i64
  %20 = zext i32 %9 to i64
  %21 = zext i32 %9 to i64
  %22 = zext i32 %9 to i64
  %23 = icmp sgt i32 %9, 0
  %24 = zext i32 %9 to i64
  %25 = sext i32 %6 to i64
  br label %38

26:                                               ; preds = %686, %0
  %27 = tail call i64 @llvm.x86.rdtsc()
  %28 = uitofp i64 %27 to double
  %29 = fsub double %28, %2
  %30 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %31 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %32 = shl i32 %31, 1
  %33 = add nsw i32 %32, -1
  %34 = mul nsw i32 %33, %30
  %35 = sitofp i32 %34 to float
  %36 = fptrunc double %29 to float
  %37 = fdiv float %35, %36
  ret float %37

38:                                               ; preds = %8, %686
  %39 = phi i64 [ 0, %8 ], [ %687, %686 ]
  %40 = getelementptr inbounds float, float* %4, i64 %39
  %41 = load float, float* %40, align 4, !tbaa !18
  %42 = insertelement <8 x float> undef, float %41, i32 0
  %43 = shufflevector <8 x float> %42, <8 x float> undef, <8 x i32> zeroinitializer
  %44 = add nuw nsw i64 %39, 1
  %45 = getelementptr inbounds float, float* %4, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !18
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = add nuw nsw i64 %39, 2
  %50 = getelementptr inbounds float, float* %4, i64 %49
  %51 = load float, float* %50, align 4, !tbaa !18
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = add nuw nsw i64 %39, 3
  %55 = getelementptr inbounds float, float* %4, i64 %54
  %56 = load float, float* %55, align 4, !tbaa !18
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = add nuw nsw i64 %39, 4
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = load float, float* %60, align 4, !tbaa !18
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = add nuw nsw i64 %39, 5
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !18
  %67 = insertelement <8 x float> undef, float %66, i32 0
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <8 x i32> zeroinitializer
  %69 = add nuw nsw i64 %39, 6
  %70 = getelementptr inbounds float, float* %4, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !18
  %72 = insertelement <8 x float> undef, float %71, i32 0
  %73 = shufflevector <8 x float> %72, <8 x float> undef, <8 x i32> zeroinitializer
  %74 = add nuw nsw i64 %39, 7
  %75 = getelementptr inbounds float, float* %4, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !18
  %77 = insertelement <8 x float> undef, float %76, i32 0
  %78 = shufflevector <8 x float> %77, <8 x float> undef, <8 x i32> zeroinitializer
  %79 = add nuw nsw i64 %39, 8
  %80 = getelementptr inbounds float, float* %4, i64 %79
  %81 = load float, float* %80, align 4, !tbaa !18
  %82 = insertelement <8 x float> undef, float %81, i32 0
  %83 = shufflevector <8 x float> %82, <8 x float> undef, <8 x i32> zeroinitializer
  %84 = add nuw nsw i64 %39, 9
  %85 = getelementptr inbounds float, float* %4, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !18
  %87 = insertelement <8 x float> undef, float %86, i32 0
  %88 = shufflevector <8 x float> %87, <8 x float> undef, <8 x i32> zeroinitializer
  %89 = add nuw nsw i64 %39, 10
  %90 = getelementptr inbounds float, float* %4, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !18
  %92 = insertelement <8 x float> undef, float %91, i32 0
  %93 = shufflevector <8 x float> %92, <8 x float> undef, <8 x i32> zeroinitializer
  %94 = add nuw nsw i64 %39, 11
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !18
  %97 = insertelement <8 x float> undef, float %96, i32 0
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <8 x i32> zeroinitializer
  %99 = add nuw nsw i64 %39, 12
  %100 = getelementptr inbounds float, float* %4, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !18
  %102 = insertelement <8 x float> undef, float %101, i32 0
  %103 = shufflevector <8 x float> %102, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %104, label %686

104:                                              ; preds = %38
  %105 = trunc i64 %39 to i32
  %106 = mul nsw i32 %9, %105
  br label %112

107:                                              ; preds = %112
  br i1 %10, label %108, label %686

108:                                              ; preds = %107
  %109 = trunc i64 %44 to i32
  %110 = mul nsw i32 %9, %109
  %111 = sext i32 %110 to i64
  br label %164

112:                                              ; preds = %104, %112
  %113 = phi i64 [ 0, %104 ], [ %157, %112 ]
  %114 = getelementptr inbounds float, float* %5, i64 %113
  %115 = getelementptr inbounds float, float* %114, i64 8
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %3, i64 %113
  %118 = getelementptr inbounds float, float* %117, i64 8
  %119 = bitcast float* %118 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %119, i32 0, i32 1, i32 1)
  %120 = getelementptr inbounds float, float* %114, i64 16
  %121 = bitcast float* %120 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %121, i32 0, i32 1, i32 1)
  %122 = getelementptr inbounds float, float* %117, i64 16
  %123 = bitcast float* %122 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %123, i32 0, i32 1, i32 1)
  %124 = getelementptr inbounds float, float* %114, i64 24
  %125 = bitcast float* %124 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %125, i32 0, i32 1, i32 1)
  %126 = getelementptr inbounds float, float* %117, i64 24
  %127 = bitcast float* %126 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %127, i32 0, i32 1, i32 1)
  %128 = bitcast float* %114 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !tbaa !12
  %130 = add nuw nsw i64 %113, 8
  %131 = getelementptr inbounds float, float* %5, i64 %130
  %132 = bitcast float* %131 to <8 x float>*
  %133 = load <8 x float>, <8 x float>* %132, align 1, !tbaa !12
  %134 = add nuw nsw i64 %113, 16
  %135 = getelementptr inbounds float, float* %5, i64 %134
  %136 = bitcast float* %135 to <8 x float>*
  %137 = load <8 x float>, <8 x float>* %136, align 1, !tbaa !12
  %138 = trunc i64 %113 to i32
  %139 = add nsw i32 %106, %138
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds float, float* %3, i64 %140
  %142 = bitcast float* %141 to <8 x float>*
  %143 = load <8 x float>, <8 x float>* %142, align 1, !tbaa !12
  %144 = add nsw i32 %139, 8
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds float, float* %3, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = add nsw i32 %139, 16
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds float, float* %3, i64 %150
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !tbaa !12
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %143, <8 x float> %43, <8 x float> %129) #10
  %155 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %148, <8 x float> %43, <8 x float> %133) #10
  %156 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %153, <8 x float> %43, <8 x float> %137) #10
  store <8 x float> %154, <8 x float>* %128, align 1, !tbaa !12
  store <8 x float> %155, <8 x float>* %132, align 1, !tbaa !12
  store <8 x float> %156, <8 x float>* %136, align 1, !tbaa !12
  %157 = add nuw nsw i64 %113, 24
  %158 = icmp ult i64 %157, %11
  br i1 %158, label %112, label %107

159:                                              ; preds = %164
  br i1 %10, label %160, label %686

160:                                              ; preds = %159
  %161 = trunc i64 %49 to i32
  %162 = mul nsw i32 %9, %161
  %163 = sext i32 %162 to i64
  br label %212

164:                                              ; preds = %108, %164
  %165 = phi i64 [ 0, %108 ], [ %205, %164 ]
  %166 = getelementptr inbounds float, float* %5, i64 %165
  %167 = getelementptr inbounds float, float* %166, i64 8
  %168 = bitcast float* %167 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %168, i32 0, i32 1, i32 1)
  %169 = getelementptr inbounds float, float* %3, i64 %165
  %170 = getelementptr inbounds float, float* %169, i64 8
  %171 = bitcast float* %170 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %171, i32 0, i32 1, i32 1)
  %172 = getelementptr inbounds float, float* %166, i64 16
  %173 = bitcast float* %172 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %173, i32 0, i32 1, i32 1)
  %174 = getelementptr inbounds float, float* %169, i64 16
  %175 = bitcast float* %174 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %175, i32 0, i32 1, i32 1)
  %176 = getelementptr inbounds float, float* %166, i64 24
  %177 = bitcast float* %176 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %177, i32 0, i32 1, i32 1)
  %178 = getelementptr inbounds float, float* %169, i64 24
  %179 = bitcast float* %178 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %179, i32 0, i32 1, i32 1)
  %180 = bitcast float* %166 to <8 x float>*
  %181 = load <8 x float>, <8 x float>* %180, align 1, !tbaa !12
  %182 = add nuw nsw i64 %165, 8
  %183 = getelementptr inbounds float, float* %5, i64 %182
  %184 = bitcast float* %183 to <8 x float>*
  %185 = load <8 x float>, <8 x float>* %184, align 1, !tbaa !12
  %186 = add nuw nsw i64 %165, 16
  %187 = getelementptr inbounds float, float* %5, i64 %186
  %188 = bitcast float* %187 to <8 x float>*
  %189 = load <8 x float>, <8 x float>* %188, align 1, !tbaa !12
  %190 = add nsw i64 %165, %111
  %191 = getelementptr inbounds float, float* %3, i64 %190
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 1, !tbaa !12
  %194 = add nsw i64 %190, 8
  %195 = getelementptr inbounds float, float* %3, i64 %194
  %196 = bitcast float* %195 to <8 x float>*
  %197 = load <8 x float>, <8 x float>* %196, align 1, !tbaa !12
  %198 = add nsw i64 %190, 16
  %199 = getelementptr inbounds float, float* %3, i64 %198
  %200 = bitcast float* %199 to <8 x float>*
  %201 = load <8 x float>, <8 x float>* %200, align 1, !tbaa !12
  %202 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %193, <8 x float> %48, <8 x float> %181) #10
  %203 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %197, <8 x float> %48, <8 x float> %185) #10
  %204 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %201, <8 x float> %48, <8 x float> %189) #10
  store <8 x float> %202, <8 x float>* %180, align 1, !tbaa !12
  store <8 x float> %203, <8 x float>* %184, align 1, !tbaa !12
  store <8 x float> %204, <8 x float>* %188, align 1, !tbaa !12
  %205 = add nuw nsw i64 %165, 24
  %206 = icmp ult i64 %205, %12
  br i1 %206, label %164, label %159

207:                                              ; preds = %212
  br i1 %10, label %208, label %686

208:                                              ; preds = %207
  %209 = trunc i64 %54 to i32
  %210 = mul nsw i32 %9, %209
  %211 = sext i32 %210 to i64
  br label %260

212:                                              ; preds = %160, %212
  %213 = phi i64 [ 0, %160 ], [ %253, %212 ]
  %214 = getelementptr inbounds float, float* %5, i64 %213
  %215 = getelementptr inbounds float, float* %214, i64 8
  %216 = bitcast float* %215 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %216, i32 0, i32 1, i32 1)
  %217 = getelementptr inbounds float, float* %3, i64 %213
  %218 = getelementptr inbounds float, float* %217, i64 8
  %219 = bitcast float* %218 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %219, i32 0, i32 1, i32 1)
  %220 = getelementptr inbounds float, float* %214, i64 16
  %221 = bitcast float* %220 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %221, i32 0, i32 1, i32 1)
  %222 = getelementptr inbounds float, float* %217, i64 16
  %223 = bitcast float* %222 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %223, i32 0, i32 1, i32 1)
  %224 = getelementptr inbounds float, float* %214, i64 24
  %225 = bitcast float* %224 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %225, i32 0, i32 1, i32 1)
  %226 = getelementptr inbounds float, float* %217, i64 24
  %227 = bitcast float* %226 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %227, i32 0, i32 1, i32 1)
  %228 = bitcast float* %214 to <8 x float>*
  %229 = load <8 x float>, <8 x float>* %228, align 1, !tbaa !12
  %230 = add nuw nsw i64 %213, 8
  %231 = getelementptr inbounds float, float* %5, i64 %230
  %232 = bitcast float* %231 to <8 x float>*
  %233 = load <8 x float>, <8 x float>* %232, align 1, !tbaa !12
  %234 = add nuw nsw i64 %213, 16
  %235 = getelementptr inbounds float, float* %5, i64 %234
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 1, !tbaa !12
  %238 = add nsw i64 %213, %163
  %239 = getelementptr inbounds float, float* %3, i64 %238
  %240 = bitcast float* %239 to <8 x float>*
  %241 = load <8 x float>, <8 x float>* %240, align 1, !tbaa !12
  %242 = add nsw i64 %238, 8
  %243 = getelementptr inbounds float, float* %3, i64 %242
  %244 = bitcast float* %243 to <8 x float>*
  %245 = load <8 x float>, <8 x float>* %244, align 1, !tbaa !12
  %246 = add nsw i64 %238, 16
  %247 = getelementptr inbounds float, float* %3, i64 %246
  %248 = bitcast float* %247 to <8 x float>*
  %249 = load <8 x float>, <8 x float>* %248, align 1, !tbaa !12
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %241, <8 x float> %53, <8 x float> %229) #10
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %245, <8 x float> %53, <8 x float> %233) #10
  %252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %53, <8 x float> %237) #10
  store <8 x float> %250, <8 x float>* %228, align 1, !tbaa !12
  store <8 x float> %251, <8 x float>* %232, align 1, !tbaa !12
  store <8 x float> %252, <8 x float>* %236, align 1, !tbaa !12
  %253 = add nuw nsw i64 %213, 24
  %254 = icmp ult i64 %253, %13
  br i1 %254, label %212, label %207

255:                                              ; preds = %260
  br i1 %10, label %256, label %686

256:                                              ; preds = %255
  %257 = trunc i64 %59 to i32
  %258 = mul nsw i32 %9, %257
  %259 = sext i32 %258 to i64
  br label %308

260:                                              ; preds = %208, %260
  %261 = phi i64 [ 0, %208 ], [ %301, %260 ]
  %262 = getelementptr inbounds float, float* %5, i64 %261
  %263 = getelementptr inbounds float, float* %262, i64 8
  %264 = bitcast float* %263 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %264, i32 0, i32 1, i32 1)
  %265 = getelementptr inbounds float, float* %3, i64 %261
  %266 = getelementptr inbounds float, float* %265, i64 8
  %267 = bitcast float* %266 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %267, i32 0, i32 1, i32 1)
  %268 = getelementptr inbounds float, float* %262, i64 16
  %269 = bitcast float* %268 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %269, i32 0, i32 1, i32 1)
  %270 = getelementptr inbounds float, float* %265, i64 16
  %271 = bitcast float* %270 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %271, i32 0, i32 1, i32 1)
  %272 = getelementptr inbounds float, float* %262, i64 24
  %273 = bitcast float* %272 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %273, i32 0, i32 1, i32 1)
  %274 = getelementptr inbounds float, float* %265, i64 24
  %275 = bitcast float* %274 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %275, i32 0, i32 1, i32 1)
  %276 = bitcast float* %262 to <8 x float>*
  %277 = load <8 x float>, <8 x float>* %276, align 1, !tbaa !12
  %278 = add nuw nsw i64 %261, 8
  %279 = getelementptr inbounds float, float* %5, i64 %278
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !tbaa !12
  %282 = add nuw nsw i64 %261, 16
  %283 = getelementptr inbounds float, float* %5, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 1, !tbaa !12
  %286 = add nsw i64 %261, %211
  %287 = getelementptr inbounds float, float* %3, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 1, !tbaa !12
  %290 = add nsw i64 %286, 8
  %291 = getelementptr inbounds float, float* %3, i64 %290
  %292 = bitcast float* %291 to <8 x float>*
  %293 = load <8 x float>, <8 x float>* %292, align 1, !tbaa !12
  %294 = add nsw i64 %286, 16
  %295 = getelementptr inbounds float, float* %3, i64 %294
  %296 = bitcast float* %295 to <8 x float>*
  %297 = load <8 x float>, <8 x float>* %296, align 1, !tbaa !12
  %298 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %289, <8 x float> %58, <8 x float> %277) #10
  %299 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %293, <8 x float> %58, <8 x float> %281) #10
  %300 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %297, <8 x float> %58, <8 x float> %285) #10
  store <8 x float> %298, <8 x float>* %276, align 1, !tbaa !12
  store <8 x float> %299, <8 x float>* %280, align 1, !tbaa !12
  store <8 x float> %300, <8 x float>* %284, align 1, !tbaa !12
  %301 = add nuw nsw i64 %261, 24
  %302 = icmp ult i64 %301, %14
  br i1 %302, label %260, label %255

303:                                              ; preds = %308
  br i1 %10, label %304, label %686

304:                                              ; preds = %303
  %305 = trunc i64 %64 to i32
  %306 = mul nsw i32 %9, %305
  %307 = sext i32 %306 to i64
  br label %356

308:                                              ; preds = %256, %308
  %309 = phi i64 [ 0, %256 ], [ %349, %308 ]
  %310 = getelementptr inbounds float, float* %5, i64 %309
  %311 = getelementptr inbounds float, float* %310, i64 8
  %312 = bitcast float* %311 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %312, i32 0, i32 1, i32 1)
  %313 = getelementptr inbounds float, float* %3, i64 %309
  %314 = getelementptr inbounds float, float* %313, i64 8
  %315 = bitcast float* %314 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %315, i32 0, i32 1, i32 1)
  %316 = getelementptr inbounds float, float* %310, i64 16
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %313, i64 16
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = getelementptr inbounds float, float* %310, i64 24
  %321 = bitcast float* %320 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %321, i32 0, i32 1, i32 1)
  %322 = getelementptr inbounds float, float* %313, i64 24
  %323 = bitcast float* %322 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %323, i32 0, i32 1, i32 1)
  %324 = bitcast float* %310 to <8 x float>*
  %325 = load <8 x float>, <8 x float>* %324, align 1, !tbaa !12
  %326 = add nuw nsw i64 %309, 8
  %327 = getelementptr inbounds float, float* %5, i64 %326
  %328 = bitcast float* %327 to <8 x float>*
  %329 = load <8 x float>, <8 x float>* %328, align 1, !tbaa !12
  %330 = add nuw nsw i64 %309, 16
  %331 = getelementptr inbounds float, float* %5, i64 %330
  %332 = bitcast float* %331 to <8 x float>*
  %333 = load <8 x float>, <8 x float>* %332, align 1, !tbaa !12
  %334 = add nsw i64 %309, %259
  %335 = getelementptr inbounds float, float* %3, i64 %334
  %336 = bitcast float* %335 to <8 x float>*
  %337 = load <8 x float>, <8 x float>* %336, align 1, !tbaa !12
  %338 = add nsw i64 %334, 8
  %339 = getelementptr inbounds float, float* %3, i64 %338
  %340 = bitcast float* %339 to <8 x float>*
  %341 = load <8 x float>, <8 x float>* %340, align 1, !tbaa !12
  %342 = add nsw i64 %334, 16
  %343 = getelementptr inbounds float, float* %3, i64 %342
  %344 = bitcast float* %343 to <8 x float>*
  %345 = load <8 x float>, <8 x float>* %344, align 1, !tbaa !12
  %346 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %337, <8 x float> %63, <8 x float> %325) #10
  %347 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %341, <8 x float> %63, <8 x float> %329) #10
  %348 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %345, <8 x float> %63, <8 x float> %333) #10
  store <8 x float> %346, <8 x float>* %324, align 1, !tbaa !12
  store <8 x float> %347, <8 x float>* %328, align 1, !tbaa !12
  store <8 x float> %348, <8 x float>* %332, align 1, !tbaa !12
  %349 = add nuw nsw i64 %309, 24
  %350 = icmp ult i64 %349, %15
  br i1 %350, label %308, label %303

351:                                              ; preds = %356
  br i1 %10, label %352, label %686

352:                                              ; preds = %351
  %353 = trunc i64 %69 to i32
  %354 = mul nsw i32 %9, %353
  %355 = sext i32 %354 to i64
  br label %404

356:                                              ; preds = %304, %356
  %357 = phi i64 [ 0, %304 ], [ %397, %356 ]
  %358 = getelementptr inbounds float, float* %5, i64 %357
  %359 = getelementptr inbounds float, float* %358, i64 8
  %360 = bitcast float* %359 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %360, i32 0, i32 1, i32 1)
  %361 = getelementptr inbounds float, float* %3, i64 %357
  %362 = getelementptr inbounds float, float* %361, i64 8
  %363 = bitcast float* %362 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %363, i32 0, i32 1, i32 1)
  %364 = getelementptr inbounds float, float* %358, i64 16
  %365 = bitcast float* %364 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %365, i32 0, i32 1, i32 1)
  %366 = getelementptr inbounds float, float* %361, i64 16
  %367 = bitcast float* %366 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %367, i32 0, i32 1, i32 1)
  %368 = getelementptr inbounds float, float* %358, i64 24
  %369 = bitcast float* %368 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %369, i32 0, i32 1, i32 1)
  %370 = getelementptr inbounds float, float* %361, i64 24
  %371 = bitcast float* %370 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %371, i32 0, i32 1, i32 1)
  %372 = bitcast float* %358 to <8 x float>*
  %373 = load <8 x float>, <8 x float>* %372, align 1, !tbaa !12
  %374 = add nuw nsw i64 %357, 8
  %375 = getelementptr inbounds float, float* %5, i64 %374
  %376 = bitcast float* %375 to <8 x float>*
  %377 = load <8 x float>, <8 x float>* %376, align 1, !tbaa !12
  %378 = add nuw nsw i64 %357, 16
  %379 = getelementptr inbounds float, float* %5, i64 %378
  %380 = bitcast float* %379 to <8 x float>*
  %381 = load <8 x float>, <8 x float>* %380, align 1, !tbaa !12
  %382 = add nsw i64 %357, %307
  %383 = getelementptr inbounds float, float* %3, i64 %382
  %384 = bitcast float* %383 to <8 x float>*
  %385 = load <8 x float>, <8 x float>* %384, align 1, !tbaa !12
  %386 = add nsw i64 %382, 8
  %387 = getelementptr inbounds float, float* %3, i64 %386
  %388 = bitcast float* %387 to <8 x float>*
  %389 = load <8 x float>, <8 x float>* %388, align 1, !tbaa !12
  %390 = add nsw i64 %382, 16
  %391 = getelementptr inbounds float, float* %3, i64 %390
  %392 = bitcast float* %391 to <8 x float>*
  %393 = load <8 x float>, <8 x float>* %392, align 1, !tbaa !12
  %394 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %385, <8 x float> %68, <8 x float> %373) #10
  %395 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %68, <8 x float> %377) #10
  %396 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %393, <8 x float> %68, <8 x float> %381) #10
  store <8 x float> %394, <8 x float>* %372, align 1, !tbaa !12
  store <8 x float> %395, <8 x float>* %376, align 1, !tbaa !12
  store <8 x float> %396, <8 x float>* %380, align 1, !tbaa !12
  %397 = add nuw nsw i64 %357, 24
  %398 = icmp ult i64 %397, %16
  br i1 %398, label %356, label %351

399:                                              ; preds = %404
  br i1 %10, label %400, label %686

400:                                              ; preds = %399
  %401 = trunc i64 %74 to i32
  %402 = mul nsw i32 %9, %401
  %403 = sext i32 %402 to i64
  br label %452

404:                                              ; preds = %352, %404
  %405 = phi i64 [ 0, %352 ], [ %445, %404 ]
  %406 = getelementptr inbounds float, float* %5, i64 %405
  %407 = getelementptr inbounds float, float* %406, i64 8
  %408 = bitcast float* %407 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %408, i32 0, i32 1, i32 1)
  %409 = getelementptr inbounds float, float* %3, i64 %405
  %410 = getelementptr inbounds float, float* %409, i64 8
  %411 = bitcast float* %410 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %411, i32 0, i32 1, i32 1)
  %412 = getelementptr inbounds float, float* %406, i64 16
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %413, i32 0, i32 1, i32 1)
  %414 = getelementptr inbounds float, float* %409, i64 16
  %415 = bitcast float* %414 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %415, i32 0, i32 1, i32 1)
  %416 = getelementptr inbounds float, float* %406, i64 24
  %417 = bitcast float* %416 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %417, i32 0, i32 1, i32 1)
  %418 = getelementptr inbounds float, float* %409, i64 24
  %419 = bitcast float* %418 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %419, i32 0, i32 1, i32 1)
  %420 = bitcast float* %406 to <8 x float>*
  %421 = load <8 x float>, <8 x float>* %420, align 1, !tbaa !12
  %422 = add nuw nsw i64 %405, 8
  %423 = getelementptr inbounds float, float* %5, i64 %422
  %424 = bitcast float* %423 to <8 x float>*
  %425 = load <8 x float>, <8 x float>* %424, align 1, !tbaa !12
  %426 = add nuw nsw i64 %405, 16
  %427 = getelementptr inbounds float, float* %5, i64 %426
  %428 = bitcast float* %427 to <8 x float>*
  %429 = load <8 x float>, <8 x float>* %428, align 1, !tbaa !12
  %430 = add nsw i64 %405, %355
  %431 = getelementptr inbounds float, float* %3, i64 %430
  %432 = bitcast float* %431 to <8 x float>*
  %433 = load <8 x float>, <8 x float>* %432, align 1, !tbaa !12
  %434 = add nsw i64 %430, 8
  %435 = getelementptr inbounds float, float* %3, i64 %434
  %436 = bitcast float* %435 to <8 x float>*
  %437 = load <8 x float>, <8 x float>* %436, align 1, !tbaa !12
  %438 = add nsw i64 %430, 16
  %439 = getelementptr inbounds float, float* %3, i64 %438
  %440 = bitcast float* %439 to <8 x float>*
  %441 = load <8 x float>, <8 x float>* %440, align 1, !tbaa !12
  %442 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %433, <8 x float> %73, <8 x float> %421) #10
  %443 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %437, <8 x float> %73, <8 x float> %425) #10
  %444 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %441, <8 x float> %73, <8 x float> %429) #10
  store <8 x float> %442, <8 x float>* %420, align 1, !tbaa !12
  store <8 x float> %443, <8 x float>* %424, align 1, !tbaa !12
  store <8 x float> %444, <8 x float>* %428, align 1, !tbaa !12
  %445 = add nuw nsw i64 %405, 24
  %446 = icmp ult i64 %445, %17
  br i1 %446, label %404, label %399

447:                                              ; preds = %452
  br i1 %10, label %448, label %686

448:                                              ; preds = %447
  %449 = trunc i64 %79 to i32
  %450 = mul nsw i32 %9, %449
  %451 = sext i32 %450 to i64
  br label %500

452:                                              ; preds = %400, %452
  %453 = phi i64 [ 0, %400 ], [ %493, %452 ]
  %454 = getelementptr inbounds float, float* %5, i64 %453
  %455 = getelementptr inbounds float, float* %454, i64 8
  %456 = bitcast float* %455 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %456, i32 0, i32 1, i32 1)
  %457 = getelementptr inbounds float, float* %3, i64 %453
  %458 = getelementptr inbounds float, float* %457, i64 8
  %459 = bitcast float* %458 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %459, i32 0, i32 1, i32 1)
  %460 = getelementptr inbounds float, float* %454, i64 16
  %461 = bitcast float* %460 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %461, i32 0, i32 1, i32 1)
  %462 = getelementptr inbounds float, float* %457, i64 16
  %463 = bitcast float* %462 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %463, i32 0, i32 1, i32 1)
  %464 = getelementptr inbounds float, float* %454, i64 24
  %465 = bitcast float* %464 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %465, i32 0, i32 1, i32 1)
  %466 = getelementptr inbounds float, float* %457, i64 24
  %467 = bitcast float* %466 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %467, i32 0, i32 1, i32 1)
  %468 = bitcast float* %454 to <8 x float>*
  %469 = load <8 x float>, <8 x float>* %468, align 1, !tbaa !12
  %470 = add nuw nsw i64 %453, 8
  %471 = getelementptr inbounds float, float* %5, i64 %470
  %472 = bitcast float* %471 to <8 x float>*
  %473 = load <8 x float>, <8 x float>* %472, align 1, !tbaa !12
  %474 = add nuw nsw i64 %453, 16
  %475 = getelementptr inbounds float, float* %5, i64 %474
  %476 = bitcast float* %475 to <8 x float>*
  %477 = load <8 x float>, <8 x float>* %476, align 1, !tbaa !12
  %478 = add nsw i64 %453, %403
  %479 = getelementptr inbounds float, float* %3, i64 %478
  %480 = bitcast float* %479 to <8 x float>*
  %481 = load <8 x float>, <8 x float>* %480, align 1, !tbaa !12
  %482 = add nsw i64 %478, 8
  %483 = getelementptr inbounds float, float* %3, i64 %482
  %484 = bitcast float* %483 to <8 x float>*
  %485 = load <8 x float>, <8 x float>* %484, align 1, !tbaa !12
  %486 = add nsw i64 %478, 16
  %487 = getelementptr inbounds float, float* %3, i64 %486
  %488 = bitcast float* %487 to <8 x float>*
  %489 = load <8 x float>, <8 x float>* %488, align 1, !tbaa !12
  %490 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %481, <8 x float> %78, <8 x float> %469) #10
  %491 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %485, <8 x float> %78, <8 x float> %473) #10
  %492 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %489, <8 x float> %78, <8 x float> %477) #10
  store <8 x float> %490, <8 x float>* %468, align 1, !tbaa !12
  store <8 x float> %491, <8 x float>* %472, align 1, !tbaa !12
  store <8 x float> %492, <8 x float>* %476, align 1, !tbaa !12
  %493 = add nuw nsw i64 %453, 24
  %494 = icmp ult i64 %493, %18
  br i1 %494, label %452, label %447

495:                                              ; preds = %500
  br i1 %10, label %496, label %686

496:                                              ; preds = %495
  %497 = trunc i64 %84 to i32
  %498 = mul nsw i32 %9, %497
  %499 = sext i32 %498 to i64
  br label %548

500:                                              ; preds = %448, %500
  %501 = phi i64 [ 0, %448 ], [ %541, %500 ]
  %502 = getelementptr inbounds float, float* %5, i64 %501
  %503 = getelementptr inbounds float, float* %502, i64 8
  %504 = bitcast float* %503 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %504, i32 0, i32 1, i32 1)
  %505 = getelementptr inbounds float, float* %3, i64 %501
  %506 = getelementptr inbounds float, float* %505, i64 8
  %507 = bitcast float* %506 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %507, i32 0, i32 1, i32 1)
  %508 = getelementptr inbounds float, float* %502, i64 16
  %509 = bitcast float* %508 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %509, i32 0, i32 1, i32 1)
  %510 = getelementptr inbounds float, float* %505, i64 16
  %511 = bitcast float* %510 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %511, i32 0, i32 1, i32 1)
  %512 = getelementptr inbounds float, float* %502, i64 24
  %513 = bitcast float* %512 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %513, i32 0, i32 1, i32 1)
  %514 = getelementptr inbounds float, float* %505, i64 24
  %515 = bitcast float* %514 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %515, i32 0, i32 1, i32 1)
  %516 = bitcast float* %502 to <8 x float>*
  %517 = load <8 x float>, <8 x float>* %516, align 1, !tbaa !12
  %518 = add nuw nsw i64 %501, 8
  %519 = getelementptr inbounds float, float* %5, i64 %518
  %520 = bitcast float* %519 to <8 x float>*
  %521 = load <8 x float>, <8 x float>* %520, align 1, !tbaa !12
  %522 = add nuw nsw i64 %501, 16
  %523 = getelementptr inbounds float, float* %5, i64 %522
  %524 = bitcast float* %523 to <8 x float>*
  %525 = load <8 x float>, <8 x float>* %524, align 1, !tbaa !12
  %526 = add nsw i64 %501, %451
  %527 = getelementptr inbounds float, float* %3, i64 %526
  %528 = bitcast float* %527 to <8 x float>*
  %529 = load <8 x float>, <8 x float>* %528, align 1, !tbaa !12
  %530 = add nsw i64 %526, 8
  %531 = getelementptr inbounds float, float* %3, i64 %530
  %532 = bitcast float* %531 to <8 x float>*
  %533 = load <8 x float>, <8 x float>* %532, align 1, !tbaa !12
  %534 = add nsw i64 %526, 16
  %535 = getelementptr inbounds float, float* %3, i64 %534
  %536 = bitcast float* %535 to <8 x float>*
  %537 = load <8 x float>, <8 x float>* %536, align 1, !tbaa !12
  %538 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %529, <8 x float> %83, <8 x float> %517) #10
  %539 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %533, <8 x float> %83, <8 x float> %521) #10
  %540 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %537, <8 x float> %83, <8 x float> %525) #10
  store <8 x float> %538, <8 x float>* %516, align 1, !tbaa !12
  store <8 x float> %539, <8 x float>* %520, align 1, !tbaa !12
  store <8 x float> %540, <8 x float>* %524, align 1, !tbaa !12
  %541 = add nuw nsw i64 %501, 24
  %542 = icmp ult i64 %541, %19
  br i1 %542, label %500, label %495

543:                                              ; preds = %548
  br i1 %10, label %544, label %686

544:                                              ; preds = %543
  %545 = trunc i64 %89 to i32
  %546 = mul nsw i32 %9, %545
  %547 = sext i32 %546 to i64
  br label %596

548:                                              ; preds = %496, %548
  %549 = phi i64 [ 0, %496 ], [ %589, %548 ]
  %550 = getelementptr inbounds float, float* %5, i64 %549
  %551 = getelementptr inbounds float, float* %550, i64 8
  %552 = bitcast float* %551 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %552, i32 0, i32 1, i32 1)
  %553 = getelementptr inbounds float, float* %3, i64 %549
  %554 = getelementptr inbounds float, float* %553, i64 8
  %555 = bitcast float* %554 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %555, i32 0, i32 1, i32 1)
  %556 = getelementptr inbounds float, float* %550, i64 16
  %557 = bitcast float* %556 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %557, i32 0, i32 1, i32 1)
  %558 = getelementptr inbounds float, float* %553, i64 16
  %559 = bitcast float* %558 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %559, i32 0, i32 1, i32 1)
  %560 = getelementptr inbounds float, float* %550, i64 24
  %561 = bitcast float* %560 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %561, i32 0, i32 1, i32 1)
  %562 = getelementptr inbounds float, float* %553, i64 24
  %563 = bitcast float* %562 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %563, i32 0, i32 1, i32 1)
  %564 = bitcast float* %550 to <8 x float>*
  %565 = load <8 x float>, <8 x float>* %564, align 1, !tbaa !12
  %566 = add nuw nsw i64 %549, 8
  %567 = getelementptr inbounds float, float* %5, i64 %566
  %568 = bitcast float* %567 to <8 x float>*
  %569 = load <8 x float>, <8 x float>* %568, align 1, !tbaa !12
  %570 = add nuw nsw i64 %549, 16
  %571 = getelementptr inbounds float, float* %5, i64 %570
  %572 = bitcast float* %571 to <8 x float>*
  %573 = load <8 x float>, <8 x float>* %572, align 1, !tbaa !12
  %574 = add nsw i64 %549, %499
  %575 = getelementptr inbounds float, float* %3, i64 %574
  %576 = bitcast float* %575 to <8 x float>*
  %577 = load <8 x float>, <8 x float>* %576, align 1, !tbaa !12
  %578 = add nsw i64 %574, 8
  %579 = getelementptr inbounds float, float* %3, i64 %578
  %580 = bitcast float* %579 to <8 x float>*
  %581 = load <8 x float>, <8 x float>* %580, align 1, !tbaa !12
  %582 = add nsw i64 %574, 16
  %583 = getelementptr inbounds float, float* %3, i64 %582
  %584 = bitcast float* %583 to <8 x float>*
  %585 = load <8 x float>, <8 x float>* %584, align 1, !tbaa !12
  %586 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %577, <8 x float> %88, <8 x float> %565) #10
  %587 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %581, <8 x float> %88, <8 x float> %569) #10
  %588 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %585, <8 x float> %88, <8 x float> %573) #10
  store <8 x float> %586, <8 x float>* %564, align 1, !tbaa !12
  store <8 x float> %587, <8 x float>* %568, align 1, !tbaa !12
  store <8 x float> %588, <8 x float>* %572, align 1, !tbaa !12
  %589 = add nuw nsw i64 %549, 24
  %590 = icmp ult i64 %589, %20
  br i1 %590, label %548, label %543

591:                                              ; preds = %596
  br i1 %10, label %592, label %686

592:                                              ; preds = %591
  %593 = trunc i64 %94 to i32
  %594 = mul nsw i32 %9, %593
  %595 = sext i32 %594 to i64
  br label %643

596:                                              ; preds = %544, %596
  %597 = phi i64 [ 0, %544 ], [ %637, %596 ]
  %598 = getelementptr inbounds float, float* %5, i64 %597
  %599 = getelementptr inbounds float, float* %598, i64 8
  %600 = bitcast float* %599 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %600, i32 0, i32 1, i32 1)
  %601 = getelementptr inbounds float, float* %3, i64 %597
  %602 = getelementptr inbounds float, float* %601, i64 8
  %603 = bitcast float* %602 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %603, i32 0, i32 1, i32 1)
  %604 = getelementptr inbounds float, float* %598, i64 16
  %605 = bitcast float* %604 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %605, i32 0, i32 1, i32 1)
  %606 = getelementptr inbounds float, float* %601, i64 16
  %607 = bitcast float* %606 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %607, i32 0, i32 1, i32 1)
  %608 = getelementptr inbounds float, float* %598, i64 24
  %609 = bitcast float* %608 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %609, i32 0, i32 1, i32 1)
  %610 = getelementptr inbounds float, float* %601, i64 24
  %611 = bitcast float* %610 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %611, i32 0, i32 1, i32 1)
  %612 = bitcast float* %598 to <8 x float>*
  %613 = load <8 x float>, <8 x float>* %612, align 1, !tbaa !12
  %614 = add nuw nsw i64 %597, 8
  %615 = getelementptr inbounds float, float* %5, i64 %614
  %616 = bitcast float* %615 to <8 x float>*
  %617 = load <8 x float>, <8 x float>* %616, align 1, !tbaa !12
  %618 = add nuw nsw i64 %597, 16
  %619 = getelementptr inbounds float, float* %5, i64 %618
  %620 = bitcast float* %619 to <8 x float>*
  %621 = load <8 x float>, <8 x float>* %620, align 1, !tbaa !12
  %622 = add nsw i64 %597, %547
  %623 = getelementptr inbounds float, float* %3, i64 %622
  %624 = bitcast float* %623 to <8 x float>*
  %625 = load <8 x float>, <8 x float>* %624, align 1, !tbaa !12
  %626 = add nsw i64 %622, 8
  %627 = getelementptr inbounds float, float* %3, i64 %626
  %628 = bitcast float* %627 to <8 x float>*
  %629 = load <8 x float>, <8 x float>* %628, align 1, !tbaa !12
  %630 = add nsw i64 %622, 16
  %631 = getelementptr inbounds float, float* %3, i64 %630
  %632 = bitcast float* %631 to <8 x float>*
  %633 = load <8 x float>, <8 x float>* %632, align 1, !tbaa !12
  %634 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %625, <8 x float> %93, <8 x float> %613) #10
  %635 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %629, <8 x float> %93, <8 x float> %617) #10
  %636 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %633, <8 x float> %93, <8 x float> %621) #10
  store <8 x float> %634, <8 x float>* %612, align 1, !tbaa !12
  store <8 x float> %635, <8 x float>* %616, align 1, !tbaa !12
  store <8 x float> %636, <8 x float>* %620, align 1, !tbaa !12
  %637 = add nuw nsw i64 %597, 24
  %638 = icmp ult i64 %637, %21
  br i1 %638, label %596, label %591

639:                                              ; preds = %643
  br i1 %23, label %640, label %686

640:                                              ; preds = %639
  %641 = trunc i64 %99 to i32
  %642 = mul nsw i32 %9, %641
  br label %689

643:                                              ; preds = %592, %643
  %644 = phi i64 [ 0, %592 ], [ %684, %643 ]
  %645 = getelementptr inbounds float, float* %5, i64 %644
  %646 = getelementptr inbounds float, float* %645, i64 8
  %647 = bitcast float* %646 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %647, i32 0, i32 1, i32 1)
  %648 = getelementptr inbounds float, float* %3, i64 %644
  %649 = getelementptr inbounds float, float* %648, i64 8
  %650 = bitcast float* %649 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %650, i32 0, i32 1, i32 1)
  %651 = getelementptr inbounds float, float* %645, i64 16
  %652 = bitcast float* %651 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %652, i32 0, i32 1, i32 1)
  %653 = getelementptr inbounds float, float* %648, i64 16
  %654 = bitcast float* %653 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %654, i32 0, i32 1, i32 1)
  %655 = getelementptr inbounds float, float* %645, i64 24
  %656 = bitcast float* %655 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %656, i32 0, i32 1, i32 1)
  %657 = getelementptr inbounds float, float* %648, i64 24
  %658 = bitcast float* %657 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %658, i32 0, i32 1, i32 1)
  %659 = bitcast float* %645 to <8 x float>*
  %660 = load <8 x float>, <8 x float>* %659, align 1, !tbaa !12
  %661 = add nuw nsw i64 %644, 8
  %662 = getelementptr inbounds float, float* %5, i64 %661
  %663 = bitcast float* %662 to <8 x float>*
  %664 = load <8 x float>, <8 x float>* %663, align 1, !tbaa !12
  %665 = add nuw nsw i64 %644, 16
  %666 = getelementptr inbounds float, float* %5, i64 %665
  %667 = bitcast float* %666 to <8 x float>*
  %668 = load <8 x float>, <8 x float>* %667, align 1, !tbaa !12
  %669 = add nsw i64 %644, %595
  %670 = getelementptr inbounds float, float* %3, i64 %669
  %671 = bitcast float* %670 to <8 x float>*
  %672 = load <8 x float>, <8 x float>* %671, align 1, !tbaa !12
  %673 = add nsw i64 %669, 8
  %674 = getelementptr inbounds float, float* %3, i64 %673
  %675 = bitcast float* %674 to <8 x float>*
  %676 = load <8 x float>, <8 x float>* %675, align 1, !tbaa !12
  %677 = add nsw i64 %669, 16
  %678 = getelementptr inbounds float, float* %3, i64 %677
  %679 = bitcast float* %678 to <8 x float>*
  %680 = load <8 x float>, <8 x float>* %679, align 1, !tbaa !12
  %681 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %672, <8 x float> %98, <8 x float> %660) #10
  %682 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %676, <8 x float> %98, <8 x float> %664) #10
  %683 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %680, <8 x float> %98, <8 x float> %668) #10
  store <8 x float> %681, <8 x float>* %659, align 1, !tbaa !12
  store <8 x float> %682, <8 x float>* %663, align 1, !tbaa !12
  store <8 x float> %683, <8 x float>* %667, align 1, !tbaa !12
  %684 = add nuw nsw i64 %644, 24
  %685 = icmp ult i64 %684, %22
  br i1 %685, label %643, label %639

686:                                              ; preds = %689, %38, %107, %159, %207, %255, %303, %351, %399, %447, %495, %543, %591, %639
  %687 = add nuw nsw i64 %39, 13
  %688 = icmp slt i64 %687, %25
  br i1 %688, label %38, label %26

689:                                              ; preds = %640, %689
  %690 = phi i64 [ 0, %640 ], [ %734, %689 ]
  %691 = getelementptr inbounds float, float* %5, i64 %690
  %692 = getelementptr inbounds float, float* %691, i64 8
  %693 = bitcast float* %692 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %693, i32 0, i32 1, i32 1)
  %694 = getelementptr inbounds float, float* %3, i64 %690
  %695 = getelementptr inbounds float, float* %694, i64 8
  %696 = bitcast float* %695 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %696, i32 0, i32 1, i32 1)
  %697 = getelementptr inbounds float, float* %691, i64 16
  %698 = bitcast float* %697 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %698, i32 0, i32 1, i32 1)
  %699 = getelementptr inbounds float, float* %694, i64 16
  %700 = bitcast float* %699 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %700, i32 0, i32 1, i32 1)
  %701 = getelementptr inbounds float, float* %691, i64 24
  %702 = bitcast float* %701 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %702, i32 0, i32 1, i32 1)
  %703 = getelementptr inbounds float, float* %694, i64 24
  %704 = bitcast float* %703 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %704, i32 0, i32 1, i32 1)
  %705 = bitcast float* %691 to <8 x float>*
  %706 = load <8 x float>, <8 x float>* %705, align 1, !tbaa !12
  %707 = add nuw nsw i64 %690, 8
  %708 = getelementptr inbounds float, float* %5, i64 %707
  %709 = bitcast float* %708 to <8 x float>*
  %710 = load <8 x float>, <8 x float>* %709, align 1, !tbaa !12
  %711 = add nuw nsw i64 %690, 16
  %712 = getelementptr inbounds float, float* %5, i64 %711
  %713 = bitcast float* %712 to <8 x float>*
  %714 = load <8 x float>, <8 x float>* %713, align 1, !tbaa !12
  %715 = trunc i64 %690 to i32
  %716 = add nsw i32 %642, %715
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds float, float* %3, i64 %717
  %719 = bitcast float* %718 to <8 x float>*
  %720 = load <8 x float>, <8 x float>* %719, align 1, !tbaa !12
  %721 = add nsw i32 %716, 8
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds float, float* %3, i64 %722
  %724 = bitcast float* %723 to <8 x float>*
  %725 = load <8 x float>, <8 x float>* %724, align 1, !tbaa !12
  %726 = add nsw i32 %716, 16
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds float, float* %3, i64 %727
  %729 = bitcast float* %728 to <8 x float>*
  %730 = load <8 x float>, <8 x float>* %729, align 1, !tbaa !12
  %731 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %720, <8 x float> %103, <8 x float> %706) #10
  %732 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %725, <8 x float> %103, <8 x float> %710) #10
  %733 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %730, <8 x float> %103, <8 x float> %714) #10
  store <8 x float> %731, <8 x float>* %705, align 1, !tbaa !12
  store <8 x float> %732, <8 x float>* %709, align 1, !tbaa !12
  store <8 x float> %733, <8 x float>* %713, align 1, !tbaa !12
  %734 = add nuw nsw i64 %690, 24
  %735 = icmp ult i64 %734, %24
  br i1 %735, label %689, label %686
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 91
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui3_uk13.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
