; ModuleID = 'codes/matvec_ui15_uk6.cpp'
source_filename = "codes/matvec_ui15_uk6.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui15_uk6.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 120
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 48
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1115, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1115
  %21 = phi i64 [ %1116, %1115 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %1115

53:                                               ; preds = %20
  %54 = zext i32 %51 to i64
  %55 = trunc i64 %21 to i32
  %56 = mul nsw i32 %51, %55
  br label %63

57:                                               ; preds = %63
  br i1 %52, label %58, label %483

58:                                               ; preds = %57
  %59 = trunc i64 %26 to i32
  %60 = mul nsw i32 %51, %59
  %61 = sext i32 %60 to i64
  %62 = zext i32 %51 to i64
  br label %284

63:                                               ; preds = %53, %63
  %64 = phi i64 [ 0, %53 ], [ %276, %63 ]
  %65 = getelementptr inbounds float, float* %5, i64 %64
  %66 = getelementptr inbounds float, float* %65, i64 8
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %3, i64 %64
  %69 = getelementptr inbounds float, float* %68, i64 8
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %70, i32 0, i32 1, i32 1)
  %71 = getelementptr inbounds float, float* %65, i64 16
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %72, i32 0, i32 1, i32 1)
  %73 = getelementptr inbounds float, float* %68, i64 16
  %74 = bitcast float* %73 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %74, i32 0, i32 1, i32 1)
  %75 = getelementptr inbounds float, float* %65, i64 24
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %76, i32 0, i32 1, i32 1)
  %77 = getelementptr inbounds float, float* %68, i64 24
  %78 = bitcast float* %77 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %78, i32 0, i32 1, i32 1)
  %79 = getelementptr inbounds float, float* %65, i64 32
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %68, i64 32
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %65, i64 40
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %68, i64 40
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %65, i64 48
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %68, i64 48
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %65, i64 56
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %68, i64 56
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %65, i64 64
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %68, i64 64
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %65, i64 72
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %68, i64 72
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %65, i64 80
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %68, i64 80
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %65, i64 88
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %68, i64 88
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %65, i64 96
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = getelementptr inbounds float, float* %68, i64 96
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %65, i64 104
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %68, i64 104
  %118 = bitcast float* %117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %118, i32 0, i32 1, i32 1)
  %119 = getelementptr inbounds float, float* %65, i64 112
  %120 = bitcast float* %119 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %120, i32 0, i32 1, i32 1)
  %121 = getelementptr inbounds float, float* %68, i64 112
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %122, i32 0, i32 1, i32 1)
  %123 = getelementptr inbounds float, float* %65, i64 120
  %124 = bitcast float* %123 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %124, i32 0, i32 1, i32 1)
  %125 = getelementptr inbounds float, float* %68, i64 120
  %126 = bitcast float* %125 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %126, i32 0, i32 1, i32 1)
  %127 = bitcast float* %65 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 1, !tbaa !12
  %129 = add nuw nsw i64 %64, 8
  %130 = getelementptr inbounds float, float* %5, i64 %129
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !tbaa !12
  %133 = add nuw nsw i64 %64, 16
  %134 = getelementptr inbounds float, float* %5, i64 %133
  %135 = bitcast float* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 1, !tbaa !12
  %137 = add nuw nsw i64 %64, 24
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 1, !tbaa !12
  %141 = add nuw nsw i64 %64, 32
  %142 = getelementptr inbounds float, float* %5, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nuw nsw i64 %64, 40
  %146 = getelementptr inbounds float, float* %5, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = add nuw nsw i64 %64, 48
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 1, !tbaa !12
  %153 = add nuw nsw i64 %64, 56
  %154 = getelementptr inbounds float, float* %5, i64 %153
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 1, !tbaa !12
  %157 = add nuw nsw i64 %64, 64
  %158 = getelementptr inbounds float, float* %5, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 1, !tbaa !12
  %161 = add nuw nsw i64 %64, 72
  %162 = getelementptr inbounds float, float* %5, i64 %161
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 1, !tbaa !12
  %165 = add nuw nsw i64 %64, 80
  %166 = getelementptr inbounds float, float* %5, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nuw nsw i64 %64, 88
  %170 = getelementptr inbounds float, float* %5, i64 %169
  %171 = bitcast float* %170 to <8 x float>*
  %172 = load <8 x float>, <8 x float>* %171, align 1, !tbaa !12
  %173 = add nuw nsw i64 %64, 96
  %174 = getelementptr inbounds float, float* %5, i64 %173
  %175 = bitcast float* %174 to <8 x float>*
  %176 = load <8 x float>, <8 x float>* %175, align 1, !tbaa !12
  %177 = add nuw nsw i64 %64, 104
  %178 = getelementptr inbounds float, float* %5, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 1, !tbaa !12
  %181 = add nuw nsw i64 %64, 112
  %182 = getelementptr inbounds float, float* %5, i64 %181
  %183 = bitcast float* %182 to <8 x float>*
  %184 = load <8 x float>, <8 x float>* %183, align 1, !tbaa !12
  %185 = trunc i64 %64 to i32
  %186 = add nsw i32 %56, %185
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds float, float* %3, i64 %187
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 1, !tbaa !12
  %191 = add nsw i32 %186, 8
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds float, float* %3, i64 %192
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 1, !tbaa !12
  %196 = add nsw i32 %186, 16
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds float, float* %3, i64 %197
  %199 = bitcast float* %198 to <8 x float>*
  %200 = load <8 x float>, <8 x float>* %199, align 1, !tbaa !12
  %201 = add nsw i32 %186, 24
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds float, float* %3, i64 %202
  %204 = bitcast float* %203 to <8 x float>*
  %205 = load <8 x float>, <8 x float>* %204, align 1, !tbaa !12
  %206 = add nsw i32 %186, 32
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds float, float* %3, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  %210 = load <8 x float>, <8 x float>* %209, align 1, !tbaa !12
  %211 = add nsw i32 %186, 40
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds float, float* %3, i64 %212
  %214 = bitcast float* %213 to <8 x float>*
  %215 = load <8 x float>, <8 x float>* %214, align 1, !tbaa !12
  %216 = add nsw i32 %186, 48
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds float, float* %3, i64 %217
  %219 = bitcast float* %218 to <8 x float>*
  %220 = load <8 x float>, <8 x float>* %219, align 1, !tbaa !12
  %221 = add nsw i32 %186, 56
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds float, float* %3, i64 %222
  %224 = bitcast float* %223 to <8 x float>*
  %225 = load <8 x float>, <8 x float>* %224, align 1, !tbaa !12
  %226 = add nsw i32 %186, 64
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds float, float* %3, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  %230 = load <8 x float>, <8 x float>* %229, align 1, !tbaa !12
  %231 = add nsw i32 %186, 72
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds float, float* %3, i64 %232
  %234 = bitcast float* %233 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 1, !tbaa !12
  %236 = add nsw i32 %186, 80
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds float, float* %3, i64 %237
  %239 = bitcast float* %238 to <8 x float>*
  %240 = load <8 x float>, <8 x float>* %239, align 1, !tbaa !12
  %241 = add nsw i32 %186, 88
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds float, float* %3, i64 %242
  %244 = bitcast float* %243 to <8 x float>*
  %245 = load <8 x float>, <8 x float>* %244, align 1, !tbaa !12
  %246 = add nsw i32 %186, 96
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds float, float* %3, i64 %247
  %249 = bitcast float* %248 to <8 x float>*
  %250 = load <8 x float>, <8 x float>* %249, align 1, !tbaa !12
  %251 = add nsw i32 %186, 104
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds float, float* %3, i64 %252
  %254 = bitcast float* %253 to <8 x float>*
  %255 = load <8 x float>, <8 x float>* %254, align 1, !tbaa !12
  %256 = add nsw i32 %186, 112
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds float, float* %3, i64 %257
  %259 = bitcast float* %258 to <8 x float>*
  %260 = load <8 x float>, <8 x float>* %259, align 1, !tbaa !12
  %261 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %190, <8 x float> %25, <8 x float> %128) #10
  %262 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %195, <8 x float> %25, <8 x float> %132) #10
  %263 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %200, <8 x float> %25, <8 x float> %136) #10
  %264 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %205, <8 x float> %25, <8 x float> %140) #10
  %265 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %210, <8 x float> %25, <8 x float> %144) #10
  %266 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %215, <8 x float> %25, <8 x float> %148) #10
  %267 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %220, <8 x float> %25, <8 x float> %152) #10
  %268 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %225, <8 x float> %25, <8 x float> %156) #10
  %269 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %230, <8 x float> %25, <8 x float> %160) #10
  %270 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %235, <8 x float> %25, <8 x float> %164) #10
  %271 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %240, <8 x float> %25, <8 x float> %168) #10
  %272 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %245, <8 x float> %25, <8 x float> %172) #10
  %273 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %250, <8 x float> %25, <8 x float> %176) #10
  %274 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %255, <8 x float> %25, <8 x float> %180) #10
  %275 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %260, <8 x float> %25, <8 x float> %184) #10
  store <8 x float> %261, <8 x float>* %127, align 1, !tbaa !12
  store <8 x float> %262, <8 x float>* %131, align 1, !tbaa !12
  store <8 x float> %263, <8 x float>* %135, align 1, !tbaa !12
  store <8 x float> %264, <8 x float>* %139, align 1, !tbaa !12
  store <8 x float> %265, <8 x float>* %143, align 1, !tbaa !12
  store <8 x float> %266, <8 x float>* %147, align 1, !tbaa !12
  store <8 x float> %267, <8 x float>* %151, align 1, !tbaa !12
  store <8 x float> %268, <8 x float>* %155, align 1, !tbaa !12
  store <8 x float> %269, <8 x float>* %159, align 1, !tbaa !12
  store <8 x float> %270, <8 x float>* %163, align 1, !tbaa !12
  store <8 x float> %271, <8 x float>* %167, align 1, !tbaa !12
  store <8 x float> %272, <8 x float>* %171, align 1, !tbaa !12
  store <8 x float> %273, <8 x float>* %175, align 1, !tbaa !12
  store <8 x float> %274, <8 x float>* %179, align 1, !tbaa !12
  store <8 x float> %275, <8 x float>* %183, align 1, !tbaa !12
  %276 = add nuw nsw i64 %64, 120
  %277 = icmp ult i64 %276, %54
  br i1 %277, label %63, label %57

278:                                              ; preds = %284
  br i1 %52, label %279, label %483

279:                                              ; preds = %278
  %280 = trunc i64 %31 to i32
  %281 = mul nsw i32 %51, %280
  %282 = sext i32 %281 to i64
  %283 = zext i32 %51 to i64
  br label %490

284:                                              ; preds = %58, %284
  %285 = phi i64 [ 0, %58 ], [ %481, %284 ]
  %286 = getelementptr inbounds float, float* %5, i64 %285
  %287 = getelementptr inbounds float, float* %286, i64 8
  %288 = bitcast float* %287 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %288, i32 0, i32 1, i32 1)
  %289 = getelementptr inbounds float, float* %3, i64 %285
  %290 = getelementptr inbounds float, float* %289, i64 8
  %291 = bitcast float* %290 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %291, i32 0, i32 1, i32 1)
  %292 = getelementptr inbounds float, float* %286, i64 16
  %293 = bitcast float* %292 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %293, i32 0, i32 1, i32 1)
  %294 = getelementptr inbounds float, float* %289, i64 16
  %295 = bitcast float* %294 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %295, i32 0, i32 1, i32 1)
  %296 = getelementptr inbounds float, float* %286, i64 24
  %297 = bitcast float* %296 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %297, i32 0, i32 1, i32 1)
  %298 = getelementptr inbounds float, float* %289, i64 24
  %299 = bitcast float* %298 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %299, i32 0, i32 1, i32 1)
  %300 = getelementptr inbounds float, float* %286, i64 32
  %301 = bitcast float* %300 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %301, i32 0, i32 1, i32 1)
  %302 = getelementptr inbounds float, float* %289, i64 32
  %303 = bitcast float* %302 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %303, i32 0, i32 1, i32 1)
  %304 = getelementptr inbounds float, float* %286, i64 40
  %305 = bitcast float* %304 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %305, i32 0, i32 1, i32 1)
  %306 = getelementptr inbounds float, float* %289, i64 40
  %307 = bitcast float* %306 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %307, i32 0, i32 1, i32 1)
  %308 = getelementptr inbounds float, float* %286, i64 48
  %309 = bitcast float* %308 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %309, i32 0, i32 1, i32 1)
  %310 = getelementptr inbounds float, float* %289, i64 48
  %311 = bitcast float* %310 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %311, i32 0, i32 1, i32 1)
  %312 = getelementptr inbounds float, float* %286, i64 56
  %313 = bitcast float* %312 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %313, i32 0, i32 1, i32 1)
  %314 = getelementptr inbounds float, float* %289, i64 56
  %315 = bitcast float* %314 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %315, i32 0, i32 1, i32 1)
  %316 = getelementptr inbounds float, float* %286, i64 64
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %289, i64 64
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = getelementptr inbounds float, float* %286, i64 72
  %321 = bitcast float* %320 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %321, i32 0, i32 1, i32 1)
  %322 = getelementptr inbounds float, float* %289, i64 72
  %323 = bitcast float* %322 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %323, i32 0, i32 1, i32 1)
  %324 = getelementptr inbounds float, float* %286, i64 80
  %325 = bitcast float* %324 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %325, i32 0, i32 1, i32 1)
  %326 = getelementptr inbounds float, float* %289, i64 80
  %327 = bitcast float* %326 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %327, i32 0, i32 1, i32 1)
  %328 = getelementptr inbounds float, float* %286, i64 88
  %329 = bitcast float* %328 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %329, i32 0, i32 1, i32 1)
  %330 = getelementptr inbounds float, float* %289, i64 88
  %331 = bitcast float* %330 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %331, i32 0, i32 1, i32 1)
  %332 = getelementptr inbounds float, float* %286, i64 96
  %333 = bitcast float* %332 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %333, i32 0, i32 1, i32 1)
  %334 = getelementptr inbounds float, float* %289, i64 96
  %335 = bitcast float* %334 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %335, i32 0, i32 1, i32 1)
  %336 = getelementptr inbounds float, float* %286, i64 104
  %337 = bitcast float* %336 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %337, i32 0, i32 1, i32 1)
  %338 = getelementptr inbounds float, float* %289, i64 104
  %339 = bitcast float* %338 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %339, i32 0, i32 1, i32 1)
  %340 = getelementptr inbounds float, float* %286, i64 112
  %341 = bitcast float* %340 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %341, i32 0, i32 1, i32 1)
  %342 = getelementptr inbounds float, float* %289, i64 112
  %343 = bitcast float* %342 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %343, i32 0, i32 1, i32 1)
  %344 = getelementptr inbounds float, float* %286, i64 120
  %345 = bitcast float* %344 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %345, i32 0, i32 1, i32 1)
  %346 = getelementptr inbounds float, float* %289, i64 120
  %347 = bitcast float* %346 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %347, i32 0, i32 1, i32 1)
  %348 = bitcast float* %286 to <8 x float>*
  %349 = load <8 x float>, <8 x float>* %348, align 1, !tbaa !12
  %350 = add nuw nsw i64 %285, 8
  %351 = getelementptr inbounds float, float* %5, i64 %350
  %352 = bitcast float* %351 to <8 x float>*
  %353 = load <8 x float>, <8 x float>* %352, align 1, !tbaa !12
  %354 = add nuw nsw i64 %285, 16
  %355 = getelementptr inbounds float, float* %5, i64 %354
  %356 = bitcast float* %355 to <8 x float>*
  %357 = load <8 x float>, <8 x float>* %356, align 1, !tbaa !12
  %358 = add nuw nsw i64 %285, 24
  %359 = getelementptr inbounds float, float* %5, i64 %358
  %360 = bitcast float* %359 to <8 x float>*
  %361 = load <8 x float>, <8 x float>* %360, align 1, !tbaa !12
  %362 = add nuw nsw i64 %285, 32
  %363 = getelementptr inbounds float, float* %5, i64 %362
  %364 = bitcast float* %363 to <8 x float>*
  %365 = load <8 x float>, <8 x float>* %364, align 1, !tbaa !12
  %366 = add nuw nsw i64 %285, 40
  %367 = getelementptr inbounds float, float* %5, i64 %366
  %368 = bitcast float* %367 to <8 x float>*
  %369 = load <8 x float>, <8 x float>* %368, align 1, !tbaa !12
  %370 = add nuw nsw i64 %285, 48
  %371 = getelementptr inbounds float, float* %5, i64 %370
  %372 = bitcast float* %371 to <8 x float>*
  %373 = load <8 x float>, <8 x float>* %372, align 1, !tbaa !12
  %374 = add nuw nsw i64 %285, 56
  %375 = getelementptr inbounds float, float* %5, i64 %374
  %376 = bitcast float* %375 to <8 x float>*
  %377 = load <8 x float>, <8 x float>* %376, align 1, !tbaa !12
  %378 = add nuw nsw i64 %285, 64
  %379 = getelementptr inbounds float, float* %5, i64 %378
  %380 = bitcast float* %379 to <8 x float>*
  %381 = load <8 x float>, <8 x float>* %380, align 1, !tbaa !12
  %382 = add nuw nsw i64 %285, 72
  %383 = getelementptr inbounds float, float* %5, i64 %382
  %384 = bitcast float* %383 to <8 x float>*
  %385 = load <8 x float>, <8 x float>* %384, align 1, !tbaa !12
  %386 = add nuw nsw i64 %285, 80
  %387 = getelementptr inbounds float, float* %5, i64 %386
  %388 = bitcast float* %387 to <8 x float>*
  %389 = load <8 x float>, <8 x float>* %388, align 1, !tbaa !12
  %390 = add nuw nsw i64 %285, 88
  %391 = getelementptr inbounds float, float* %5, i64 %390
  %392 = bitcast float* %391 to <8 x float>*
  %393 = load <8 x float>, <8 x float>* %392, align 1, !tbaa !12
  %394 = add nuw nsw i64 %285, 96
  %395 = getelementptr inbounds float, float* %5, i64 %394
  %396 = bitcast float* %395 to <8 x float>*
  %397 = load <8 x float>, <8 x float>* %396, align 1, !tbaa !12
  %398 = add nuw nsw i64 %285, 104
  %399 = getelementptr inbounds float, float* %5, i64 %398
  %400 = bitcast float* %399 to <8 x float>*
  %401 = load <8 x float>, <8 x float>* %400, align 1, !tbaa !12
  %402 = add nuw nsw i64 %285, 112
  %403 = getelementptr inbounds float, float* %5, i64 %402
  %404 = bitcast float* %403 to <8 x float>*
  %405 = load <8 x float>, <8 x float>* %404, align 1, !tbaa !12
  %406 = add nsw i64 %285, %61
  %407 = getelementptr inbounds float, float* %3, i64 %406
  %408 = bitcast float* %407 to <8 x float>*
  %409 = load <8 x float>, <8 x float>* %408, align 1, !tbaa !12
  %410 = add nsw i64 %406, 8
  %411 = getelementptr inbounds float, float* %3, i64 %410
  %412 = bitcast float* %411 to <8 x float>*
  %413 = load <8 x float>, <8 x float>* %412, align 1, !tbaa !12
  %414 = add nsw i64 %406, 16
  %415 = getelementptr inbounds float, float* %3, i64 %414
  %416 = bitcast float* %415 to <8 x float>*
  %417 = load <8 x float>, <8 x float>* %416, align 1, !tbaa !12
  %418 = add nsw i64 %406, 24
  %419 = getelementptr inbounds float, float* %3, i64 %418
  %420 = bitcast float* %419 to <8 x float>*
  %421 = load <8 x float>, <8 x float>* %420, align 1, !tbaa !12
  %422 = add nsw i64 %406, 32
  %423 = getelementptr inbounds float, float* %3, i64 %422
  %424 = bitcast float* %423 to <8 x float>*
  %425 = load <8 x float>, <8 x float>* %424, align 1, !tbaa !12
  %426 = add nsw i64 %406, 40
  %427 = getelementptr inbounds float, float* %3, i64 %426
  %428 = bitcast float* %427 to <8 x float>*
  %429 = load <8 x float>, <8 x float>* %428, align 1, !tbaa !12
  %430 = add nsw i64 %406, 48
  %431 = getelementptr inbounds float, float* %3, i64 %430
  %432 = bitcast float* %431 to <8 x float>*
  %433 = load <8 x float>, <8 x float>* %432, align 1, !tbaa !12
  %434 = add nsw i64 %406, 56
  %435 = getelementptr inbounds float, float* %3, i64 %434
  %436 = bitcast float* %435 to <8 x float>*
  %437 = load <8 x float>, <8 x float>* %436, align 1, !tbaa !12
  %438 = add nsw i64 %406, 64
  %439 = getelementptr inbounds float, float* %3, i64 %438
  %440 = bitcast float* %439 to <8 x float>*
  %441 = load <8 x float>, <8 x float>* %440, align 1, !tbaa !12
  %442 = add nsw i64 %406, 72
  %443 = getelementptr inbounds float, float* %3, i64 %442
  %444 = bitcast float* %443 to <8 x float>*
  %445 = load <8 x float>, <8 x float>* %444, align 1, !tbaa !12
  %446 = add nsw i64 %406, 80
  %447 = getelementptr inbounds float, float* %3, i64 %446
  %448 = bitcast float* %447 to <8 x float>*
  %449 = load <8 x float>, <8 x float>* %448, align 1, !tbaa !12
  %450 = add nsw i64 %406, 88
  %451 = getelementptr inbounds float, float* %3, i64 %450
  %452 = bitcast float* %451 to <8 x float>*
  %453 = load <8 x float>, <8 x float>* %452, align 1, !tbaa !12
  %454 = add nsw i64 %406, 96
  %455 = getelementptr inbounds float, float* %3, i64 %454
  %456 = bitcast float* %455 to <8 x float>*
  %457 = load <8 x float>, <8 x float>* %456, align 1, !tbaa !12
  %458 = add nsw i64 %406, 104
  %459 = getelementptr inbounds float, float* %3, i64 %458
  %460 = bitcast float* %459 to <8 x float>*
  %461 = load <8 x float>, <8 x float>* %460, align 1, !tbaa !12
  %462 = add nsw i64 %406, 112
  %463 = getelementptr inbounds float, float* %3, i64 %462
  %464 = bitcast float* %463 to <8 x float>*
  %465 = load <8 x float>, <8 x float>* %464, align 1, !tbaa !12
  %466 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %409, <8 x float> %30, <8 x float> %349) #10
  %467 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %413, <8 x float> %30, <8 x float> %353) #10
  %468 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %417, <8 x float> %30, <8 x float> %357) #10
  %469 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %421, <8 x float> %30, <8 x float> %361) #10
  %470 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %425, <8 x float> %30, <8 x float> %365) #10
  %471 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %429, <8 x float> %30, <8 x float> %369) #10
  %472 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %433, <8 x float> %30, <8 x float> %373) #10
  %473 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %437, <8 x float> %30, <8 x float> %377) #10
  %474 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %441, <8 x float> %30, <8 x float> %381) #10
  %475 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %445, <8 x float> %30, <8 x float> %385) #10
  %476 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %449, <8 x float> %30, <8 x float> %389) #10
  %477 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %453, <8 x float> %30, <8 x float> %393) #10
  %478 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %457, <8 x float> %30, <8 x float> %397) #10
  %479 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %461, <8 x float> %30, <8 x float> %401) #10
  %480 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %465, <8 x float> %30, <8 x float> %405) #10
  store <8 x float> %466, <8 x float>* %348, align 1, !tbaa !12
  store <8 x float> %467, <8 x float>* %352, align 1, !tbaa !12
  store <8 x float> %468, <8 x float>* %356, align 1, !tbaa !12
  store <8 x float> %469, <8 x float>* %360, align 1, !tbaa !12
  store <8 x float> %470, <8 x float>* %364, align 1, !tbaa !12
  store <8 x float> %471, <8 x float>* %368, align 1, !tbaa !12
  store <8 x float> %472, <8 x float>* %372, align 1, !tbaa !12
  store <8 x float> %473, <8 x float>* %376, align 1, !tbaa !12
  store <8 x float> %474, <8 x float>* %380, align 1, !tbaa !12
  store <8 x float> %475, <8 x float>* %384, align 1, !tbaa !12
  store <8 x float> %476, <8 x float>* %388, align 1, !tbaa !12
  store <8 x float> %477, <8 x float>* %392, align 1, !tbaa !12
  store <8 x float> %478, <8 x float>* %396, align 1, !tbaa !12
  store <8 x float> %479, <8 x float>* %400, align 1, !tbaa !12
  store <8 x float> %480, <8 x float>* %404, align 1, !tbaa !12
  %481 = add nuw nsw i64 %285, 120
  %482 = icmp ult i64 %481, %62
  br i1 %482, label %284, label %278

483:                                              ; preds = %490, %57, %278
  %484 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %485 = icmp sgt i32 %484, 0
  br i1 %485, label %486, label %1115

486:                                              ; preds = %483
  %487 = zext i32 %484 to i64
  %488 = trunc i64 %36 to i32
  %489 = mul nsw i32 %484, %488
  br label %695

490:                                              ; preds = %279, %490
  %491 = phi i64 [ 0, %279 ], [ %687, %490 ]
  %492 = getelementptr inbounds float, float* %5, i64 %491
  %493 = getelementptr inbounds float, float* %492, i64 8
  %494 = bitcast float* %493 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %494, i32 0, i32 1, i32 1)
  %495 = getelementptr inbounds float, float* %3, i64 %491
  %496 = getelementptr inbounds float, float* %495, i64 8
  %497 = bitcast float* %496 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %497, i32 0, i32 1, i32 1)
  %498 = getelementptr inbounds float, float* %492, i64 16
  %499 = bitcast float* %498 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %499, i32 0, i32 1, i32 1)
  %500 = getelementptr inbounds float, float* %495, i64 16
  %501 = bitcast float* %500 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %501, i32 0, i32 1, i32 1)
  %502 = getelementptr inbounds float, float* %492, i64 24
  %503 = bitcast float* %502 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %503, i32 0, i32 1, i32 1)
  %504 = getelementptr inbounds float, float* %495, i64 24
  %505 = bitcast float* %504 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %505, i32 0, i32 1, i32 1)
  %506 = getelementptr inbounds float, float* %492, i64 32
  %507 = bitcast float* %506 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %507, i32 0, i32 1, i32 1)
  %508 = getelementptr inbounds float, float* %495, i64 32
  %509 = bitcast float* %508 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %509, i32 0, i32 1, i32 1)
  %510 = getelementptr inbounds float, float* %492, i64 40
  %511 = bitcast float* %510 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %511, i32 0, i32 1, i32 1)
  %512 = getelementptr inbounds float, float* %495, i64 40
  %513 = bitcast float* %512 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %513, i32 0, i32 1, i32 1)
  %514 = getelementptr inbounds float, float* %492, i64 48
  %515 = bitcast float* %514 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %515, i32 0, i32 1, i32 1)
  %516 = getelementptr inbounds float, float* %495, i64 48
  %517 = bitcast float* %516 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %517, i32 0, i32 1, i32 1)
  %518 = getelementptr inbounds float, float* %492, i64 56
  %519 = bitcast float* %518 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %519, i32 0, i32 1, i32 1)
  %520 = getelementptr inbounds float, float* %495, i64 56
  %521 = bitcast float* %520 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %521, i32 0, i32 1, i32 1)
  %522 = getelementptr inbounds float, float* %492, i64 64
  %523 = bitcast float* %522 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %523, i32 0, i32 1, i32 1)
  %524 = getelementptr inbounds float, float* %495, i64 64
  %525 = bitcast float* %524 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %525, i32 0, i32 1, i32 1)
  %526 = getelementptr inbounds float, float* %492, i64 72
  %527 = bitcast float* %526 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %527, i32 0, i32 1, i32 1)
  %528 = getelementptr inbounds float, float* %495, i64 72
  %529 = bitcast float* %528 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %529, i32 0, i32 1, i32 1)
  %530 = getelementptr inbounds float, float* %492, i64 80
  %531 = bitcast float* %530 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %531, i32 0, i32 1, i32 1)
  %532 = getelementptr inbounds float, float* %495, i64 80
  %533 = bitcast float* %532 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %533, i32 0, i32 1, i32 1)
  %534 = getelementptr inbounds float, float* %492, i64 88
  %535 = bitcast float* %534 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %535, i32 0, i32 1, i32 1)
  %536 = getelementptr inbounds float, float* %495, i64 88
  %537 = bitcast float* %536 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %537, i32 0, i32 1, i32 1)
  %538 = getelementptr inbounds float, float* %492, i64 96
  %539 = bitcast float* %538 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %539, i32 0, i32 1, i32 1)
  %540 = getelementptr inbounds float, float* %495, i64 96
  %541 = bitcast float* %540 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %541, i32 0, i32 1, i32 1)
  %542 = getelementptr inbounds float, float* %492, i64 104
  %543 = bitcast float* %542 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %543, i32 0, i32 1, i32 1)
  %544 = getelementptr inbounds float, float* %495, i64 104
  %545 = bitcast float* %544 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %545, i32 0, i32 1, i32 1)
  %546 = getelementptr inbounds float, float* %492, i64 112
  %547 = bitcast float* %546 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %547, i32 0, i32 1, i32 1)
  %548 = getelementptr inbounds float, float* %495, i64 112
  %549 = bitcast float* %548 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %549, i32 0, i32 1, i32 1)
  %550 = getelementptr inbounds float, float* %492, i64 120
  %551 = bitcast float* %550 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %551, i32 0, i32 1, i32 1)
  %552 = getelementptr inbounds float, float* %495, i64 120
  %553 = bitcast float* %552 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %553, i32 0, i32 1, i32 1)
  %554 = bitcast float* %492 to <8 x float>*
  %555 = load <8 x float>, <8 x float>* %554, align 1, !tbaa !12
  %556 = add nuw nsw i64 %491, 8
  %557 = getelementptr inbounds float, float* %5, i64 %556
  %558 = bitcast float* %557 to <8 x float>*
  %559 = load <8 x float>, <8 x float>* %558, align 1, !tbaa !12
  %560 = add nuw nsw i64 %491, 16
  %561 = getelementptr inbounds float, float* %5, i64 %560
  %562 = bitcast float* %561 to <8 x float>*
  %563 = load <8 x float>, <8 x float>* %562, align 1, !tbaa !12
  %564 = add nuw nsw i64 %491, 24
  %565 = getelementptr inbounds float, float* %5, i64 %564
  %566 = bitcast float* %565 to <8 x float>*
  %567 = load <8 x float>, <8 x float>* %566, align 1, !tbaa !12
  %568 = add nuw nsw i64 %491, 32
  %569 = getelementptr inbounds float, float* %5, i64 %568
  %570 = bitcast float* %569 to <8 x float>*
  %571 = load <8 x float>, <8 x float>* %570, align 1, !tbaa !12
  %572 = add nuw nsw i64 %491, 40
  %573 = getelementptr inbounds float, float* %5, i64 %572
  %574 = bitcast float* %573 to <8 x float>*
  %575 = load <8 x float>, <8 x float>* %574, align 1, !tbaa !12
  %576 = add nuw nsw i64 %491, 48
  %577 = getelementptr inbounds float, float* %5, i64 %576
  %578 = bitcast float* %577 to <8 x float>*
  %579 = load <8 x float>, <8 x float>* %578, align 1, !tbaa !12
  %580 = add nuw nsw i64 %491, 56
  %581 = getelementptr inbounds float, float* %5, i64 %580
  %582 = bitcast float* %581 to <8 x float>*
  %583 = load <8 x float>, <8 x float>* %582, align 1, !tbaa !12
  %584 = add nuw nsw i64 %491, 64
  %585 = getelementptr inbounds float, float* %5, i64 %584
  %586 = bitcast float* %585 to <8 x float>*
  %587 = load <8 x float>, <8 x float>* %586, align 1, !tbaa !12
  %588 = add nuw nsw i64 %491, 72
  %589 = getelementptr inbounds float, float* %5, i64 %588
  %590 = bitcast float* %589 to <8 x float>*
  %591 = load <8 x float>, <8 x float>* %590, align 1, !tbaa !12
  %592 = add nuw nsw i64 %491, 80
  %593 = getelementptr inbounds float, float* %5, i64 %592
  %594 = bitcast float* %593 to <8 x float>*
  %595 = load <8 x float>, <8 x float>* %594, align 1, !tbaa !12
  %596 = add nuw nsw i64 %491, 88
  %597 = getelementptr inbounds float, float* %5, i64 %596
  %598 = bitcast float* %597 to <8 x float>*
  %599 = load <8 x float>, <8 x float>* %598, align 1, !tbaa !12
  %600 = add nuw nsw i64 %491, 96
  %601 = getelementptr inbounds float, float* %5, i64 %600
  %602 = bitcast float* %601 to <8 x float>*
  %603 = load <8 x float>, <8 x float>* %602, align 1, !tbaa !12
  %604 = add nuw nsw i64 %491, 104
  %605 = getelementptr inbounds float, float* %5, i64 %604
  %606 = bitcast float* %605 to <8 x float>*
  %607 = load <8 x float>, <8 x float>* %606, align 1, !tbaa !12
  %608 = add nuw nsw i64 %491, 112
  %609 = getelementptr inbounds float, float* %5, i64 %608
  %610 = bitcast float* %609 to <8 x float>*
  %611 = load <8 x float>, <8 x float>* %610, align 1, !tbaa !12
  %612 = add nsw i64 %491, %282
  %613 = getelementptr inbounds float, float* %3, i64 %612
  %614 = bitcast float* %613 to <8 x float>*
  %615 = load <8 x float>, <8 x float>* %614, align 1, !tbaa !12
  %616 = add nsw i64 %612, 8
  %617 = getelementptr inbounds float, float* %3, i64 %616
  %618 = bitcast float* %617 to <8 x float>*
  %619 = load <8 x float>, <8 x float>* %618, align 1, !tbaa !12
  %620 = add nsw i64 %612, 16
  %621 = getelementptr inbounds float, float* %3, i64 %620
  %622 = bitcast float* %621 to <8 x float>*
  %623 = load <8 x float>, <8 x float>* %622, align 1, !tbaa !12
  %624 = add nsw i64 %612, 24
  %625 = getelementptr inbounds float, float* %3, i64 %624
  %626 = bitcast float* %625 to <8 x float>*
  %627 = load <8 x float>, <8 x float>* %626, align 1, !tbaa !12
  %628 = add nsw i64 %612, 32
  %629 = getelementptr inbounds float, float* %3, i64 %628
  %630 = bitcast float* %629 to <8 x float>*
  %631 = load <8 x float>, <8 x float>* %630, align 1, !tbaa !12
  %632 = add nsw i64 %612, 40
  %633 = getelementptr inbounds float, float* %3, i64 %632
  %634 = bitcast float* %633 to <8 x float>*
  %635 = load <8 x float>, <8 x float>* %634, align 1, !tbaa !12
  %636 = add nsw i64 %612, 48
  %637 = getelementptr inbounds float, float* %3, i64 %636
  %638 = bitcast float* %637 to <8 x float>*
  %639 = load <8 x float>, <8 x float>* %638, align 1, !tbaa !12
  %640 = add nsw i64 %612, 56
  %641 = getelementptr inbounds float, float* %3, i64 %640
  %642 = bitcast float* %641 to <8 x float>*
  %643 = load <8 x float>, <8 x float>* %642, align 1, !tbaa !12
  %644 = add nsw i64 %612, 64
  %645 = getelementptr inbounds float, float* %3, i64 %644
  %646 = bitcast float* %645 to <8 x float>*
  %647 = load <8 x float>, <8 x float>* %646, align 1, !tbaa !12
  %648 = add nsw i64 %612, 72
  %649 = getelementptr inbounds float, float* %3, i64 %648
  %650 = bitcast float* %649 to <8 x float>*
  %651 = load <8 x float>, <8 x float>* %650, align 1, !tbaa !12
  %652 = add nsw i64 %612, 80
  %653 = getelementptr inbounds float, float* %3, i64 %652
  %654 = bitcast float* %653 to <8 x float>*
  %655 = load <8 x float>, <8 x float>* %654, align 1, !tbaa !12
  %656 = add nsw i64 %612, 88
  %657 = getelementptr inbounds float, float* %3, i64 %656
  %658 = bitcast float* %657 to <8 x float>*
  %659 = load <8 x float>, <8 x float>* %658, align 1, !tbaa !12
  %660 = add nsw i64 %612, 96
  %661 = getelementptr inbounds float, float* %3, i64 %660
  %662 = bitcast float* %661 to <8 x float>*
  %663 = load <8 x float>, <8 x float>* %662, align 1, !tbaa !12
  %664 = add nsw i64 %612, 104
  %665 = getelementptr inbounds float, float* %3, i64 %664
  %666 = bitcast float* %665 to <8 x float>*
  %667 = load <8 x float>, <8 x float>* %666, align 1, !tbaa !12
  %668 = add nsw i64 %612, 112
  %669 = getelementptr inbounds float, float* %3, i64 %668
  %670 = bitcast float* %669 to <8 x float>*
  %671 = load <8 x float>, <8 x float>* %670, align 1, !tbaa !12
  %672 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %615, <8 x float> %35, <8 x float> %555) #10
  %673 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %619, <8 x float> %35, <8 x float> %559) #10
  %674 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %623, <8 x float> %35, <8 x float> %563) #10
  %675 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %627, <8 x float> %35, <8 x float> %567) #10
  %676 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %631, <8 x float> %35, <8 x float> %571) #10
  %677 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %635, <8 x float> %35, <8 x float> %575) #10
  %678 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %639, <8 x float> %35, <8 x float> %579) #10
  %679 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %643, <8 x float> %35, <8 x float> %583) #10
  %680 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %647, <8 x float> %35, <8 x float> %587) #10
  %681 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %651, <8 x float> %35, <8 x float> %591) #10
  %682 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %655, <8 x float> %35, <8 x float> %595) #10
  %683 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %659, <8 x float> %35, <8 x float> %599) #10
  %684 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %663, <8 x float> %35, <8 x float> %603) #10
  %685 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %667, <8 x float> %35, <8 x float> %607) #10
  %686 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %671, <8 x float> %35, <8 x float> %611) #10
  store <8 x float> %672, <8 x float>* %554, align 1, !tbaa !12
  store <8 x float> %673, <8 x float>* %558, align 1, !tbaa !12
  store <8 x float> %674, <8 x float>* %562, align 1, !tbaa !12
  store <8 x float> %675, <8 x float>* %566, align 1, !tbaa !12
  store <8 x float> %676, <8 x float>* %570, align 1, !tbaa !12
  store <8 x float> %677, <8 x float>* %574, align 1, !tbaa !12
  store <8 x float> %678, <8 x float>* %578, align 1, !tbaa !12
  store <8 x float> %679, <8 x float>* %582, align 1, !tbaa !12
  store <8 x float> %680, <8 x float>* %586, align 1, !tbaa !12
  store <8 x float> %681, <8 x float>* %590, align 1, !tbaa !12
  store <8 x float> %682, <8 x float>* %594, align 1, !tbaa !12
  store <8 x float> %683, <8 x float>* %598, align 1, !tbaa !12
  store <8 x float> %684, <8 x float>* %602, align 1, !tbaa !12
  store <8 x float> %685, <8 x float>* %606, align 1, !tbaa !12
  store <8 x float> %686, <8 x float>* %610, align 1, !tbaa !12
  %687 = add nuw nsw i64 %491, 120
  %688 = icmp ult i64 %687, %283
  br i1 %688, label %490, label %483

689:                                              ; preds = %695
  br i1 %485, label %690, label %1115

690:                                              ; preds = %689
  %691 = trunc i64 %41 to i32
  %692 = mul nsw i32 %484, %691
  %693 = sext i32 %692 to i64
  %694 = zext i32 %484 to i64
  br label %916

695:                                              ; preds = %486, %695
  %696 = phi i64 [ 0, %486 ], [ %908, %695 ]
  %697 = getelementptr inbounds float, float* %5, i64 %696
  %698 = getelementptr inbounds float, float* %697, i64 8
  %699 = bitcast float* %698 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %699, i32 0, i32 1, i32 1)
  %700 = getelementptr inbounds float, float* %3, i64 %696
  %701 = getelementptr inbounds float, float* %700, i64 8
  %702 = bitcast float* %701 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %702, i32 0, i32 1, i32 1)
  %703 = getelementptr inbounds float, float* %697, i64 16
  %704 = bitcast float* %703 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %704, i32 0, i32 1, i32 1)
  %705 = getelementptr inbounds float, float* %700, i64 16
  %706 = bitcast float* %705 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %706, i32 0, i32 1, i32 1)
  %707 = getelementptr inbounds float, float* %697, i64 24
  %708 = bitcast float* %707 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %708, i32 0, i32 1, i32 1)
  %709 = getelementptr inbounds float, float* %700, i64 24
  %710 = bitcast float* %709 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %710, i32 0, i32 1, i32 1)
  %711 = getelementptr inbounds float, float* %697, i64 32
  %712 = bitcast float* %711 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %712, i32 0, i32 1, i32 1)
  %713 = getelementptr inbounds float, float* %700, i64 32
  %714 = bitcast float* %713 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %714, i32 0, i32 1, i32 1)
  %715 = getelementptr inbounds float, float* %697, i64 40
  %716 = bitcast float* %715 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %716, i32 0, i32 1, i32 1)
  %717 = getelementptr inbounds float, float* %700, i64 40
  %718 = bitcast float* %717 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %718, i32 0, i32 1, i32 1)
  %719 = getelementptr inbounds float, float* %697, i64 48
  %720 = bitcast float* %719 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %720, i32 0, i32 1, i32 1)
  %721 = getelementptr inbounds float, float* %700, i64 48
  %722 = bitcast float* %721 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %722, i32 0, i32 1, i32 1)
  %723 = getelementptr inbounds float, float* %697, i64 56
  %724 = bitcast float* %723 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %724, i32 0, i32 1, i32 1)
  %725 = getelementptr inbounds float, float* %700, i64 56
  %726 = bitcast float* %725 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %726, i32 0, i32 1, i32 1)
  %727 = getelementptr inbounds float, float* %697, i64 64
  %728 = bitcast float* %727 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %728, i32 0, i32 1, i32 1)
  %729 = getelementptr inbounds float, float* %700, i64 64
  %730 = bitcast float* %729 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %730, i32 0, i32 1, i32 1)
  %731 = getelementptr inbounds float, float* %697, i64 72
  %732 = bitcast float* %731 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %732, i32 0, i32 1, i32 1)
  %733 = getelementptr inbounds float, float* %700, i64 72
  %734 = bitcast float* %733 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %734, i32 0, i32 1, i32 1)
  %735 = getelementptr inbounds float, float* %697, i64 80
  %736 = bitcast float* %735 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %736, i32 0, i32 1, i32 1)
  %737 = getelementptr inbounds float, float* %700, i64 80
  %738 = bitcast float* %737 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %738, i32 0, i32 1, i32 1)
  %739 = getelementptr inbounds float, float* %697, i64 88
  %740 = bitcast float* %739 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %740, i32 0, i32 1, i32 1)
  %741 = getelementptr inbounds float, float* %700, i64 88
  %742 = bitcast float* %741 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %742, i32 0, i32 1, i32 1)
  %743 = getelementptr inbounds float, float* %697, i64 96
  %744 = bitcast float* %743 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %744, i32 0, i32 1, i32 1)
  %745 = getelementptr inbounds float, float* %700, i64 96
  %746 = bitcast float* %745 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %746, i32 0, i32 1, i32 1)
  %747 = getelementptr inbounds float, float* %697, i64 104
  %748 = bitcast float* %747 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %748, i32 0, i32 1, i32 1)
  %749 = getelementptr inbounds float, float* %700, i64 104
  %750 = bitcast float* %749 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %750, i32 0, i32 1, i32 1)
  %751 = getelementptr inbounds float, float* %697, i64 112
  %752 = bitcast float* %751 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %752, i32 0, i32 1, i32 1)
  %753 = getelementptr inbounds float, float* %700, i64 112
  %754 = bitcast float* %753 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %754, i32 0, i32 1, i32 1)
  %755 = getelementptr inbounds float, float* %697, i64 120
  %756 = bitcast float* %755 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %756, i32 0, i32 1, i32 1)
  %757 = getelementptr inbounds float, float* %700, i64 120
  %758 = bitcast float* %757 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %758, i32 0, i32 1, i32 1)
  %759 = bitcast float* %697 to <8 x float>*
  %760 = load <8 x float>, <8 x float>* %759, align 1, !tbaa !12
  %761 = add nuw nsw i64 %696, 8
  %762 = getelementptr inbounds float, float* %5, i64 %761
  %763 = bitcast float* %762 to <8 x float>*
  %764 = load <8 x float>, <8 x float>* %763, align 1, !tbaa !12
  %765 = add nuw nsw i64 %696, 16
  %766 = getelementptr inbounds float, float* %5, i64 %765
  %767 = bitcast float* %766 to <8 x float>*
  %768 = load <8 x float>, <8 x float>* %767, align 1, !tbaa !12
  %769 = add nuw nsw i64 %696, 24
  %770 = getelementptr inbounds float, float* %5, i64 %769
  %771 = bitcast float* %770 to <8 x float>*
  %772 = load <8 x float>, <8 x float>* %771, align 1, !tbaa !12
  %773 = add nuw nsw i64 %696, 32
  %774 = getelementptr inbounds float, float* %5, i64 %773
  %775 = bitcast float* %774 to <8 x float>*
  %776 = load <8 x float>, <8 x float>* %775, align 1, !tbaa !12
  %777 = add nuw nsw i64 %696, 40
  %778 = getelementptr inbounds float, float* %5, i64 %777
  %779 = bitcast float* %778 to <8 x float>*
  %780 = load <8 x float>, <8 x float>* %779, align 1, !tbaa !12
  %781 = add nuw nsw i64 %696, 48
  %782 = getelementptr inbounds float, float* %5, i64 %781
  %783 = bitcast float* %782 to <8 x float>*
  %784 = load <8 x float>, <8 x float>* %783, align 1, !tbaa !12
  %785 = add nuw nsw i64 %696, 56
  %786 = getelementptr inbounds float, float* %5, i64 %785
  %787 = bitcast float* %786 to <8 x float>*
  %788 = load <8 x float>, <8 x float>* %787, align 1, !tbaa !12
  %789 = add nuw nsw i64 %696, 64
  %790 = getelementptr inbounds float, float* %5, i64 %789
  %791 = bitcast float* %790 to <8 x float>*
  %792 = load <8 x float>, <8 x float>* %791, align 1, !tbaa !12
  %793 = add nuw nsw i64 %696, 72
  %794 = getelementptr inbounds float, float* %5, i64 %793
  %795 = bitcast float* %794 to <8 x float>*
  %796 = load <8 x float>, <8 x float>* %795, align 1, !tbaa !12
  %797 = add nuw nsw i64 %696, 80
  %798 = getelementptr inbounds float, float* %5, i64 %797
  %799 = bitcast float* %798 to <8 x float>*
  %800 = load <8 x float>, <8 x float>* %799, align 1, !tbaa !12
  %801 = add nuw nsw i64 %696, 88
  %802 = getelementptr inbounds float, float* %5, i64 %801
  %803 = bitcast float* %802 to <8 x float>*
  %804 = load <8 x float>, <8 x float>* %803, align 1, !tbaa !12
  %805 = add nuw nsw i64 %696, 96
  %806 = getelementptr inbounds float, float* %5, i64 %805
  %807 = bitcast float* %806 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 1, !tbaa !12
  %809 = add nuw nsw i64 %696, 104
  %810 = getelementptr inbounds float, float* %5, i64 %809
  %811 = bitcast float* %810 to <8 x float>*
  %812 = load <8 x float>, <8 x float>* %811, align 1, !tbaa !12
  %813 = add nuw nsw i64 %696, 112
  %814 = getelementptr inbounds float, float* %5, i64 %813
  %815 = bitcast float* %814 to <8 x float>*
  %816 = load <8 x float>, <8 x float>* %815, align 1, !tbaa !12
  %817 = trunc i64 %696 to i32
  %818 = add nsw i32 %489, %817
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds float, float* %3, i64 %819
  %821 = bitcast float* %820 to <8 x float>*
  %822 = load <8 x float>, <8 x float>* %821, align 1, !tbaa !12
  %823 = add nsw i32 %818, 8
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds float, float* %3, i64 %824
  %826 = bitcast float* %825 to <8 x float>*
  %827 = load <8 x float>, <8 x float>* %826, align 1, !tbaa !12
  %828 = add nsw i32 %818, 16
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds float, float* %3, i64 %829
  %831 = bitcast float* %830 to <8 x float>*
  %832 = load <8 x float>, <8 x float>* %831, align 1, !tbaa !12
  %833 = add nsw i32 %818, 24
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds float, float* %3, i64 %834
  %836 = bitcast float* %835 to <8 x float>*
  %837 = load <8 x float>, <8 x float>* %836, align 1, !tbaa !12
  %838 = add nsw i32 %818, 32
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds float, float* %3, i64 %839
  %841 = bitcast float* %840 to <8 x float>*
  %842 = load <8 x float>, <8 x float>* %841, align 1, !tbaa !12
  %843 = add nsw i32 %818, 40
  %844 = sext i32 %843 to i64
  %845 = getelementptr inbounds float, float* %3, i64 %844
  %846 = bitcast float* %845 to <8 x float>*
  %847 = load <8 x float>, <8 x float>* %846, align 1, !tbaa !12
  %848 = add nsw i32 %818, 48
  %849 = sext i32 %848 to i64
  %850 = getelementptr inbounds float, float* %3, i64 %849
  %851 = bitcast float* %850 to <8 x float>*
  %852 = load <8 x float>, <8 x float>* %851, align 1, !tbaa !12
  %853 = add nsw i32 %818, 56
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds float, float* %3, i64 %854
  %856 = bitcast float* %855 to <8 x float>*
  %857 = load <8 x float>, <8 x float>* %856, align 1, !tbaa !12
  %858 = add nsw i32 %818, 64
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds float, float* %3, i64 %859
  %861 = bitcast float* %860 to <8 x float>*
  %862 = load <8 x float>, <8 x float>* %861, align 1, !tbaa !12
  %863 = add nsw i32 %818, 72
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds float, float* %3, i64 %864
  %866 = bitcast float* %865 to <8 x float>*
  %867 = load <8 x float>, <8 x float>* %866, align 1, !tbaa !12
  %868 = add nsw i32 %818, 80
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds float, float* %3, i64 %869
  %871 = bitcast float* %870 to <8 x float>*
  %872 = load <8 x float>, <8 x float>* %871, align 1, !tbaa !12
  %873 = add nsw i32 %818, 88
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds float, float* %3, i64 %874
  %876 = bitcast float* %875 to <8 x float>*
  %877 = load <8 x float>, <8 x float>* %876, align 1, !tbaa !12
  %878 = add nsw i32 %818, 96
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds float, float* %3, i64 %879
  %881 = bitcast float* %880 to <8 x float>*
  %882 = load <8 x float>, <8 x float>* %881, align 1, !tbaa !12
  %883 = add nsw i32 %818, 104
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds float, float* %3, i64 %884
  %886 = bitcast float* %885 to <8 x float>*
  %887 = load <8 x float>, <8 x float>* %886, align 1, !tbaa !12
  %888 = add nsw i32 %818, 112
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds float, float* %3, i64 %889
  %891 = bitcast float* %890 to <8 x float>*
  %892 = load <8 x float>, <8 x float>* %891, align 1, !tbaa !12
  %893 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %822, <8 x float> %40, <8 x float> %760) #10
  %894 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %827, <8 x float> %40, <8 x float> %764) #10
  %895 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %832, <8 x float> %40, <8 x float> %768) #10
  %896 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %837, <8 x float> %40, <8 x float> %772) #10
  %897 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %842, <8 x float> %40, <8 x float> %776) #10
  %898 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %847, <8 x float> %40, <8 x float> %780) #10
  %899 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %852, <8 x float> %40, <8 x float> %784) #10
  %900 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %857, <8 x float> %40, <8 x float> %788) #10
  %901 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %862, <8 x float> %40, <8 x float> %792) #10
  %902 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %867, <8 x float> %40, <8 x float> %796) #10
  %903 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %872, <8 x float> %40, <8 x float> %800) #10
  %904 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %877, <8 x float> %40, <8 x float> %804) #10
  %905 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %882, <8 x float> %40, <8 x float> %808) #10
  %906 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %887, <8 x float> %40, <8 x float> %812) #10
  %907 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %892, <8 x float> %40, <8 x float> %816) #10
  store <8 x float> %893, <8 x float>* %759, align 1, !tbaa !12
  store <8 x float> %894, <8 x float>* %763, align 1, !tbaa !12
  store <8 x float> %895, <8 x float>* %767, align 1, !tbaa !12
  store <8 x float> %896, <8 x float>* %771, align 1, !tbaa !12
  store <8 x float> %897, <8 x float>* %775, align 1, !tbaa !12
  store <8 x float> %898, <8 x float>* %779, align 1, !tbaa !12
  store <8 x float> %899, <8 x float>* %783, align 1, !tbaa !12
  store <8 x float> %900, <8 x float>* %787, align 1, !tbaa !12
  store <8 x float> %901, <8 x float>* %791, align 1, !tbaa !12
  store <8 x float> %902, <8 x float>* %795, align 1, !tbaa !12
  store <8 x float> %903, <8 x float>* %799, align 1, !tbaa !12
  store <8 x float> %904, <8 x float>* %803, align 1, !tbaa !12
  store <8 x float> %905, <8 x float>* %807, align 1, !tbaa !12
  store <8 x float> %906, <8 x float>* %811, align 1, !tbaa !12
  store <8 x float> %907, <8 x float>* %815, align 1, !tbaa !12
  %908 = add nuw nsw i64 %696, 120
  %909 = icmp ult i64 %908, %487
  br i1 %909, label %695, label %689

910:                                              ; preds = %916
  br i1 %485, label %911, label %1115

911:                                              ; preds = %910
  %912 = trunc i64 %46 to i32
  %913 = mul nsw i32 %484, %912
  %914 = sext i32 %913 to i64
  %915 = zext i32 %484 to i64
  br label %1120

916:                                              ; preds = %690, %916
  %917 = phi i64 [ 0, %690 ], [ %1113, %916 ]
  %918 = getelementptr inbounds float, float* %5, i64 %917
  %919 = getelementptr inbounds float, float* %918, i64 8
  %920 = bitcast float* %919 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %920, i32 0, i32 1, i32 1)
  %921 = getelementptr inbounds float, float* %3, i64 %917
  %922 = getelementptr inbounds float, float* %921, i64 8
  %923 = bitcast float* %922 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %923, i32 0, i32 1, i32 1)
  %924 = getelementptr inbounds float, float* %918, i64 16
  %925 = bitcast float* %924 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %925, i32 0, i32 1, i32 1)
  %926 = getelementptr inbounds float, float* %921, i64 16
  %927 = bitcast float* %926 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %927, i32 0, i32 1, i32 1)
  %928 = getelementptr inbounds float, float* %918, i64 24
  %929 = bitcast float* %928 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %929, i32 0, i32 1, i32 1)
  %930 = getelementptr inbounds float, float* %921, i64 24
  %931 = bitcast float* %930 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %931, i32 0, i32 1, i32 1)
  %932 = getelementptr inbounds float, float* %918, i64 32
  %933 = bitcast float* %932 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %933, i32 0, i32 1, i32 1)
  %934 = getelementptr inbounds float, float* %921, i64 32
  %935 = bitcast float* %934 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %935, i32 0, i32 1, i32 1)
  %936 = getelementptr inbounds float, float* %918, i64 40
  %937 = bitcast float* %936 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %937, i32 0, i32 1, i32 1)
  %938 = getelementptr inbounds float, float* %921, i64 40
  %939 = bitcast float* %938 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %939, i32 0, i32 1, i32 1)
  %940 = getelementptr inbounds float, float* %918, i64 48
  %941 = bitcast float* %940 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %941, i32 0, i32 1, i32 1)
  %942 = getelementptr inbounds float, float* %921, i64 48
  %943 = bitcast float* %942 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %943, i32 0, i32 1, i32 1)
  %944 = getelementptr inbounds float, float* %918, i64 56
  %945 = bitcast float* %944 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %945, i32 0, i32 1, i32 1)
  %946 = getelementptr inbounds float, float* %921, i64 56
  %947 = bitcast float* %946 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %947, i32 0, i32 1, i32 1)
  %948 = getelementptr inbounds float, float* %918, i64 64
  %949 = bitcast float* %948 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %949, i32 0, i32 1, i32 1)
  %950 = getelementptr inbounds float, float* %921, i64 64
  %951 = bitcast float* %950 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %951, i32 0, i32 1, i32 1)
  %952 = getelementptr inbounds float, float* %918, i64 72
  %953 = bitcast float* %952 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %953, i32 0, i32 1, i32 1)
  %954 = getelementptr inbounds float, float* %921, i64 72
  %955 = bitcast float* %954 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %955, i32 0, i32 1, i32 1)
  %956 = getelementptr inbounds float, float* %918, i64 80
  %957 = bitcast float* %956 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %957, i32 0, i32 1, i32 1)
  %958 = getelementptr inbounds float, float* %921, i64 80
  %959 = bitcast float* %958 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %959, i32 0, i32 1, i32 1)
  %960 = getelementptr inbounds float, float* %918, i64 88
  %961 = bitcast float* %960 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %961, i32 0, i32 1, i32 1)
  %962 = getelementptr inbounds float, float* %921, i64 88
  %963 = bitcast float* %962 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %963, i32 0, i32 1, i32 1)
  %964 = getelementptr inbounds float, float* %918, i64 96
  %965 = bitcast float* %964 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %965, i32 0, i32 1, i32 1)
  %966 = getelementptr inbounds float, float* %921, i64 96
  %967 = bitcast float* %966 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %967, i32 0, i32 1, i32 1)
  %968 = getelementptr inbounds float, float* %918, i64 104
  %969 = bitcast float* %968 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %969, i32 0, i32 1, i32 1)
  %970 = getelementptr inbounds float, float* %921, i64 104
  %971 = bitcast float* %970 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %971, i32 0, i32 1, i32 1)
  %972 = getelementptr inbounds float, float* %918, i64 112
  %973 = bitcast float* %972 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %973, i32 0, i32 1, i32 1)
  %974 = getelementptr inbounds float, float* %921, i64 112
  %975 = bitcast float* %974 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %975, i32 0, i32 1, i32 1)
  %976 = getelementptr inbounds float, float* %918, i64 120
  %977 = bitcast float* %976 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %977, i32 0, i32 1, i32 1)
  %978 = getelementptr inbounds float, float* %921, i64 120
  %979 = bitcast float* %978 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %979, i32 0, i32 1, i32 1)
  %980 = bitcast float* %918 to <8 x float>*
  %981 = load <8 x float>, <8 x float>* %980, align 1, !tbaa !12
  %982 = add nuw nsw i64 %917, 8
  %983 = getelementptr inbounds float, float* %5, i64 %982
  %984 = bitcast float* %983 to <8 x float>*
  %985 = load <8 x float>, <8 x float>* %984, align 1, !tbaa !12
  %986 = add nuw nsw i64 %917, 16
  %987 = getelementptr inbounds float, float* %5, i64 %986
  %988 = bitcast float* %987 to <8 x float>*
  %989 = load <8 x float>, <8 x float>* %988, align 1, !tbaa !12
  %990 = add nuw nsw i64 %917, 24
  %991 = getelementptr inbounds float, float* %5, i64 %990
  %992 = bitcast float* %991 to <8 x float>*
  %993 = load <8 x float>, <8 x float>* %992, align 1, !tbaa !12
  %994 = add nuw nsw i64 %917, 32
  %995 = getelementptr inbounds float, float* %5, i64 %994
  %996 = bitcast float* %995 to <8 x float>*
  %997 = load <8 x float>, <8 x float>* %996, align 1, !tbaa !12
  %998 = add nuw nsw i64 %917, 40
  %999 = getelementptr inbounds float, float* %5, i64 %998
  %1000 = bitcast float* %999 to <8 x float>*
  %1001 = load <8 x float>, <8 x float>* %1000, align 1, !tbaa !12
  %1002 = add nuw nsw i64 %917, 48
  %1003 = getelementptr inbounds float, float* %5, i64 %1002
  %1004 = bitcast float* %1003 to <8 x float>*
  %1005 = load <8 x float>, <8 x float>* %1004, align 1, !tbaa !12
  %1006 = add nuw nsw i64 %917, 56
  %1007 = getelementptr inbounds float, float* %5, i64 %1006
  %1008 = bitcast float* %1007 to <8 x float>*
  %1009 = load <8 x float>, <8 x float>* %1008, align 1, !tbaa !12
  %1010 = add nuw nsw i64 %917, 64
  %1011 = getelementptr inbounds float, float* %5, i64 %1010
  %1012 = bitcast float* %1011 to <8 x float>*
  %1013 = load <8 x float>, <8 x float>* %1012, align 1, !tbaa !12
  %1014 = add nuw nsw i64 %917, 72
  %1015 = getelementptr inbounds float, float* %5, i64 %1014
  %1016 = bitcast float* %1015 to <8 x float>*
  %1017 = load <8 x float>, <8 x float>* %1016, align 1, !tbaa !12
  %1018 = add nuw nsw i64 %917, 80
  %1019 = getelementptr inbounds float, float* %5, i64 %1018
  %1020 = bitcast float* %1019 to <8 x float>*
  %1021 = load <8 x float>, <8 x float>* %1020, align 1, !tbaa !12
  %1022 = add nuw nsw i64 %917, 88
  %1023 = getelementptr inbounds float, float* %5, i64 %1022
  %1024 = bitcast float* %1023 to <8 x float>*
  %1025 = load <8 x float>, <8 x float>* %1024, align 1, !tbaa !12
  %1026 = add nuw nsw i64 %917, 96
  %1027 = getelementptr inbounds float, float* %5, i64 %1026
  %1028 = bitcast float* %1027 to <8 x float>*
  %1029 = load <8 x float>, <8 x float>* %1028, align 1, !tbaa !12
  %1030 = add nuw nsw i64 %917, 104
  %1031 = getelementptr inbounds float, float* %5, i64 %1030
  %1032 = bitcast float* %1031 to <8 x float>*
  %1033 = load <8 x float>, <8 x float>* %1032, align 1, !tbaa !12
  %1034 = add nuw nsw i64 %917, 112
  %1035 = getelementptr inbounds float, float* %5, i64 %1034
  %1036 = bitcast float* %1035 to <8 x float>*
  %1037 = load <8 x float>, <8 x float>* %1036, align 1, !tbaa !12
  %1038 = add nsw i64 %917, %693
  %1039 = getelementptr inbounds float, float* %3, i64 %1038
  %1040 = bitcast float* %1039 to <8 x float>*
  %1041 = load <8 x float>, <8 x float>* %1040, align 1, !tbaa !12
  %1042 = add nsw i64 %1038, 8
  %1043 = getelementptr inbounds float, float* %3, i64 %1042
  %1044 = bitcast float* %1043 to <8 x float>*
  %1045 = load <8 x float>, <8 x float>* %1044, align 1, !tbaa !12
  %1046 = add nsw i64 %1038, 16
  %1047 = getelementptr inbounds float, float* %3, i64 %1046
  %1048 = bitcast float* %1047 to <8 x float>*
  %1049 = load <8 x float>, <8 x float>* %1048, align 1, !tbaa !12
  %1050 = add nsw i64 %1038, 24
  %1051 = getelementptr inbounds float, float* %3, i64 %1050
  %1052 = bitcast float* %1051 to <8 x float>*
  %1053 = load <8 x float>, <8 x float>* %1052, align 1, !tbaa !12
  %1054 = add nsw i64 %1038, 32
  %1055 = getelementptr inbounds float, float* %3, i64 %1054
  %1056 = bitcast float* %1055 to <8 x float>*
  %1057 = load <8 x float>, <8 x float>* %1056, align 1, !tbaa !12
  %1058 = add nsw i64 %1038, 40
  %1059 = getelementptr inbounds float, float* %3, i64 %1058
  %1060 = bitcast float* %1059 to <8 x float>*
  %1061 = load <8 x float>, <8 x float>* %1060, align 1, !tbaa !12
  %1062 = add nsw i64 %1038, 48
  %1063 = getelementptr inbounds float, float* %3, i64 %1062
  %1064 = bitcast float* %1063 to <8 x float>*
  %1065 = load <8 x float>, <8 x float>* %1064, align 1, !tbaa !12
  %1066 = add nsw i64 %1038, 56
  %1067 = getelementptr inbounds float, float* %3, i64 %1066
  %1068 = bitcast float* %1067 to <8 x float>*
  %1069 = load <8 x float>, <8 x float>* %1068, align 1, !tbaa !12
  %1070 = add nsw i64 %1038, 64
  %1071 = getelementptr inbounds float, float* %3, i64 %1070
  %1072 = bitcast float* %1071 to <8 x float>*
  %1073 = load <8 x float>, <8 x float>* %1072, align 1, !tbaa !12
  %1074 = add nsw i64 %1038, 72
  %1075 = getelementptr inbounds float, float* %3, i64 %1074
  %1076 = bitcast float* %1075 to <8 x float>*
  %1077 = load <8 x float>, <8 x float>* %1076, align 1, !tbaa !12
  %1078 = add nsw i64 %1038, 80
  %1079 = getelementptr inbounds float, float* %3, i64 %1078
  %1080 = bitcast float* %1079 to <8 x float>*
  %1081 = load <8 x float>, <8 x float>* %1080, align 1, !tbaa !12
  %1082 = add nsw i64 %1038, 88
  %1083 = getelementptr inbounds float, float* %3, i64 %1082
  %1084 = bitcast float* %1083 to <8 x float>*
  %1085 = load <8 x float>, <8 x float>* %1084, align 1, !tbaa !12
  %1086 = add nsw i64 %1038, 96
  %1087 = getelementptr inbounds float, float* %3, i64 %1086
  %1088 = bitcast float* %1087 to <8 x float>*
  %1089 = load <8 x float>, <8 x float>* %1088, align 1, !tbaa !12
  %1090 = add nsw i64 %1038, 104
  %1091 = getelementptr inbounds float, float* %3, i64 %1090
  %1092 = bitcast float* %1091 to <8 x float>*
  %1093 = load <8 x float>, <8 x float>* %1092, align 1, !tbaa !12
  %1094 = add nsw i64 %1038, 112
  %1095 = getelementptr inbounds float, float* %3, i64 %1094
  %1096 = bitcast float* %1095 to <8 x float>*
  %1097 = load <8 x float>, <8 x float>* %1096, align 1, !tbaa !12
  %1098 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1041, <8 x float> %45, <8 x float> %981) #10
  %1099 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1045, <8 x float> %45, <8 x float> %985) #10
  %1100 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1049, <8 x float> %45, <8 x float> %989) #10
  %1101 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1053, <8 x float> %45, <8 x float> %993) #10
  %1102 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1057, <8 x float> %45, <8 x float> %997) #10
  %1103 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1061, <8 x float> %45, <8 x float> %1001) #10
  %1104 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1065, <8 x float> %45, <8 x float> %1005) #10
  %1105 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1069, <8 x float> %45, <8 x float> %1009) #10
  %1106 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1073, <8 x float> %45, <8 x float> %1013) #10
  %1107 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1077, <8 x float> %45, <8 x float> %1017) #10
  %1108 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1081, <8 x float> %45, <8 x float> %1021) #10
  %1109 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1085, <8 x float> %45, <8 x float> %1025) #10
  %1110 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1089, <8 x float> %45, <8 x float> %1029) #10
  %1111 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %45, <8 x float> %1033) #10
  %1112 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1097, <8 x float> %45, <8 x float> %1037) #10
  store <8 x float> %1098, <8 x float>* %980, align 1, !tbaa !12
  store <8 x float> %1099, <8 x float>* %984, align 1, !tbaa !12
  store <8 x float> %1100, <8 x float>* %988, align 1, !tbaa !12
  store <8 x float> %1101, <8 x float>* %992, align 1, !tbaa !12
  store <8 x float> %1102, <8 x float>* %996, align 1, !tbaa !12
  store <8 x float> %1103, <8 x float>* %1000, align 1, !tbaa !12
  store <8 x float> %1104, <8 x float>* %1004, align 1, !tbaa !12
  store <8 x float> %1105, <8 x float>* %1008, align 1, !tbaa !12
  store <8 x float> %1106, <8 x float>* %1012, align 1, !tbaa !12
  store <8 x float> %1107, <8 x float>* %1016, align 1, !tbaa !12
  store <8 x float> %1108, <8 x float>* %1020, align 1, !tbaa !12
  store <8 x float> %1109, <8 x float>* %1024, align 1, !tbaa !12
  store <8 x float> %1110, <8 x float>* %1028, align 1, !tbaa !12
  store <8 x float> %1111, <8 x float>* %1032, align 1, !tbaa !12
  store <8 x float> %1112, <8 x float>* %1036, align 1, !tbaa !12
  %1113 = add nuw nsw i64 %917, 120
  %1114 = icmp ult i64 %1113, %694
  br i1 %1114, label %916, label %910

1115:                                             ; preds = %1120, %20, %483, %689, %910
  %1116 = add nuw nsw i64 %21, 6
  %1117 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1118 = sext i32 %1117 to i64
  %1119 = icmp slt i64 %1116, %1118
  br i1 %1119, label %20, label %8

1120:                                             ; preds = %911, %1120
  %1121 = phi i64 [ 0, %911 ], [ %1317, %1120 ]
  %1122 = getelementptr inbounds float, float* %5, i64 %1121
  %1123 = getelementptr inbounds float, float* %1122, i64 8
  %1124 = bitcast float* %1123 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1124, i32 0, i32 1, i32 1)
  %1125 = getelementptr inbounds float, float* %3, i64 %1121
  %1126 = getelementptr inbounds float, float* %1125, i64 8
  %1127 = bitcast float* %1126 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1127, i32 0, i32 1, i32 1)
  %1128 = getelementptr inbounds float, float* %1122, i64 16
  %1129 = bitcast float* %1128 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1129, i32 0, i32 1, i32 1)
  %1130 = getelementptr inbounds float, float* %1125, i64 16
  %1131 = bitcast float* %1130 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1131, i32 0, i32 1, i32 1)
  %1132 = getelementptr inbounds float, float* %1122, i64 24
  %1133 = bitcast float* %1132 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1133, i32 0, i32 1, i32 1)
  %1134 = getelementptr inbounds float, float* %1125, i64 24
  %1135 = bitcast float* %1134 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1135, i32 0, i32 1, i32 1)
  %1136 = getelementptr inbounds float, float* %1122, i64 32
  %1137 = bitcast float* %1136 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1137, i32 0, i32 1, i32 1)
  %1138 = getelementptr inbounds float, float* %1125, i64 32
  %1139 = bitcast float* %1138 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1139, i32 0, i32 1, i32 1)
  %1140 = getelementptr inbounds float, float* %1122, i64 40
  %1141 = bitcast float* %1140 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1141, i32 0, i32 1, i32 1)
  %1142 = getelementptr inbounds float, float* %1125, i64 40
  %1143 = bitcast float* %1142 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1143, i32 0, i32 1, i32 1)
  %1144 = getelementptr inbounds float, float* %1122, i64 48
  %1145 = bitcast float* %1144 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1145, i32 0, i32 1, i32 1)
  %1146 = getelementptr inbounds float, float* %1125, i64 48
  %1147 = bitcast float* %1146 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1147, i32 0, i32 1, i32 1)
  %1148 = getelementptr inbounds float, float* %1122, i64 56
  %1149 = bitcast float* %1148 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1149, i32 0, i32 1, i32 1)
  %1150 = getelementptr inbounds float, float* %1125, i64 56
  %1151 = bitcast float* %1150 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1151, i32 0, i32 1, i32 1)
  %1152 = getelementptr inbounds float, float* %1122, i64 64
  %1153 = bitcast float* %1152 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1153, i32 0, i32 1, i32 1)
  %1154 = getelementptr inbounds float, float* %1125, i64 64
  %1155 = bitcast float* %1154 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1155, i32 0, i32 1, i32 1)
  %1156 = getelementptr inbounds float, float* %1122, i64 72
  %1157 = bitcast float* %1156 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1157, i32 0, i32 1, i32 1)
  %1158 = getelementptr inbounds float, float* %1125, i64 72
  %1159 = bitcast float* %1158 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1159, i32 0, i32 1, i32 1)
  %1160 = getelementptr inbounds float, float* %1122, i64 80
  %1161 = bitcast float* %1160 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1161, i32 0, i32 1, i32 1)
  %1162 = getelementptr inbounds float, float* %1125, i64 80
  %1163 = bitcast float* %1162 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1163, i32 0, i32 1, i32 1)
  %1164 = getelementptr inbounds float, float* %1122, i64 88
  %1165 = bitcast float* %1164 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1165, i32 0, i32 1, i32 1)
  %1166 = getelementptr inbounds float, float* %1125, i64 88
  %1167 = bitcast float* %1166 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1167, i32 0, i32 1, i32 1)
  %1168 = getelementptr inbounds float, float* %1122, i64 96
  %1169 = bitcast float* %1168 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1169, i32 0, i32 1, i32 1)
  %1170 = getelementptr inbounds float, float* %1125, i64 96
  %1171 = bitcast float* %1170 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1171, i32 0, i32 1, i32 1)
  %1172 = getelementptr inbounds float, float* %1122, i64 104
  %1173 = bitcast float* %1172 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1173, i32 0, i32 1, i32 1)
  %1174 = getelementptr inbounds float, float* %1125, i64 104
  %1175 = bitcast float* %1174 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1175, i32 0, i32 1, i32 1)
  %1176 = getelementptr inbounds float, float* %1122, i64 112
  %1177 = bitcast float* %1176 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1177, i32 0, i32 1, i32 1)
  %1178 = getelementptr inbounds float, float* %1125, i64 112
  %1179 = bitcast float* %1178 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1179, i32 0, i32 1, i32 1)
  %1180 = getelementptr inbounds float, float* %1122, i64 120
  %1181 = bitcast float* %1180 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1181, i32 0, i32 1, i32 1)
  %1182 = getelementptr inbounds float, float* %1125, i64 120
  %1183 = bitcast float* %1182 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1183, i32 0, i32 1, i32 1)
  %1184 = bitcast float* %1122 to <8 x float>*
  %1185 = load <8 x float>, <8 x float>* %1184, align 1, !tbaa !12
  %1186 = add nuw nsw i64 %1121, 8
  %1187 = getelementptr inbounds float, float* %5, i64 %1186
  %1188 = bitcast float* %1187 to <8 x float>*
  %1189 = load <8 x float>, <8 x float>* %1188, align 1, !tbaa !12
  %1190 = add nuw nsw i64 %1121, 16
  %1191 = getelementptr inbounds float, float* %5, i64 %1190
  %1192 = bitcast float* %1191 to <8 x float>*
  %1193 = load <8 x float>, <8 x float>* %1192, align 1, !tbaa !12
  %1194 = add nuw nsw i64 %1121, 24
  %1195 = getelementptr inbounds float, float* %5, i64 %1194
  %1196 = bitcast float* %1195 to <8 x float>*
  %1197 = load <8 x float>, <8 x float>* %1196, align 1, !tbaa !12
  %1198 = add nuw nsw i64 %1121, 32
  %1199 = getelementptr inbounds float, float* %5, i64 %1198
  %1200 = bitcast float* %1199 to <8 x float>*
  %1201 = load <8 x float>, <8 x float>* %1200, align 1, !tbaa !12
  %1202 = add nuw nsw i64 %1121, 40
  %1203 = getelementptr inbounds float, float* %5, i64 %1202
  %1204 = bitcast float* %1203 to <8 x float>*
  %1205 = load <8 x float>, <8 x float>* %1204, align 1, !tbaa !12
  %1206 = add nuw nsw i64 %1121, 48
  %1207 = getelementptr inbounds float, float* %5, i64 %1206
  %1208 = bitcast float* %1207 to <8 x float>*
  %1209 = load <8 x float>, <8 x float>* %1208, align 1, !tbaa !12
  %1210 = add nuw nsw i64 %1121, 56
  %1211 = getelementptr inbounds float, float* %5, i64 %1210
  %1212 = bitcast float* %1211 to <8 x float>*
  %1213 = load <8 x float>, <8 x float>* %1212, align 1, !tbaa !12
  %1214 = add nuw nsw i64 %1121, 64
  %1215 = getelementptr inbounds float, float* %5, i64 %1214
  %1216 = bitcast float* %1215 to <8 x float>*
  %1217 = load <8 x float>, <8 x float>* %1216, align 1, !tbaa !12
  %1218 = add nuw nsw i64 %1121, 72
  %1219 = getelementptr inbounds float, float* %5, i64 %1218
  %1220 = bitcast float* %1219 to <8 x float>*
  %1221 = load <8 x float>, <8 x float>* %1220, align 1, !tbaa !12
  %1222 = add nuw nsw i64 %1121, 80
  %1223 = getelementptr inbounds float, float* %5, i64 %1222
  %1224 = bitcast float* %1223 to <8 x float>*
  %1225 = load <8 x float>, <8 x float>* %1224, align 1, !tbaa !12
  %1226 = add nuw nsw i64 %1121, 88
  %1227 = getelementptr inbounds float, float* %5, i64 %1226
  %1228 = bitcast float* %1227 to <8 x float>*
  %1229 = load <8 x float>, <8 x float>* %1228, align 1, !tbaa !12
  %1230 = add nuw nsw i64 %1121, 96
  %1231 = getelementptr inbounds float, float* %5, i64 %1230
  %1232 = bitcast float* %1231 to <8 x float>*
  %1233 = load <8 x float>, <8 x float>* %1232, align 1, !tbaa !12
  %1234 = add nuw nsw i64 %1121, 104
  %1235 = getelementptr inbounds float, float* %5, i64 %1234
  %1236 = bitcast float* %1235 to <8 x float>*
  %1237 = load <8 x float>, <8 x float>* %1236, align 1, !tbaa !12
  %1238 = add nuw nsw i64 %1121, 112
  %1239 = getelementptr inbounds float, float* %5, i64 %1238
  %1240 = bitcast float* %1239 to <8 x float>*
  %1241 = load <8 x float>, <8 x float>* %1240, align 1, !tbaa !12
  %1242 = add nsw i64 %1121, %914
  %1243 = getelementptr inbounds float, float* %3, i64 %1242
  %1244 = bitcast float* %1243 to <8 x float>*
  %1245 = load <8 x float>, <8 x float>* %1244, align 1, !tbaa !12
  %1246 = add nsw i64 %1242, 8
  %1247 = getelementptr inbounds float, float* %3, i64 %1246
  %1248 = bitcast float* %1247 to <8 x float>*
  %1249 = load <8 x float>, <8 x float>* %1248, align 1, !tbaa !12
  %1250 = add nsw i64 %1242, 16
  %1251 = getelementptr inbounds float, float* %3, i64 %1250
  %1252 = bitcast float* %1251 to <8 x float>*
  %1253 = load <8 x float>, <8 x float>* %1252, align 1, !tbaa !12
  %1254 = add nsw i64 %1242, 24
  %1255 = getelementptr inbounds float, float* %3, i64 %1254
  %1256 = bitcast float* %1255 to <8 x float>*
  %1257 = load <8 x float>, <8 x float>* %1256, align 1, !tbaa !12
  %1258 = add nsw i64 %1242, 32
  %1259 = getelementptr inbounds float, float* %3, i64 %1258
  %1260 = bitcast float* %1259 to <8 x float>*
  %1261 = load <8 x float>, <8 x float>* %1260, align 1, !tbaa !12
  %1262 = add nsw i64 %1242, 40
  %1263 = getelementptr inbounds float, float* %3, i64 %1262
  %1264 = bitcast float* %1263 to <8 x float>*
  %1265 = load <8 x float>, <8 x float>* %1264, align 1, !tbaa !12
  %1266 = add nsw i64 %1242, 48
  %1267 = getelementptr inbounds float, float* %3, i64 %1266
  %1268 = bitcast float* %1267 to <8 x float>*
  %1269 = load <8 x float>, <8 x float>* %1268, align 1, !tbaa !12
  %1270 = add nsw i64 %1242, 56
  %1271 = getelementptr inbounds float, float* %3, i64 %1270
  %1272 = bitcast float* %1271 to <8 x float>*
  %1273 = load <8 x float>, <8 x float>* %1272, align 1, !tbaa !12
  %1274 = add nsw i64 %1242, 64
  %1275 = getelementptr inbounds float, float* %3, i64 %1274
  %1276 = bitcast float* %1275 to <8 x float>*
  %1277 = load <8 x float>, <8 x float>* %1276, align 1, !tbaa !12
  %1278 = add nsw i64 %1242, 72
  %1279 = getelementptr inbounds float, float* %3, i64 %1278
  %1280 = bitcast float* %1279 to <8 x float>*
  %1281 = load <8 x float>, <8 x float>* %1280, align 1, !tbaa !12
  %1282 = add nsw i64 %1242, 80
  %1283 = getelementptr inbounds float, float* %3, i64 %1282
  %1284 = bitcast float* %1283 to <8 x float>*
  %1285 = load <8 x float>, <8 x float>* %1284, align 1, !tbaa !12
  %1286 = add nsw i64 %1242, 88
  %1287 = getelementptr inbounds float, float* %3, i64 %1286
  %1288 = bitcast float* %1287 to <8 x float>*
  %1289 = load <8 x float>, <8 x float>* %1288, align 1, !tbaa !12
  %1290 = add nsw i64 %1242, 96
  %1291 = getelementptr inbounds float, float* %3, i64 %1290
  %1292 = bitcast float* %1291 to <8 x float>*
  %1293 = load <8 x float>, <8 x float>* %1292, align 1, !tbaa !12
  %1294 = add nsw i64 %1242, 104
  %1295 = getelementptr inbounds float, float* %3, i64 %1294
  %1296 = bitcast float* %1295 to <8 x float>*
  %1297 = load <8 x float>, <8 x float>* %1296, align 1, !tbaa !12
  %1298 = add nsw i64 %1242, 112
  %1299 = getelementptr inbounds float, float* %3, i64 %1298
  %1300 = bitcast float* %1299 to <8 x float>*
  %1301 = load <8 x float>, <8 x float>* %1300, align 1, !tbaa !12
  %1302 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1245, <8 x float> %50, <8 x float> %1185) #10
  %1303 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1249, <8 x float> %50, <8 x float> %1189) #10
  %1304 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1253, <8 x float> %50, <8 x float> %1193) #10
  %1305 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1257, <8 x float> %50, <8 x float> %1197) #10
  %1306 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1261, <8 x float> %50, <8 x float> %1201) #10
  %1307 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1265, <8 x float> %50, <8 x float> %1205) #10
  %1308 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1269, <8 x float> %50, <8 x float> %1209) #10
  %1309 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1273, <8 x float> %50, <8 x float> %1213) #10
  %1310 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1277, <8 x float> %50, <8 x float> %1217) #10
  %1311 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1281, <8 x float> %50, <8 x float> %1221) #10
  %1312 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1285, <8 x float> %50, <8 x float> %1225) #10
  %1313 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1289, <8 x float> %50, <8 x float> %1229) #10
  %1314 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1293, <8 x float> %50, <8 x float> %1233) #10
  %1315 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1297, <8 x float> %50, <8 x float> %1237) #10
  %1316 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1301, <8 x float> %50, <8 x float> %1241) #10
  store <8 x float> %1302, <8 x float>* %1184, align 1, !tbaa !12
  store <8 x float> %1303, <8 x float>* %1188, align 1, !tbaa !12
  store <8 x float> %1304, <8 x float>* %1192, align 1, !tbaa !12
  store <8 x float> %1305, <8 x float>* %1196, align 1, !tbaa !12
  store <8 x float> %1306, <8 x float>* %1200, align 1, !tbaa !12
  store <8 x float> %1307, <8 x float>* %1204, align 1, !tbaa !12
  store <8 x float> %1308, <8 x float>* %1208, align 1, !tbaa !12
  store <8 x float> %1309, <8 x float>* %1212, align 1, !tbaa !12
  store <8 x float> %1310, <8 x float>* %1216, align 1, !tbaa !12
  store <8 x float> %1311, <8 x float>* %1220, align 1, !tbaa !12
  store <8 x float> %1312, <8 x float>* %1224, align 1, !tbaa !12
  store <8 x float> %1313, <8 x float>* %1228, align 1, !tbaa !12
  store <8 x float> %1314, <8 x float>* %1232, align 1, !tbaa !12
  store <8 x float> %1315, <8 x float>* %1236, align 1, !tbaa !12
  store <8 x float> %1316, <8 x float>* %1240, align 1, !tbaa !12
  %1317 = add nuw nsw i64 %1121, 120
  %1318 = icmp ult i64 %1317, %915
  br i1 %1318, label %1120, label %1115
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 186
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui15_uk6.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
