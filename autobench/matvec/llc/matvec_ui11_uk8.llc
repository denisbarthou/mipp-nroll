; ModuleID = 'codes/matvec_ui11_uk8.cpp'
source_filename = "codes/matvec_ui11_uk8.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui11_uk8.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 88
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = sdiv i32 %4, 64
  %6 = shl nsw i32 %5, 6
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1163, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1163
  %21 = phi i64 [ %1164, %1163 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = or i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = or i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = or i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = or i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = or i64 %21, 7
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %1163

63:                                               ; preds = %20
  %64 = zext i32 %61 to i64
  %65 = trunc i64 %21 to i32
  %66 = mul nsw i32 %61, %65
  br label %73

67:                                               ; preds = %73
  br i1 %62, label %68, label %538

68:                                               ; preds = %67
  %69 = trunc i64 %26 to i32
  %70 = mul nsw i32 %61, %69
  %71 = sext i32 %70 to i64
  %72 = zext i32 %61 to i64
  br label %238

73:                                               ; preds = %63, %73
  %74 = phi i64 [ 0, %63 ], [ %230, %73 ]
  %75 = getelementptr inbounds float, float* %5, i64 %74
  %76 = getelementptr inbounds float, float* %75, i64 8
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %77, i32 0, i32 1, i32 1)
  %78 = getelementptr inbounds float, float* %3, i64 %74
  %79 = getelementptr inbounds float, float* %78, i64 8
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %75, i64 16
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %78, i64 16
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %75, i64 24
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %78, i64 24
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %75, i64 32
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %78, i64 32
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %75, i64 40
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %78, i64 40
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %75, i64 48
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %78, i64 48
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %75, i64 56
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %78, i64 56
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %75, i64 64
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %78, i64 64
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %75, i64 72
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %78, i64 72
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = getelementptr inbounds float, float* %75, i64 80
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %78, i64 80
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %75, i64 88
  %118 = bitcast float* %117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %118, i32 0, i32 1, i32 1)
  %119 = getelementptr inbounds float, float* %78, i64 88
  %120 = bitcast float* %119 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %120, i32 0, i32 1, i32 1)
  %121 = bitcast float* %75 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 1, !tbaa !12
  %123 = add nuw nsw i64 %74, 8
  %124 = getelementptr inbounds float, float* %5, i64 %123
  %125 = bitcast float* %124 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 1, !tbaa !12
  %127 = add nuw nsw i64 %74, 16
  %128 = getelementptr inbounds float, float* %5, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !tbaa !12
  %131 = add nuw nsw i64 %74, 24
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = add nuw nsw i64 %74, 32
  %136 = getelementptr inbounds float, float* %5, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 1, !tbaa !12
  %139 = add nuw nsw i64 %74, 40
  %140 = getelementptr inbounds float, float* %5, i64 %139
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 1, !tbaa !12
  %143 = add nuw nsw i64 %74, 48
  %144 = getelementptr inbounds float, float* %5, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 1, !tbaa !12
  %147 = add nuw nsw i64 %74, 56
  %148 = getelementptr inbounds float, float* %5, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 1, !tbaa !12
  %151 = add nuw nsw i64 %74, 64
  %152 = getelementptr inbounds float, float* %5, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 1, !tbaa !12
  %155 = add nuw nsw i64 %74, 72
  %156 = getelementptr inbounds float, float* %5, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 1, !tbaa !12
  %159 = add nuw nsw i64 %74, 80
  %160 = getelementptr inbounds float, float* %5, i64 %159
  %161 = bitcast float* %160 to <8 x float>*
  %162 = load <8 x float>, <8 x float>* %161, align 1, !tbaa !12
  %163 = trunc i64 %74 to i32
  %164 = add nsw i32 %66, %163
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %3, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nsw i32 %164, 8
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds float, float* %3, i64 %170
  %172 = bitcast float* %171 to <8 x float>*
  %173 = load <8 x float>, <8 x float>* %172, align 1, !tbaa !12
  %174 = add nsw i32 %164, 16
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %3, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 1, !tbaa !12
  %179 = add nsw i32 %164, 24
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds float, float* %3, i64 %180
  %182 = bitcast float* %181 to <8 x float>*
  %183 = load <8 x float>, <8 x float>* %182, align 1, !tbaa !12
  %184 = add nsw i32 %164, 32
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds float, float* %3, i64 %185
  %187 = bitcast float* %186 to <8 x float>*
  %188 = load <8 x float>, <8 x float>* %187, align 1, !tbaa !12
  %189 = add nsw i32 %164, 40
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %3, i64 %190
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 1, !tbaa !12
  %194 = add nsw i32 %164, 48
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float* %3, i64 %195
  %197 = bitcast float* %196 to <8 x float>*
  %198 = load <8 x float>, <8 x float>* %197, align 1, !tbaa !12
  %199 = add nsw i32 %164, 56
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %3, i64 %200
  %202 = bitcast float* %201 to <8 x float>*
  %203 = load <8 x float>, <8 x float>* %202, align 1, !tbaa !12
  %204 = add nsw i32 %164, 64
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %3, i64 %205
  %207 = bitcast float* %206 to <8 x float>*
  %208 = load <8 x float>, <8 x float>* %207, align 1, !tbaa !12
  %209 = add nsw i32 %164, 72
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds float, float* %3, i64 %210
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 1, !tbaa !12
  %214 = add nsw i32 %164, 80
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds float, float* %3, i64 %215
  %217 = bitcast float* %216 to <8 x float>*
  %218 = load <8 x float>, <8 x float>* %217, align 1, !tbaa !12
  %219 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %25, <8 x float> %122) #10
  %220 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %25, <8 x float> %126) #10
  %221 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %25, <8 x float> %130) #10
  %222 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %183, <8 x float> %25, <8 x float> %134) #10
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %188, <8 x float> %25, <8 x float> %138) #10
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %193, <8 x float> %25, <8 x float> %142) #10
  %225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %198, <8 x float> %25, <8 x float> %146) #10
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> %25, <8 x float> %150) #10
  %227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %208, <8 x float> %25, <8 x float> %154) #10
  %228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %213, <8 x float> %25, <8 x float> %158) #10
  %229 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %218, <8 x float> %25, <8 x float> %162) #10
  store <8 x float> %219, <8 x float>* %121, align 1, !tbaa !12
  store <8 x float> %220, <8 x float>* %125, align 1, !tbaa !12
  store <8 x float> %221, <8 x float>* %129, align 1, !tbaa !12
  store <8 x float> %222, <8 x float>* %133, align 1, !tbaa !12
  store <8 x float> %223, <8 x float>* %137, align 1, !tbaa !12
  store <8 x float> %224, <8 x float>* %141, align 1, !tbaa !12
  store <8 x float> %225, <8 x float>* %145, align 1, !tbaa !12
  store <8 x float> %226, <8 x float>* %149, align 1, !tbaa !12
  store <8 x float> %227, <8 x float>* %153, align 1, !tbaa !12
  store <8 x float> %228, <8 x float>* %157, align 1, !tbaa !12
  store <8 x float> %229, <8 x float>* %161, align 1, !tbaa !12
  %230 = add nuw nsw i64 %74, 88
  %231 = icmp ult i64 %230, %64
  br i1 %231, label %73, label %67

232:                                              ; preds = %238
  br i1 %62, label %233, label %538

233:                                              ; preds = %232
  %234 = trunc i64 %31 to i32
  %235 = mul nsw i32 %61, %234
  %236 = sext i32 %235 to i64
  %237 = zext i32 %61 to i64
  br label %391

238:                                              ; preds = %68, %238
  %239 = phi i64 [ 0, %68 ], [ %383, %238 ]
  %240 = getelementptr inbounds float, float* %5, i64 %239
  %241 = getelementptr inbounds float, float* %240, i64 8
  %242 = bitcast float* %241 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %242, i32 0, i32 1, i32 1)
  %243 = getelementptr inbounds float, float* %3, i64 %239
  %244 = getelementptr inbounds float, float* %243, i64 8
  %245 = bitcast float* %244 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %245, i32 0, i32 1, i32 1)
  %246 = getelementptr inbounds float, float* %240, i64 16
  %247 = bitcast float* %246 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %247, i32 0, i32 1, i32 1)
  %248 = getelementptr inbounds float, float* %243, i64 16
  %249 = bitcast float* %248 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %249, i32 0, i32 1, i32 1)
  %250 = getelementptr inbounds float, float* %240, i64 24
  %251 = bitcast float* %250 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %251, i32 0, i32 1, i32 1)
  %252 = getelementptr inbounds float, float* %243, i64 24
  %253 = bitcast float* %252 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %253, i32 0, i32 1, i32 1)
  %254 = getelementptr inbounds float, float* %240, i64 32
  %255 = bitcast float* %254 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %255, i32 0, i32 1, i32 1)
  %256 = getelementptr inbounds float, float* %243, i64 32
  %257 = bitcast float* %256 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %257, i32 0, i32 1, i32 1)
  %258 = getelementptr inbounds float, float* %240, i64 40
  %259 = bitcast float* %258 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %259, i32 0, i32 1, i32 1)
  %260 = getelementptr inbounds float, float* %243, i64 40
  %261 = bitcast float* %260 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %261, i32 0, i32 1, i32 1)
  %262 = getelementptr inbounds float, float* %240, i64 48
  %263 = bitcast float* %262 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %263, i32 0, i32 1, i32 1)
  %264 = getelementptr inbounds float, float* %243, i64 48
  %265 = bitcast float* %264 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %265, i32 0, i32 1, i32 1)
  %266 = getelementptr inbounds float, float* %240, i64 56
  %267 = bitcast float* %266 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %267, i32 0, i32 1, i32 1)
  %268 = getelementptr inbounds float, float* %243, i64 56
  %269 = bitcast float* %268 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %269, i32 0, i32 1, i32 1)
  %270 = getelementptr inbounds float, float* %240, i64 64
  %271 = bitcast float* %270 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %271, i32 0, i32 1, i32 1)
  %272 = getelementptr inbounds float, float* %243, i64 64
  %273 = bitcast float* %272 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %273, i32 0, i32 1, i32 1)
  %274 = getelementptr inbounds float, float* %240, i64 72
  %275 = bitcast float* %274 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %275, i32 0, i32 1, i32 1)
  %276 = getelementptr inbounds float, float* %243, i64 72
  %277 = bitcast float* %276 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %277, i32 0, i32 1, i32 1)
  %278 = getelementptr inbounds float, float* %240, i64 80
  %279 = bitcast float* %278 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %279, i32 0, i32 1, i32 1)
  %280 = getelementptr inbounds float, float* %243, i64 80
  %281 = bitcast float* %280 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %281, i32 0, i32 1, i32 1)
  %282 = getelementptr inbounds float, float* %240, i64 88
  %283 = bitcast float* %282 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %283, i32 0, i32 1, i32 1)
  %284 = getelementptr inbounds float, float* %243, i64 88
  %285 = bitcast float* %284 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %285, i32 0, i32 1, i32 1)
  %286 = bitcast float* %240 to <8 x float>*
  %287 = load <8 x float>, <8 x float>* %286, align 1, !tbaa !12
  %288 = add nuw nsw i64 %239, 8
  %289 = getelementptr inbounds float, float* %5, i64 %288
  %290 = bitcast float* %289 to <8 x float>*
  %291 = load <8 x float>, <8 x float>* %290, align 1, !tbaa !12
  %292 = add nuw nsw i64 %239, 16
  %293 = getelementptr inbounds float, float* %5, i64 %292
  %294 = bitcast float* %293 to <8 x float>*
  %295 = load <8 x float>, <8 x float>* %294, align 1, !tbaa !12
  %296 = add nuw nsw i64 %239, 24
  %297 = getelementptr inbounds float, float* %5, i64 %296
  %298 = bitcast float* %297 to <8 x float>*
  %299 = load <8 x float>, <8 x float>* %298, align 1, !tbaa !12
  %300 = add nuw nsw i64 %239, 32
  %301 = getelementptr inbounds float, float* %5, i64 %300
  %302 = bitcast float* %301 to <8 x float>*
  %303 = load <8 x float>, <8 x float>* %302, align 1, !tbaa !12
  %304 = add nuw nsw i64 %239, 40
  %305 = getelementptr inbounds float, float* %5, i64 %304
  %306 = bitcast float* %305 to <8 x float>*
  %307 = load <8 x float>, <8 x float>* %306, align 1, !tbaa !12
  %308 = add nuw nsw i64 %239, 48
  %309 = getelementptr inbounds float, float* %5, i64 %308
  %310 = bitcast float* %309 to <8 x float>*
  %311 = load <8 x float>, <8 x float>* %310, align 1, !tbaa !12
  %312 = add nuw nsw i64 %239, 56
  %313 = getelementptr inbounds float, float* %5, i64 %312
  %314 = bitcast float* %313 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 1, !tbaa !12
  %316 = add nuw nsw i64 %239, 64
  %317 = getelementptr inbounds float, float* %5, i64 %316
  %318 = bitcast float* %317 to <8 x float>*
  %319 = load <8 x float>, <8 x float>* %318, align 1, !tbaa !12
  %320 = add nuw nsw i64 %239, 72
  %321 = getelementptr inbounds float, float* %5, i64 %320
  %322 = bitcast float* %321 to <8 x float>*
  %323 = load <8 x float>, <8 x float>* %322, align 1, !tbaa !12
  %324 = add nuw nsw i64 %239, 80
  %325 = getelementptr inbounds float, float* %5, i64 %324
  %326 = bitcast float* %325 to <8 x float>*
  %327 = load <8 x float>, <8 x float>* %326, align 1, !tbaa !12
  %328 = add nsw i64 %239, %71
  %329 = getelementptr inbounds float, float* %3, i64 %328
  %330 = bitcast float* %329 to <8 x float>*
  %331 = load <8 x float>, <8 x float>* %330, align 1, !tbaa !12
  %332 = add nsw i64 %328, 8
  %333 = getelementptr inbounds float, float* %3, i64 %332
  %334 = bitcast float* %333 to <8 x float>*
  %335 = load <8 x float>, <8 x float>* %334, align 1, !tbaa !12
  %336 = add nsw i64 %328, 16
  %337 = getelementptr inbounds float, float* %3, i64 %336
  %338 = bitcast float* %337 to <8 x float>*
  %339 = load <8 x float>, <8 x float>* %338, align 1, !tbaa !12
  %340 = add nsw i64 %328, 24
  %341 = getelementptr inbounds float, float* %3, i64 %340
  %342 = bitcast float* %341 to <8 x float>*
  %343 = load <8 x float>, <8 x float>* %342, align 1, !tbaa !12
  %344 = add nsw i64 %328, 32
  %345 = getelementptr inbounds float, float* %3, i64 %344
  %346 = bitcast float* %345 to <8 x float>*
  %347 = load <8 x float>, <8 x float>* %346, align 1, !tbaa !12
  %348 = add nsw i64 %328, 40
  %349 = getelementptr inbounds float, float* %3, i64 %348
  %350 = bitcast float* %349 to <8 x float>*
  %351 = load <8 x float>, <8 x float>* %350, align 1, !tbaa !12
  %352 = add nsw i64 %328, 48
  %353 = getelementptr inbounds float, float* %3, i64 %352
  %354 = bitcast float* %353 to <8 x float>*
  %355 = load <8 x float>, <8 x float>* %354, align 1, !tbaa !12
  %356 = add nsw i64 %328, 56
  %357 = getelementptr inbounds float, float* %3, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  %359 = load <8 x float>, <8 x float>* %358, align 1, !tbaa !12
  %360 = add nsw i64 %328, 64
  %361 = getelementptr inbounds float, float* %3, i64 %360
  %362 = bitcast float* %361 to <8 x float>*
  %363 = load <8 x float>, <8 x float>* %362, align 1, !tbaa !12
  %364 = add nsw i64 %328, 72
  %365 = getelementptr inbounds float, float* %3, i64 %364
  %366 = bitcast float* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 1, !tbaa !12
  %368 = add nsw i64 %328, 80
  %369 = getelementptr inbounds float, float* %3, i64 %368
  %370 = bitcast float* %369 to <8 x float>*
  %371 = load <8 x float>, <8 x float>* %370, align 1, !tbaa !12
  %372 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %331, <8 x float> %30, <8 x float> %287) #10
  %373 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %335, <8 x float> %30, <8 x float> %291) #10
  %374 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %339, <8 x float> %30, <8 x float> %295) #10
  %375 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %343, <8 x float> %30, <8 x float> %299) #10
  %376 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %347, <8 x float> %30, <8 x float> %303) #10
  %377 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %351, <8 x float> %30, <8 x float> %307) #10
  %378 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %355, <8 x float> %30, <8 x float> %311) #10
  %379 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %359, <8 x float> %30, <8 x float> %315) #10
  %380 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %363, <8 x float> %30, <8 x float> %319) #10
  %381 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %367, <8 x float> %30, <8 x float> %323) #10
  %382 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %371, <8 x float> %30, <8 x float> %327) #10
  store <8 x float> %372, <8 x float>* %286, align 1, !tbaa !12
  store <8 x float> %373, <8 x float>* %290, align 1, !tbaa !12
  store <8 x float> %374, <8 x float>* %294, align 1, !tbaa !12
  store <8 x float> %375, <8 x float>* %298, align 1, !tbaa !12
  store <8 x float> %376, <8 x float>* %302, align 1, !tbaa !12
  store <8 x float> %377, <8 x float>* %306, align 1, !tbaa !12
  store <8 x float> %378, <8 x float>* %310, align 1, !tbaa !12
  store <8 x float> %379, <8 x float>* %314, align 1, !tbaa !12
  store <8 x float> %380, <8 x float>* %318, align 1, !tbaa !12
  store <8 x float> %381, <8 x float>* %322, align 1, !tbaa !12
  store <8 x float> %382, <8 x float>* %326, align 1, !tbaa !12
  %383 = add nuw nsw i64 %239, 88
  %384 = icmp ult i64 %383, %72
  br i1 %384, label %238, label %232

385:                                              ; preds = %391
  br i1 %62, label %386, label %538

386:                                              ; preds = %385
  %387 = trunc i64 %36 to i32
  %388 = mul nsw i32 %61, %387
  %389 = sext i32 %388 to i64
  %390 = zext i32 %61 to i64
  br label %545

391:                                              ; preds = %233, %391
  %392 = phi i64 [ 0, %233 ], [ %536, %391 ]
  %393 = getelementptr inbounds float, float* %5, i64 %392
  %394 = getelementptr inbounds float, float* %393, i64 8
  %395 = bitcast float* %394 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %395, i32 0, i32 1, i32 1)
  %396 = getelementptr inbounds float, float* %3, i64 %392
  %397 = getelementptr inbounds float, float* %396, i64 8
  %398 = bitcast float* %397 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %398, i32 0, i32 1, i32 1)
  %399 = getelementptr inbounds float, float* %393, i64 16
  %400 = bitcast float* %399 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %400, i32 0, i32 1, i32 1)
  %401 = getelementptr inbounds float, float* %396, i64 16
  %402 = bitcast float* %401 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %402, i32 0, i32 1, i32 1)
  %403 = getelementptr inbounds float, float* %393, i64 24
  %404 = bitcast float* %403 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %404, i32 0, i32 1, i32 1)
  %405 = getelementptr inbounds float, float* %396, i64 24
  %406 = bitcast float* %405 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %406, i32 0, i32 1, i32 1)
  %407 = getelementptr inbounds float, float* %393, i64 32
  %408 = bitcast float* %407 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %408, i32 0, i32 1, i32 1)
  %409 = getelementptr inbounds float, float* %396, i64 32
  %410 = bitcast float* %409 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %410, i32 0, i32 1, i32 1)
  %411 = getelementptr inbounds float, float* %393, i64 40
  %412 = bitcast float* %411 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %412, i32 0, i32 1, i32 1)
  %413 = getelementptr inbounds float, float* %396, i64 40
  %414 = bitcast float* %413 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %414, i32 0, i32 1, i32 1)
  %415 = getelementptr inbounds float, float* %393, i64 48
  %416 = bitcast float* %415 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %416, i32 0, i32 1, i32 1)
  %417 = getelementptr inbounds float, float* %396, i64 48
  %418 = bitcast float* %417 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %418, i32 0, i32 1, i32 1)
  %419 = getelementptr inbounds float, float* %393, i64 56
  %420 = bitcast float* %419 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %420, i32 0, i32 1, i32 1)
  %421 = getelementptr inbounds float, float* %396, i64 56
  %422 = bitcast float* %421 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %422, i32 0, i32 1, i32 1)
  %423 = getelementptr inbounds float, float* %393, i64 64
  %424 = bitcast float* %423 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %424, i32 0, i32 1, i32 1)
  %425 = getelementptr inbounds float, float* %396, i64 64
  %426 = bitcast float* %425 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %426, i32 0, i32 1, i32 1)
  %427 = getelementptr inbounds float, float* %393, i64 72
  %428 = bitcast float* %427 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %428, i32 0, i32 1, i32 1)
  %429 = getelementptr inbounds float, float* %396, i64 72
  %430 = bitcast float* %429 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %430, i32 0, i32 1, i32 1)
  %431 = getelementptr inbounds float, float* %393, i64 80
  %432 = bitcast float* %431 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %432, i32 0, i32 1, i32 1)
  %433 = getelementptr inbounds float, float* %396, i64 80
  %434 = bitcast float* %433 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %434, i32 0, i32 1, i32 1)
  %435 = getelementptr inbounds float, float* %393, i64 88
  %436 = bitcast float* %435 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %436, i32 0, i32 1, i32 1)
  %437 = getelementptr inbounds float, float* %396, i64 88
  %438 = bitcast float* %437 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %438, i32 0, i32 1, i32 1)
  %439 = bitcast float* %393 to <8 x float>*
  %440 = load <8 x float>, <8 x float>* %439, align 1, !tbaa !12
  %441 = add nuw nsw i64 %392, 8
  %442 = getelementptr inbounds float, float* %5, i64 %441
  %443 = bitcast float* %442 to <8 x float>*
  %444 = load <8 x float>, <8 x float>* %443, align 1, !tbaa !12
  %445 = add nuw nsw i64 %392, 16
  %446 = getelementptr inbounds float, float* %5, i64 %445
  %447 = bitcast float* %446 to <8 x float>*
  %448 = load <8 x float>, <8 x float>* %447, align 1, !tbaa !12
  %449 = add nuw nsw i64 %392, 24
  %450 = getelementptr inbounds float, float* %5, i64 %449
  %451 = bitcast float* %450 to <8 x float>*
  %452 = load <8 x float>, <8 x float>* %451, align 1, !tbaa !12
  %453 = add nuw nsw i64 %392, 32
  %454 = getelementptr inbounds float, float* %5, i64 %453
  %455 = bitcast float* %454 to <8 x float>*
  %456 = load <8 x float>, <8 x float>* %455, align 1, !tbaa !12
  %457 = add nuw nsw i64 %392, 40
  %458 = getelementptr inbounds float, float* %5, i64 %457
  %459 = bitcast float* %458 to <8 x float>*
  %460 = load <8 x float>, <8 x float>* %459, align 1, !tbaa !12
  %461 = add nuw nsw i64 %392, 48
  %462 = getelementptr inbounds float, float* %5, i64 %461
  %463 = bitcast float* %462 to <8 x float>*
  %464 = load <8 x float>, <8 x float>* %463, align 1, !tbaa !12
  %465 = add nuw nsw i64 %392, 56
  %466 = getelementptr inbounds float, float* %5, i64 %465
  %467 = bitcast float* %466 to <8 x float>*
  %468 = load <8 x float>, <8 x float>* %467, align 1, !tbaa !12
  %469 = add nuw nsw i64 %392, 64
  %470 = getelementptr inbounds float, float* %5, i64 %469
  %471 = bitcast float* %470 to <8 x float>*
  %472 = load <8 x float>, <8 x float>* %471, align 1, !tbaa !12
  %473 = add nuw nsw i64 %392, 72
  %474 = getelementptr inbounds float, float* %5, i64 %473
  %475 = bitcast float* %474 to <8 x float>*
  %476 = load <8 x float>, <8 x float>* %475, align 1, !tbaa !12
  %477 = add nuw nsw i64 %392, 80
  %478 = getelementptr inbounds float, float* %5, i64 %477
  %479 = bitcast float* %478 to <8 x float>*
  %480 = load <8 x float>, <8 x float>* %479, align 1, !tbaa !12
  %481 = add nsw i64 %392, %236
  %482 = getelementptr inbounds float, float* %3, i64 %481
  %483 = bitcast float* %482 to <8 x float>*
  %484 = load <8 x float>, <8 x float>* %483, align 1, !tbaa !12
  %485 = add nsw i64 %481, 8
  %486 = getelementptr inbounds float, float* %3, i64 %485
  %487 = bitcast float* %486 to <8 x float>*
  %488 = load <8 x float>, <8 x float>* %487, align 1, !tbaa !12
  %489 = add nsw i64 %481, 16
  %490 = getelementptr inbounds float, float* %3, i64 %489
  %491 = bitcast float* %490 to <8 x float>*
  %492 = load <8 x float>, <8 x float>* %491, align 1, !tbaa !12
  %493 = add nsw i64 %481, 24
  %494 = getelementptr inbounds float, float* %3, i64 %493
  %495 = bitcast float* %494 to <8 x float>*
  %496 = load <8 x float>, <8 x float>* %495, align 1, !tbaa !12
  %497 = add nsw i64 %481, 32
  %498 = getelementptr inbounds float, float* %3, i64 %497
  %499 = bitcast float* %498 to <8 x float>*
  %500 = load <8 x float>, <8 x float>* %499, align 1, !tbaa !12
  %501 = add nsw i64 %481, 40
  %502 = getelementptr inbounds float, float* %3, i64 %501
  %503 = bitcast float* %502 to <8 x float>*
  %504 = load <8 x float>, <8 x float>* %503, align 1, !tbaa !12
  %505 = add nsw i64 %481, 48
  %506 = getelementptr inbounds float, float* %3, i64 %505
  %507 = bitcast float* %506 to <8 x float>*
  %508 = load <8 x float>, <8 x float>* %507, align 1, !tbaa !12
  %509 = add nsw i64 %481, 56
  %510 = getelementptr inbounds float, float* %3, i64 %509
  %511 = bitcast float* %510 to <8 x float>*
  %512 = load <8 x float>, <8 x float>* %511, align 1, !tbaa !12
  %513 = add nsw i64 %481, 64
  %514 = getelementptr inbounds float, float* %3, i64 %513
  %515 = bitcast float* %514 to <8 x float>*
  %516 = load <8 x float>, <8 x float>* %515, align 1, !tbaa !12
  %517 = add nsw i64 %481, 72
  %518 = getelementptr inbounds float, float* %3, i64 %517
  %519 = bitcast float* %518 to <8 x float>*
  %520 = load <8 x float>, <8 x float>* %519, align 1, !tbaa !12
  %521 = add nsw i64 %481, 80
  %522 = getelementptr inbounds float, float* %3, i64 %521
  %523 = bitcast float* %522 to <8 x float>*
  %524 = load <8 x float>, <8 x float>* %523, align 1, !tbaa !12
  %525 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %484, <8 x float> %35, <8 x float> %440) #10
  %526 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %488, <8 x float> %35, <8 x float> %444) #10
  %527 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %492, <8 x float> %35, <8 x float> %448) #10
  %528 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %496, <8 x float> %35, <8 x float> %452) #10
  %529 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %500, <8 x float> %35, <8 x float> %456) #10
  %530 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %504, <8 x float> %35, <8 x float> %460) #10
  %531 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %508, <8 x float> %35, <8 x float> %464) #10
  %532 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %512, <8 x float> %35, <8 x float> %468) #10
  %533 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %516, <8 x float> %35, <8 x float> %472) #10
  %534 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %520, <8 x float> %35, <8 x float> %476) #10
  %535 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %524, <8 x float> %35, <8 x float> %480) #10
  store <8 x float> %525, <8 x float>* %439, align 1, !tbaa !12
  store <8 x float> %526, <8 x float>* %443, align 1, !tbaa !12
  store <8 x float> %527, <8 x float>* %447, align 1, !tbaa !12
  store <8 x float> %528, <8 x float>* %451, align 1, !tbaa !12
  store <8 x float> %529, <8 x float>* %455, align 1, !tbaa !12
  store <8 x float> %530, <8 x float>* %459, align 1, !tbaa !12
  store <8 x float> %531, <8 x float>* %463, align 1, !tbaa !12
  store <8 x float> %532, <8 x float>* %467, align 1, !tbaa !12
  store <8 x float> %533, <8 x float>* %471, align 1, !tbaa !12
  store <8 x float> %534, <8 x float>* %475, align 1, !tbaa !12
  store <8 x float> %535, <8 x float>* %479, align 1, !tbaa !12
  %536 = add nuw nsw i64 %392, 88
  %537 = icmp ult i64 %536, %237
  br i1 %537, label %391, label %385

538:                                              ; preds = %545, %67, %232, %385
  %539 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %540 = icmp sgt i32 %539, 0
  br i1 %540, label %541, label %1163

541:                                              ; preds = %538
  %542 = zext i32 %539 to i64
  %543 = trunc i64 %41 to i32
  %544 = mul nsw i32 %539, %543
  br label %698

545:                                              ; preds = %386, %545
  %546 = phi i64 [ 0, %386 ], [ %690, %545 ]
  %547 = getelementptr inbounds float, float* %5, i64 %546
  %548 = getelementptr inbounds float, float* %547, i64 8
  %549 = bitcast float* %548 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %549, i32 0, i32 1, i32 1)
  %550 = getelementptr inbounds float, float* %3, i64 %546
  %551 = getelementptr inbounds float, float* %550, i64 8
  %552 = bitcast float* %551 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %552, i32 0, i32 1, i32 1)
  %553 = getelementptr inbounds float, float* %547, i64 16
  %554 = bitcast float* %553 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %554, i32 0, i32 1, i32 1)
  %555 = getelementptr inbounds float, float* %550, i64 16
  %556 = bitcast float* %555 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %556, i32 0, i32 1, i32 1)
  %557 = getelementptr inbounds float, float* %547, i64 24
  %558 = bitcast float* %557 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %558, i32 0, i32 1, i32 1)
  %559 = getelementptr inbounds float, float* %550, i64 24
  %560 = bitcast float* %559 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %560, i32 0, i32 1, i32 1)
  %561 = getelementptr inbounds float, float* %547, i64 32
  %562 = bitcast float* %561 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %562, i32 0, i32 1, i32 1)
  %563 = getelementptr inbounds float, float* %550, i64 32
  %564 = bitcast float* %563 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %564, i32 0, i32 1, i32 1)
  %565 = getelementptr inbounds float, float* %547, i64 40
  %566 = bitcast float* %565 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %566, i32 0, i32 1, i32 1)
  %567 = getelementptr inbounds float, float* %550, i64 40
  %568 = bitcast float* %567 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %568, i32 0, i32 1, i32 1)
  %569 = getelementptr inbounds float, float* %547, i64 48
  %570 = bitcast float* %569 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %570, i32 0, i32 1, i32 1)
  %571 = getelementptr inbounds float, float* %550, i64 48
  %572 = bitcast float* %571 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %572, i32 0, i32 1, i32 1)
  %573 = getelementptr inbounds float, float* %547, i64 56
  %574 = bitcast float* %573 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %574, i32 0, i32 1, i32 1)
  %575 = getelementptr inbounds float, float* %550, i64 56
  %576 = bitcast float* %575 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %576, i32 0, i32 1, i32 1)
  %577 = getelementptr inbounds float, float* %547, i64 64
  %578 = bitcast float* %577 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %578, i32 0, i32 1, i32 1)
  %579 = getelementptr inbounds float, float* %550, i64 64
  %580 = bitcast float* %579 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %580, i32 0, i32 1, i32 1)
  %581 = getelementptr inbounds float, float* %547, i64 72
  %582 = bitcast float* %581 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %582, i32 0, i32 1, i32 1)
  %583 = getelementptr inbounds float, float* %550, i64 72
  %584 = bitcast float* %583 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %584, i32 0, i32 1, i32 1)
  %585 = getelementptr inbounds float, float* %547, i64 80
  %586 = bitcast float* %585 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %586, i32 0, i32 1, i32 1)
  %587 = getelementptr inbounds float, float* %550, i64 80
  %588 = bitcast float* %587 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %588, i32 0, i32 1, i32 1)
  %589 = getelementptr inbounds float, float* %547, i64 88
  %590 = bitcast float* %589 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %590, i32 0, i32 1, i32 1)
  %591 = getelementptr inbounds float, float* %550, i64 88
  %592 = bitcast float* %591 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %592, i32 0, i32 1, i32 1)
  %593 = bitcast float* %547 to <8 x float>*
  %594 = load <8 x float>, <8 x float>* %593, align 1, !tbaa !12
  %595 = add nuw nsw i64 %546, 8
  %596 = getelementptr inbounds float, float* %5, i64 %595
  %597 = bitcast float* %596 to <8 x float>*
  %598 = load <8 x float>, <8 x float>* %597, align 1, !tbaa !12
  %599 = add nuw nsw i64 %546, 16
  %600 = getelementptr inbounds float, float* %5, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 1, !tbaa !12
  %603 = add nuw nsw i64 %546, 24
  %604 = getelementptr inbounds float, float* %5, i64 %603
  %605 = bitcast float* %604 to <8 x float>*
  %606 = load <8 x float>, <8 x float>* %605, align 1, !tbaa !12
  %607 = add nuw nsw i64 %546, 32
  %608 = getelementptr inbounds float, float* %5, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  %610 = load <8 x float>, <8 x float>* %609, align 1, !tbaa !12
  %611 = add nuw nsw i64 %546, 40
  %612 = getelementptr inbounds float, float* %5, i64 %611
  %613 = bitcast float* %612 to <8 x float>*
  %614 = load <8 x float>, <8 x float>* %613, align 1, !tbaa !12
  %615 = add nuw nsw i64 %546, 48
  %616 = getelementptr inbounds float, float* %5, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 1, !tbaa !12
  %619 = add nuw nsw i64 %546, 56
  %620 = getelementptr inbounds float, float* %5, i64 %619
  %621 = bitcast float* %620 to <8 x float>*
  %622 = load <8 x float>, <8 x float>* %621, align 1, !tbaa !12
  %623 = add nuw nsw i64 %546, 64
  %624 = getelementptr inbounds float, float* %5, i64 %623
  %625 = bitcast float* %624 to <8 x float>*
  %626 = load <8 x float>, <8 x float>* %625, align 1, !tbaa !12
  %627 = add nuw nsw i64 %546, 72
  %628 = getelementptr inbounds float, float* %5, i64 %627
  %629 = bitcast float* %628 to <8 x float>*
  %630 = load <8 x float>, <8 x float>* %629, align 1, !tbaa !12
  %631 = add nuw nsw i64 %546, 80
  %632 = getelementptr inbounds float, float* %5, i64 %631
  %633 = bitcast float* %632 to <8 x float>*
  %634 = load <8 x float>, <8 x float>* %633, align 1, !tbaa !12
  %635 = add nsw i64 %546, %389
  %636 = getelementptr inbounds float, float* %3, i64 %635
  %637 = bitcast float* %636 to <8 x float>*
  %638 = load <8 x float>, <8 x float>* %637, align 1, !tbaa !12
  %639 = add nsw i64 %635, 8
  %640 = getelementptr inbounds float, float* %3, i64 %639
  %641 = bitcast float* %640 to <8 x float>*
  %642 = load <8 x float>, <8 x float>* %641, align 1, !tbaa !12
  %643 = add nsw i64 %635, 16
  %644 = getelementptr inbounds float, float* %3, i64 %643
  %645 = bitcast float* %644 to <8 x float>*
  %646 = load <8 x float>, <8 x float>* %645, align 1, !tbaa !12
  %647 = add nsw i64 %635, 24
  %648 = getelementptr inbounds float, float* %3, i64 %647
  %649 = bitcast float* %648 to <8 x float>*
  %650 = load <8 x float>, <8 x float>* %649, align 1, !tbaa !12
  %651 = add nsw i64 %635, 32
  %652 = getelementptr inbounds float, float* %3, i64 %651
  %653 = bitcast float* %652 to <8 x float>*
  %654 = load <8 x float>, <8 x float>* %653, align 1, !tbaa !12
  %655 = add nsw i64 %635, 40
  %656 = getelementptr inbounds float, float* %3, i64 %655
  %657 = bitcast float* %656 to <8 x float>*
  %658 = load <8 x float>, <8 x float>* %657, align 1, !tbaa !12
  %659 = add nsw i64 %635, 48
  %660 = getelementptr inbounds float, float* %3, i64 %659
  %661 = bitcast float* %660 to <8 x float>*
  %662 = load <8 x float>, <8 x float>* %661, align 1, !tbaa !12
  %663 = add nsw i64 %635, 56
  %664 = getelementptr inbounds float, float* %3, i64 %663
  %665 = bitcast float* %664 to <8 x float>*
  %666 = load <8 x float>, <8 x float>* %665, align 1, !tbaa !12
  %667 = add nsw i64 %635, 64
  %668 = getelementptr inbounds float, float* %3, i64 %667
  %669 = bitcast float* %668 to <8 x float>*
  %670 = load <8 x float>, <8 x float>* %669, align 1, !tbaa !12
  %671 = add nsw i64 %635, 72
  %672 = getelementptr inbounds float, float* %3, i64 %671
  %673 = bitcast float* %672 to <8 x float>*
  %674 = load <8 x float>, <8 x float>* %673, align 1, !tbaa !12
  %675 = add nsw i64 %635, 80
  %676 = getelementptr inbounds float, float* %3, i64 %675
  %677 = bitcast float* %676 to <8 x float>*
  %678 = load <8 x float>, <8 x float>* %677, align 1, !tbaa !12
  %679 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %638, <8 x float> %40, <8 x float> %594) #10
  %680 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %642, <8 x float> %40, <8 x float> %598) #10
  %681 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %646, <8 x float> %40, <8 x float> %602) #10
  %682 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %650, <8 x float> %40, <8 x float> %606) #10
  %683 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %654, <8 x float> %40, <8 x float> %610) #10
  %684 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %658, <8 x float> %40, <8 x float> %614) #10
  %685 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %662, <8 x float> %40, <8 x float> %618) #10
  %686 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %666, <8 x float> %40, <8 x float> %622) #10
  %687 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %670, <8 x float> %40, <8 x float> %626) #10
  %688 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %674, <8 x float> %40, <8 x float> %630) #10
  %689 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %678, <8 x float> %40, <8 x float> %634) #10
  store <8 x float> %679, <8 x float>* %593, align 1, !tbaa !12
  store <8 x float> %680, <8 x float>* %597, align 1, !tbaa !12
  store <8 x float> %681, <8 x float>* %601, align 1, !tbaa !12
  store <8 x float> %682, <8 x float>* %605, align 1, !tbaa !12
  store <8 x float> %683, <8 x float>* %609, align 1, !tbaa !12
  store <8 x float> %684, <8 x float>* %613, align 1, !tbaa !12
  store <8 x float> %685, <8 x float>* %617, align 1, !tbaa !12
  store <8 x float> %686, <8 x float>* %621, align 1, !tbaa !12
  store <8 x float> %687, <8 x float>* %625, align 1, !tbaa !12
  store <8 x float> %688, <8 x float>* %629, align 1, !tbaa !12
  store <8 x float> %689, <8 x float>* %633, align 1, !tbaa !12
  %690 = add nuw nsw i64 %546, 88
  %691 = icmp ult i64 %690, %390
  br i1 %691, label %545, label %538

692:                                              ; preds = %698
  br i1 %540, label %693, label %1163

693:                                              ; preds = %692
  %694 = trunc i64 %46 to i32
  %695 = mul nsw i32 %539, %694
  %696 = sext i32 %695 to i64
  %697 = zext i32 %539 to i64
  br label %863

698:                                              ; preds = %541, %698
  %699 = phi i64 [ 0, %541 ], [ %855, %698 ]
  %700 = getelementptr inbounds float, float* %5, i64 %699
  %701 = getelementptr inbounds float, float* %700, i64 8
  %702 = bitcast float* %701 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %702, i32 0, i32 1, i32 1)
  %703 = getelementptr inbounds float, float* %3, i64 %699
  %704 = getelementptr inbounds float, float* %703, i64 8
  %705 = bitcast float* %704 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %705, i32 0, i32 1, i32 1)
  %706 = getelementptr inbounds float, float* %700, i64 16
  %707 = bitcast float* %706 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %707, i32 0, i32 1, i32 1)
  %708 = getelementptr inbounds float, float* %703, i64 16
  %709 = bitcast float* %708 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %709, i32 0, i32 1, i32 1)
  %710 = getelementptr inbounds float, float* %700, i64 24
  %711 = bitcast float* %710 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %711, i32 0, i32 1, i32 1)
  %712 = getelementptr inbounds float, float* %703, i64 24
  %713 = bitcast float* %712 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %713, i32 0, i32 1, i32 1)
  %714 = getelementptr inbounds float, float* %700, i64 32
  %715 = bitcast float* %714 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %715, i32 0, i32 1, i32 1)
  %716 = getelementptr inbounds float, float* %703, i64 32
  %717 = bitcast float* %716 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %717, i32 0, i32 1, i32 1)
  %718 = getelementptr inbounds float, float* %700, i64 40
  %719 = bitcast float* %718 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %719, i32 0, i32 1, i32 1)
  %720 = getelementptr inbounds float, float* %703, i64 40
  %721 = bitcast float* %720 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %721, i32 0, i32 1, i32 1)
  %722 = getelementptr inbounds float, float* %700, i64 48
  %723 = bitcast float* %722 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %723, i32 0, i32 1, i32 1)
  %724 = getelementptr inbounds float, float* %703, i64 48
  %725 = bitcast float* %724 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %725, i32 0, i32 1, i32 1)
  %726 = getelementptr inbounds float, float* %700, i64 56
  %727 = bitcast float* %726 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %727, i32 0, i32 1, i32 1)
  %728 = getelementptr inbounds float, float* %703, i64 56
  %729 = bitcast float* %728 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %729, i32 0, i32 1, i32 1)
  %730 = getelementptr inbounds float, float* %700, i64 64
  %731 = bitcast float* %730 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %731, i32 0, i32 1, i32 1)
  %732 = getelementptr inbounds float, float* %703, i64 64
  %733 = bitcast float* %732 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %733, i32 0, i32 1, i32 1)
  %734 = getelementptr inbounds float, float* %700, i64 72
  %735 = bitcast float* %734 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %735, i32 0, i32 1, i32 1)
  %736 = getelementptr inbounds float, float* %703, i64 72
  %737 = bitcast float* %736 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %737, i32 0, i32 1, i32 1)
  %738 = getelementptr inbounds float, float* %700, i64 80
  %739 = bitcast float* %738 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %739, i32 0, i32 1, i32 1)
  %740 = getelementptr inbounds float, float* %703, i64 80
  %741 = bitcast float* %740 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %741, i32 0, i32 1, i32 1)
  %742 = getelementptr inbounds float, float* %700, i64 88
  %743 = bitcast float* %742 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %743, i32 0, i32 1, i32 1)
  %744 = getelementptr inbounds float, float* %703, i64 88
  %745 = bitcast float* %744 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %745, i32 0, i32 1, i32 1)
  %746 = bitcast float* %700 to <8 x float>*
  %747 = load <8 x float>, <8 x float>* %746, align 1, !tbaa !12
  %748 = add nuw nsw i64 %699, 8
  %749 = getelementptr inbounds float, float* %5, i64 %748
  %750 = bitcast float* %749 to <8 x float>*
  %751 = load <8 x float>, <8 x float>* %750, align 1, !tbaa !12
  %752 = add nuw nsw i64 %699, 16
  %753 = getelementptr inbounds float, float* %5, i64 %752
  %754 = bitcast float* %753 to <8 x float>*
  %755 = load <8 x float>, <8 x float>* %754, align 1, !tbaa !12
  %756 = add nuw nsw i64 %699, 24
  %757 = getelementptr inbounds float, float* %5, i64 %756
  %758 = bitcast float* %757 to <8 x float>*
  %759 = load <8 x float>, <8 x float>* %758, align 1, !tbaa !12
  %760 = add nuw nsw i64 %699, 32
  %761 = getelementptr inbounds float, float* %5, i64 %760
  %762 = bitcast float* %761 to <8 x float>*
  %763 = load <8 x float>, <8 x float>* %762, align 1, !tbaa !12
  %764 = add nuw nsw i64 %699, 40
  %765 = getelementptr inbounds float, float* %5, i64 %764
  %766 = bitcast float* %765 to <8 x float>*
  %767 = load <8 x float>, <8 x float>* %766, align 1, !tbaa !12
  %768 = add nuw nsw i64 %699, 48
  %769 = getelementptr inbounds float, float* %5, i64 %768
  %770 = bitcast float* %769 to <8 x float>*
  %771 = load <8 x float>, <8 x float>* %770, align 1, !tbaa !12
  %772 = add nuw nsw i64 %699, 56
  %773 = getelementptr inbounds float, float* %5, i64 %772
  %774 = bitcast float* %773 to <8 x float>*
  %775 = load <8 x float>, <8 x float>* %774, align 1, !tbaa !12
  %776 = add nuw nsw i64 %699, 64
  %777 = getelementptr inbounds float, float* %5, i64 %776
  %778 = bitcast float* %777 to <8 x float>*
  %779 = load <8 x float>, <8 x float>* %778, align 1, !tbaa !12
  %780 = add nuw nsw i64 %699, 72
  %781 = getelementptr inbounds float, float* %5, i64 %780
  %782 = bitcast float* %781 to <8 x float>*
  %783 = load <8 x float>, <8 x float>* %782, align 1, !tbaa !12
  %784 = add nuw nsw i64 %699, 80
  %785 = getelementptr inbounds float, float* %5, i64 %784
  %786 = bitcast float* %785 to <8 x float>*
  %787 = load <8 x float>, <8 x float>* %786, align 1, !tbaa !12
  %788 = trunc i64 %699 to i32
  %789 = add nsw i32 %544, %788
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds float, float* %3, i64 %790
  %792 = bitcast float* %791 to <8 x float>*
  %793 = load <8 x float>, <8 x float>* %792, align 1, !tbaa !12
  %794 = add nsw i32 %789, 8
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds float, float* %3, i64 %795
  %797 = bitcast float* %796 to <8 x float>*
  %798 = load <8 x float>, <8 x float>* %797, align 1, !tbaa !12
  %799 = add nsw i32 %789, 16
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds float, float* %3, i64 %800
  %802 = bitcast float* %801 to <8 x float>*
  %803 = load <8 x float>, <8 x float>* %802, align 1, !tbaa !12
  %804 = add nsw i32 %789, 24
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds float, float* %3, i64 %805
  %807 = bitcast float* %806 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 1, !tbaa !12
  %809 = add nsw i32 %789, 32
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds float, float* %3, i64 %810
  %812 = bitcast float* %811 to <8 x float>*
  %813 = load <8 x float>, <8 x float>* %812, align 1, !tbaa !12
  %814 = add nsw i32 %789, 40
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds float, float* %3, i64 %815
  %817 = bitcast float* %816 to <8 x float>*
  %818 = load <8 x float>, <8 x float>* %817, align 1, !tbaa !12
  %819 = add nsw i32 %789, 48
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds float, float* %3, i64 %820
  %822 = bitcast float* %821 to <8 x float>*
  %823 = load <8 x float>, <8 x float>* %822, align 1, !tbaa !12
  %824 = add nsw i32 %789, 56
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds float, float* %3, i64 %825
  %827 = bitcast float* %826 to <8 x float>*
  %828 = load <8 x float>, <8 x float>* %827, align 1, !tbaa !12
  %829 = add nsw i32 %789, 64
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds float, float* %3, i64 %830
  %832 = bitcast float* %831 to <8 x float>*
  %833 = load <8 x float>, <8 x float>* %832, align 1, !tbaa !12
  %834 = add nsw i32 %789, 72
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds float, float* %3, i64 %835
  %837 = bitcast float* %836 to <8 x float>*
  %838 = load <8 x float>, <8 x float>* %837, align 1, !tbaa !12
  %839 = add nsw i32 %789, 80
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds float, float* %3, i64 %840
  %842 = bitcast float* %841 to <8 x float>*
  %843 = load <8 x float>, <8 x float>* %842, align 1, !tbaa !12
  %844 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %793, <8 x float> %45, <8 x float> %747) #10
  %845 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %798, <8 x float> %45, <8 x float> %751) #10
  %846 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %803, <8 x float> %45, <8 x float> %755) #10
  %847 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %808, <8 x float> %45, <8 x float> %759) #10
  %848 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %813, <8 x float> %45, <8 x float> %763) #10
  %849 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %818, <8 x float> %45, <8 x float> %767) #10
  %850 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %823, <8 x float> %45, <8 x float> %771) #10
  %851 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %45, <8 x float> %775) #10
  %852 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %833, <8 x float> %45, <8 x float> %779) #10
  %853 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %838, <8 x float> %45, <8 x float> %783) #10
  %854 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %843, <8 x float> %45, <8 x float> %787) #10
  store <8 x float> %844, <8 x float>* %746, align 1, !tbaa !12
  store <8 x float> %845, <8 x float>* %750, align 1, !tbaa !12
  store <8 x float> %846, <8 x float>* %754, align 1, !tbaa !12
  store <8 x float> %847, <8 x float>* %758, align 1, !tbaa !12
  store <8 x float> %848, <8 x float>* %762, align 1, !tbaa !12
  store <8 x float> %849, <8 x float>* %766, align 1, !tbaa !12
  store <8 x float> %850, <8 x float>* %770, align 1, !tbaa !12
  store <8 x float> %851, <8 x float>* %774, align 1, !tbaa !12
  store <8 x float> %852, <8 x float>* %778, align 1, !tbaa !12
  store <8 x float> %853, <8 x float>* %782, align 1, !tbaa !12
  store <8 x float> %854, <8 x float>* %786, align 1, !tbaa !12
  %855 = add nuw nsw i64 %699, 88
  %856 = icmp ult i64 %855, %542
  br i1 %856, label %698, label %692

857:                                              ; preds = %863
  br i1 %540, label %858, label %1163

858:                                              ; preds = %857
  %859 = trunc i64 %51 to i32
  %860 = mul nsw i32 %539, %859
  %861 = sext i32 %860 to i64
  %862 = zext i32 %539 to i64
  br label %1016

863:                                              ; preds = %693, %863
  %864 = phi i64 [ 0, %693 ], [ %1008, %863 ]
  %865 = getelementptr inbounds float, float* %5, i64 %864
  %866 = getelementptr inbounds float, float* %865, i64 8
  %867 = bitcast float* %866 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %867, i32 0, i32 1, i32 1)
  %868 = getelementptr inbounds float, float* %3, i64 %864
  %869 = getelementptr inbounds float, float* %868, i64 8
  %870 = bitcast float* %869 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %870, i32 0, i32 1, i32 1)
  %871 = getelementptr inbounds float, float* %865, i64 16
  %872 = bitcast float* %871 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %872, i32 0, i32 1, i32 1)
  %873 = getelementptr inbounds float, float* %868, i64 16
  %874 = bitcast float* %873 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %874, i32 0, i32 1, i32 1)
  %875 = getelementptr inbounds float, float* %865, i64 24
  %876 = bitcast float* %875 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %876, i32 0, i32 1, i32 1)
  %877 = getelementptr inbounds float, float* %868, i64 24
  %878 = bitcast float* %877 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %878, i32 0, i32 1, i32 1)
  %879 = getelementptr inbounds float, float* %865, i64 32
  %880 = bitcast float* %879 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %880, i32 0, i32 1, i32 1)
  %881 = getelementptr inbounds float, float* %868, i64 32
  %882 = bitcast float* %881 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %882, i32 0, i32 1, i32 1)
  %883 = getelementptr inbounds float, float* %865, i64 40
  %884 = bitcast float* %883 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %884, i32 0, i32 1, i32 1)
  %885 = getelementptr inbounds float, float* %868, i64 40
  %886 = bitcast float* %885 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %886, i32 0, i32 1, i32 1)
  %887 = getelementptr inbounds float, float* %865, i64 48
  %888 = bitcast float* %887 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %888, i32 0, i32 1, i32 1)
  %889 = getelementptr inbounds float, float* %868, i64 48
  %890 = bitcast float* %889 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %890, i32 0, i32 1, i32 1)
  %891 = getelementptr inbounds float, float* %865, i64 56
  %892 = bitcast float* %891 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %892, i32 0, i32 1, i32 1)
  %893 = getelementptr inbounds float, float* %868, i64 56
  %894 = bitcast float* %893 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %894, i32 0, i32 1, i32 1)
  %895 = getelementptr inbounds float, float* %865, i64 64
  %896 = bitcast float* %895 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %896, i32 0, i32 1, i32 1)
  %897 = getelementptr inbounds float, float* %868, i64 64
  %898 = bitcast float* %897 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %898, i32 0, i32 1, i32 1)
  %899 = getelementptr inbounds float, float* %865, i64 72
  %900 = bitcast float* %899 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %900, i32 0, i32 1, i32 1)
  %901 = getelementptr inbounds float, float* %868, i64 72
  %902 = bitcast float* %901 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %902, i32 0, i32 1, i32 1)
  %903 = getelementptr inbounds float, float* %865, i64 80
  %904 = bitcast float* %903 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %904, i32 0, i32 1, i32 1)
  %905 = getelementptr inbounds float, float* %868, i64 80
  %906 = bitcast float* %905 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %906, i32 0, i32 1, i32 1)
  %907 = getelementptr inbounds float, float* %865, i64 88
  %908 = bitcast float* %907 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %908, i32 0, i32 1, i32 1)
  %909 = getelementptr inbounds float, float* %868, i64 88
  %910 = bitcast float* %909 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %910, i32 0, i32 1, i32 1)
  %911 = bitcast float* %865 to <8 x float>*
  %912 = load <8 x float>, <8 x float>* %911, align 1, !tbaa !12
  %913 = add nuw nsw i64 %864, 8
  %914 = getelementptr inbounds float, float* %5, i64 %913
  %915 = bitcast float* %914 to <8 x float>*
  %916 = load <8 x float>, <8 x float>* %915, align 1, !tbaa !12
  %917 = add nuw nsw i64 %864, 16
  %918 = getelementptr inbounds float, float* %5, i64 %917
  %919 = bitcast float* %918 to <8 x float>*
  %920 = load <8 x float>, <8 x float>* %919, align 1, !tbaa !12
  %921 = add nuw nsw i64 %864, 24
  %922 = getelementptr inbounds float, float* %5, i64 %921
  %923 = bitcast float* %922 to <8 x float>*
  %924 = load <8 x float>, <8 x float>* %923, align 1, !tbaa !12
  %925 = add nuw nsw i64 %864, 32
  %926 = getelementptr inbounds float, float* %5, i64 %925
  %927 = bitcast float* %926 to <8 x float>*
  %928 = load <8 x float>, <8 x float>* %927, align 1, !tbaa !12
  %929 = add nuw nsw i64 %864, 40
  %930 = getelementptr inbounds float, float* %5, i64 %929
  %931 = bitcast float* %930 to <8 x float>*
  %932 = load <8 x float>, <8 x float>* %931, align 1, !tbaa !12
  %933 = add nuw nsw i64 %864, 48
  %934 = getelementptr inbounds float, float* %5, i64 %933
  %935 = bitcast float* %934 to <8 x float>*
  %936 = load <8 x float>, <8 x float>* %935, align 1, !tbaa !12
  %937 = add nuw nsw i64 %864, 56
  %938 = getelementptr inbounds float, float* %5, i64 %937
  %939 = bitcast float* %938 to <8 x float>*
  %940 = load <8 x float>, <8 x float>* %939, align 1, !tbaa !12
  %941 = add nuw nsw i64 %864, 64
  %942 = getelementptr inbounds float, float* %5, i64 %941
  %943 = bitcast float* %942 to <8 x float>*
  %944 = load <8 x float>, <8 x float>* %943, align 1, !tbaa !12
  %945 = add nuw nsw i64 %864, 72
  %946 = getelementptr inbounds float, float* %5, i64 %945
  %947 = bitcast float* %946 to <8 x float>*
  %948 = load <8 x float>, <8 x float>* %947, align 1, !tbaa !12
  %949 = add nuw nsw i64 %864, 80
  %950 = getelementptr inbounds float, float* %5, i64 %949
  %951 = bitcast float* %950 to <8 x float>*
  %952 = load <8 x float>, <8 x float>* %951, align 1, !tbaa !12
  %953 = add nsw i64 %864, %696
  %954 = getelementptr inbounds float, float* %3, i64 %953
  %955 = bitcast float* %954 to <8 x float>*
  %956 = load <8 x float>, <8 x float>* %955, align 1, !tbaa !12
  %957 = add nsw i64 %953, 8
  %958 = getelementptr inbounds float, float* %3, i64 %957
  %959 = bitcast float* %958 to <8 x float>*
  %960 = load <8 x float>, <8 x float>* %959, align 1, !tbaa !12
  %961 = add nsw i64 %953, 16
  %962 = getelementptr inbounds float, float* %3, i64 %961
  %963 = bitcast float* %962 to <8 x float>*
  %964 = load <8 x float>, <8 x float>* %963, align 1, !tbaa !12
  %965 = add nsw i64 %953, 24
  %966 = getelementptr inbounds float, float* %3, i64 %965
  %967 = bitcast float* %966 to <8 x float>*
  %968 = load <8 x float>, <8 x float>* %967, align 1, !tbaa !12
  %969 = add nsw i64 %953, 32
  %970 = getelementptr inbounds float, float* %3, i64 %969
  %971 = bitcast float* %970 to <8 x float>*
  %972 = load <8 x float>, <8 x float>* %971, align 1, !tbaa !12
  %973 = add nsw i64 %953, 40
  %974 = getelementptr inbounds float, float* %3, i64 %973
  %975 = bitcast float* %974 to <8 x float>*
  %976 = load <8 x float>, <8 x float>* %975, align 1, !tbaa !12
  %977 = add nsw i64 %953, 48
  %978 = getelementptr inbounds float, float* %3, i64 %977
  %979 = bitcast float* %978 to <8 x float>*
  %980 = load <8 x float>, <8 x float>* %979, align 1, !tbaa !12
  %981 = add nsw i64 %953, 56
  %982 = getelementptr inbounds float, float* %3, i64 %981
  %983 = bitcast float* %982 to <8 x float>*
  %984 = load <8 x float>, <8 x float>* %983, align 1, !tbaa !12
  %985 = add nsw i64 %953, 64
  %986 = getelementptr inbounds float, float* %3, i64 %985
  %987 = bitcast float* %986 to <8 x float>*
  %988 = load <8 x float>, <8 x float>* %987, align 1, !tbaa !12
  %989 = add nsw i64 %953, 72
  %990 = getelementptr inbounds float, float* %3, i64 %989
  %991 = bitcast float* %990 to <8 x float>*
  %992 = load <8 x float>, <8 x float>* %991, align 1, !tbaa !12
  %993 = add nsw i64 %953, 80
  %994 = getelementptr inbounds float, float* %3, i64 %993
  %995 = bitcast float* %994 to <8 x float>*
  %996 = load <8 x float>, <8 x float>* %995, align 1, !tbaa !12
  %997 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %956, <8 x float> %50, <8 x float> %912) #10
  %998 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %960, <8 x float> %50, <8 x float> %916) #10
  %999 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %964, <8 x float> %50, <8 x float> %920) #10
  %1000 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %968, <8 x float> %50, <8 x float> %924) #10
  %1001 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %972, <8 x float> %50, <8 x float> %928) #10
  %1002 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %976, <8 x float> %50, <8 x float> %932) #10
  %1003 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %980, <8 x float> %50, <8 x float> %936) #10
  %1004 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %984, <8 x float> %50, <8 x float> %940) #10
  %1005 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %988, <8 x float> %50, <8 x float> %944) #10
  %1006 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %992, <8 x float> %50, <8 x float> %948) #10
  %1007 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %996, <8 x float> %50, <8 x float> %952) #10
  store <8 x float> %997, <8 x float>* %911, align 1, !tbaa !12
  store <8 x float> %998, <8 x float>* %915, align 1, !tbaa !12
  store <8 x float> %999, <8 x float>* %919, align 1, !tbaa !12
  store <8 x float> %1000, <8 x float>* %923, align 1, !tbaa !12
  store <8 x float> %1001, <8 x float>* %927, align 1, !tbaa !12
  store <8 x float> %1002, <8 x float>* %931, align 1, !tbaa !12
  store <8 x float> %1003, <8 x float>* %935, align 1, !tbaa !12
  store <8 x float> %1004, <8 x float>* %939, align 1, !tbaa !12
  store <8 x float> %1005, <8 x float>* %943, align 1, !tbaa !12
  store <8 x float> %1006, <8 x float>* %947, align 1, !tbaa !12
  store <8 x float> %1007, <8 x float>* %951, align 1, !tbaa !12
  %1008 = add nuw nsw i64 %864, 88
  %1009 = icmp ult i64 %1008, %697
  br i1 %1009, label %863, label %857

1010:                                             ; preds = %1016
  br i1 %540, label %1011, label %1163

1011:                                             ; preds = %1010
  %1012 = trunc i64 %56 to i32
  %1013 = mul nsw i32 %539, %1012
  %1014 = sext i32 %1013 to i64
  %1015 = zext i32 %539 to i64
  br label %1168

1016:                                             ; preds = %858, %1016
  %1017 = phi i64 [ 0, %858 ], [ %1161, %1016 ]
  %1018 = getelementptr inbounds float, float* %5, i64 %1017
  %1019 = getelementptr inbounds float, float* %1018, i64 8
  %1020 = bitcast float* %1019 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1020, i32 0, i32 1, i32 1)
  %1021 = getelementptr inbounds float, float* %3, i64 %1017
  %1022 = getelementptr inbounds float, float* %1021, i64 8
  %1023 = bitcast float* %1022 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1023, i32 0, i32 1, i32 1)
  %1024 = getelementptr inbounds float, float* %1018, i64 16
  %1025 = bitcast float* %1024 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1025, i32 0, i32 1, i32 1)
  %1026 = getelementptr inbounds float, float* %1021, i64 16
  %1027 = bitcast float* %1026 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1027, i32 0, i32 1, i32 1)
  %1028 = getelementptr inbounds float, float* %1018, i64 24
  %1029 = bitcast float* %1028 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1029, i32 0, i32 1, i32 1)
  %1030 = getelementptr inbounds float, float* %1021, i64 24
  %1031 = bitcast float* %1030 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1031, i32 0, i32 1, i32 1)
  %1032 = getelementptr inbounds float, float* %1018, i64 32
  %1033 = bitcast float* %1032 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1033, i32 0, i32 1, i32 1)
  %1034 = getelementptr inbounds float, float* %1021, i64 32
  %1035 = bitcast float* %1034 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1035, i32 0, i32 1, i32 1)
  %1036 = getelementptr inbounds float, float* %1018, i64 40
  %1037 = bitcast float* %1036 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1037, i32 0, i32 1, i32 1)
  %1038 = getelementptr inbounds float, float* %1021, i64 40
  %1039 = bitcast float* %1038 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1039, i32 0, i32 1, i32 1)
  %1040 = getelementptr inbounds float, float* %1018, i64 48
  %1041 = bitcast float* %1040 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1041, i32 0, i32 1, i32 1)
  %1042 = getelementptr inbounds float, float* %1021, i64 48
  %1043 = bitcast float* %1042 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1043, i32 0, i32 1, i32 1)
  %1044 = getelementptr inbounds float, float* %1018, i64 56
  %1045 = bitcast float* %1044 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1045, i32 0, i32 1, i32 1)
  %1046 = getelementptr inbounds float, float* %1021, i64 56
  %1047 = bitcast float* %1046 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1047, i32 0, i32 1, i32 1)
  %1048 = getelementptr inbounds float, float* %1018, i64 64
  %1049 = bitcast float* %1048 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1049, i32 0, i32 1, i32 1)
  %1050 = getelementptr inbounds float, float* %1021, i64 64
  %1051 = bitcast float* %1050 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1051, i32 0, i32 1, i32 1)
  %1052 = getelementptr inbounds float, float* %1018, i64 72
  %1053 = bitcast float* %1052 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1053, i32 0, i32 1, i32 1)
  %1054 = getelementptr inbounds float, float* %1021, i64 72
  %1055 = bitcast float* %1054 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1055, i32 0, i32 1, i32 1)
  %1056 = getelementptr inbounds float, float* %1018, i64 80
  %1057 = bitcast float* %1056 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1057, i32 0, i32 1, i32 1)
  %1058 = getelementptr inbounds float, float* %1021, i64 80
  %1059 = bitcast float* %1058 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1059, i32 0, i32 1, i32 1)
  %1060 = getelementptr inbounds float, float* %1018, i64 88
  %1061 = bitcast float* %1060 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1061, i32 0, i32 1, i32 1)
  %1062 = getelementptr inbounds float, float* %1021, i64 88
  %1063 = bitcast float* %1062 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1063, i32 0, i32 1, i32 1)
  %1064 = bitcast float* %1018 to <8 x float>*
  %1065 = load <8 x float>, <8 x float>* %1064, align 1, !tbaa !12
  %1066 = add nuw nsw i64 %1017, 8
  %1067 = getelementptr inbounds float, float* %5, i64 %1066
  %1068 = bitcast float* %1067 to <8 x float>*
  %1069 = load <8 x float>, <8 x float>* %1068, align 1, !tbaa !12
  %1070 = add nuw nsw i64 %1017, 16
  %1071 = getelementptr inbounds float, float* %5, i64 %1070
  %1072 = bitcast float* %1071 to <8 x float>*
  %1073 = load <8 x float>, <8 x float>* %1072, align 1, !tbaa !12
  %1074 = add nuw nsw i64 %1017, 24
  %1075 = getelementptr inbounds float, float* %5, i64 %1074
  %1076 = bitcast float* %1075 to <8 x float>*
  %1077 = load <8 x float>, <8 x float>* %1076, align 1, !tbaa !12
  %1078 = add nuw nsw i64 %1017, 32
  %1079 = getelementptr inbounds float, float* %5, i64 %1078
  %1080 = bitcast float* %1079 to <8 x float>*
  %1081 = load <8 x float>, <8 x float>* %1080, align 1, !tbaa !12
  %1082 = add nuw nsw i64 %1017, 40
  %1083 = getelementptr inbounds float, float* %5, i64 %1082
  %1084 = bitcast float* %1083 to <8 x float>*
  %1085 = load <8 x float>, <8 x float>* %1084, align 1, !tbaa !12
  %1086 = add nuw nsw i64 %1017, 48
  %1087 = getelementptr inbounds float, float* %5, i64 %1086
  %1088 = bitcast float* %1087 to <8 x float>*
  %1089 = load <8 x float>, <8 x float>* %1088, align 1, !tbaa !12
  %1090 = add nuw nsw i64 %1017, 56
  %1091 = getelementptr inbounds float, float* %5, i64 %1090
  %1092 = bitcast float* %1091 to <8 x float>*
  %1093 = load <8 x float>, <8 x float>* %1092, align 1, !tbaa !12
  %1094 = add nuw nsw i64 %1017, 64
  %1095 = getelementptr inbounds float, float* %5, i64 %1094
  %1096 = bitcast float* %1095 to <8 x float>*
  %1097 = load <8 x float>, <8 x float>* %1096, align 1, !tbaa !12
  %1098 = add nuw nsw i64 %1017, 72
  %1099 = getelementptr inbounds float, float* %5, i64 %1098
  %1100 = bitcast float* %1099 to <8 x float>*
  %1101 = load <8 x float>, <8 x float>* %1100, align 1, !tbaa !12
  %1102 = add nuw nsw i64 %1017, 80
  %1103 = getelementptr inbounds float, float* %5, i64 %1102
  %1104 = bitcast float* %1103 to <8 x float>*
  %1105 = load <8 x float>, <8 x float>* %1104, align 1, !tbaa !12
  %1106 = add nsw i64 %1017, %861
  %1107 = getelementptr inbounds float, float* %3, i64 %1106
  %1108 = bitcast float* %1107 to <8 x float>*
  %1109 = load <8 x float>, <8 x float>* %1108, align 1, !tbaa !12
  %1110 = add nsw i64 %1106, 8
  %1111 = getelementptr inbounds float, float* %3, i64 %1110
  %1112 = bitcast float* %1111 to <8 x float>*
  %1113 = load <8 x float>, <8 x float>* %1112, align 1, !tbaa !12
  %1114 = add nsw i64 %1106, 16
  %1115 = getelementptr inbounds float, float* %3, i64 %1114
  %1116 = bitcast float* %1115 to <8 x float>*
  %1117 = load <8 x float>, <8 x float>* %1116, align 1, !tbaa !12
  %1118 = add nsw i64 %1106, 24
  %1119 = getelementptr inbounds float, float* %3, i64 %1118
  %1120 = bitcast float* %1119 to <8 x float>*
  %1121 = load <8 x float>, <8 x float>* %1120, align 1, !tbaa !12
  %1122 = add nsw i64 %1106, 32
  %1123 = getelementptr inbounds float, float* %3, i64 %1122
  %1124 = bitcast float* %1123 to <8 x float>*
  %1125 = load <8 x float>, <8 x float>* %1124, align 1, !tbaa !12
  %1126 = add nsw i64 %1106, 40
  %1127 = getelementptr inbounds float, float* %3, i64 %1126
  %1128 = bitcast float* %1127 to <8 x float>*
  %1129 = load <8 x float>, <8 x float>* %1128, align 1, !tbaa !12
  %1130 = add nsw i64 %1106, 48
  %1131 = getelementptr inbounds float, float* %3, i64 %1130
  %1132 = bitcast float* %1131 to <8 x float>*
  %1133 = load <8 x float>, <8 x float>* %1132, align 1, !tbaa !12
  %1134 = add nsw i64 %1106, 56
  %1135 = getelementptr inbounds float, float* %3, i64 %1134
  %1136 = bitcast float* %1135 to <8 x float>*
  %1137 = load <8 x float>, <8 x float>* %1136, align 1, !tbaa !12
  %1138 = add nsw i64 %1106, 64
  %1139 = getelementptr inbounds float, float* %3, i64 %1138
  %1140 = bitcast float* %1139 to <8 x float>*
  %1141 = load <8 x float>, <8 x float>* %1140, align 1, !tbaa !12
  %1142 = add nsw i64 %1106, 72
  %1143 = getelementptr inbounds float, float* %3, i64 %1142
  %1144 = bitcast float* %1143 to <8 x float>*
  %1145 = load <8 x float>, <8 x float>* %1144, align 1, !tbaa !12
  %1146 = add nsw i64 %1106, 80
  %1147 = getelementptr inbounds float, float* %3, i64 %1146
  %1148 = bitcast float* %1147 to <8 x float>*
  %1149 = load <8 x float>, <8 x float>* %1148, align 1, !tbaa !12
  %1150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1109, <8 x float> %55, <8 x float> %1065) #10
  %1151 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1113, <8 x float> %55, <8 x float> %1069) #10
  %1152 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1117, <8 x float> %55, <8 x float> %1073) #10
  %1153 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1121, <8 x float> %55, <8 x float> %1077) #10
  %1154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1125, <8 x float> %55, <8 x float> %1081) #10
  %1155 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1129, <8 x float> %55, <8 x float> %1085) #10
  %1156 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1133, <8 x float> %55, <8 x float> %1089) #10
  %1157 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1137, <8 x float> %55, <8 x float> %1093) #10
  %1158 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1141, <8 x float> %55, <8 x float> %1097) #10
  %1159 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1145, <8 x float> %55, <8 x float> %1101) #10
  %1160 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1149, <8 x float> %55, <8 x float> %1105) #10
  store <8 x float> %1150, <8 x float>* %1064, align 1, !tbaa !12
  store <8 x float> %1151, <8 x float>* %1068, align 1, !tbaa !12
  store <8 x float> %1152, <8 x float>* %1072, align 1, !tbaa !12
  store <8 x float> %1153, <8 x float>* %1076, align 1, !tbaa !12
  store <8 x float> %1154, <8 x float>* %1080, align 1, !tbaa !12
  store <8 x float> %1155, <8 x float>* %1084, align 1, !tbaa !12
  store <8 x float> %1156, <8 x float>* %1088, align 1, !tbaa !12
  store <8 x float> %1157, <8 x float>* %1092, align 1, !tbaa !12
  store <8 x float> %1158, <8 x float>* %1096, align 1, !tbaa !12
  store <8 x float> %1159, <8 x float>* %1100, align 1, !tbaa !12
  store <8 x float> %1160, <8 x float>* %1104, align 1, !tbaa !12
  %1161 = add nuw nsw i64 %1017, 88
  %1162 = icmp ult i64 %1161, %862
  br i1 %1162, label %1016, label %1010

1163:                                             ; preds = %1168, %20, %538, %692, %857, %1010
  %1164 = add nuw nsw i64 %21, 8
  %1165 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1166 = sext i32 %1165 to i64
  %1167 = icmp slt i64 %1164, %1166
  br i1 %1167, label %20, label %8

1168:                                             ; preds = %1011, %1168
  %1169 = phi i64 [ 0, %1011 ], [ %1313, %1168 ]
  %1170 = getelementptr inbounds float, float* %5, i64 %1169
  %1171 = getelementptr inbounds float, float* %1170, i64 8
  %1172 = bitcast float* %1171 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1172, i32 0, i32 1, i32 1)
  %1173 = getelementptr inbounds float, float* %3, i64 %1169
  %1174 = getelementptr inbounds float, float* %1173, i64 8
  %1175 = bitcast float* %1174 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1175, i32 0, i32 1, i32 1)
  %1176 = getelementptr inbounds float, float* %1170, i64 16
  %1177 = bitcast float* %1176 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1177, i32 0, i32 1, i32 1)
  %1178 = getelementptr inbounds float, float* %1173, i64 16
  %1179 = bitcast float* %1178 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1179, i32 0, i32 1, i32 1)
  %1180 = getelementptr inbounds float, float* %1170, i64 24
  %1181 = bitcast float* %1180 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1181, i32 0, i32 1, i32 1)
  %1182 = getelementptr inbounds float, float* %1173, i64 24
  %1183 = bitcast float* %1182 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1183, i32 0, i32 1, i32 1)
  %1184 = getelementptr inbounds float, float* %1170, i64 32
  %1185 = bitcast float* %1184 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1185, i32 0, i32 1, i32 1)
  %1186 = getelementptr inbounds float, float* %1173, i64 32
  %1187 = bitcast float* %1186 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1187, i32 0, i32 1, i32 1)
  %1188 = getelementptr inbounds float, float* %1170, i64 40
  %1189 = bitcast float* %1188 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1189, i32 0, i32 1, i32 1)
  %1190 = getelementptr inbounds float, float* %1173, i64 40
  %1191 = bitcast float* %1190 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1191, i32 0, i32 1, i32 1)
  %1192 = getelementptr inbounds float, float* %1170, i64 48
  %1193 = bitcast float* %1192 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1193, i32 0, i32 1, i32 1)
  %1194 = getelementptr inbounds float, float* %1173, i64 48
  %1195 = bitcast float* %1194 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1195, i32 0, i32 1, i32 1)
  %1196 = getelementptr inbounds float, float* %1170, i64 56
  %1197 = bitcast float* %1196 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1197, i32 0, i32 1, i32 1)
  %1198 = getelementptr inbounds float, float* %1173, i64 56
  %1199 = bitcast float* %1198 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1199, i32 0, i32 1, i32 1)
  %1200 = getelementptr inbounds float, float* %1170, i64 64
  %1201 = bitcast float* %1200 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1201, i32 0, i32 1, i32 1)
  %1202 = getelementptr inbounds float, float* %1173, i64 64
  %1203 = bitcast float* %1202 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1203, i32 0, i32 1, i32 1)
  %1204 = getelementptr inbounds float, float* %1170, i64 72
  %1205 = bitcast float* %1204 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1205, i32 0, i32 1, i32 1)
  %1206 = getelementptr inbounds float, float* %1173, i64 72
  %1207 = bitcast float* %1206 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1207, i32 0, i32 1, i32 1)
  %1208 = getelementptr inbounds float, float* %1170, i64 80
  %1209 = bitcast float* %1208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1209, i32 0, i32 1, i32 1)
  %1210 = getelementptr inbounds float, float* %1173, i64 80
  %1211 = bitcast float* %1210 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1211, i32 0, i32 1, i32 1)
  %1212 = getelementptr inbounds float, float* %1170, i64 88
  %1213 = bitcast float* %1212 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1213, i32 0, i32 1, i32 1)
  %1214 = getelementptr inbounds float, float* %1173, i64 88
  %1215 = bitcast float* %1214 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1215, i32 0, i32 1, i32 1)
  %1216 = bitcast float* %1170 to <8 x float>*
  %1217 = load <8 x float>, <8 x float>* %1216, align 1, !tbaa !12
  %1218 = add nuw nsw i64 %1169, 8
  %1219 = getelementptr inbounds float, float* %5, i64 %1218
  %1220 = bitcast float* %1219 to <8 x float>*
  %1221 = load <8 x float>, <8 x float>* %1220, align 1, !tbaa !12
  %1222 = add nuw nsw i64 %1169, 16
  %1223 = getelementptr inbounds float, float* %5, i64 %1222
  %1224 = bitcast float* %1223 to <8 x float>*
  %1225 = load <8 x float>, <8 x float>* %1224, align 1, !tbaa !12
  %1226 = add nuw nsw i64 %1169, 24
  %1227 = getelementptr inbounds float, float* %5, i64 %1226
  %1228 = bitcast float* %1227 to <8 x float>*
  %1229 = load <8 x float>, <8 x float>* %1228, align 1, !tbaa !12
  %1230 = add nuw nsw i64 %1169, 32
  %1231 = getelementptr inbounds float, float* %5, i64 %1230
  %1232 = bitcast float* %1231 to <8 x float>*
  %1233 = load <8 x float>, <8 x float>* %1232, align 1, !tbaa !12
  %1234 = add nuw nsw i64 %1169, 40
  %1235 = getelementptr inbounds float, float* %5, i64 %1234
  %1236 = bitcast float* %1235 to <8 x float>*
  %1237 = load <8 x float>, <8 x float>* %1236, align 1, !tbaa !12
  %1238 = add nuw nsw i64 %1169, 48
  %1239 = getelementptr inbounds float, float* %5, i64 %1238
  %1240 = bitcast float* %1239 to <8 x float>*
  %1241 = load <8 x float>, <8 x float>* %1240, align 1, !tbaa !12
  %1242 = add nuw nsw i64 %1169, 56
  %1243 = getelementptr inbounds float, float* %5, i64 %1242
  %1244 = bitcast float* %1243 to <8 x float>*
  %1245 = load <8 x float>, <8 x float>* %1244, align 1, !tbaa !12
  %1246 = add nuw nsw i64 %1169, 64
  %1247 = getelementptr inbounds float, float* %5, i64 %1246
  %1248 = bitcast float* %1247 to <8 x float>*
  %1249 = load <8 x float>, <8 x float>* %1248, align 1, !tbaa !12
  %1250 = add nuw nsw i64 %1169, 72
  %1251 = getelementptr inbounds float, float* %5, i64 %1250
  %1252 = bitcast float* %1251 to <8 x float>*
  %1253 = load <8 x float>, <8 x float>* %1252, align 1, !tbaa !12
  %1254 = add nuw nsw i64 %1169, 80
  %1255 = getelementptr inbounds float, float* %5, i64 %1254
  %1256 = bitcast float* %1255 to <8 x float>*
  %1257 = load <8 x float>, <8 x float>* %1256, align 1, !tbaa !12
  %1258 = add nsw i64 %1169, %1014
  %1259 = getelementptr inbounds float, float* %3, i64 %1258
  %1260 = bitcast float* %1259 to <8 x float>*
  %1261 = load <8 x float>, <8 x float>* %1260, align 1, !tbaa !12
  %1262 = add nsw i64 %1258, 8
  %1263 = getelementptr inbounds float, float* %3, i64 %1262
  %1264 = bitcast float* %1263 to <8 x float>*
  %1265 = load <8 x float>, <8 x float>* %1264, align 1, !tbaa !12
  %1266 = add nsw i64 %1258, 16
  %1267 = getelementptr inbounds float, float* %3, i64 %1266
  %1268 = bitcast float* %1267 to <8 x float>*
  %1269 = load <8 x float>, <8 x float>* %1268, align 1, !tbaa !12
  %1270 = add nsw i64 %1258, 24
  %1271 = getelementptr inbounds float, float* %3, i64 %1270
  %1272 = bitcast float* %1271 to <8 x float>*
  %1273 = load <8 x float>, <8 x float>* %1272, align 1, !tbaa !12
  %1274 = add nsw i64 %1258, 32
  %1275 = getelementptr inbounds float, float* %3, i64 %1274
  %1276 = bitcast float* %1275 to <8 x float>*
  %1277 = load <8 x float>, <8 x float>* %1276, align 1, !tbaa !12
  %1278 = add nsw i64 %1258, 40
  %1279 = getelementptr inbounds float, float* %3, i64 %1278
  %1280 = bitcast float* %1279 to <8 x float>*
  %1281 = load <8 x float>, <8 x float>* %1280, align 1, !tbaa !12
  %1282 = add nsw i64 %1258, 48
  %1283 = getelementptr inbounds float, float* %3, i64 %1282
  %1284 = bitcast float* %1283 to <8 x float>*
  %1285 = load <8 x float>, <8 x float>* %1284, align 1, !tbaa !12
  %1286 = add nsw i64 %1258, 56
  %1287 = getelementptr inbounds float, float* %3, i64 %1286
  %1288 = bitcast float* %1287 to <8 x float>*
  %1289 = load <8 x float>, <8 x float>* %1288, align 1, !tbaa !12
  %1290 = add nsw i64 %1258, 64
  %1291 = getelementptr inbounds float, float* %3, i64 %1290
  %1292 = bitcast float* %1291 to <8 x float>*
  %1293 = load <8 x float>, <8 x float>* %1292, align 1, !tbaa !12
  %1294 = add nsw i64 %1258, 72
  %1295 = getelementptr inbounds float, float* %3, i64 %1294
  %1296 = bitcast float* %1295 to <8 x float>*
  %1297 = load <8 x float>, <8 x float>* %1296, align 1, !tbaa !12
  %1298 = add nsw i64 %1258, 80
  %1299 = getelementptr inbounds float, float* %3, i64 %1298
  %1300 = bitcast float* %1299 to <8 x float>*
  %1301 = load <8 x float>, <8 x float>* %1300, align 1, !tbaa !12
  %1302 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1261, <8 x float> %60, <8 x float> %1217) #10
  %1303 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1265, <8 x float> %60, <8 x float> %1221) #10
  %1304 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1269, <8 x float> %60, <8 x float> %1225) #10
  %1305 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1273, <8 x float> %60, <8 x float> %1229) #10
  %1306 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1277, <8 x float> %60, <8 x float> %1233) #10
  %1307 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1281, <8 x float> %60, <8 x float> %1237) #10
  %1308 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1285, <8 x float> %60, <8 x float> %1241) #10
  %1309 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1289, <8 x float> %60, <8 x float> %1245) #10
  %1310 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1293, <8 x float> %60, <8 x float> %1249) #10
  %1311 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1297, <8 x float> %60, <8 x float> %1253) #10
  %1312 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1301, <8 x float> %60, <8 x float> %1257) #10
  store <8 x float> %1302, <8 x float>* %1216, align 1, !tbaa !12
  store <8 x float> %1303, <8 x float>* %1220, align 1, !tbaa !12
  store <8 x float> %1304, <8 x float>* %1224, align 1, !tbaa !12
  store <8 x float> %1305, <8 x float>* %1228, align 1, !tbaa !12
  store <8 x float> %1306, <8 x float>* %1232, align 1, !tbaa !12
  store <8 x float> %1307, <8 x float>* %1236, align 1, !tbaa !12
  store <8 x float> %1308, <8 x float>* %1240, align 1, !tbaa !12
  store <8 x float> %1309, <8 x float>* %1244, align 1, !tbaa !12
  store <8 x float> %1310, <8 x float>* %1248, align 1, !tbaa !12
  store <8 x float> %1311, <8 x float>* %1252, align 1, !tbaa !12
  store <8 x float> %1312, <8 x float>* %1256, align 1, !tbaa !12
  %1313 = add nuw nsw i64 %1169, 88
  %1314 = icmp ult i64 %1313, %1015
  br i1 %1314, label %1168, label %1163
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 184
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui11_uk8.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
