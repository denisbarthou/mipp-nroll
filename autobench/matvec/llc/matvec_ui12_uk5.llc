; ModuleID = 'codes/matvec_ui12_uk5.cpp'
source_filename = "codes/matvec_ui12_uk5.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui12_uk5.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 96
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 40
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %743, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %743
  %21 = phi i64 [ %744, %743 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = add nuw nsw i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %743

48:                                               ; preds = %20
  %49 = zext i32 %46 to i64
  %50 = trunc i64 %21 to i32
  %51 = mul nsw i32 %46, %50
  br label %58

52:                                               ; preds = %58
  br i1 %47, label %53, label %397

53:                                               ; preds = %52
  %54 = trunc i64 %26 to i32
  %55 = mul nsw i32 %46, %54
  %56 = sext i32 %55 to i64
  %57 = zext i32 %46 to i64
  br label %237

58:                                               ; preds = %48, %58
  %59 = phi i64 [ 0, %48 ], [ %229, %58 ]
  %60 = getelementptr inbounds float, float* %5, i64 %59
  %61 = getelementptr inbounds float, float* %60, i64 8
  %62 = bitcast float* %61 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %62, i32 0, i32 1, i32 1)
  %63 = getelementptr inbounds float, float* %3, i64 %59
  %64 = getelementptr inbounds float, float* %63, i64 8
  %65 = bitcast float* %64 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %65, i32 0, i32 1, i32 1)
  %66 = getelementptr inbounds float, float* %60, i64 16
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %63, i64 16
  %69 = bitcast float* %68 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %69, i32 0, i32 1, i32 1)
  %70 = getelementptr inbounds float, float* %60, i64 24
  %71 = bitcast float* %70 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %71, i32 0, i32 1, i32 1)
  %72 = getelementptr inbounds float, float* %63, i64 24
  %73 = bitcast float* %72 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %73, i32 0, i32 1, i32 1)
  %74 = getelementptr inbounds float, float* %60, i64 32
  %75 = bitcast float* %74 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %75, i32 0, i32 1, i32 1)
  %76 = getelementptr inbounds float, float* %63, i64 32
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %77, i32 0, i32 1, i32 1)
  %78 = getelementptr inbounds float, float* %60, i64 40
  %79 = bitcast float* %78 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %79, i32 0, i32 1, i32 1)
  %80 = getelementptr inbounds float, float* %63, i64 40
  %81 = bitcast float* %80 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %81, i32 0, i32 1, i32 1)
  %82 = getelementptr inbounds float, float* %60, i64 48
  %83 = bitcast float* %82 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %83, i32 0, i32 1, i32 1)
  %84 = getelementptr inbounds float, float* %63, i64 48
  %85 = bitcast float* %84 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %85, i32 0, i32 1, i32 1)
  %86 = getelementptr inbounds float, float* %60, i64 56
  %87 = bitcast float* %86 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %87, i32 0, i32 1, i32 1)
  %88 = getelementptr inbounds float, float* %63, i64 56
  %89 = bitcast float* %88 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %89, i32 0, i32 1, i32 1)
  %90 = getelementptr inbounds float, float* %60, i64 64
  %91 = bitcast float* %90 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %91, i32 0, i32 1, i32 1)
  %92 = getelementptr inbounds float, float* %63, i64 64
  %93 = bitcast float* %92 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %93, i32 0, i32 1, i32 1)
  %94 = getelementptr inbounds float, float* %60, i64 72
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %95, i32 0, i32 1, i32 1)
  %96 = getelementptr inbounds float, float* %63, i64 72
  %97 = bitcast float* %96 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %97, i32 0, i32 1, i32 1)
  %98 = getelementptr inbounds float, float* %60, i64 80
  %99 = bitcast float* %98 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %99, i32 0, i32 1, i32 1)
  %100 = getelementptr inbounds float, float* %63, i64 80
  %101 = bitcast float* %100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %101, i32 0, i32 1, i32 1)
  %102 = getelementptr inbounds float, float* %60, i64 88
  %103 = bitcast float* %102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %103, i32 0, i32 1, i32 1)
  %104 = getelementptr inbounds float, float* %63, i64 88
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %105, i32 0, i32 1, i32 1)
  %106 = getelementptr inbounds float, float* %60, i64 96
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %107, i32 0, i32 1, i32 1)
  %108 = getelementptr inbounds float, float* %63, i64 96
  %109 = bitcast float* %108 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %109, i32 0, i32 1, i32 1)
  %110 = bitcast float* %60 to <8 x float>*
  %111 = load <8 x float>, <8 x float>* %110, align 1, !tbaa !12
  %112 = or i64 %59, 8
  %113 = getelementptr inbounds float, float* %5, i64 %112
  %114 = bitcast float* %113 to <8 x float>*
  %115 = load <8 x float>, <8 x float>* %114, align 1, !tbaa !12
  %116 = or i64 %59, 16
  %117 = getelementptr inbounds float, float* %5, i64 %116
  %118 = bitcast float* %117 to <8 x float>*
  %119 = load <8 x float>, <8 x float>* %118, align 1, !tbaa !12
  %120 = or i64 %59, 24
  %121 = getelementptr inbounds float, float* %5, i64 %120
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 1, !tbaa !12
  %124 = add nuw nsw i64 %59, 32
  %125 = getelementptr inbounds float, float* %5, i64 %124
  %126 = bitcast float* %125 to <8 x float>*
  %127 = load <8 x float>, <8 x float>* %126, align 1, !tbaa !12
  %128 = add nuw nsw i64 %59, 40
  %129 = getelementptr inbounds float, float* %5, i64 %128
  %130 = bitcast float* %129 to <8 x float>*
  %131 = load <8 x float>, <8 x float>* %130, align 1, !tbaa !12
  %132 = add nuw nsw i64 %59, 48
  %133 = getelementptr inbounds float, float* %5, i64 %132
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 1, !tbaa !12
  %136 = add nuw nsw i64 %59, 56
  %137 = getelementptr inbounds float, float* %5, i64 %136
  %138 = bitcast float* %137 to <8 x float>*
  %139 = load <8 x float>, <8 x float>* %138, align 1, !tbaa !12
  %140 = add nuw nsw i64 %59, 64
  %141 = getelementptr inbounds float, float* %5, i64 %140
  %142 = bitcast float* %141 to <8 x float>*
  %143 = load <8 x float>, <8 x float>* %142, align 1, !tbaa !12
  %144 = add nuw nsw i64 %59, 72
  %145 = getelementptr inbounds float, float* %5, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 1, !tbaa !12
  %148 = add nuw nsw i64 %59, 80
  %149 = getelementptr inbounds float, float* %5, i64 %148
  %150 = bitcast float* %149 to <8 x float>*
  %151 = load <8 x float>, <8 x float>* %150, align 1, !tbaa !12
  %152 = add nuw nsw i64 %59, 88
  %153 = getelementptr inbounds float, float* %5, i64 %152
  %154 = bitcast float* %153 to <8 x float>*
  %155 = load <8 x float>, <8 x float>* %154, align 1, !tbaa !12
  %156 = trunc i64 %59 to i32
  %157 = add nsw i32 %51, %156
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds float, float* %3, i64 %158
  %160 = bitcast float* %159 to <8 x float>*
  %161 = load <8 x float>, <8 x float>* %160, align 1, !tbaa !12
  %162 = add nsw i32 %157, 8
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %3, i64 %163
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 1, !tbaa !12
  %167 = add nsw i32 %157, 16
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %3, i64 %168
  %170 = bitcast float* %169 to <8 x float>*
  %171 = load <8 x float>, <8 x float>* %170, align 1, !tbaa !12
  %172 = add nsw i32 %157, 24
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %3, i64 %173
  %175 = bitcast float* %174 to <8 x float>*
  %176 = load <8 x float>, <8 x float>* %175, align 1, !tbaa !12
  %177 = add nsw i32 %157, 32
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds float, float* %3, i64 %178
  %180 = bitcast float* %179 to <8 x float>*
  %181 = load <8 x float>, <8 x float>* %180, align 1, !tbaa !12
  %182 = add nsw i32 %157, 40
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %3, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 1, !tbaa !12
  %187 = add nsw i32 %157, 48
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds float, float* %3, i64 %188
  %190 = bitcast float* %189 to <8 x float>*
  %191 = load <8 x float>, <8 x float>* %190, align 1, !tbaa !12
  %192 = add nsw i32 %157, 56
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds float, float* %3, i64 %193
  %195 = bitcast float* %194 to <8 x float>*
  %196 = load <8 x float>, <8 x float>* %195, align 1, !tbaa !12
  %197 = add nsw i32 %157, 64
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds float, float* %3, i64 %198
  %200 = bitcast float* %199 to <8 x float>*
  %201 = load <8 x float>, <8 x float>* %200, align 1, !tbaa !12
  %202 = add nsw i32 %157, 72
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds float, float* %3, i64 %203
  %205 = bitcast float* %204 to <8 x float>*
  %206 = load <8 x float>, <8 x float>* %205, align 1, !tbaa !12
  %207 = add nsw i32 %157, 80
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds float, float* %3, i64 %208
  %210 = bitcast float* %209 to <8 x float>*
  %211 = load <8 x float>, <8 x float>* %210, align 1, !tbaa !12
  %212 = add nsw i32 %157, 88
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds float, float* %3, i64 %213
  %215 = bitcast float* %214 to <8 x float>*
  %216 = load <8 x float>, <8 x float>* %215, align 1, !tbaa !12
  %217 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %161, <8 x float> %25, <8 x float> %111) #10
  %218 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %166, <8 x float> %25, <8 x float> %115) #10
  %219 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %171, <8 x float> %25, <8 x float> %119) #10
  %220 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %25, <8 x float> %123) #10
  %221 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %181, <8 x float> %25, <8 x float> %127) #10
  %222 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %186, <8 x float> %25, <8 x float> %131) #10
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %191, <8 x float> %25, <8 x float> %135) #10
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %196, <8 x float> %25, <8 x float> %139) #10
  %225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %201, <8 x float> %25, <8 x float> %143) #10
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %206, <8 x float> %25, <8 x float> %147) #10
  %227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %25, <8 x float> %151) #10
  %228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %216, <8 x float> %25, <8 x float> %155) #10
  store <8 x float> %217, <8 x float>* %110, align 1, !tbaa !12
  store <8 x float> %218, <8 x float>* %114, align 1, !tbaa !12
  store <8 x float> %219, <8 x float>* %118, align 1, !tbaa !12
  store <8 x float> %220, <8 x float>* %122, align 1, !tbaa !12
  store <8 x float> %221, <8 x float>* %126, align 1, !tbaa !12
  store <8 x float> %222, <8 x float>* %130, align 1, !tbaa !12
  store <8 x float> %223, <8 x float>* %134, align 1, !tbaa !12
  store <8 x float> %224, <8 x float>* %138, align 1, !tbaa !12
  store <8 x float> %225, <8 x float>* %142, align 1, !tbaa !12
  store <8 x float> %226, <8 x float>* %146, align 1, !tbaa !12
  store <8 x float> %227, <8 x float>* %150, align 1, !tbaa !12
  store <8 x float> %228, <8 x float>* %154, align 1, !tbaa !12
  %229 = add nuw nsw i64 %59, 96
  %230 = icmp ult i64 %229, %49
  br i1 %230, label %58, label %52

231:                                              ; preds = %237
  br i1 %47, label %232, label %397

232:                                              ; preds = %231
  %233 = trunc i64 %31 to i32
  %234 = mul nsw i32 %46, %233
  %235 = sext i32 %234 to i64
  %236 = zext i32 %46 to i64
  br label %404

237:                                              ; preds = %53, %237
  %238 = phi i64 [ 0, %53 ], [ %395, %237 ]
  %239 = getelementptr inbounds float, float* %5, i64 %238
  %240 = getelementptr inbounds float, float* %239, i64 8
  %241 = bitcast float* %240 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %241, i32 0, i32 1, i32 1)
  %242 = getelementptr inbounds float, float* %3, i64 %238
  %243 = getelementptr inbounds float, float* %242, i64 8
  %244 = bitcast float* %243 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %244, i32 0, i32 1, i32 1)
  %245 = getelementptr inbounds float, float* %239, i64 16
  %246 = bitcast float* %245 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %246, i32 0, i32 1, i32 1)
  %247 = getelementptr inbounds float, float* %242, i64 16
  %248 = bitcast float* %247 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %248, i32 0, i32 1, i32 1)
  %249 = getelementptr inbounds float, float* %239, i64 24
  %250 = bitcast float* %249 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %250, i32 0, i32 1, i32 1)
  %251 = getelementptr inbounds float, float* %242, i64 24
  %252 = bitcast float* %251 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %252, i32 0, i32 1, i32 1)
  %253 = getelementptr inbounds float, float* %239, i64 32
  %254 = bitcast float* %253 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %254, i32 0, i32 1, i32 1)
  %255 = getelementptr inbounds float, float* %242, i64 32
  %256 = bitcast float* %255 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %256, i32 0, i32 1, i32 1)
  %257 = getelementptr inbounds float, float* %239, i64 40
  %258 = bitcast float* %257 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %258, i32 0, i32 1, i32 1)
  %259 = getelementptr inbounds float, float* %242, i64 40
  %260 = bitcast float* %259 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %260, i32 0, i32 1, i32 1)
  %261 = getelementptr inbounds float, float* %239, i64 48
  %262 = bitcast float* %261 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %262, i32 0, i32 1, i32 1)
  %263 = getelementptr inbounds float, float* %242, i64 48
  %264 = bitcast float* %263 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %264, i32 0, i32 1, i32 1)
  %265 = getelementptr inbounds float, float* %239, i64 56
  %266 = bitcast float* %265 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %266, i32 0, i32 1, i32 1)
  %267 = getelementptr inbounds float, float* %242, i64 56
  %268 = bitcast float* %267 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %268, i32 0, i32 1, i32 1)
  %269 = getelementptr inbounds float, float* %239, i64 64
  %270 = bitcast float* %269 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %270, i32 0, i32 1, i32 1)
  %271 = getelementptr inbounds float, float* %242, i64 64
  %272 = bitcast float* %271 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %272, i32 0, i32 1, i32 1)
  %273 = getelementptr inbounds float, float* %239, i64 72
  %274 = bitcast float* %273 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %274, i32 0, i32 1, i32 1)
  %275 = getelementptr inbounds float, float* %242, i64 72
  %276 = bitcast float* %275 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %276, i32 0, i32 1, i32 1)
  %277 = getelementptr inbounds float, float* %239, i64 80
  %278 = bitcast float* %277 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %278, i32 0, i32 1, i32 1)
  %279 = getelementptr inbounds float, float* %242, i64 80
  %280 = bitcast float* %279 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %280, i32 0, i32 1, i32 1)
  %281 = getelementptr inbounds float, float* %239, i64 88
  %282 = bitcast float* %281 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %282, i32 0, i32 1, i32 1)
  %283 = getelementptr inbounds float, float* %242, i64 88
  %284 = bitcast float* %283 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %284, i32 0, i32 1, i32 1)
  %285 = getelementptr inbounds float, float* %239, i64 96
  %286 = bitcast float* %285 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %286, i32 0, i32 1, i32 1)
  %287 = getelementptr inbounds float, float* %242, i64 96
  %288 = bitcast float* %287 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %288, i32 0, i32 1, i32 1)
  %289 = bitcast float* %239 to <8 x float>*
  %290 = load <8 x float>, <8 x float>* %289, align 1, !tbaa !12
  %291 = or i64 %238, 8
  %292 = getelementptr inbounds float, float* %5, i64 %291
  %293 = bitcast float* %292 to <8 x float>*
  %294 = load <8 x float>, <8 x float>* %293, align 1, !tbaa !12
  %295 = or i64 %238, 16
  %296 = getelementptr inbounds float, float* %5, i64 %295
  %297 = bitcast float* %296 to <8 x float>*
  %298 = load <8 x float>, <8 x float>* %297, align 1, !tbaa !12
  %299 = or i64 %238, 24
  %300 = getelementptr inbounds float, float* %5, i64 %299
  %301 = bitcast float* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 1, !tbaa !12
  %303 = add nuw nsw i64 %238, 32
  %304 = getelementptr inbounds float, float* %5, i64 %303
  %305 = bitcast float* %304 to <8 x float>*
  %306 = load <8 x float>, <8 x float>* %305, align 1, !tbaa !12
  %307 = add nuw nsw i64 %238, 40
  %308 = getelementptr inbounds float, float* %5, i64 %307
  %309 = bitcast float* %308 to <8 x float>*
  %310 = load <8 x float>, <8 x float>* %309, align 1, !tbaa !12
  %311 = add nuw nsw i64 %238, 48
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = bitcast float* %312 to <8 x float>*
  %314 = load <8 x float>, <8 x float>* %313, align 1, !tbaa !12
  %315 = add nuw nsw i64 %238, 56
  %316 = getelementptr inbounds float, float* %5, i64 %315
  %317 = bitcast float* %316 to <8 x float>*
  %318 = load <8 x float>, <8 x float>* %317, align 1, !tbaa !12
  %319 = add nuw nsw i64 %238, 64
  %320 = getelementptr inbounds float, float* %5, i64 %319
  %321 = bitcast float* %320 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 1, !tbaa !12
  %323 = add nuw nsw i64 %238, 72
  %324 = getelementptr inbounds float, float* %5, i64 %323
  %325 = bitcast float* %324 to <8 x float>*
  %326 = load <8 x float>, <8 x float>* %325, align 1, !tbaa !12
  %327 = add nuw nsw i64 %238, 80
  %328 = getelementptr inbounds float, float* %5, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  %330 = load <8 x float>, <8 x float>* %329, align 1, !tbaa !12
  %331 = add nuw nsw i64 %238, 88
  %332 = getelementptr inbounds float, float* %5, i64 %331
  %333 = bitcast float* %332 to <8 x float>*
  %334 = load <8 x float>, <8 x float>* %333, align 1, !tbaa !12
  %335 = add nsw i64 %238, %56
  %336 = getelementptr inbounds float, float* %3, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  %338 = load <8 x float>, <8 x float>* %337, align 1, !tbaa !12
  %339 = add nsw i64 %335, 8
  %340 = getelementptr inbounds float, float* %3, i64 %339
  %341 = bitcast float* %340 to <8 x float>*
  %342 = load <8 x float>, <8 x float>* %341, align 1, !tbaa !12
  %343 = add nsw i64 %335, 16
  %344 = getelementptr inbounds float, float* %3, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  %346 = load <8 x float>, <8 x float>* %345, align 1, !tbaa !12
  %347 = add nsw i64 %335, 24
  %348 = getelementptr inbounds float, float* %3, i64 %347
  %349 = bitcast float* %348 to <8 x float>*
  %350 = load <8 x float>, <8 x float>* %349, align 1, !tbaa !12
  %351 = add nsw i64 %335, 32
  %352 = getelementptr inbounds float, float* %3, i64 %351
  %353 = bitcast float* %352 to <8 x float>*
  %354 = load <8 x float>, <8 x float>* %353, align 1, !tbaa !12
  %355 = add nsw i64 %335, 40
  %356 = getelementptr inbounds float, float* %3, i64 %355
  %357 = bitcast float* %356 to <8 x float>*
  %358 = load <8 x float>, <8 x float>* %357, align 1, !tbaa !12
  %359 = add nsw i64 %335, 48
  %360 = getelementptr inbounds float, float* %3, i64 %359
  %361 = bitcast float* %360 to <8 x float>*
  %362 = load <8 x float>, <8 x float>* %361, align 1, !tbaa !12
  %363 = add nsw i64 %335, 56
  %364 = getelementptr inbounds float, float* %3, i64 %363
  %365 = bitcast float* %364 to <8 x float>*
  %366 = load <8 x float>, <8 x float>* %365, align 1, !tbaa !12
  %367 = add nsw i64 %335, 64
  %368 = getelementptr inbounds float, float* %3, i64 %367
  %369 = bitcast float* %368 to <8 x float>*
  %370 = load <8 x float>, <8 x float>* %369, align 1, !tbaa !12
  %371 = add nsw i64 %335, 72
  %372 = getelementptr inbounds float, float* %3, i64 %371
  %373 = bitcast float* %372 to <8 x float>*
  %374 = load <8 x float>, <8 x float>* %373, align 1, !tbaa !12
  %375 = add nsw i64 %335, 80
  %376 = getelementptr inbounds float, float* %3, i64 %375
  %377 = bitcast float* %376 to <8 x float>*
  %378 = load <8 x float>, <8 x float>* %377, align 1, !tbaa !12
  %379 = add nsw i64 %335, 88
  %380 = getelementptr inbounds float, float* %3, i64 %379
  %381 = bitcast float* %380 to <8 x float>*
  %382 = load <8 x float>, <8 x float>* %381, align 1, !tbaa !12
  %383 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %338, <8 x float> %30, <8 x float> %290) #10
  %384 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %342, <8 x float> %30, <8 x float> %294) #10
  %385 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %346, <8 x float> %30, <8 x float> %298) #10
  %386 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %350, <8 x float> %30, <8 x float> %302) #10
  %387 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %354, <8 x float> %30, <8 x float> %306) #10
  %388 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %358, <8 x float> %30, <8 x float> %310) #10
  %389 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %362, <8 x float> %30, <8 x float> %314) #10
  %390 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %366, <8 x float> %30, <8 x float> %318) #10
  %391 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %370, <8 x float> %30, <8 x float> %322) #10
  %392 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %374, <8 x float> %30, <8 x float> %326) #10
  %393 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %378, <8 x float> %30, <8 x float> %330) #10
  %394 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> %30, <8 x float> %334) #10
  store <8 x float> %383, <8 x float>* %289, align 1, !tbaa !12
  store <8 x float> %384, <8 x float>* %293, align 1, !tbaa !12
  store <8 x float> %385, <8 x float>* %297, align 1, !tbaa !12
  store <8 x float> %386, <8 x float>* %301, align 1, !tbaa !12
  store <8 x float> %387, <8 x float>* %305, align 1, !tbaa !12
  store <8 x float> %388, <8 x float>* %309, align 1, !tbaa !12
  store <8 x float> %389, <8 x float>* %313, align 1, !tbaa !12
  store <8 x float> %390, <8 x float>* %317, align 1, !tbaa !12
  store <8 x float> %391, <8 x float>* %321, align 1, !tbaa !12
  store <8 x float> %392, <8 x float>* %325, align 1, !tbaa !12
  store <8 x float> %393, <8 x float>* %329, align 1, !tbaa !12
  store <8 x float> %394, <8 x float>* %333, align 1, !tbaa !12
  %395 = add nuw nsw i64 %238, 96
  %396 = icmp ult i64 %395, %57
  br i1 %396, label %237, label %231

397:                                              ; preds = %404, %52, %231
  %398 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %399 = icmp sgt i32 %398, 0
  br i1 %399, label %400, label %743

400:                                              ; preds = %397
  %401 = zext i32 %398 to i64
  %402 = trunc i64 %36 to i32
  %403 = mul nsw i32 %398, %402
  br label %570

404:                                              ; preds = %232, %404
  %405 = phi i64 [ 0, %232 ], [ %562, %404 ]
  %406 = getelementptr inbounds float, float* %5, i64 %405
  %407 = getelementptr inbounds float, float* %406, i64 8
  %408 = bitcast float* %407 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %408, i32 0, i32 1, i32 1)
  %409 = getelementptr inbounds float, float* %3, i64 %405
  %410 = getelementptr inbounds float, float* %409, i64 8
  %411 = bitcast float* %410 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %411, i32 0, i32 1, i32 1)
  %412 = getelementptr inbounds float, float* %406, i64 16
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %413, i32 0, i32 1, i32 1)
  %414 = getelementptr inbounds float, float* %409, i64 16
  %415 = bitcast float* %414 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %415, i32 0, i32 1, i32 1)
  %416 = getelementptr inbounds float, float* %406, i64 24
  %417 = bitcast float* %416 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %417, i32 0, i32 1, i32 1)
  %418 = getelementptr inbounds float, float* %409, i64 24
  %419 = bitcast float* %418 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %419, i32 0, i32 1, i32 1)
  %420 = getelementptr inbounds float, float* %406, i64 32
  %421 = bitcast float* %420 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %421, i32 0, i32 1, i32 1)
  %422 = getelementptr inbounds float, float* %409, i64 32
  %423 = bitcast float* %422 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %423, i32 0, i32 1, i32 1)
  %424 = getelementptr inbounds float, float* %406, i64 40
  %425 = bitcast float* %424 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %425, i32 0, i32 1, i32 1)
  %426 = getelementptr inbounds float, float* %409, i64 40
  %427 = bitcast float* %426 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %427, i32 0, i32 1, i32 1)
  %428 = getelementptr inbounds float, float* %406, i64 48
  %429 = bitcast float* %428 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %429, i32 0, i32 1, i32 1)
  %430 = getelementptr inbounds float, float* %409, i64 48
  %431 = bitcast float* %430 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %431, i32 0, i32 1, i32 1)
  %432 = getelementptr inbounds float, float* %406, i64 56
  %433 = bitcast float* %432 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %433, i32 0, i32 1, i32 1)
  %434 = getelementptr inbounds float, float* %409, i64 56
  %435 = bitcast float* %434 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %435, i32 0, i32 1, i32 1)
  %436 = getelementptr inbounds float, float* %406, i64 64
  %437 = bitcast float* %436 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %437, i32 0, i32 1, i32 1)
  %438 = getelementptr inbounds float, float* %409, i64 64
  %439 = bitcast float* %438 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %439, i32 0, i32 1, i32 1)
  %440 = getelementptr inbounds float, float* %406, i64 72
  %441 = bitcast float* %440 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %441, i32 0, i32 1, i32 1)
  %442 = getelementptr inbounds float, float* %409, i64 72
  %443 = bitcast float* %442 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %443, i32 0, i32 1, i32 1)
  %444 = getelementptr inbounds float, float* %406, i64 80
  %445 = bitcast float* %444 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %445, i32 0, i32 1, i32 1)
  %446 = getelementptr inbounds float, float* %409, i64 80
  %447 = bitcast float* %446 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %447, i32 0, i32 1, i32 1)
  %448 = getelementptr inbounds float, float* %406, i64 88
  %449 = bitcast float* %448 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %449, i32 0, i32 1, i32 1)
  %450 = getelementptr inbounds float, float* %409, i64 88
  %451 = bitcast float* %450 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %451, i32 0, i32 1, i32 1)
  %452 = getelementptr inbounds float, float* %406, i64 96
  %453 = bitcast float* %452 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %453, i32 0, i32 1, i32 1)
  %454 = getelementptr inbounds float, float* %409, i64 96
  %455 = bitcast float* %454 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %455, i32 0, i32 1, i32 1)
  %456 = bitcast float* %406 to <8 x float>*
  %457 = load <8 x float>, <8 x float>* %456, align 1, !tbaa !12
  %458 = or i64 %405, 8
  %459 = getelementptr inbounds float, float* %5, i64 %458
  %460 = bitcast float* %459 to <8 x float>*
  %461 = load <8 x float>, <8 x float>* %460, align 1, !tbaa !12
  %462 = or i64 %405, 16
  %463 = getelementptr inbounds float, float* %5, i64 %462
  %464 = bitcast float* %463 to <8 x float>*
  %465 = load <8 x float>, <8 x float>* %464, align 1, !tbaa !12
  %466 = or i64 %405, 24
  %467 = getelementptr inbounds float, float* %5, i64 %466
  %468 = bitcast float* %467 to <8 x float>*
  %469 = load <8 x float>, <8 x float>* %468, align 1, !tbaa !12
  %470 = add nuw nsw i64 %405, 32
  %471 = getelementptr inbounds float, float* %5, i64 %470
  %472 = bitcast float* %471 to <8 x float>*
  %473 = load <8 x float>, <8 x float>* %472, align 1, !tbaa !12
  %474 = add nuw nsw i64 %405, 40
  %475 = getelementptr inbounds float, float* %5, i64 %474
  %476 = bitcast float* %475 to <8 x float>*
  %477 = load <8 x float>, <8 x float>* %476, align 1, !tbaa !12
  %478 = add nuw nsw i64 %405, 48
  %479 = getelementptr inbounds float, float* %5, i64 %478
  %480 = bitcast float* %479 to <8 x float>*
  %481 = load <8 x float>, <8 x float>* %480, align 1, !tbaa !12
  %482 = add nuw nsw i64 %405, 56
  %483 = getelementptr inbounds float, float* %5, i64 %482
  %484 = bitcast float* %483 to <8 x float>*
  %485 = load <8 x float>, <8 x float>* %484, align 1, !tbaa !12
  %486 = add nuw nsw i64 %405, 64
  %487 = getelementptr inbounds float, float* %5, i64 %486
  %488 = bitcast float* %487 to <8 x float>*
  %489 = load <8 x float>, <8 x float>* %488, align 1, !tbaa !12
  %490 = add nuw nsw i64 %405, 72
  %491 = getelementptr inbounds float, float* %5, i64 %490
  %492 = bitcast float* %491 to <8 x float>*
  %493 = load <8 x float>, <8 x float>* %492, align 1, !tbaa !12
  %494 = add nuw nsw i64 %405, 80
  %495 = getelementptr inbounds float, float* %5, i64 %494
  %496 = bitcast float* %495 to <8 x float>*
  %497 = load <8 x float>, <8 x float>* %496, align 1, !tbaa !12
  %498 = add nuw nsw i64 %405, 88
  %499 = getelementptr inbounds float, float* %5, i64 %498
  %500 = bitcast float* %499 to <8 x float>*
  %501 = load <8 x float>, <8 x float>* %500, align 1, !tbaa !12
  %502 = add nsw i64 %405, %235
  %503 = getelementptr inbounds float, float* %3, i64 %502
  %504 = bitcast float* %503 to <8 x float>*
  %505 = load <8 x float>, <8 x float>* %504, align 1, !tbaa !12
  %506 = add nsw i64 %502, 8
  %507 = getelementptr inbounds float, float* %3, i64 %506
  %508 = bitcast float* %507 to <8 x float>*
  %509 = load <8 x float>, <8 x float>* %508, align 1, !tbaa !12
  %510 = add nsw i64 %502, 16
  %511 = getelementptr inbounds float, float* %3, i64 %510
  %512 = bitcast float* %511 to <8 x float>*
  %513 = load <8 x float>, <8 x float>* %512, align 1, !tbaa !12
  %514 = add nsw i64 %502, 24
  %515 = getelementptr inbounds float, float* %3, i64 %514
  %516 = bitcast float* %515 to <8 x float>*
  %517 = load <8 x float>, <8 x float>* %516, align 1, !tbaa !12
  %518 = add nsw i64 %502, 32
  %519 = getelementptr inbounds float, float* %3, i64 %518
  %520 = bitcast float* %519 to <8 x float>*
  %521 = load <8 x float>, <8 x float>* %520, align 1, !tbaa !12
  %522 = add nsw i64 %502, 40
  %523 = getelementptr inbounds float, float* %3, i64 %522
  %524 = bitcast float* %523 to <8 x float>*
  %525 = load <8 x float>, <8 x float>* %524, align 1, !tbaa !12
  %526 = add nsw i64 %502, 48
  %527 = getelementptr inbounds float, float* %3, i64 %526
  %528 = bitcast float* %527 to <8 x float>*
  %529 = load <8 x float>, <8 x float>* %528, align 1, !tbaa !12
  %530 = add nsw i64 %502, 56
  %531 = getelementptr inbounds float, float* %3, i64 %530
  %532 = bitcast float* %531 to <8 x float>*
  %533 = load <8 x float>, <8 x float>* %532, align 1, !tbaa !12
  %534 = add nsw i64 %502, 64
  %535 = getelementptr inbounds float, float* %3, i64 %534
  %536 = bitcast float* %535 to <8 x float>*
  %537 = load <8 x float>, <8 x float>* %536, align 1, !tbaa !12
  %538 = add nsw i64 %502, 72
  %539 = getelementptr inbounds float, float* %3, i64 %538
  %540 = bitcast float* %539 to <8 x float>*
  %541 = load <8 x float>, <8 x float>* %540, align 1, !tbaa !12
  %542 = add nsw i64 %502, 80
  %543 = getelementptr inbounds float, float* %3, i64 %542
  %544 = bitcast float* %543 to <8 x float>*
  %545 = load <8 x float>, <8 x float>* %544, align 1, !tbaa !12
  %546 = add nsw i64 %502, 88
  %547 = getelementptr inbounds float, float* %3, i64 %546
  %548 = bitcast float* %547 to <8 x float>*
  %549 = load <8 x float>, <8 x float>* %548, align 1, !tbaa !12
  %550 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %505, <8 x float> %35, <8 x float> %457) #10
  %551 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %509, <8 x float> %35, <8 x float> %461) #10
  %552 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %513, <8 x float> %35, <8 x float> %465) #10
  %553 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %517, <8 x float> %35, <8 x float> %469) #10
  %554 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %521, <8 x float> %35, <8 x float> %473) #10
  %555 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %525, <8 x float> %35, <8 x float> %477) #10
  %556 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %529, <8 x float> %35, <8 x float> %481) #10
  %557 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %533, <8 x float> %35, <8 x float> %485) #10
  %558 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %537, <8 x float> %35, <8 x float> %489) #10
  %559 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %541, <8 x float> %35, <8 x float> %493) #10
  %560 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %545, <8 x float> %35, <8 x float> %497) #10
  %561 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %549, <8 x float> %35, <8 x float> %501) #10
  store <8 x float> %550, <8 x float>* %456, align 1, !tbaa !12
  store <8 x float> %551, <8 x float>* %460, align 1, !tbaa !12
  store <8 x float> %552, <8 x float>* %464, align 1, !tbaa !12
  store <8 x float> %553, <8 x float>* %468, align 1, !tbaa !12
  store <8 x float> %554, <8 x float>* %472, align 1, !tbaa !12
  store <8 x float> %555, <8 x float>* %476, align 1, !tbaa !12
  store <8 x float> %556, <8 x float>* %480, align 1, !tbaa !12
  store <8 x float> %557, <8 x float>* %484, align 1, !tbaa !12
  store <8 x float> %558, <8 x float>* %488, align 1, !tbaa !12
  store <8 x float> %559, <8 x float>* %492, align 1, !tbaa !12
  store <8 x float> %560, <8 x float>* %496, align 1, !tbaa !12
  store <8 x float> %561, <8 x float>* %500, align 1, !tbaa !12
  %562 = add nuw nsw i64 %405, 96
  %563 = icmp ult i64 %562, %236
  br i1 %563, label %404, label %397

564:                                              ; preds = %570
  br i1 %399, label %565, label %743

565:                                              ; preds = %564
  %566 = trunc i64 %41 to i32
  %567 = mul nsw i32 %398, %566
  %568 = sext i32 %567 to i64
  %569 = zext i32 %398 to i64
  br label %748

570:                                              ; preds = %400, %570
  %571 = phi i64 [ 0, %400 ], [ %741, %570 ]
  %572 = getelementptr inbounds float, float* %5, i64 %571
  %573 = getelementptr inbounds float, float* %572, i64 8
  %574 = bitcast float* %573 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %574, i32 0, i32 1, i32 1)
  %575 = getelementptr inbounds float, float* %3, i64 %571
  %576 = getelementptr inbounds float, float* %575, i64 8
  %577 = bitcast float* %576 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %577, i32 0, i32 1, i32 1)
  %578 = getelementptr inbounds float, float* %572, i64 16
  %579 = bitcast float* %578 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %579, i32 0, i32 1, i32 1)
  %580 = getelementptr inbounds float, float* %575, i64 16
  %581 = bitcast float* %580 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %581, i32 0, i32 1, i32 1)
  %582 = getelementptr inbounds float, float* %572, i64 24
  %583 = bitcast float* %582 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %583, i32 0, i32 1, i32 1)
  %584 = getelementptr inbounds float, float* %575, i64 24
  %585 = bitcast float* %584 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %585, i32 0, i32 1, i32 1)
  %586 = getelementptr inbounds float, float* %572, i64 32
  %587 = bitcast float* %586 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %587, i32 0, i32 1, i32 1)
  %588 = getelementptr inbounds float, float* %575, i64 32
  %589 = bitcast float* %588 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %589, i32 0, i32 1, i32 1)
  %590 = getelementptr inbounds float, float* %572, i64 40
  %591 = bitcast float* %590 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %591, i32 0, i32 1, i32 1)
  %592 = getelementptr inbounds float, float* %575, i64 40
  %593 = bitcast float* %592 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %593, i32 0, i32 1, i32 1)
  %594 = getelementptr inbounds float, float* %572, i64 48
  %595 = bitcast float* %594 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %595, i32 0, i32 1, i32 1)
  %596 = getelementptr inbounds float, float* %575, i64 48
  %597 = bitcast float* %596 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %597, i32 0, i32 1, i32 1)
  %598 = getelementptr inbounds float, float* %572, i64 56
  %599 = bitcast float* %598 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %599, i32 0, i32 1, i32 1)
  %600 = getelementptr inbounds float, float* %575, i64 56
  %601 = bitcast float* %600 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %601, i32 0, i32 1, i32 1)
  %602 = getelementptr inbounds float, float* %572, i64 64
  %603 = bitcast float* %602 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %603, i32 0, i32 1, i32 1)
  %604 = getelementptr inbounds float, float* %575, i64 64
  %605 = bitcast float* %604 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %605, i32 0, i32 1, i32 1)
  %606 = getelementptr inbounds float, float* %572, i64 72
  %607 = bitcast float* %606 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %607, i32 0, i32 1, i32 1)
  %608 = getelementptr inbounds float, float* %575, i64 72
  %609 = bitcast float* %608 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %609, i32 0, i32 1, i32 1)
  %610 = getelementptr inbounds float, float* %572, i64 80
  %611 = bitcast float* %610 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %611, i32 0, i32 1, i32 1)
  %612 = getelementptr inbounds float, float* %575, i64 80
  %613 = bitcast float* %612 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %613, i32 0, i32 1, i32 1)
  %614 = getelementptr inbounds float, float* %572, i64 88
  %615 = bitcast float* %614 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %615, i32 0, i32 1, i32 1)
  %616 = getelementptr inbounds float, float* %575, i64 88
  %617 = bitcast float* %616 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %617, i32 0, i32 1, i32 1)
  %618 = getelementptr inbounds float, float* %572, i64 96
  %619 = bitcast float* %618 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %619, i32 0, i32 1, i32 1)
  %620 = getelementptr inbounds float, float* %575, i64 96
  %621 = bitcast float* %620 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %621, i32 0, i32 1, i32 1)
  %622 = bitcast float* %572 to <8 x float>*
  %623 = load <8 x float>, <8 x float>* %622, align 1, !tbaa !12
  %624 = or i64 %571, 8
  %625 = getelementptr inbounds float, float* %5, i64 %624
  %626 = bitcast float* %625 to <8 x float>*
  %627 = load <8 x float>, <8 x float>* %626, align 1, !tbaa !12
  %628 = or i64 %571, 16
  %629 = getelementptr inbounds float, float* %5, i64 %628
  %630 = bitcast float* %629 to <8 x float>*
  %631 = load <8 x float>, <8 x float>* %630, align 1, !tbaa !12
  %632 = or i64 %571, 24
  %633 = getelementptr inbounds float, float* %5, i64 %632
  %634 = bitcast float* %633 to <8 x float>*
  %635 = load <8 x float>, <8 x float>* %634, align 1, !tbaa !12
  %636 = add nuw nsw i64 %571, 32
  %637 = getelementptr inbounds float, float* %5, i64 %636
  %638 = bitcast float* %637 to <8 x float>*
  %639 = load <8 x float>, <8 x float>* %638, align 1, !tbaa !12
  %640 = add nuw nsw i64 %571, 40
  %641 = getelementptr inbounds float, float* %5, i64 %640
  %642 = bitcast float* %641 to <8 x float>*
  %643 = load <8 x float>, <8 x float>* %642, align 1, !tbaa !12
  %644 = add nuw nsw i64 %571, 48
  %645 = getelementptr inbounds float, float* %5, i64 %644
  %646 = bitcast float* %645 to <8 x float>*
  %647 = load <8 x float>, <8 x float>* %646, align 1, !tbaa !12
  %648 = add nuw nsw i64 %571, 56
  %649 = getelementptr inbounds float, float* %5, i64 %648
  %650 = bitcast float* %649 to <8 x float>*
  %651 = load <8 x float>, <8 x float>* %650, align 1, !tbaa !12
  %652 = add nuw nsw i64 %571, 64
  %653 = getelementptr inbounds float, float* %5, i64 %652
  %654 = bitcast float* %653 to <8 x float>*
  %655 = load <8 x float>, <8 x float>* %654, align 1, !tbaa !12
  %656 = add nuw nsw i64 %571, 72
  %657 = getelementptr inbounds float, float* %5, i64 %656
  %658 = bitcast float* %657 to <8 x float>*
  %659 = load <8 x float>, <8 x float>* %658, align 1, !tbaa !12
  %660 = add nuw nsw i64 %571, 80
  %661 = getelementptr inbounds float, float* %5, i64 %660
  %662 = bitcast float* %661 to <8 x float>*
  %663 = load <8 x float>, <8 x float>* %662, align 1, !tbaa !12
  %664 = add nuw nsw i64 %571, 88
  %665 = getelementptr inbounds float, float* %5, i64 %664
  %666 = bitcast float* %665 to <8 x float>*
  %667 = load <8 x float>, <8 x float>* %666, align 1, !tbaa !12
  %668 = trunc i64 %571 to i32
  %669 = add nsw i32 %403, %668
  %670 = sext i32 %669 to i64
  %671 = getelementptr inbounds float, float* %3, i64 %670
  %672 = bitcast float* %671 to <8 x float>*
  %673 = load <8 x float>, <8 x float>* %672, align 1, !tbaa !12
  %674 = add nsw i32 %669, 8
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds float, float* %3, i64 %675
  %677 = bitcast float* %676 to <8 x float>*
  %678 = load <8 x float>, <8 x float>* %677, align 1, !tbaa !12
  %679 = add nsw i32 %669, 16
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds float, float* %3, i64 %680
  %682 = bitcast float* %681 to <8 x float>*
  %683 = load <8 x float>, <8 x float>* %682, align 1, !tbaa !12
  %684 = add nsw i32 %669, 24
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds float, float* %3, i64 %685
  %687 = bitcast float* %686 to <8 x float>*
  %688 = load <8 x float>, <8 x float>* %687, align 1, !tbaa !12
  %689 = add nsw i32 %669, 32
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds float, float* %3, i64 %690
  %692 = bitcast float* %691 to <8 x float>*
  %693 = load <8 x float>, <8 x float>* %692, align 1, !tbaa !12
  %694 = add nsw i32 %669, 40
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds float, float* %3, i64 %695
  %697 = bitcast float* %696 to <8 x float>*
  %698 = load <8 x float>, <8 x float>* %697, align 1, !tbaa !12
  %699 = add nsw i32 %669, 48
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds float, float* %3, i64 %700
  %702 = bitcast float* %701 to <8 x float>*
  %703 = load <8 x float>, <8 x float>* %702, align 1, !tbaa !12
  %704 = add nsw i32 %669, 56
  %705 = sext i32 %704 to i64
  %706 = getelementptr inbounds float, float* %3, i64 %705
  %707 = bitcast float* %706 to <8 x float>*
  %708 = load <8 x float>, <8 x float>* %707, align 1, !tbaa !12
  %709 = add nsw i32 %669, 64
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds float, float* %3, i64 %710
  %712 = bitcast float* %711 to <8 x float>*
  %713 = load <8 x float>, <8 x float>* %712, align 1, !tbaa !12
  %714 = add nsw i32 %669, 72
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds float, float* %3, i64 %715
  %717 = bitcast float* %716 to <8 x float>*
  %718 = load <8 x float>, <8 x float>* %717, align 1, !tbaa !12
  %719 = add nsw i32 %669, 80
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds float, float* %3, i64 %720
  %722 = bitcast float* %721 to <8 x float>*
  %723 = load <8 x float>, <8 x float>* %722, align 1, !tbaa !12
  %724 = add nsw i32 %669, 88
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds float, float* %3, i64 %725
  %727 = bitcast float* %726 to <8 x float>*
  %728 = load <8 x float>, <8 x float>* %727, align 1, !tbaa !12
  %729 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %673, <8 x float> %40, <8 x float> %623) #10
  %730 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %678, <8 x float> %40, <8 x float> %627) #10
  %731 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %683, <8 x float> %40, <8 x float> %631) #10
  %732 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %688, <8 x float> %40, <8 x float> %635) #10
  %733 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %693, <8 x float> %40, <8 x float> %639) #10
  %734 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %698, <8 x float> %40, <8 x float> %643) #10
  %735 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %703, <8 x float> %40, <8 x float> %647) #10
  %736 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %708, <8 x float> %40, <8 x float> %651) #10
  %737 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %713, <8 x float> %40, <8 x float> %655) #10
  %738 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %718, <8 x float> %40, <8 x float> %659) #10
  %739 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %723, <8 x float> %40, <8 x float> %663) #10
  %740 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %728, <8 x float> %40, <8 x float> %667) #10
  store <8 x float> %729, <8 x float>* %622, align 1, !tbaa !12
  store <8 x float> %730, <8 x float>* %626, align 1, !tbaa !12
  store <8 x float> %731, <8 x float>* %630, align 1, !tbaa !12
  store <8 x float> %732, <8 x float>* %634, align 1, !tbaa !12
  store <8 x float> %733, <8 x float>* %638, align 1, !tbaa !12
  store <8 x float> %734, <8 x float>* %642, align 1, !tbaa !12
  store <8 x float> %735, <8 x float>* %646, align 1, !tbaa !12
  store <8 x float> %736, <8 x float>* %650, align 1, !tbaa !12
  store <8 x float> %737, <8 x float>* %654, align 1, !tbaa !12
  store <8 x float> %738, <8 x float>* %658, align 1, !tbaa !12
  store <8 x float> %739, <8 x float>* %662, align 1, !tbaa !12
  store <8 x float> %740, <8 x float>* %666, align 1, !tbaa !12
  %741 = add nuw nsw i64 %571, 96
  %742 = icmp ult i64 %741, %401
  br i1 %742, label %570, label %564

743:                                              ; preds = %748, %20, %397, %564
  %744 = add nuw nsw i64 %21, 5
  %745 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %746 = sext i32 %745 to i64
  %747 = icmp slt i64 %744, %746
  br i1 %747, label %20, label %8

748:                                              ; preds = %565, %748
  %749 = phi i64 [ 0, %565 ], [ %906, %748 ]
  %750 = getelementptr inbounds float, float* %5, i64 %749
  %751 = getelementptr inbounds float, float* %750, i64 8
  %752 = bitcast float* %751 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %752, i32 0, i32 1, i32 1)
  %753 = getelementptr inbounds float, float* %3, i64 %749
  %754 = getelementptr inbounds float, float* %753, i64 8
  %755 = bitcast float* %754 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %755, i32 0, i32 1, i32 1)
  %756 = getelementptr inbounds float, float* %750, i64 16
  %757 = bitcast float* %756 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %757, i32 0, i32 1, i32 1)
  %758 = getelementptr inbounds float, float* %753, i64 16
  %759 = bitcast float* %758 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %759, i32 0, i32 1, i32 1)
  %760 = getelementptr inbounds float, float* %750, i64 24
  %761 = bitcast float* %760 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %761, i32 0, i32 1, i32 1)
  %762 = getelementptr inbounds float, float* %753, i64 24
  %763 = bitcast float* %762 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %763, i32 0, i32 1, i32 1)
  %764 = getelementptr inbounds float, float* %750, i64 32
  %765 = bitcast float* %764 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %765, i32 0, i32 1, i32 1)
  %766 = getelementptr inbounds float, float* %753, i64 32
  %767 = bitcast float* %766 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %767, i32 0, i32 1, i32 1)
  %768 = getelementptr inbounds float, float* %750, i64 40
  %769 = bitcast float* %768 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %769, i32 0, i32 1, i32 1)
  %770 = getelementptr inbounds float, float* %753, i64 40
  %771 = bitcast float* %770 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %771, i32 0, i32 1, i32 1)
  %772 = getelementptr inbounds float, float* %750, i64 48
  %773 = bitcast float* %772 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %773, i32 0, i32 1, i32 1)
  %774 = getelementptr inbounds float, float* %753, i64 48
  %775 = bitcast float* %774 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %775, i32 0, i32 1, i32 1)
  %776 = getelementptr inbounds float, float* %750, i64 56
  %777 = bitcast float* %776 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %777, i32 0, i32 1, i32 1)
  %778 = getelementptr inbounds float, float* %753, i64 56
  %779 = bitcast float* %778 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %779, i32 0, i32 1, i32 1)
  %780 = getelementptr inbounds float, float* %750, i64 64
  %781 = bitcast float* %780 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %781, i32 0, i32 1, i32 1)
  %782 = getelementptr inbounds float, float* %753, i64 64
  %783 = bitcast float* %782 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %783, i32 0, i32 1, i32 1)
  %784 = getelementptr inbounds float, float* %750, i64 72
  %785 = bitcast float* %784 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %785, i32 0, i32 1, i32 1)
  %786 = getelementptr inbounds float, float* %753, i64 72
  %787 = bitcast float* %786 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %787, i32 0, i32 1, i32 1)
  %788 = getelementptr inbounds float, float* %750, i64 80
  %789 = bitcast float* %788 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %789, i32 0, i32 1, i32 1)
  %790 = getelementptr inbounds float, float* %753, i64 80
  %791 = bitcast float* %790 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %791, i32 0, i32 1, i32 1)
  %792 = getelementptr inbounds float, float* %750, i64 88
  %793 = bitcast float* %792 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %793, i32 0, i32 1, i32 1)
  %794 = getelementptr inbounds float, float* %753, i64 88
  %795 = bitcast float* %794 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %795, i32 0, i32 1, i32 1)
  %796 = getelementptr inbounds float, float* %750, i64 96
  %797 = bitcast float* %796 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %797, i32 0, i32 1, i32 1)
  %798 = getelementptr inbounds float, float* %753, i64 96
  %799 = bitcast float* %798 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %799, i32 0, i32 1, i32 1)
  %800 = bitcast float* %750 to <8 x float>*
  %801 = load <8 x float>, <8 x float>* %800, align 1, !tbaa !12
  %802 = or i64 %749, 8
  %803 = getelementptr inbounds float, float* %5, i64 %802
  %804 = bitcast float* %803 to <8 x float>*
  %805 = load <8 x float>, <8 x float>* %804, align 1, !tbaa !12
  %806 = or i64 %749, 16
  %807 = getelementptr inbounds float, float* %5, i64 %806
  %808 = bitcast float* %807 to <8 x float>*
  %809 = load <8 x float>, <8 x float>* %808, align 1, !tbaa !12
  %810 = or i64 %749, 24
  %811 = getelementptr inbounds float, float* %5, i64 %810
  %812 = bitcast float* %811 to <8 x float>*
  %813 = load <8 x float>, <8 x float>* %812, align 1, !tbaa !12
  %814 = add nuw nsw i64 %749, 32
  %815 = getelementptr inbounds float, float* %5, i64 %814
  %816 = bitcast float* %815 to <8 x float>*
  %817 = load <8 x float>, <8 x float>* %816, align 1, !tbaa !12
  %818 = add nuw nsw i64 %749, 40
  %819 = getelementptr inbounds float, float* %5, i64 %818
  %820 = bitcast float* %819 to <8 x float>*
  %821 = load <8 x float>, <8 x float>* %820, align 1, !tbaa !12
  %822 = add nuw nsw i64 %749, 48
  %823 = getelementptr inbounds float, float* %5, i64 %822
  %824 = bitcast float* %823 to <8 x float>*
  %825 = load <8 x float>, <8 x float>* %824, align 1, !tbaa !12
  %826 = add nuw nsw i64 %749, 56
  %827 = getelementptr inbounds float, float* %5, i64 %826
  %828 = bitcast float* %827 to <8 x float>*
  %829 = load <8 x float>, <8 x float>* %828, align 1, !tbaa !12
  %830 = add nuw nsw i64 %749, 64
  %831 = getelementptr inbounds float, float* %5, i64 %830
  %832 = bitcast float* %831 to <8 x float>*
  %833 = load <8 x float>, <8 x float>* %832, align 1, !tbaa !12
  %834 = add nuw nsw i64 %749, 72
  %835 = getelementptr inbounds float, float* %5, i64 %834
  %836 = bitcast float* %835 to <8 x float>*
  %837 = load <8 x float>, <8 x float>* %836, align 1, !tbaa !12
  %838 = add nuw nsw i64 %749, 80
  %839 = getelementptr inbounds float, float* %5, i64 %838
  %840 = bitcast float* %839 to <8 x float>*
  %841 = load <8 x float>, <8 x float>* %840, align 1, !tbaa !12
  %842 = add nuw nsw i64 %749, 88
  %843 = getelementptr inbounds float, float* %5, i64 %842
  %844 = bitcast float* %843 to <8 x float>*
  %845 = load <8 x float>, <8 x float>* %844, align 1, !tbaa !12
  %846 = add nsw i64 %749, %568
  %847 = getelementptr inbounds float, float* %3, i64 %846
  %848 = bitcast float* %847 to <8 x float>*
  %849 = load <8 x float>, <8 x float>* %848, align 1, !tbaa !12
  %850 = add nsw i64 %846, 8
  %851 = getelementptr inbounds float, float* %3, i64 %850
  %852 = bitcast float* %851 to <8 x float>*
  %853 = load <8 x float>, <8 x float>* %852, align 1, !tbaa !12
  %854 = add nsw i64 %846, 16
  %855 = getelementptr inbounds float, float* %3, i64 %854
  %856 = bitcast float* %855 to <8 x float>*
  %857 = load <8 x float>, <8 x float>* %856, align 1, !tbaa !12
  %858 = add nsw i64 %846, 24
  %859 = getelementptr inbounds float, float* %3, i64 %858
  %860 = bitcast float* %859 to <8 x float>*
  %861 = load <8 x float>, <8 x float>* %860, align 1, !tbaa !12
  %862 = add nsw i64 %846, 32
  %863 = getelementptr inbounds float, float* %3, i64 %862
  %864 = bitcast float* %863 to <8 x float>*
  %865 = load <8 x float>, <8 x float>* %864, align 1, !tbaa !12
  %866 = add nsw i64 %846, 40
  %867 = getelementptr inbounds float, float* %3, i64 %866
  %868 = bitcast float* %867 to <8 x float>*
  %869 = load <8 x float>, <8 x float>* %868, align 1, !tbaa !12
  %870 = add nsw i64 %846, 48
  %871 = getelementptr inbounds float, float* %3, i64 %870
  %872 = bitcast float* %871 to <8 x float>*
  %873 = load <8 x float>, <8 x float>* %872, align 1, !tbaa !12
  %874 = add nsw i64 %846, 56
  %875 = getelementptr inbounds float, float* %3, i64 %874
  %876 = bitcast float* %875 to <8 x float>*
  %877 = load <8 x float>, <8 x float>* %876, align 1, !tbaa !12
  %878 = add nsw i64 %846, 64
  %879 = getelementptr inbounds float, float* %3, i64 %878
  %880 = bitcast float* %879 to <8 x float>*
  %881 = load <8 x float>, <8 x float>* %880, align 1, !tbaa !12
  %882 = add nsw i64 %846, 72
  %883 = getelementptr inbounds float, float* %3, i64 %882
  %884 = bitcast float* %883 to <8 x float>*
  %885 = load <8 x float>, <8 x float>* %884, align 1, !tbaa !12
  %886 = add nsw i64 %846, 80
  %887 = getelementptr inbounds float, float* %3, i64 %886
  %888 = bitcast float* %887 to <8 x float>*
  %889 = load <8 x float>, <8 x float>* %888, align 1, !tbaa !12
  %890 = add nsw i64 %846, 88
  %891 = getelementptr inbounds float, float* %3, i64 %890
  %892 = bitcast float* %891 to <8 x float>*
  %893 = load <8 x float>, <8 x float>* %892, align 1, !tbaa !12
  %894 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %849, <8 x float> %45, <8 x float> %801) #10
  %895 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %853, <8 x float> %45, <8 x float> %805) #10
  %896 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %857, <8 x float> %45, <8 x float> %809) #10
  %897 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %861, <8 x float> %45, <8 x float> %813) #10
  %898 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %865, <8 x float> %45, <8 x float> %817) #10
  %899 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %869, <8 x float> %45, <8 x float> %821) #10
  %900 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %873, <8 x float> %45, <8 x float> %825) #10
  %901 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %877, <8 x float> %45, <8 x float> %829) #10
  %902 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %881, <8 x float> %45, <8 x float> %833) #10
  %903 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %885, <8 x float> %45, <8 x float> %837) #10
  %904 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %889, <8 x float> %45, <8 x float> %841) #10
  %905 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %893, <8 x float> %45, <8 x float> %845) #10
  store <8 x float> %894, <8 x float>* %800, align 1, !tbaa !12
  store <8 x float> %895, <8 x float>* %804, align 1, !tbaa !12
  store <8 x float> %896, <8 x float>* %808, align 1, !tbaa !12
  store <8 x float> %897, <8 x float>* %812, align 1, !tbaa !12
  store <8 x float> %898, <8 x float>* %816, align 1, !tbaa !12
  store <8 x float> %899, <8 x float>* %820, align 1, !tbaa !12
  store <8 x float> %900, <8 x float>* %824, align 1, !tbaa !12
  store <8 x float> %901, <8 x float>* %828, align 1, !tbaa !12
  store <8 x float> %902, <8 x float>* %832, align 1, !tbaa !12
  store <8 x float> %903, <8 x float>* %836, align 1, !tbaa !12
  store <8 x float> %904, <8 x float>* %840, align 1, !tbaa !12
  store <8 x float> %905, <8 x float>* %844, align 1, !tbaa !12
  %906 = add nuw nsw i64 %749, 96
  %907 = icmp ult i64 %906, %569
  br i1 %907, label %748, label %743
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 125
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui12_uk5.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
