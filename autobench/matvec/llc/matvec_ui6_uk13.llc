; ModuleID = 'codes/matvec_ui6_uk13.cpp'
source_filename = "codes/matvec_ui6_uk13.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui6_uk13.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 48
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 104
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1164, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1164
  %21 = phi i64 [ %1165, %1164 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = add nuw nsw i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = add nuw nsw i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = add nuw nsw i64 %21, 7
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = add nuw nsw i64 %21, 8
  %62 = getelementptr inbounds float, float* %4, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !18
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = add nuw nsw i64 %21, 9
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !18
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = add nuw nsw i64 %21, 10
  %72 = getelementptr inbounds float, float* %4, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !18
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = add nuw nsw i64 %21, 11
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !18
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = add nuw nsw i64 %21, 12
  %82 = getelementptr inbounds float, float* %4, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !18
  %84 = insertelement <8 x float> undef, float %83, i32 0
  %85 = shufflevector <8 x float> %84, <8 x float> undef, <8 x i32> zeroinitializer
  %86 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %1164

88:                                               ; preds = %20
  %89 = zext i32 %86 to i64
  %90 = trunc i64 %21 to i32
  %91 = mul nsw i32 %86, %90
  br label %98

92:                                               ; preds = %98
  br i1 %87, label %93, label %539

93:                                               ; preds = %92
  %94 = trunc i64 %26 to i32
  %95 = mul nsw i32 %86, %94
  %96 = sext i32 %95 to i64
  %97 = zext i32 %86 to i64
  br label %193

98:                                               ; preds = %88, %98
  %99 = phi i64 [ 0, %88 ], [ %185, %98 ]
  %100 = getelementptr inbounds float, float* %5, i64 %99
  %101 = getelementptr inbounds float, float* %100, i64 8
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %3, i64 %99
  %104 = getelementptr inbounds float, float* %103, i64 8
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %105, i32 0, i32 1, i32 1)
  %106 = getelementptr inbounds float, float* %100, i64 16
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %107, i32 0, i32 1, i32 1)
  %108 = getelementptr inbounds float, float* %103, i64 16
  %109 = bitcast float* %108 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %109, i32 0, i32 1, i32 1)
  %110 = getelementptr inbounds float, float* %100, i64 24
  %111 = bitcast float* %110 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %111, i32 0, i32 1, i32 1)
  %112 = getelementptr inbounds float, float* %103, i64 24
  %113 = bitcast float* %112 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %113, i32 0, i32 1, i32 1)
  %114 = getelementptr inbounds float, float* %100, i64 32
  %115 = bitcast float* %114 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %115, i32 0, i32 1, i32 1)
  %116 = getelementptr inbounds float, float* %103, i64 32
  %117 = bitcast float* %116 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %117, i32 0, i32 1, i32 1)
  %118 = getelementptr inbounds float, float* %100, i64 40
  %119 = bitcast float* %118 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %119, i32 0, i32 1, i32 1)
  %120 = getelementptr inbounds float, float* %103, i64 40
  %121 = bitcast float* %120 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %121, i32 0, i32 1, i32 1)
  %122 = getelementptr inbounds float, float* %100, i64 48
  %123 = bitcast float* %122 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %123, i32 0, i32 1, i32 1)
  %124 = getelementptr inbounds float, float* %103, i64 48
  %125 = bitcast float* %124 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %125, i32 0, i32 1, i32 1)
  %126 = bitcast float* %100 to <8 x float>*
  %127 = load <8 x float>, <8 x float>* %126, align 1, !tbaa !12
  %128 = or i64 %99, 8
  %129 = getelementptr inbounds float, float* %5, i64 %128
  %130 = bitcast float* %129 to <8 x float>*
  %131 = load <8 x float>, <8 x float>* %130, align 1, !tbaa !12
  %132 = add nuw nsw i64 %99, 16
  %133 = getelementptr inbounds float, float* %5, i64 %132
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 1, !tbaa !12
  %136 = add nuw nsw i64 %99, 24
  %137 = getelementptr inbounds float, float* %5, i64 %136
  %138 = bitcast float* %137 to <8 x float>*
  %139 = load <8 x float>, <8 x float>* %138, align 1, !tbaa !12
  %140 = add nuw nsw i64 %99, 32
  %141 = getelementptr inbounds float, float* %5, i64 %140
  %142 = bitcast float* %141 to <8 x float>*
  %143 = load <8 x float>, <8 x float>* %142, align 1, !tbaa !12
  %144 = add nuw nsw i64 %99, 40
  %145 = getelementptr inbounds float, float* %5, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 1, !tbaa !12
  %148 = trunc i64 %99 to i32
  %149 = add nsw i32 %91, %148
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds float, float* %3, i64 %150
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !tbaa !12
  %154 = add nsw i32 %149, 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds float, float* %3, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 1, !tbaa !12
  %159 = add nsw i32 %149, 16
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float* %3, i64 %160
  %162 = bitcast float* %161 to <8 x float>*
  %163 = load <8 x float>, <8 x float>* %162, align 1, !tbaa !12
  %164 = add nsw i32 %149, 24
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %3, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nsw i32 %149, 32
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds float, float* %3, i64 %170
  %172 = bitcast float* %171 to <8 x float>*
  %173 = load <8 x float>, <8 x float>* %172, align 1, !tbaa !12
  %174 = add nsw i32 %149, 40
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %3, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 1, !tbaa !12
  %179 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %153, <8 x float> %25, <8 x float> %127) #10
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %158, <8 x float> %25, <8 x float> %131) #10
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %163, <8 x float> %25, <8 x float> %135) #10
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %25, <8 x float> %139) #10
  %183 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %25, <8 x float> %143) #10
  %184 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %25, <8 x float> %147) #10
  store <8 x float> %179, <8 x float>* %126, align 1, !tbaa !12
  store <8 x float> %180, <8 x float>* %130, align 1, !tbaa !12
  store <8 x float> %181, <8 x float>* %134, align 1, !tbaa !12
  store <8 x float> %182, <8 x float>* %138, align 1, !tbaa !12
  store <8 x float> %183, <8 x float>* %142, align 1, !tbaa !12
  store <8 x float> %184, <8 x float>* %146, align 1, !tbaa !12
  %185 = add nuw nsw i64 %99, 48
  %186 = icmp ult i64 %185, %89
  br i1 %186, label %98, label %92

187:                                              ; preds = %193
  br i1 %87, label %188, label %539

188:                                              ; preds = %187
  %189 = trunc i64 %31 to i32
  %190 = mul nsw i32 %86, %189
  %191 = sext i32 %190 to i64
  %192 = zext i32 %86 to i64
  br label %281

193:                                              ; preds = %93, %193
  %194 = phi i64 [ 0, %93 ], [ %273, %193 ]
  %195 = getelementptr inbounds float, float* %5, i64 %194
  %196 = getelementptr inbounds float, float* %195, i64 8
  %197 = bitcast float* %196 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %197, i32 0, i32 1, i32 1)
  %198 = getelementptr inbounds float, float* %3, i64 %194
  %199 = getelementptr inbounds float, float* %198, i64 8
  %200 = bitcast float* %199 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %200, i32 0, i32 1, i32 1)
  %201 = getelementptr inbounds float, float* %195, i64 16
  %202 = bitcast float* %201 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %202, i32 0, i32 1, i32 1)
  %203 = getelementptr inbounds float, float* %198, i64 16
  %204 = bitcast float* %203 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %204, i32 0, i32 1, i32 1)
  %205 = getelementptr inbounds float, float* %195, i64 24
  %206 = bitcast float* %205 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %206, i32 0, i32 1, i32 1)
  %207 = getelementptr inbounds float, float* %198, i64 24
  %208 = bitcast float* %207 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %208, i32 0, i32 1, i32 1)
  %209 = getelementptr inbounds float, float* %195, i64 32
  %210 = bitcast float* %209 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %210, i32 0, i32 1, i32 1)
  %211 = getelementptr inbounds float, float* %198, i64 32
  %212 = bitcast float* %211 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %212, i32 0, i32 1, i32 1)
  %213 = getelementptr inbounds float, float* %195, i64 40
  %214 = bitcast float* %213 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %214, i32 0, i32 1, i32 1)
  %215 = getelementptr inbounds float, float* %198, i64 40
  %216 = bitcast float* %215 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %216, i32 0, i32 1, i32 1)
  %217 = getelementptr inbounds float, float* %195, i64 48
  %218 = bitcast float* %217 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %218, i32 0, i32 1, i32 1)
  %219 = getelementptr inbounds float, float* %198, i64 48
  %220 = bitcast float* %219 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %220, i32 0, i32 1, i32 1)
  %221 = bitcast float* %195 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 1, !tbaa !12
  %223 = or i64 %194, 8
  %224 = getelementptr inbounds float, float* %5, i64 %223
  %225 = bitcast float* %224 to <8 x float>*
  %226 = load <8 x float>, <8 x float>* %225, align 1, !tbaa !12
  %227 = add nuw nsw i64 %194, 16
  %228 = getelementptr inbounds float, float* %5, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  %230 = load <8 x float>, <8 x float>* %229, align 1, !tbaa !12
  %231 = add nuw nsw i64 %194, 24
  %232 = getelementptr inbounds float, float* %5, i64 %231
  %233 = bitcast float* %232 to <8 x float>*
  %234 = load <8 x float>, <8 x float>* %233, align 1, !tbaa !12
  %235 = add nuw nsw i64 %194, 32
  %236 = getelementptr inbounds float, float* %5, i64 %235
  %237 = bitcast float* %236 to <8 x float>*
  %238 = load <8 x float>, <8 x float>* %237, align 1, !tbaa !12
  %239 = add nuw nsw i64 %194, 40
  %240 = getelementptr inbounds float, float* %5, i64 %239
  %241 = bitcast float* %240 to <8 x float>*
  %242 = load <8 x float>, <8 x float>* %241, align 1, !tbaa !12
  %243 = add nsw i64 %194, %96
  %244 = getelementptr inbounds float, float* %3, i64 %243
  %245 = bitcast float* %244 to <8 x float>*
  %246 = load <8 x float>, <8 x float>* %245, align 1, !tbaa !12
  %247 = add nsw i64 %243, 8
  %248 = getelementptr inbounds float, float* %3, i64 %247
  %249 = bitcast float* %248 to <8 x float>*
  %250 = load <8 x float>, <8 x float>* %249, align 1, !tbaa !12
  %251 = add nsw i64 %243, 16
  %252 = getelementptr inbounds float, float* %3, i64 %251
  %253 = bitcast float* %252 to <8 x float>*
  %254 = load <8 x float>, <8 x float>* %253, align 1, !tbaa !12
  %255 = add nsw i64 %243, 24
  %256 = getelementptr inbounds float, float* %3, i64 %255
  %257 = bitcast float* %256 to <8 x float>*
  %258 = load <8 x float>, <8 x float>* %257, align 1, !tbaa !12
  %259 = add nsw i64 %243, 32
  %260 = getelementptr inbounds float, float* %3, i64 %259
  %261 = bitcast float* %260 to <8 x float>*
  %262 = load <8 x float>, <8 x float>* %261, align 1, !tbaa !12
  %263 = add nsw i64 %243, 40
  %264 = getelementptr inbounds float, float* %3, i64 %263
  %265 = bitcast float* %264 to <8 x float>*
  %266 = load <8 x float>, <8 x float>* %265, align 1, !tbaa !12
  %267 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %246, <8 x float> %30, <8 x float> %222) #10
  %268 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %250, <8 x float> %30, <8 x float> %226) #10
  %269 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %254, <8 x float> %30, <8 x float> %230) #10
  %270 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %258, <8 x float> %30, <8 x float> %234) #10
  %271 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %262, <8 x float> %30, <8 x float> %238) #10
  %272 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %266, <8 x float> %30, <8 x float> %242) #10
  store <8 x float> %267, <8 x float>* %221, align 1, !tbaa !12
  store <8 x float> %268, <8 x float>* %225, align 1, !tbaa !12
  store <8 x float> %269, <8 x float>* %229, align 1, !tbaa !12
  store <8 x float> %270, <8 x float>* %233, align 1, !tbaa !12
  store <8 x float> %271, <8 x float>* %237, align 1, !tbaa !12
  store <8 x float> %272, <8 x float>* %241, align 1, !tbaa !12
  %273 = add nuw nsw i64 %194, 48
  %274 = icmp ult i64 %273, %97
  br i1 %274, label %193, label %187

275:                                              ; preds = %281
  br i1 %87, label %276, label %539

276:                                              ; preds = %275
  %277 = trunc i64 %36 to i32
  %278 = mul nsw i32 %86, %277
  %279 = sext i32 %278 to i64
  %280 = zext i32 %86 to i64
  br label %369

281:                                              ; preds = %188, %281
  %282 = phi i64 [ 0, %188 ], [ %361, %281 ]
  %283 = getelementptr inbounds float, float* %5, i64 %282
  %284 = getelementptr inbounds float, float* %283, i64 8
  %285 = bitcast float* %284 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %285, i32 0, i32 1, i32 1)
  %286 = getelementptr inbounds float, float* %3, i64 %282
  %287 = getelementptr inbounds float, float* %286, i64 8
  %288 = bitcast float* %287 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %288, i32 0, i32 1, i32 1)
  %289 = getelementptr inbounds float, float* %283, i64 16
  %290 = bitcast float* %289 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %290, i32 0, i32 1, i32 1)
  %291 = getelementptr inbounds float, float* %286, i64 16
  %292 = bitcast float* %291 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %292, i32 0, i32 1, i32 1)
  %293 = getelementptr inbounds float, float* %283, i64 24
  %294 = bitcast float* %293 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %294, i32 0, i32 1, i32 1)
  %295 = getelementptr inbounds float, float* %286, i64 24
  %296 = bitcast float* %295 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %296, i32 0, i32 1, i32 1)
  %297 = getelementptr inbounds float, float* %283, i64 32
  %298 = bitcast float* %297 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %298, i32 0, i32 1, i32 1)
  %299 = getelementptr inbounds float, float* %286, i64 32
  %300 = bitcast float* %299 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %300, i32 0, i32 1, i32 1)
  %301 = getelementptr inbounds float, float* %283, i64 40
  %302 = bitcast float* %301 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %302, i32 0, i32 1, i32 1)
  %303 = getelementptr inbounds float, float* %286, i64 40
  %304 = bitcast float* %303 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %304, i32 0, i32 1, i32 1)
  %305 = getelementptr inbounds float, float* %283, i64 48
  %306 = bitcast float* %305 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %306, i32 0, i32 1, i32 1)
  %307 = getelementptr inbounds float, float* %286, i64 48
  %308 = bitcast float* %307 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %308, i32 0, i32 1, i32 1)
  %309 = bitcast float* %283 to <8 x float>*
  %310 = load <8 x float>, <8 x float>* %309, align 1, !tbaa !12
  %311 = or i64 %282, 8
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = bitcast float* %312 to <8 x float>*
  %314 = load <8 x float>, <8 x float>* %313, align 1, !tbaa !12
  %315 = add nuw nsw i64 %282, 16
  %316 = getelementptr inbounds float, float* %5, i64 %315
  %317 = bitcast float* %316 to <8 x float>*
  %318 = load <8 x float>, <8 x float>* %317, align 1, !tbaa !12
  %319 = add nuw nsw i64 %282, 24
  %320 = getelementptr inbounds float, float* %5, i64 %319
  %321 = bitcast float* %320 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 1, !tbaa !12
  %323 = add nuw nsw i64 %282, 32
  %324 = getelementptr inbounds float, float* %5, i64 %323
  %325 = bitcast float* %324 to <8 x float>*
  %326 = load <8 x float>, <8 x float>* %325, align 1, !tbaa !12
  %327 = add nuw nsw i64 %282, 40
  %328 = getelementptr inbounds float, float* %5, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  %330 = load <8 x float>, <8 x float>* %329, align 1, !tbaa !12
  %331 = add nsw i64 %282, %191
  %332 = getelementptr inbounds float, float* %3, i64 %331
  %333 = bitcast float* %332 to <8 x float>*
  %334 = load <8 x float>, <8 x float>* %333, align 1, !tbaa !12
  %335 = add nsw i64 %331, 8
  %336 = getelementptr inbounds float, float* %3, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  %338 = load <8 x float>, <8 x float>* %337, align 1, !tbaa !12
  %339 = add nsw i64 %331, 16
  %340 = getelementptr inbounds float, float* %3, i64 %339
  %341 = bitcast float* %340 to <8 x float>*
  %342 = load <8 x float>, <8 x float>* %341, align 1, !tbaa !12
  %343 = add nsw i64 %331, 24
  %344 = getelementptr inbounds float, float* %3, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  %346 = load <8 x float>, <8 x float>* %345, align 1, !tbaa !12
  %347 = add nsw i64 %331, 32
  %348 = getelementptr inbounds float, float* %3, i64 %347
  %349 = bitcast float* %348 to <8 x float>*
  %350 = load <8 x float>, <8 x float>* %349, align 1, !tbaa !12
  %351 = add nsw i64 %331, 40
  %352 = getelementptr inbounds float, float* %3, i64 %351
  %353 = bitcast float* %352 to <8 x float>*
  %354 = load <8 x float>, <8 x float>* %353, align 1, !tbaa !12
  %355 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %334, <8 x float> %35, <8 x float> %310) #10
  %356 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %338, <8 x float> %35, <8 x float> %314) #10
  %357 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %342, <8 x float> %35, <8 x float> %318) #10
  %358 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %346, <8 x float> %35, <8 x float> %322) #10
  %359 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %350, <8 x float> %35, <8 x float> %326) #10
  %360 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %354, <8 x float> %35, <8 x float> %330) #10
  store <8 x float> %355, <8 x float>* %309, align 1, !tbaa !12
  store <8 x float> %356, <8 x float>* %313, align 1, !tbaa !12
  store <8 x float> %357, <8 x float>* %317, align 1, !tbaa !12
  store <8 x float> %358, <8 x float>* %321, align 1, !tbaa !12
  store <8 x float> %359, <8 x float>* %325, align 1, !tbaa !12
  store <8 x float> %360, <8 x float>* %329, align 1, !tbaa !12
  %361 = add nuw nsw i64 %282, 48
  %362 = icmp ult i64 %361, %192
  br i1 %362, label %281, label %275

363:                                              ; preds = %369
  br i1 %87, label %364, label %539

364:                                              ; preds = %363
  %365 = trunc i64 %41 to i32
  %366 = mul nsw i32 %86, %365
  %367 = sext i32 %366 to i64
  %368 = zext i32 %86 to i64
  br label %457

369:                                              ; preds = %276, %369
  %370 = phi i64 [ 0, %276 ], [ %449, %369 ]
  %371 = getelementptr inbounds float, float* %5, i64 %370
  %372 = getelementptr inbounds float, float* %371, i64 8
  %373 = bitcast float* %372 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %373, i32 0, i32 1, i32 1)
  %374 = getelementptr inbounds float, float* %3, i64 %370
  %375 = getelementptr inbounds float, float* %374, i64 8
  %376 = bitcast float* %375 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %376, i32 0, i32 1, i32 1)
  %377 = getelementptr inbounds float, float* %371, i64 16
  %378 = bitcast float* %377 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %378, i32 0, i32 1, i32 1)
  %379 = getelementptr inbounds float, float* %374, i64 16
  %380 = bitcast float* %379 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %380, i32 0, i32 1, i32 1)
  %381 = getelementptr inbounds float, float* %371, i64 24
  %382 = bitcast float* %381 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %382, i32 0, i32 1, i32 1)
  %383 = getelementptr inbounds float, float* %374, i64 24
  %384 = bitcast float* %383 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %384, i32 0, i32 1, i32 1)
  %385 = getelementptr inbounds float, float* %371, i64 32
  %386 = bitcast float* %385 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %386, i32 0, i32 1, i32 1)
  %387 = getelementptr inbounds float, float* %374, i64 32
  %388 = bitcast float* %387 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %388, i32 0, i32 1, i32 1)
  %389 = getelementptr inbounds float, float* %371, i64 40
  %390 = bitcast float* %389 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %390, i32 0, i32 1, i32 1)
  %391 = getelementptr inbounds float, float* %374, i64 40
  %392 = bitcast float* %391 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %392, i32 0, i32 1, i32 1)
  %393 = getelementptr inbounds float, float* %371, i64 48
  %394 = bitcast float* %393 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %394, i32 0, i32 1, i32 1)
  %395 = getelementptr inbounds float, float* %374, i64 48
  %396 = bitcast float* %395 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %396, i32 0, i32 1, i32 1)
  %397 = bitcast float* %371 to <8 x float>*
  %398 = load <8 x float>, <8 x float>* %397, align 1, !tbaa !12
  %399 = or i64 %370, 8
  %400 = getelementptr inbounds float, float* %5, i64 %399
  %401 = bitcast float* %400 to <8 x float>*
  %402 = load <8 x float>, <8 x float>* %401, align 1, !tbaa !12
  %403 = add nuw nsw i64 %370, 16
  %404 = getelementptr inbounds float, float* %5, i64 %403
  %405 = bitcast float* %404 to <8 x float>*
  %406 = load <8 x float>, <8 x float>* %405, align 1, !tbaa !12
  %407 = add nuw nsw i64 %370, 24
  %408 = getelementptr inbounds float, float* %5, i64 %407
  %409 = bitcast float* %408 to <8 x float>*
  %410 = load <8 x float>, <8 x float>* %409, align 1, !tbaa !12
  %411 = add nuw nsw i64 %370, 32
  %412 = getelementptr inbounds float, float* %5, i64 %411
  %413 = bitcast float* %412 to <8 x float>*
  %414 = load <8 x float>, <8 x float>* %413, align 1, !tbaa !12
  %415 = add nuw nsw i64 %370, 40
  %416 = getelementptr inbounds float, float* %5, i64 %415
  %417 = bitcast float* %416 to <8 x float>*
  %418 = load <8 x float>, <8 x float>* %417, align 1, !tbaa !12
  %419 = add nsw i64 %370, %279
  %420 = getelementptr inbounds float, float* %3, i64 %419
  %421 = bitcast float* %420 to <8 x float>*
  %422 = load <8 x float>, <8 x float>* %421, align 1, !tbaa !12
  %423 = add nsw i64 %419, 8
  %424 = getelementptr inbounds float, float* %3, i64 %423
  %425 = bitcast float* %424 to <8 x float>*
  %426 = load <8 x float>, <8 x float>* %425, align 1, !tbaa !12
  %427 = add nsw i64 %419, 16
  %428 = getelementptr inbounds float, float* %3, i64 %427
  %429 = bitcast float* %428 to <8 x float>*
  %430 = load <8 x float>, <8 x float>* %429, align 1, !tbaa !12
  %431 = add nsw i64 %419, 24
  %432 = getelementptr inbounds float, float* %3, i64 %431
  %433 = bitcast float* %432 to <8 x float>*
  %434 = load <8 x float>, <8 x float>* %433, align 1, !tbaa !12
  %435 = add nsw i64 %419, 32
  %436 = getelementptr inbounds float, float* %3, i64 %435
  %437 = bitcast float* %436 to <8 x float>*
  %438 = load <8 x float>, <8 x float>* %437, align 1, !tbaa !12
  %439 = add nsw i64 %419, 40
  %440 = getelementptr inbounds float, float* %3, i64 %439
  %441 = bitcast float* %440 to <8 x float>*
  %442 = load <8 x float>, <8 x float>* %441, align 1, !tbaa !12
  %443 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %422, <8 x float> %40, <8 x float> %398) #10
  %444 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %426, <8 x float> %40, <8 x float> %402) #10
  %445 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %430, <8 x float> %40, <8 x float> %406) #10
  %446 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %434, <8 x float> %40, <8 x float> %410) #10
  %447 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %438, <8 x float> %40, <8 x float> %414) #10
  %448 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %442, <8 x float> %40, <8 x float> %418) #10
  store <8 x float> %443, <8 x float>* %397, align 1, !tbaa !12
  store <8 x float> %444, <8 x float>* %401, align 1, !tbaa !12
  store <8 x float> %445, <8 x float>* %405, align 1, !tbaa !12
  store <8 x float> %446, <8 x float>* %409, align 1, !tbaa !12
  store <8 x float> %447, <8 x float>* %413, align 1, !tbaa !12
  store <8 x float> %448, <8 x float>* %417, align 1, !tbaa !12
  %449 = add nuw nsw i64 %370, 48
  %450 = icmp ult i64 %449, %280
  br i1 %450, label %369, label %363

451:                                              ; preds = %457
  br i1 %87, label %452, label %539

452:                                              ; preds = %451
  %453 = trunc i64 %46 to i32
  %454 = mul nsw i32 %86, %453
  %455 = sext i32 %454 to i64
  %456 = zext i32 %86 to i64
  br label %546

457:                                              ; preds = %364, %457
  %458 = phi i64 [ 0, %364 ], [ %537, %457 ]
  %459 = getelementptr inbounds float, float* %5, i64 %458
  %460 = getelementptr inbounds float, float* %459, i64 8
  %461 = bitcast float* %460 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %461, i32 0, i32 1, i32 1)
  %462 = getelementptr inbounds float, float* %3, i64 %458
  %463 = getelementptr inbounds float, float* %462, i64 8
  %464 = bitcast float* %463 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %464, i32 0, i32 1, i32 1)
  %465 = getelementptr inbounds float, float* %459, i64 16
  %466 = bitcast float* %465 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %466, i32 0, i32 1, i32 1)
  %467 = getelementptr inbounds float, float* %462, i64 16
  %468 = bitcast float* %467 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %468, i32 0, i32 1, i32 1)
  %469 = getelementptr inbounds float, float* %459, i64 24
  %470 = bitcast float* %469 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %470, i32 0, i32 1, i32 1)
  %471 = getelementptr inbounds float, float* %462, i64 24
  %472 = bitcast float* %471 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %472, i32 0, i32 1, i32 1)
  %473 = getelementptr inbounds float, float* %459, i64 32
  %474 = bitcast float* %473 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %474, i32 0, i32 1, i32 1)
  %475 = getelementptr inbounds float, float* %462, i64 32
  %476 = bitcast float* %475 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %476, i32 0, i32 1, i32 1)
  %477 = getelementptr inbounds float, float* %459, i64 40
  %478 = bitcast float* %477 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %478, i32 0, i32 1, i32 1)
  %479 = getelementptr inbounds float, float* %462, i64 40
  %480 = bitcast float* %479 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %480, i32 0, i32 1, i32 1)
  %481 = getelementptr inbounds float, float* %459, i64 48
  %482 = bitcast float* %481 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %482, i32 0, i32 1, i32 1)
  %483 = getelementptr inbounds float, float* %462, i64 48
  %484 = bitcast float* %483 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %484, i32 0, i32 1, i32 1)
  %485 = bitcast float* %459 to <8 x float>*
  %486 = load <8 x float>, <8 x float>* %485, align 1, !tbaa !12
  %487 = or i64 %458, 8
  %488 = getelementptr inbounds float, float* %5, i64 %487
  %489 = bitcast float* %488 to <8 x float>*
  %490 = load <8 x float>, <8 x float>* %489, align 1, !tbaa !12
  %491 = add nuw nsw i64 %458, 16
  %492 = getelementptr inbounds float, float* %5, i64 %491
  %493 = bitcast float* %492 to <8 x float>*
  %494 = load <8 x float>, <8 x float>* %493, align 1, !tbaa !12
  %495 = add nuw nsw i64 %458, 24
  %496 = getelementptr inbounds float, float* %5, i64 %495
  %497 = bitcast float* %496 to <8 x float>*
  %498 = load <8 x float>, <8 x float>* %497, align 1, !tbaa !12
  %499 = add nuw nsw i64 %458, 32
  %500 = getelementptr inbounds float, float* %5, i64 %499
  %501 = bitcast float* %500 to <8 x float>*
  %502 = load <8 x float>, <8 x float>* %501, align 1, !tbaa !12
  %503 = add nuw nsw i64 %458, 40
  %504 = getelementptr inbounds float, float* %5, i64 %503
  %505 = bitcast float* %504 to <8 x float>*
  %506 = load <8 x float>, <8 x float>* %505, align 1, !tbaa !12
  %507 = add nsw i64 %458, %367
  %508 = getelementptr inbounds float, float* %3, i64 %507
  %509 = bitcast float* %508 to <8 x float>*
  %510 = load <8 x float>, <8 x float>* %509, align 1, !tbaa !12
  %511 = add nsw i64 %507, 8
  %512 = getelementptr inbounds float, float* %3, i64 %511
  %513 = bitcast float* %512 to <8 x float>*
  %514 = load <8 x float>, <8 x float>* %513, align 1, !tbaa !12
  %515 = add nsw i64 %507, 16
  %516 = getelementptr inbounds float, float* %3, i64 %515
  %517 = bitcast float* %516 to <8 x float>*
  %518 = load <8 x float>, <8 x float>* %517, align 1, !tbaa !12
  %519 = add nsw i64 %507, 24
  %520 = getelementptr inbounds float, float* %3, i64 %519
  %521 = bitcast float* %520 to <8 x float>*
  %522 = load <8 x float>, <8 x float>* %521, align 1, !tbaa !12
  %523 = add nsw i64 %507, 32
  %524 = getelementptr inbounds float, float* %3, i64 %523
  %525 = bitcast float* %524 to <8 x float>*
  %526 = load <8 x float>, <8 x float>* %525, align 1, !tbaa !12
  %527 = add nsw i64 %507, 40
  %528 = getelementptr inbounds float, float* %3, i64 %527
  %529 = bitcast float* %528 to <8 x float>*
  %530 = load <8 x float>, <8 x float>* %529, align 1, !tbaa !12
  %531 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %510, <8 x float> %45, <8 x float> %486) #10
  %532 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %514, <8 x float> %45, <8 x float> %490) #10
  %533 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %518, <8 x float> %45, <8 x float> %494) #10
  %534 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %522, <8 x float> %45, <8 x float> %498) #10
  %535 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %526, <8 x float> %45, <8 x float> %502) #10
  %536 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %530, <8 x float> %45, <8 x float> %506) #10
  store <8 x float> %531, <8 x float>* %485, align 1, !tbaa !12
  store <8 x float> %532, <8 x float>* %489, align 1, !tbaa !12
  store <8 x float> %533, <8 x float>* %493, align 1, !tbaa !12
  store <8 x float> %534, <8 x float>* %497, align 1, !tbaa !12
  store <8 x float> %535, <8 x float>* %501, align 1, !tbaa !12
  store <8 x float> %536, <8 x float>* %505, align 1, !tbaa !12
  %537 = add nuw nsw i64 %458, 48
  %538 = icmp ult i64 %537, %368
  br i1 %538, label %457, label %451

539:                                              ; preds = %546, %92, %187, %275, %363, %451
  %540 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %541 = icmp sgt i32 %540, 0
  br i1 %541, label %542, label %1164

542:                                              ; preds = %539
  %543 = zext i32 %540 to i64
  %544 = trunc i64 %51 to i32
  %545 = mul nsw i32 %540, %544
  br label %634

546:                                              ; preds = %452, %546
  %547 = phi i64 [ 0, %452 ], [ %626, %546 ]
  %548 = getelementptr inbounds float, float* %5, i64 %547
  %549 = getelementptr inbounds float, float* %548, i64 8
  %550 = bitcast float* %549 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %550, i32 0, i32 1, i32 1)
  %551 = getelementptr inbounds float, float* %3, i64 %547
  %552 = getelementptr inbounds float, float* %551, i64 8
  %553 = bitcast float* %552 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %553, i32 0, i32 1, i32 1)
  %554 = getelementptr inbounds float, float* %548, i64 16
  %555 = bitcast float* %554 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %555, i32 0, i32 1, i32 1)
  %556 = getelementptr inbounds float, float* %551, i64 16
  %557 = bitcast float* %556 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %557, i32 0, i32 1, i32 1)
  %558 = getelementptr inbounds float, float* %548, i64 24
  %559 = bitcast float* %558 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %559, i32 0, i32 1, i32 1)
  %560 = getelementptr inbounds float, float* %551, i64 24
  %561 = bitcast float* %560 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %561, i32 0, i32 1, i32 1)
  %562 = getelementptr inbounds float, float* %548, i64 32
  %563 = bitcast float* %562 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %563, i32 0, i32 1, i32 1)
  %564 = getelementptr inbounds float, float* %551, i64 32
  %565 = bitcast float* %564 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %565, i32 0, i32 1, i32 1)
  %566 = getelementptr inbounds float, float* %548, i64 40
  %567 = bitcast float* %566 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %567, i32 0, i32 1, i32 1)
  %568 = getelementptr inbounds float, float* %551, i64 40
  %569 = bitcast float* %568 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %569, i32 0, i32 1, i32 1)
  %570 = getelementptr inbounds float, float* %548, i64 48
  %571 = bitcast float* %570 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %571, i32 0, i32 1, i32 1)
  %572 = getelementptr inbounds float, float* %551, i64 48
  %573 = bitcast float* %572 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %573, i32 0, i32 1, i32 1)
  %574 = bitcast float* %548 to <8 x float>*
  %575 = load <8 x float>, <8 x float>* %574, align 1, !tbaa !12
  %576 = or i64 %547, 8
  %577 = getelementptr inbounds float, float* %5, i64 %576
  %578 = bitcast float* %577 to <8 x float>*
  %579 = load <8 x float>, <8 x float>* %578, align 1, !tbaa !12
  %580 = add nuw nsw i64 %547, 16
  %581 = getelementptr inbounds float, float* %5, i64 %580
  %582 = bitcast float* %581 to <8 x float>*
  %583 = load <8 x float>, <8 x float>* %582, align 1, !tbaa !12
  %584 = add nuw nsw i64 %547, 24
  %585 = getelementptr inbounds float, float* %5, i64 %584
  %586 = bitcast float* %585 to <8 x float>*
  %587 = load <8 x float>, <8 x float>* %586, align 1, !tbaa !12
  %588 = add nuw nsw i64 %547, 32
  %589 = getelementptr inbounds float, float* %5, i64 %588
  %590 = bitcast float* %589 to <8 x float>*
  %591 = load <8 x float>, <8 x float>* %590, align 1, !tbaa !12
  %592 = add nuw nsw i64 %547, 40
  %593 = getelementptr inbounds float, float* %5, i64 %592
  %594 = bitcast float* %593 to <8 x float>*
  %595 = load <8 x float>, <8 x float>* %594, align 1, !tbaa !12
  %596 = add nsw i64 %547, %455
  %597 = getelementptr inbounds float, float* %3, i64 %596
  %598 = bitcast float* %597 to <8 x float>*
  %599 = load <8 x float>, <8 x float>* %598, align 1, !tbaa !12
  %600 = add nsw i64 %596, 8
  %601 = getelementptr inbounds float, float* %3, i64 %600
  %602 = bitcast float* %601 to <8 x float>*
  %603 = load <8 x float>, <8 x float>* %602, align 1, !tbaa !12
  %604 = add nsw i64 %596, 16
  %605 = getelementptr inbounds float, float* %3, i64 %604
  %606 = bitcast float* %605 to <8 x float>*
  %607 = load <8 x float>, <8 x float>* %606, align 1, !tbaa !12
  %608 = add nsw i64 %596, 24
  %609 = getelementptr inbounds float, float* %3, i64 %608
  %610 = bitcast float* %609 to <8 x float>*
  %611 = load <8 x float>, <8 x float>* %610, align 1, !tbaa !12
  %612 = add nsw i64 %596, 32
  %613 = getelementptr inbounds float, float* %3, i64 %612
  %614 = bitcast float* %613 to <8 x float>*
  %615 = load <8 x float>, <8 x float>* %614, align 1, !tbaa !12
  %616 = add nsw i64 %596, 40
  %617 = getelementptr inbounds float, float* %3, i64 %616
  %618 = bitcast float* %617 to <8 x float>*
  %619 = load <8 x float>, <8 x float>* %618, align 1, !tbaa !12
  %620 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %599, <8 x float> %50, <8 x float> %575) #10
  %621 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %603, <8 x float> %50, <8 x float> %579) #10
  %622 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %607, <8 x float> %50, <8 x float> %583) #10
  %623 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %611, <8 x float> %50, <8 x float> %587) #10
  %624 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %615, <8 x float> %50, <8 x float> %591) #10
  %625 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %619, <8 x float> %50, <8 x float> %595) #10
  store <8 x float> %620, <8 x float>* %574, align 1, !tbaa !12
  store <8 x float> %621, <8 x float>* %578, align 1, !tbaa !12
  store <8 x float> %622, <8 x float>* %582, align 1, !tbaa !12
  store <8 x float> %623, <8 x float>* %586, align 1, !tbaa !12
  store <8 x float> %624, <8 x float>* %590, align 1, !tbaa !12
  store <8 x float> %625, <8 x float>* %594, align 1, !tbaa !12
  %626 = add nuw nsw i64 %547, 48
  %627 = icmp ult i64 %626, %456
  br i1 %627, label %546, label %539

628:                                              ; preds = %634
  br i1 %541, label %629, label %1075

629:                                              ; preds = %628
  %630 = trunc i64 %56 to i32
  %631 = mul nsw i32 %540, %630
  %632 = sext i32 %631 to i64
  %633 = zext i32 %540 to i64
  br label %729

634:                                              ; preds = %542, %634
  %635 = phi i64 [ 0, %542 ], [ %721, %634 ]
  %636 = getelementptr inbounds float, float* %5, i64 %635
  %637 = getelementptr inbounds float, float* %636, i64 8
  %638 = bitcast float* %637 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %638, i32 0, i32 1, i32 1)
  %639 = getelementptr inbounds float, float* %3, i64 %635
  %640 = getelementptr inbounds float, float* %639, i64 8
  %641 = bitcast float* %640 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %641, i32 0, i32 1, i32 1)
  %642 = getelementptr inbounds float, float* %636, i64 16
  %643 = bitcast float* %642 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %643, i32 0, i32 1, i32 1)
  %644 = getelementptr inbounds float, float* %639, i64 16
  %645 = bitcast float* %644 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %645, i32 0, i32 1, i32 1)
  %646 = getelementptr inbounds float, float* %636, i64 24
  %647 = bitcast float* %646 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %647, i32 0, i32 1, i32 1)
  %648 = getelementptr inbounds float, float* %639, i64 24
  %649 = bitcast float* %648 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %649, i32 0, i32 1, i32 1)
  %650 = getelementptr inbounds float, float* %636, i64 32
  %651 = bitcast float* %650 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %651, i32 0, i32 1, i32 1)
  %652 = getelementptr inbounds float, float* %639, i64 32
  %653 = bitcast float* %652 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %653, i32 0, i32 1, i32 1)
  %654 = getelementptr inbounds float, float* %636, i64 40
  %655 = bitcast float* %654 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %655, i32 0, i32 1, i32 1)
  %656 = getelementptr inbounds float, float* %639, i64 40
  %657 = bitcast float* %656 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %657, i32 0, i32 1, i32 1)
  %658 = getelementptr inbounds float, float* %636, i64 48
  %659 = bitcast float* %658 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %659, i32 0, i32 1, i32 1)
  %660 = getelementptr inbounds float, float* %639, i64 48
  %661 = bitcast float* %660 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %661, i32 0, i32 1, i32 1)
  %662 = bitcast float* %636 to <8 x float>*
  %663 = load <8 x float>, <8 x float>* %662, align 1, !tbaa !12
  %664 = or i64 %635, 8
  %665 = getelementptr inbounds float, float* %5, i64 %664
  %666 = bitcast float* %665 to <8 x float>*
  %667 = load <8 x float>, <8 x float>* %666, align 1, !tbaa !12
  %668 = add nuw nsw i64 %635, 16
  %669 = getelementptr inbounds float, float* %5, i64 %668
  %670 = bitcast float* %669 to <8 x float>*
  %671 = load <8 x float>, <8 x float>* %670, align 1, !tbaa !12
  %672 = add nuw nsw i64 %635, 24
  %673 = getelementptr inbounds float, float* %5, i64 %672
  %674 = bitcast float* %673 to <8 x float>*
  %675 = load <8 x float>, <8 x float>* %674, align 1, !tbaa !12
  %676 = add nuw nsw i64 %635, 32
  %677 = getelementptr inbounds float, float* %5, i64 %676
  %678 = bitcast float* %677 to <8 x float>*
  %679 = load <8 x float>, <8 x float>* %678, align 1, !tbaa !12
  %680 = add nuw nsw i64 %635, 40
  %681 = getelementptr inbounds float, float* %5, i64 %680
  %682 = bitcast float* %681 to <8 x float>*
  %683 = load <8 x float>, <8 x float>* %682, align 1, !tbaa !12
  %684 = trunc i64 %635 to i32
  %685 = add nsw i32 %545, %684
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds float, float* %3, i64 %686
  %688 = bitcast float* %687 to <8 x float>*
  %689 = load <8 x float>, <8 x float>* %688, align 1, !tbaa !12
  %690 = add nsw i32 %685, 8
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds float, float* %3, i64 %691
  %693 = bitcast float* %692 to <8 x float>*
  %694 = load <8 x float>, <8 x float>* %693, align 1, !tbaa !12
  %695 = add nsw i32 %685, 16
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds float, float* %3, i64 %696
  %698 = bitcast float* %697 to <8 x float>*
  %699 = load <8 x float>, <8 x float>* %698, align 1, !tbaa !12
  %700 = add nsw i32 %685, 24
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds float, float* %3, i64 %701
  %703 = bitcast float* %702 to <8 x float>*
  %704 = load <8 x float>, <8 x float>* %703, align 1, !tbaa !12
  %705 = add nsw i32 %685, 32
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds float, float* %3, i64 %706
  %708 = bitcast float* %707 to <8 x float>*
  %709 = load <8 x float>, <8 x float>* %708, align 1, !tbaa !12
  %710 = add nsw i32 %685, 40
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds float, float* %3, i64 %711
  %713 = bitcast float* %712 to <8 x float>*
  %714 = load <8 x float>, <8 x float>* %713, align 1, !tbaa !12
  %715 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %689, <8 x float> %55, <8 x float> %663) #10
  %716 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %694, <8 x float> %55, <8 x float> %667) #10
  %717 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %699, <8 x float> %55, <8 x float> %671) #10
  %718 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %704, <8 x float> %55, <8 x float> %675) #10
  %719 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %709, <8 x float> %55, <8 x float> %679) #10
  %720 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %714, <8 x float> %55, <8 x float> %683) #10
  store <8 x float> %715, <8 x float>* %662, align 1, !tbaa !12
  store <8 x float> %716, <8 x float>* %666, align 1, !tbaa !12
  store <8 x float> %717, <8 x float>* %670, align 1, !tbaa !12
  store <8 x float> %718, <8 x float>* %674, align 1, !tbaa !12
  store <8 x float> %719, <8 x float>* %678, align 1, !tbaa !12
  store <8 x float> %720, <8 x float>* %682, align 1, !tbaa !12
  %721 = add nuw nsw i64 %635, 48
  %722 = icmp ult i64 %721, %543
  br i1 %722, label %634, label %628

723:                                              ; preds = %729
  br i1 %541, label %724, label %1075

724:                                              ; preds = %723
  %725 = trunc i64 %61 to i32
  %726 = mul nsw i32 %540, %725
  %727 = sext i32 %726 to i64
  %728 = zext i32 %540 to i64
  br label %817

729:                                              ; preds = %629, %729
  %730 = phi i64 [ 0, %629 ], [ %809, %729 ]
  %731 = getelementptr inbounds float, float* %5, i64 %730
  %732 = getelementptr inbounds float, float* %731, i64 8
  %733 = bitcast float* %732 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %733, i32 0, i32 1, i32 1)
  %734 = getelementptr inbounds float, float* %3, i64 %730
  %735 = getelementptr inbounds float, float* %734, i64 8
  %736 = bitcast float* %735 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %736, i32 0, i32 1, i32 1)
  %737 = getelementptr inbounds float, float* %731, i64 16
  %738 = bitcast float* %737 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %738, i32 0, i32 1, i32 1)
  %739 = getelementptr inbounds float, float* %734, i64 16
  %740 = bitcast float* %739 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %740, i32 0, i32 1, i32 1)
  %741 = getelementptr inbounds float, float* %731, i64 24
  %742 = bitcast float* %741 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %742, i32 0, i32 1, i32 1)
  %743 = getelementptr inbounds float, float* %734, i64 24
  %744 = bitcast float* %743 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %744, i32 0, i32 1, i32 1)
  %745 = getelementptr inbounds float, float* %731, i64 32
  %746 = bitcast float* %745 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %746, i32 0, i32 1, i32 1)
  %747 = getelementptr inbounds float, float* %734, i64 32
  %748 = bitcast float* %747 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %748, i32 0, i32 1, i32 1)
  %749 = getelementptr inbounds float, float* %731, i64 40
  %750 = bitcast float* %749 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %750, i32 0, i32 1, i32 1)
  %751 = getelementptr inbounds float, float* %734, i64 40
  %752 = bitcast float* %751 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %752, i32 0, i32 1, i32 1)
  %753 = getelementptr inbounds float, float* %731, i64 48
  %754 = bitcast float* %753 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %754, i32 0, i32 1, i32 1)
  %755 = getelementptr inbounds float, float* %734, i64 48
  %756 = bitcast float* %755 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %756, i32 0, i32 1, i32 1)
  %757 = bitcast float* %731 to <8 x float>*
  %758 = load <8 x float>, <8 x float>* %757, align 1, !tbaa !12
  %759 = or i64 %730, 8
  %760 = getelementptr inbounds float, float* %5, i64 %759
  %761 = bitcast float* %760 to <8 x float>*
  %762 = load <8 x float>, <8 x float>* %761, align 1, !tbaa !12
  %763 = add nuw nsw i64 %730, 16
  %764 = getelementptr inbounds float, float* %5, i64 %763
  %765 = bitcast float* %764 to <8 x float>*
  %766 = load <8 x float>, <8 x float>* %765, align 1, !tbaa !12
  %767 = add nuw nsw i64 %730, 24
  %768 = getelementptr inbounds float, float* %5, i64 %767
  %769 = bitcast float* %768 to <8 x float>*
  %770 = load <8 x float>, <8 x float>* %769, align 1, !tbaa !12
  %771 = add nuw nsw i64 %730, 32
  %772 = getelementptr inbounds float, float* %5, i64 %771
  %773 = bitcast float* %772 to <8 x float>*
  %774 = load <8 x float>, <8 x float>* %773, align 1, !tbaa !12
  %775 = add nuw nsw i64 %730, 40
  %776 = getelementptr inbounds float, float* %5, i64 %775
  %777 = bitcast float* %776 to <8 x float>*
  %778 = load <8 x float>, <8 x float>* %777, align 1, !tbaa !12
  %779 = add nsw i64 %730, %632
  %780 = getelementptr inbounds float, float* %3, i64 %779
  %781 = bitcast float* %780 to <8 x float>*
  %782 = load <8 x float>, <8 x float>* %781, align 1, !tbaa !12
  %783 = add nsw i64 %779, 8
  %784 = getelementptr inbounds float, float* %3, i64 %783
  %785 = bitcast float* %784 to <8 x float>*
  %786 = load <8 x float>, <8 x float>* %785, align 1, !tbaa !12
  %787 = add nsw i64 %779, 16
  %788 = getelementptr inbounds float, float* %3, i64 %787
  %789 = bitcast float* %788 to <8 x float>*
  %790 = load <8 x float>, <8 x float>* %789, align 1, !tbaa !12
  %791 = add nsw i64 %779, 24
  %792 = getelementptr inbounds float, float* %3, i64 %791
  %793 = bitcast float* %792 to <8 x float>*
  %794 = load <8 x float>, <8 x float>* %793, align 1, !tbaa !12
  %795 = add nsw i64 %779, 32
  %796 = getelementptr inbounds float, float* %3, i64 %795
  %797 = bitcast float* %796 to <8 x float>*
  %798 = load <8 x float>, <8 x float>* %797, align 1, !tbaa !12
  %799 = add nsw i64 %779, 40
  %800 = getelementptr inbounds float, float* %3, i64 %799
  %801 = bitcast float* %800 to <8 x float>*
  %802 = load <8 x float>, <8 x float>* %801, align 1, !tbaa !12
  %803 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %782, <8 x float> %60, <8 x float> %758) #10
  %804 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %786, <8 x float> %60, <8 x float> %762) #10
  %805 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %790, <8 x float> %60, <8 x float> %766) #10
  %806 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %794, <8 x float> %60, <8 x float> %770) #10
  %807 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %798, <8 x float> %60, <8 x float> %774) #10
  %808 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %802, <8 x float> %60, <8 x float> %778) #10
  store <8 x float> %803, <8 x float>* %757, align 1, !tbaa !12
  store <8 x float> %804, <8 x float>* %761, align 1, !tbaa !12
  store <8 x float> %805, <8 x float>* %765, align 1, !tbaa !12
  store <8 x float> %806, <8 x float>* %769, align 1, !tbaa !12
  store <8 x float> %807, <8 x float>* %773, align 1, !tbaa !12
  store <8 x float> %808, <8 x float>* %777, align 1, !tbaa !12
  %809 = add nuw nsw i64 %730, 48
  %810 = icmp ult i64 %809, %633
  br i1 %810, label %729, label %723

811:                                              ; preds = %817
  br i1 %541, label %812, label %1075

812:                                              ; preds = %811
  %813 = trunc i64 %66 to i32
  %814 = mul nsw i32 %540, %813
  %815 = sext i32 %814 to i64
  %816 = zext i32 %540 to i64
  br label %905

817:                                              ; preds = %724, %817
  %818 = phi i64 [ 0, %724 ], [ %897, %817 ]
  %819 = getelementptr inbounds float, float* %5, i64 %818
  %820 = getelementptr inbounds float, float* %819, i64 8
  %821 = bitcast float* %820 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %821, i32 0, i32 1, i32 1)
  %822 = getelementptr inbounds float, float* %3, i64 %818
  %823 = getelementptr inbounds float, float* %822, i64 8
  %824 = bitcast float* %823 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %824, i32 0, i32 1, i32 1)
  %825 = getelementptr inbounds float, float* %819, i64 16
  %826 = bitcast float* %825 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %826, i32 0, i32 1, i32 1)
  %827 = getelementptr inbounds float, float* %822, i64 16
  %828 = bitcast float* %827 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %828, i32 0, i32 1, i32 1)
  %829 = getelementptr inbounds float, float* %819, i64 24
  %830 = bitcast float* %829 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %830, i32 0, i32 1, i32 1)
  %831 = getelementptr inbounds float, float* %822, i64 24
  %832 = bitcast float* %831 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %832, i32 0, i32 1, i32 1)
  %833 = getelementptr inbounds float, float* %819, i64 32
  %834 = bitcast float* %833 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %834, i32 0, i32 1, i32 1)
  %835 = getelementptr inbounds float, float* %822, i64 32
  %836 = bitcast float* %835 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %836, i32 0, i32 1, i32 1)
  %837 = getelementptr inbounds float, float* %819, i64 40
  %838 = bitcast float* %837 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %838, i32 0, i32 1, i32 1)
  %839 = getelementptr inbounds float, float* %822, i64 40
  %840 = bitcast float* %839 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %840, i32 0, i32 1, i32 1)
  %841 = getelementptr inbounds float, float* %819, i64 48
  %842 = bitcast float* %841 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %842, i32 0, i32 1, i32 1)
  %843 = getelementptr inbounds float, float* %822, i64 48
  %844 = bitcast float* %843 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %844, i32 0, i32 1, i32 1)
  %845 = bitcast float* %819 to <8 x float>*
  %846 = load <8 x float>, <8 x float>* %845, align 1, !tbaa !12
  %847 = or i64 %818, 8
  %848 = getelementptr inbounds float, float* %5, i64 %847
  %849 = bitcast float* %848 to <8 x float>*
  %850 = load <8 x float>, <8 x float>* %849, align 1, !tbaa !12
  %851 = add nuw nsw i64 %818, 16
  %852 = getelementptr inbounds float, float* %5, i64 %851
  %853 = bitcast float* %852 to <8 x float>*
  %854 = load <8 x float>, <8 x float>* %853, align 1, !tbaa !12
  %855 = add nuw nsw i64 %818, 24
  %856 = getelementptr inbounds float, float* %5, i64 %855
  %857 = bitcast float* %856 to <8 x float>*
  %858 = load <8 x float>, <8 x float>* %857, align 1, !tbaa !12
  %859 = add nuw nsw i64 %818, 32
  %860 = getelementptr inbounds float, float* %5, i64 %859
  %861 = bitcast float* %860 to <8 x float>*
  %862 = load <8 x float>, <8 x float>* %861, align 1, !tbaa !12
  %863 = add nuw nsw i64 %818, 40
  %864 = getelementptr inbounds float, float* %5, i64 %863
  %865 = bitcast float* %864 to <8 x float>*
  %866 = load <8 x float>, <8 x float>* %865, align 1, !tbaa !12
  %867 = add nsw i64 %818, %727
  %868 = getelementptr inbounds float, float* %3, i64 %867
  %869 = bitcast float* %868 to <8 x float>*
  %870 = load <8 x float>, <8 x float>* %869, align 1, !tbaa !12
  %871 = add nsw i64 %867, 8
  %872 = getelementptr inbounds float, float* %3, i64 %871
  %873 = bitcast float* %872 to <8 x float>*
  %874 = load <8 x float>, <8 x float>* %873, align 1, !tbaa !12
  %875 = add nsw i64 %867, 16
  %876 = getelementptr inbounds float, float* %3, i64 %875
  %877 = bitcast float* %876 to <8 x float>*
  %878 = load <8 x float>, <8 x float>* %877, align 1, !tbaa !12
  %879 = add nsw i64 %867, 24
  %880 = getelementptr inbounds float, float* %3, i64 %879
  %881 = bitcast float* %880 to <8 x float>*
  %882 = load <8 x float>, <8 x float>* %881, align 1, !tbaa !12
  %883 = add nsw i64 %867, 32
  %884 = getelementptr inbounds float, float* %3, i64 %883
  %885 = bitcast float* %884 to <8 x float>*
  %886 = load <8 x float>, <8 x float>* %885, align 1, !tbaa !12
  %887 = add nsw i64 %867, 40
  %888 = getelementptr inbounds float, float* %3, i64 %887
  %889 = bitcast float* %888 to <8 x float>*
  %890 = load <8 x float>, <8 x float>* %889, align 1, !tbaa !12
  %891 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %870, <8 x float> %65, <8 x float> %846) #10
  %892 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %874, <8 x float> %65, <8 x float> %850) #10
  %893 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %878, <8 x float> %65, <8 x float> %854) #10
  %894 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %882, <8 x float> %65, <8 x float> %858) #10
  %895 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %886, <8 x float> %65, <8 x float> %862) #10
  %896 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %890, <8 x float> %65, <8 x float> %866) #10
  store <8 x float> %891, <8 x float>* %845, align 1, !tbaa !12
  store <8 x float> %892, <8 x float>* %849, align 1, !tbaa !12
  store <8 x float> %893, <8 x float>* %853, align 1, !tbaa !12
  store <8 x float> %894, <8 x float>* %857, align 1, !tbaa !12
  store <8 x float> %895, <8 x float>* %861, align 1, !tbaa !12
  store <8 x float> %896, <8 x float>* %865, align 1, !tbaa !12
  %897 = add nuw nsw i64 %818, 48
  %898 = icmp ult i64 %897, %728
  br i1 %898, label %817, label %811

899:                                              ; preds = %905
  br i1 %541, label %900, label %1075

900:                                              ; preds = %899
  %901 = trunc i64 %71 to i32
  %902 = mul nsw i32 %540, %901
  %903 = sext i32 %902 to i64
  %904 = zext i32 %540 to i64
  br label %993

905:                                              ; preds = %812, %905
  %906 = phi i64 [ 0, %812 ], [ %985, %905 ]
  %907 = getelementptr inbounds float, float* %5, i64 %906
  %908 = getelementptr inbounds float, float* %907, i64 8
  %909 = bitcast float* %908 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %909, i32 0, i32 1, i32 1)
  %910 = getelementptr inbounds float, float* %3, i64 %906
  %911 = getelementptr inbounds float, float* %910, i64 8
  %912 = bitcast float* %911 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %912, i32 0, i32 1, i32 1)
  %913 = getelementptr inbounds float, float* %907, i64 16
  %914 = bitcast float* %913 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %914, i32 0, i32 1, i32 1)
  %915 = getelementptr inbounds float, float* %910, i64 16
  %916 = bitcast float* %915 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %916, i32 0, i32 1, i32 1)
  %917 = getelementptr inbounds float, float* %907, i64 24
  %918 = bitcast float* %917 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %918, i32 0, i32 1, i32 1)
  %919 = getelementptr inbounds float, float* %910, i64 24
  %920 = bitcast float* %919 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %920, i32 0, i32 1, i32 1)
  %921 = getelementptr inbounds float, float* %907, i64 32
  %922 = bitcast float* %921 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %922, i32 0, i32 1, i32 1)
  %923 = getelementptr inbounds float, float* %910, i64 32
  %924 = bitcast float* %923 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %924, i32 0, i32 1, i32 1)
  %925 = getelementptr inbounds float, float* %907, i64 40
  %926 = bitcast float* %925 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %926, i32 0, i32 1, i32 1)
  %927 = getelementptr inbounds float, float* %910, i64 40
  %928 = bitcast float* %927 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %928, i32 0, i32 1, i32 1)
  %929 = getelementptr inbounds float, float* %907, i64 48
  %930 = bitcast float* %929 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %930, i32 0, i32 1, i32 1)
  %931 = getelementptr inbounds float, float* %910, i64 48
  %932 = bitcast float* %931 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %932, i32 0, i32 1, i32 1)
  %933 = bitcast float* %907 to <8 x float>*
  %934 = load <8 x float>, <8 x float>* %933, align 1, !tbaa !12
  %935 = or i64 %906, 8
  %936 = getelementptr inbounds float, float* %5, i64 %935
  %937 = bitcast float* %936 to <8 x float>*
  %938 = load <8 x float>, <8 x float>* %937, align 1, !tbaa !12
  %939 = add nuw nsw i64 %906, 16
  %940 = getelementptr inbounds float, float* %5, i64 %939
  %941 = bitcast float* %940 to <8 x float>*
  %942 = load <8 x float>, <8 x float>* %941, align 1, !tbaa !12
  %943 = add nuw nsw i64 %906, 24
  %944 = getelementptr inbounds float, float* %5, i64 %943
  %945 = bitcast float* %944 to <8 x float>*
  %946 = load <8 x float>, <8 x float>* %945, align 1, !tbaa !12
  %947 = add nuw nsw i64 %906, 32
  %948 = getelementptr inbounds float, float* %5, i64 %947
  %949 = bitcast float* %948 to <8 x float>*
  %950 = load <8 x float>, <8 x float>* %949, align 1, !tbaa !12
  %951 = add nuw nsw i64 %906, 40
  %952 = getelementptr inbounds float, float* %5, i64 %951
  %953 = bitcast float* %952 to <8 x float>*
  %954 = load <8 x float>, <8 x float>* %953, align 1, !tbaa !12
  %955 = add nsw i64 %906, %815
  %956 = getelementptr inbounds float, float* %3, i64 %955
  %957 = bitcast float* %956 to <8 x float>*
  %958 = load <8 x float>, <8 x float>* %957, align 1, !tbaa !12
  %959 = add nsw i64 %955, 8
  %960 = getelementptr inbounds float, float* %3, i64 %959
  %961 = bitcast float* %960 to <8 x float>*
  %962 = load <8 x float>, <8 x float>* %961, align 1, !tbaa !12
  %963 = add nsw i64 %955, 16
  %964 = getelementptr inbounds float, float* %3, i64 %963
  %965 = bitcast float* %964 to <8 x float>*
  %966 = load <8 x float>, <8 x float>* %965, align 1, !tbaa !12
  %967 = add nsw i64 %955, 24
  %968 = getelementptr inbounds float, float* %3, i64 %967
  %969 = bitcast float* %968 to <8 x float>*
  %970 = load <8 x float>, <8 x float>* %969, align 1, !tbaa !12
  %971 = add nsw i64 %955, 32
  %972 = getelementptr inbounds float, float* %3, i64 %971
  %973 = bitcast float* %972 to <8 x float>*
  %974 = load <8 x float>, <8 x float>* %973, align 1, !tbaa !12
  %975 = add nsw i64 %955, 40
  %976 = getelementptr inbounds float, float* %3, i64 %975
  %977 = bitcast float* %976 to <8 x float>*
  %978 = load <8 x float>, <8 x float>* %977, align 1, !tbaa !12
  %979 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %958, <8 x float> %70, <8 x float> %934) #10
  %980 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %962, <8 x float> %70, <8 x float> %938) #10
  %981 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %966, <8 x float> %70, <8 x float> %942) #10
  %982 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %970, <8 x float> %70, <8 x float> %946) #10
  %983 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %974, <8 x float> %70, <8 x float> %950) #10
  %984 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %978, <8 x float> %70, <8 x float> %954) #10
  store <8 x float> %979, <8 x float>* %933, align 1, !tbaa !12
  store <8 x float> %980, <8 x float>* %937, align 1, !tbaa !12
  store <8 x float> %981, <8 x float>* %941, align 1, !tbaa !12
  store <8 x float> %982, <8 x float>* %945, align 1, !tbaa !12
  store <8 x float> %983, <8 x float>* %949, align 1, !tbaa !12
  store <8 x float> %984, <8 x float>* %953, align 1, !tbaa !12
  %985 = add nuw nsw i64 %906, 48
  %986 = icmp ult i64 %985, %816
  br i1 %986, label %905, label %899

987:                                              ; preds = %993
  br i1 %541, label %988, label %1075

988:                                              ; preds = %987
  %989 = trunc i64 %76 to i32
  %990 = mul nsw i32 %540, %989
  %991 = sext i32 %990 to i64
  %992 = zext i32 %540 to i64
  br label %1082

993:                                              ; preds = %900, %993
  %994 = phi i64 [ 0, %900 ], [ %1073, %993 ]
  %995 = getelementptr inbounds float, float* %5, i64 %994
  %996 = getelementptr inbounds float, float* %995, i64 8
  %997 = bitcast float* %996 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %997, i32 0, i32 1, i32 1)
  %998 = getelementptr inbounds float, float* %3, i64 %994
  %999 = getelementptr inbounds float, float* %998, i64 8
  %1000 = bitcast float* %999 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1000, i32 0, i32 1, i32 1)
  %1001 = getelementptr inbounds float, float* %995, i64 16
  %1002 = bitcast float* %1001 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1002, i32 0, i32 1, i32 1)
  %1003 = getelementptr inbounds float, float* %998, i64 16
  %1004 = bitcast float* %1003 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1004, i32 0, i32 1, i32 1)
  %1005 = getelementptr inbounds float, float* %995, i64 24
  %1006 = bitcast float* %1005 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1006, i32 0, i32 1, i32 1)
  %1007 = getelementptr inbounds float, float* %998, i64 24
  %1008 = bitcast float* %1007 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1008, i32 0, i32 1, i32 1)
  %1009 = getelementptr inbounds float, float* %995, i64 32
  %1010 = bitcast float* %1009 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1010, i32 0, i32 1, i32 1)
  %1011 = getelementptr inbounds float, float* %998, i64 32
  %1012 = bitcast float* %1011 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1012, i32 0, i32 1, i32 1)
  %1013 = getelementptr inbounds float, float* %995, i64 40
  %1014 = bitcast float* %1013 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1014, i32 0, i32 1, i32 1)
  %1015 = getelementptr inbounds float, float* %998, i64 40
  %1016 = bitcast float* %1015 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1016, i32 0, i32 1, i32 1)
  %1017 = getelementptr inbounds float, float* %995, i64 48
  %1018 = bitcast float* %1017 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1018, i32 0, i32 1, i32 1)
  %1019 = getelementptr inbounds float, float* %998, i64 48
  %1020 = bitcast float* %1019 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1020, i32 0, i32 1, i32 1)
  %1021 = bitcast float* %995 to <8 x float>*
  %1022 = load <8 x float>, <8 x float>* %1021, align 1, !tbaa !12
  %1023 = or i64 %994, 8
  %1024 = getelementptr inbounds float, float* %5, i64 %1023
  %1025 = bitcast float* %1024 to <8 x float>*
  %1026 = load <8 x float>, <8 x float>* %1025, align 1, !tbaa !12
  %1027 = add nuw nsw i64 %994, 16
  %1028 = getelementptr inbounds float, float* %5, i64 %1027
  %1029 = bitcast float* %1028 to <8 x float>*
  %1030 = load <8 x float>, <8 x float>* %1029, align 1, !tbaa !12
  %1031 = add nuw nsw i64 %994, 24
  %1032 = getelementptr inbounds float, float* %5, i64 %1031
  %1033 = bitcast float* %1032 to <8 x float>*
  %1034 = load <8 x float>, <8 x float>* %1033, align 1, !tbaa !12
  %1035 = add nuw nsw i64 %994, 32
  %1036 = getelementptr inbounds float, float* %5, i64 %1035
  %1037 = bitcast float* %1036 to <8 x float>*
  %1038 = load <8 x float>, <8 x float>* %1037, align 1, !tbaa !12
  %1039 = add nuw nsw i64 %994, 40
  %1040 = getelementptr inbounds float, float* %5, i64 %1039
  %1041 = bitcast float* %1040 to <8 x float>*
  %1042 = load <8 x float>, <8 x float>* %1041, align 1, !tbaa !12
  %1043 = add nsw i64 %994, %903
  %1044 = getelementptr inbounds float, float* %3, i64 %1043
  %1045 = bitcast float* %1044 to <8 x float>*
  %1046 = load <8 x float>, <8 x float>* %1045, align 1, !tbaa !12
  %1047 = add nsw i64 %1043, 8
  %1048 = getelementptr inbounds float, float* %3, i64 %1047
  %1049 = bitcast float* %1048 to <8 x float>*
  %1050 = load <8 x float>, <8 x float>* %1049, align 1, !tbaa !12
  %1051 = add nsw i64 %1043, 16
  %1052 = getelementptr inbounds float, float* %3, i64 %1051
  %1053 = bitcast float* %1052 to <8 x float>*
  %1054 = load <8 x float>, <8 x float>* %1053, align 1, !tbaa !12
  %1055 = add nsw i64 %1043, 24
  %1056 = getelementptr inbounds float, float* %3, i64 %1055
  %1057 = bitcast float* %1056 to <8 x float>*
  %1058 = load <8 x float>, <8 x float>* %1057, align 1, !tbaa !12
  %1059 = add nsw i64 %1043, 32
  %1060 = getelementptr inbounds float, float* %3, i64 %1059
  %1061 = bitcast float* %1060 to <8 x float>*
  %1062 = load <8 x float>, <8 x float>* %1061, align 1, !tbaa !12
  %1063 = add nsw i64 %1043, 40
  %1064 = getelementptr inbounds float, float* %3, i64 %1063
  %1065 = bitcast float* %1064 to <8 x float>*
  %1066 = load <8 x float>, <8 x float>* %1065, align 1, !tbaa !12
  %1067 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1046, <8 x float> %75, <8 x float> %1022) #10
  %1068 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1050, <8 x float> %75, <8 x float> %1026) #10
  %1069 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1054, <8 x float> %75, <8 x float> %1030) #10
  %1070 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1058, <8 x float> %75, <8 x float> %1034) #10
  %1071 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1062, <8 x float> %75, <8 x float> %1038) #10
  %1072 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1066, <8 x float> %75, <8 x float> %1042) #10
  store <8 x float> %1067, <8 x float>* %1021, align 1, !tbaa !12
  store <8 x float> %1068, <8 x float>* %1025, align 1, !tbaa !12
  store <8 x float> %1069, <8 x float>* %1029, align 1, !tbaa !12
  store <8 x float> %1070, <8 x float>* %1033, align 1, !tbaa !12
  store <8 x float> %1071, <8 x float>* %1037, align 1, !tbaa !12
  store <8 x float> %1072, <8 x float>* %1041, align 1, !tbaa !12
  %1073 = add nuw nsw i64 %994, 48
  %1074 = icmp ult i64 %1073, %904
  br i1 %1074, label %993, label %987

1075:                                             ; preds = %1082, %628, %723, %811, %899, %987
  %1076 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %1077 = icmp sgt i32 %1076, 0
  br i1 %1077, label %1078, label %1164

1078:                                             ; preds = %1075
  %1079 = zext i32 %1076 to i64
  %1080 = trunc i64 %81 to i32
  %1081 = mul nsw i32 %1076, %1080
  br label %1169

1082:                                             ; preds = %988, %1082
  %1083 = phi i64 [ 0, %988 ], [ %1162, %1082 ]
  %1084 = getelementptr inbounds float, float* %5, i64 %1083
  %1085 = getelementptr inbounds float, float* %1084, i64 8
  %1086 = bitcast float* %1085 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1086, i32 0, i32 1, i32 1)
  %1087 = getelementptr inbounds float, float* %3, i64 %1083
  %1088 = getelementptr inbounds float, float* %1087, i64 8
  %1089 = bitcast float* %1088 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1089, i32 0, i32 1, i32 1)
  %1090 = getelementptr inbounds float, float* %1084, i64 16
  %1091 = bitcast float* %1090 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1091, i32 0, i32 1, i32 1)
  %1092 = getelementptr inbounds float, float* %1087, i64 16
  %1093 = bitcast float* %1092 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1093, i32 0, i32 1, i32 1)
  %1094 = getelementptr inbounds float, float* %1084, i64 24
  %1095 = bitcast float* %1094 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1095, i32 0, i32 1, i32 1)
  %1096 = getelementptr inbounds float, float* %1087, i64 24
  %1097 = bitcast float* %1096 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1097, i32 0, i32 1, i32 1)
  %1098 = getelementptr inbounds float, float* %1084, i64 32
  %1099 = bitcast float* %1098 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1099, i32 0, i32 1, i32 1)
  %1100 = getelementptr inbounds float, float* %1087, i64 32
  %1101 = bitcast float* %1100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1101, i32 0, i32 1, i32 1)
  %1102 = getelementptr inbounds float, float* %1084, i64 40
  %1103 = bitcast float* %1102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1103, i32 0, i32 1, i32 1)
  %1104 = getelementptr inbounds float, float* %1087, i64 40
  %1105 = bitcast float* %1104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1105, i32 0, i32 1, i32 1)
  %1106 = getelementptr inbounds float, float* %1084, i64 48
  %1107 = bitcast float* %1106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1107, i32 0, i32 1, i32 1)
  %1108 = getelementptr inbounds float, float* %1087, i64 48
  %1109 = bitcast float* %1108 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1109, i32 0, i32 1, i32 1)
  %1110 = bitcast float* %1084 to <8 x float>*
  %1111 = load <8 x float>, <8 x float>* %1110, align 1, !tbaa !12
  %1112 = or i64 %1083, 8
  %1113 = getelementptr inbounds float, float* %5, i64 %1112
  %1114 = bitcast float* %1113 to <8 x float>*
  %1115 = load <8 x float>, <8 x float>* %1114, align 1, !tbaa !12
  %1116 = add nuw nsw i64 %1083, 16
  %1117 = getelementptr inbounds float, float* %5, i64 %1116
  %1118 = bitcast float* %1117 to <8 x float>*
  %1119 = load <8 x float>, <8 x float>* %1118, align 1, !tbaa !12
  %1120 = add nuw nsw i64 %1083, 24
  %1121 = getelementptr inbounds float, float* %5, i64 %1120
  %1122 = bitcast float* %1121 to <8 x float>*
  %1123 = load <8 x float>, <8 x float>* %1122, align 1, !tbaa !12
  %1124 = add nuw nsw i64 %1083, 32
  %1125 = getelementptr inbounds float, float* %5, i64 %1124
  %1126 = bitcast float* %1125 to <8 x float>*
  %1127 = load <8 x float>, <8 x float>* %1126, align 1, !tbaa !12
  %1128 = add nuw nsw i64 %1083, 40
  %1129 = getelementptr inbounds float, float* %5, i64 %1128
  %1130 = bitcast float* %1129 to <8 x float>*
  %1131 = load <8 x float>, <8 x float>* %1130, align 1, !tbaa !12
  %1132 = add nsw i64 %1083, %991
  %1133 = getelementptr inbounds float, float* %3, i64 %1132
  %1134 = bitcast float* %1133 to <8 x float>*
  %1135 = load <8 x float>, <8 x float>* %1134, align 1, !tbaa !12
  %1136 = add nsw i64 %1132, 8
  %1137 = getelementptr inbounds float, float* %3, i64 %1136
  %1138 = bitcast float* %1137 to <8 x float>*
  %1139 = load <8 x float>, <8 x float>* %1138, align 1, !tbaa !12
  %1140 = add nsw i64 %1132, 16
  %1141 = getelementptr inbounds float, float* %3, i64 %1140
  %1142 = bitcast float* %1141 to <8 x float>*
  %1143 = load <8 x float>, <8 x float>* %1142, align 1, !tbaa !12
  %1144 = add nsw i64 %1132, 24
  %1145 = getelementptr inbounds float, float* %3, i64 %1144
  %1146 = bitcast float* %1145 to <8 x float>*
  %1147 = load <8 x float>, <8 x float>* %1146, align 1, !tbaa !12
  %1148 = add nsw i64 %1132, 32
  %1149 = getelementptr inbounds float, float* %3, i64 %1148
  %1150 = bitcast float* %1149 to <8 x float>*
  %1151 = load <8 x float>, <8 x float>* %1150, align 1, !tbaa !12
  %1152 = add nsw i64 %1132, 40
  %1153 = getelementptr inbounds float, float* %3, i64 %1152
  %1154 = bitcast float* %1153 to <8 x float>*
  %1155 = load <8 x float>, <8 x float>* %1154, align 1, !tbaa !12
  %1156 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1135, <8 x float> %80, <8 x float> %1111) #10
  %1157 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1139, <8 x float> %80, <8 x float> %1115) #10
  %1158 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1143, <8 x float> %80, <8 x float> %1119) #10
  %1159 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1147, <8 x float> %80, <8 x float> %1123) #10
  %1160 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1151, <8 x float> %80, <8 x float> %1127) #10
  %1161 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1155, <8 x float> %80, <8 x float> %1131) #10
  store <8 x float> %1156, <8 x float>* %1110, align 1, !tbaa !12
  store <8 x float> %1157, <8 x float>* %1114, align 1, !tbaa !12
  store <8 x float> %1158, <8 x float>* %1118, align 1, !tbaa !12
  store <8 x float> %1159, <8 x float>* %1122, align 1, !tbaa !12
  store <8 x float> %1160, <8 x float>* %1126, align 1, !tbaa !12
  store <8 x float> %1161, <8 x float>* %1130, align 1, !tbaa !12
  %1162 = add nuw nsw i64 %1083, 48
  %1163 = icmp ult i64 %1162, %992
  br i1 %1163, label %1082, label %1075

1164:                                             ; preds = %1169, %20, %539, %1075
  %1165 = add nuw nsw i64 %21, 13
  %1166 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1167 = sext i32 %1166 to i64
  %1168 = icmp slt i64 %1165, %1167
  br i1 %1168, label %20, label %8

1169:                                             ; preds = %1078, %1169
  %1170 = phi i64 [ 0, %1078 ], [ %1256, %1169 ]
  %1171 = getelementptr inbounds float, float* %5, i64 %1170
  %1172 = getelementptr inbounds float, float* %1171, i64 8
  %1173 = bitcast float* %1172 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1173, i32 0, i32 1, i32 1)
  %1174 = getelementptr inbounds float, float* %3, i64 %1170
  %1175 = getelementptr inbounds float, float* %1174, i64 8
  %1176 = bitcast float* %1175 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1176, i32 0, i32 1, i32 1)
  %1177 = getelementptr inbounds float, float* %1171, i64 16
  %1178 = bitcast float* %1177 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1178, i32 0, i32 1, i32 1)
  %1179 = getelementptr inbounds float, float* %1174, i64 16
  %1180 = bitcast float* %1179 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1180, i32 0, i32 1, i32 1)
  %1181 = getelementptr inbounds float, float* %1171, i64 24
  %1182 = bitcast float* %1181 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1182, i32 0, i32 1, i32 1)
  %1183 = getelementptr inbounds float, float* %1174, i64 24
  %1184 = bitcast float* %1183 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1184, i32 0, i32 1, i32 1)
  %1185 = getelementptr inbounds float, float* %1171, i64 32
  %1186 = bitcast float* %1185 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1186, i32 0, i32 1, i32 1)
  %1187 = getelementptr inbounds float, float* %1174, i64 32
  %1188 = bitcast float* %1187 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1188, i32 0, i32 1, i32 1)
  %1189 = getelementptr inbounds float, float* %1171, i64 40
  %1190 = bitcast float* %1189 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1190, i32 0, i32 1, i32 1)
  %1191 = getelementptr inbounds float, float* %1174, i64 40
  %1192 = bitcast float* %1191 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1192, i32 0, i32 1, i32 1)
  %1193 = getelementptr inbounds float, float* %1171, i64 48
  %1194 = bitcast float* %1193 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1194, i32 0, i32 1, i32 1)
  %1195 = getelementptr inbounds float, float* %1174, i64 48
  %1196 = bitcast float* %1195 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1196, i32 0, i32 1, i32 1)
  %1197 = bitcast float* %1171 to <8 x float>*
  %1198 = load <8 x float>, <8 x float>* %1197, align 1, !tbaa !12
  %1199 = or i64 %1170, 8
  %1200 = getelementptr inbounds float, float* %5, i64 %1199
  %1201 = bitcast float* %1200 to <8 x float>*
  %1202 = load <8 x float>, <8 x float>* %1201, align 1, !tbaa !12
  %1203 = add nuw nsw i64 %1170, 16
  %1204 = getelementptr inbounds float, float* %5, i64 %1203
  %1205 = bitcast float* %1204 to <8 x float>*
  %1206 = load <8 x float>, <8 x float>* %1205, align 1, !tbaa !12
  %1207 = add nuw nsw i64 %1170, 24
  %1208 = getelementptr inbounds float, float* %5, i64 %1207
  %1209 = bitcast float* %1208 to <8 x float>*
  %1210 = load <8 x float>, <8 x float>* %1209, align 1, !tbaa !12
  %1211 = add nuw nsw i64 %1170, 32
  %1212 = getelementptr inbounds float, float* %5, i64 %1211
  %1213 = bitcast float* %1212 to <8 x float>*
  %1214 = load <8 x float>, <8 x float>* %1213, align 1, !tbaa !12
  %1215 = add nuw nsw i64 %1170, 40
  %1216 = getelementptr inbounds float, float* %5, i64 %1215
  %1217 = bitcast float* %1216 to <8 x float>*
  %1218 = load <8 x float>, <8 x float>* %1217, align 1, !tbaa !12
  %1219 = trunc i64 %1170 to i32
  %1220 = add nsw i32 %1081, %1219
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds float, float* %3, i64 %1221
  %1223 = bitcast float* %1222 to <8 x float>*
  %1224 = load <8 x float>, <8 x float>* %1223, align 1, !tbaa !12
  %1225 = add nsw i32 %1220, 8
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds float, float* %3, i64 %1226
  %1228 = bitcast float* %1227 to <8 x float>*
  %1229 = load <8 x float>, <8 x float>* %1228, align 1, !tbaa !12
  %1230 = add nsw i32 %1220, 16
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds float, float* %3, i64 %1231
  %1233 = bitcast float* %1232 to <8 x float>*
  %1234 = load <8 x float>, <8 x float>* %1233, align 1, !tbaa !12
  %1235 = add nsw i32 %1220, 24
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds float, float* %3, i64 %1236
  %1238 = bitcast float* %1237 to <8 x float>*
  %1239 = load <8 x float>, <8 x float>* %1238, align 1, !tbaa !12
  %1240 = add nsw i32 %1220, 32
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds float, float* %3, i64 %1241
  %1243 = bitcast float* %1242 to <8 x float>*
  %1244 = load <8 x float>, <8 x float>* %1243, align 1, !tbaa !12
  %1245 = add nsw i32 %1220, 40
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds float, float* %3, i64 %1246
  %1248 = bitcast float* %1247 to <8 x float>*
  %1249 = load <8 x float>, <8 x float>* %1248, align 1, !tbaa !12
  %1250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1224, <8 x float> %85, <8 x float> %1198) #10
  %1251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1229, <8 x float> %85, <8 x float> %1202) #10
  %1252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1234, <8 x float> %85, <8 x float> %1206) #10
  %1253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1239, <8 x float> %85, <8 x float> %1210) #10
  %1254 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1244, <8 x float> %85, <8 x float> %1214) #10
  %1255 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1249, <8 x float> %85, <8 x float> %1218) #10
  store <8 x float> %1250, <8 x float>* %1197, align 1, !tbaa !12
  store <8 x float> %1251, <8 x float>* %1201, align 1, !tbaa !12
  store <8 x float> %1252, <8 x float>* %1205, align 1, !tbaa !12
  store <8 x float> %1253, <8 x float>* %1209, align 1, !tbaa !12
  store <8 x float> %1254, <8 x float>* %1213, align 1, !tbaa !12
  store <8 x float> %1255, <8 x float>* %1217, align 1, !tbaa !12
  %1256 = add nuw nsw i64 %1170, 48
  %1257 = icmp ult i64 %1256, %1079
  br i1 %1257, label %1169, label %1164
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 169
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui6_uk13.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
