; ModuleID = 'codes/matvec_ui3_uk12.cpp'
source_filename = "codes/matvec_ui3_uk12.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui3_uk12.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 24
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 96
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %25

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %9 to i64
  %12 = icmp sgt i32 %9, 0
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = sext i32 %9 to i64
  %16 = sext i32 %9 to i64
  %17 = sext i32 %9 to i64
  %18 = sext i32 %9 to i64
  %19 = sext i32 %9 to i64
  %20 = sext i32 %9 to i64
  %21 = sext i32 %9 to i64
  %22 = sext i32 %9 to i64
  %23 = sext i32 %9 to i64
  %24 = sext i32 %6 to i64
  br label %37

25:                                               ; preds = %624, %0
  %26 = tail call i64 @llvm.x86.rdtsc()
  %27 = uitofp i64 %26 to double
  %28 = fsub double %27, %2
  %29 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %30 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %31 = shl i32 %30, 1
  %32 = add nsw i32 %31, -1
  %33 = mul nsw i32 %32, %29
  %34 = sitofp i32 %33 to float
  %35 = fptrunc double %28 to float
  %36 = fdiv float %34, %35
  ret float %36

37:                                               ; preds = %8, %624
  %38 = phi i64 [ 0, %8 ], [ %625, %624 ]
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = load float, float* %39, align 4, !tbaa !18
  %41 = insertelement <8 x float> undef, float %40, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = or i64 %38, 1
  %44 = getelementptr inbounds float, float* %4, i64 %43
  %45 = load float, float* %44, align 4, !tbaa !18
  %46 = insertelement <8 x float> undef, float %45, i32 0
  %47 = shufflevector <8 x float> %46, <8 x float> undef, <8 x i32> zeroinitializer
  %48 = or i64 %38, 2
  %49 = getelementptr inbounds float, float* %4, i64 %48
  %50 = load float, float* %49, align 4, !tbaa !18
  %51 = insertelement <8 x float> undef, float %50, i32 0
  %52 = shufflevector <8 x float> %51, <8 x float> undef, <8 x i32> zeroinitializer
  %53 = or i64 %38, 3
  %54 = getelementptr inbounds float, float* %4, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !18
  %56 = insertelement <8 x float> undef, float %55, i32 0
  %57 = shufflevector <8 x float> %56, <8 x float> undef, <8 x i32> zeroinitializer
  %58 = add nuw nsw i64 %38, 4
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !18
  %61 = insertelement <8 x float> undef, float %60, i32 0
  %62 = shufflevector <8 x float> %61, <8 x float> undef, <8 x i32> zeroinitializer
  %63 = add nuw nsw i64 %38, 5
  %64 = getelementptr inbounds float, float* %4, i64 %63
  %65 = load float, float* %64, align 4, !tbaa !18
  %66 = insertelement <8 x float> undef, float %65, i32 0
  %67 = shufflevector <8 x float> %66, <8 x float> undef, <8 x i32> zeroinitializer
  %68 = add nuw nsw i64 %38, 6
  %69 = getelementptr inbounds float, float* %4, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !18
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = shufflevector <8 x float> %71, <8 x float> undef, <8 x i32> zeroinitializer
  %73 = add nuw nsw i64 %38, 7
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !18
  %76 = insertelement <8 x float> undef, float %75, i32 0
  %77 = shufflevector <8 x float> %76, <8 x float> undef, <8 x i32> zeroinitializer
  %78 = add nuw nsw i64 %38, 8
  %79 = getelementptr inbounds float, float* %4, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !18
  %81 = insertelement <8 x float> undef, float %80, i32 0
  %82 = shufflevector <8 x float> %81, <8 x float> undef, <8 x i32> zeroinitializer
  %83 = add nuw nsw i64 %38, 9
  %84 = getelementptr inbounds float, float* %4, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !18
  %86 = insertelement <8 x float> undef, float %85, i32 0
  %87 = shufflevector <8 x float> %86, <8 x float> undef, <8 x i32> zeroinitializer
  %88 = add nuw nsw i64 %38, 10
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !18
  %91 = insertelement <8 x float> undef, float %90, i32 0
  %92 = shufflevector <8 x float> %91, <8 x float> undef, <8 x i32> zeroinitializer
  %93 = add nuw nsw i64 %38, 11
  %94 = getelementptr inbounds float, float* %4, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !18
  %96 = insertelement <8 x float> undef, float %95, i32 0
  %97 = shufflevector <8 x float> %96, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %98, label %624

98:                                               ; preds = %37
  %99 = trunc i64 %38 to i32
  %100 = mul nsw i32 %9, %99
  br label %106

101:                                              ; preds = %106
  br i1 %12, label %102, label %624

102:                                              ; preds = %101
  %103 = trunc i64 %43 to i32
  %104 = mul nsw i32 %9, %103
  %105 = sext i32 %104 to i64
  br label %158

106:                                              ; preds = %98, %106
  %107 = phi i64 [ 0, %98 ], [ %151, %106 ]
  %108 = getelementptr inbounds float, float* %5, i64 %107
  %109 = getelementptr inbounds float, float* %108, i64 8
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %3, i64 %107
  %112 = getelementptr inbounds float, float* %111, i64 8
  %113 = bitcast float* %112 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %113, i32 0, i32 1, i32 1)
  %114 = getelementptr inbounds float, float* %108, i64 16
  %115 = bitcast float* %114 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %115, i32 0, i32 1, i32 1)
  %116 = getelementptr inbounds float, float* %111, i64 16
  %117 = bitcast float* %116 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %117, i32 0, i32 1, i32 1)
  %118 = getelementptr inbounds float, float* %108, i64 24
  %119 = bitcast float* %118 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %119, i32 0, i32 1, i32 1)
  %120 = getelementptr inbounds float, float* %111, i64 24
  %121 = bitcast float* %120 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %121, i32 0, i32 1, i32 1)
  %122 = bitcast float* %108 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 1, !tbaa !12
  %124 = add nuw nsw i64 %107, 8
  %125 = getelementptr inbounds float, float* %5, i64 %124
  %126 = bitcast float* %125 to <8 x float>*
  %127 = load <8 x float>, <8 x float>* %126, align 1, !tbaa !12
  %128 = add nuw nsw i64 %107, 16
  %129 = getelementptr inbounds float, float* %5, i64 %128
  %130 = bitcast float* %129 to <8 x float>*
  %131 = load <8 x float>, <8 x float>* %130, align 1, !tbaa !12
  %132 = trunc i64 %107 to i32
  %133 = add nsw i32 %100, %132
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %3, i64 %134
  %136 = bitcast float* %135 to <8 x float>*
  %137 = load <8 x float>, <8 x float>* %136, align 1, !tbaa !12
  %138 = add nsw i32 %133, 8
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds float, float* %3, i64 %139
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 1, !tbaa !12
  %143 = add nsw i32 %133, 16
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds float, float* %3, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 1, !tbaa !12
  %148 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %42, <8 x float> %123) #10
  %149 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %142, <8 x float> %42, <8 x float> %127) #10
  %150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %147, <8 x float> %42, <8 x float> %131) #10
  store <8 x float> %148, <8 x float>* %122, align 1, !tbaa !12
  store <8 x float> %149, <8 x float>* %126, align 1, !tbaa !12
  store <8 x float> %150, <8 x float>* %130, align 1, !tbaa !12
  %151 = add nuw nsw i64 %107, 24
  %152 = icmp ult i64 %151, %11
  br i1 %152, label %106, label %101

153:                                              ; preds = %158
  br i1 %12, label %154, label %624

154:                                              ; preds = %153
  %155 = trunc i64 %48 to i32
  %156 = mul nsw i32 %9, %155
  %157 = sext i32 %156 to i64
  br label %205

158:                                              ; preds = %102, %158
  %159 = phi i64 [ 0, %102 ], [ %199, %158 ]
  %160 = getelementptr inbounds float, float* %5, i64 %159
  %161 = getelementptr inbounds float, float* %160, i64 8
  %162 = bitcast float* %161 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %162, i32 0, i32 1, i32 1)
  %163 = getelementptr inbounds float, float* %3, i64 %159
  %164 = getelementptr inbounds float, float* %163, i64 8
  %165 = bitcast float* %164 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %165, i32 0, i32 1, i32 1)
  %166 = getelementptr inbounds float, float* %160, i64 16
  %167 = bitcast float* %166 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %167, i32 0, i32 1, i32 1)
  %168 = getelementptr inbounds float, float* %163, i64 16
  %169 = bitcast float* %168 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %169, i32 0, i32 1, i32 1)
  %170 = getelementptr inbounds float, float* %160, i64 24
  %171 = bitcast float* %170 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %171, i32 0, i32 1, i32 1)
  %172 = getelementptr inbounds float, float* %163, i64 24
  %173 = bitcast float* %172 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %173, i32 0, i32 1, i32 1)
  %174 = bitcast float* %160 to <8 x float>*
  %175 = load <8 x float>, <8 x float>* %174, align 1, !tbaa !12
  %176 = add nuw nsw i64 %159, 8
  %177 = getelementptr inbounds float, float* %5, i64 %176
  %178 = bitcast float* %177 to <8 x float>*
  %179 = load <8 x float>, <8 x float>* %178, align 1, !tbaa !12
  %180 = add nuw nsw i64 %159, 16
  %181 = getelementptr inbounds float, float* %5, i64 %180
  %182 = bitcast float* %181 to <8 x float>*
  %183 = load <8 x float>, <8 x float>* %182, align 1, !tbaa !12
  %184 = add nsw i64 %159, %105
  %185 = getelementptr inbounds float, float* %3, i64 %184
  %186 = bitcast float* %185 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !tbaa !12
  %188 = add nsw i64 %184, 8
  %189 = getelementptr inbounds float, float* %3, i64 %188
  %190 = bitcast float* %189 to <8 x float>*
  %191 = load <8 x float>, <8 x float>* %190, align 1, !tbaa !12
  %192 = add nsw i64 %184, 16
  %193 = getelementptr inbounds float, float* %3, i64 %192
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 1, !tbaa !12
  %196 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %187, <8 x float> %47, <8 x float> %175) #10
  %197 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %191, <8 x float> %47, <8 x float> %179) #10
  %198 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %195, <8 x float> %47, <8 x float> %183) #10
  store <8 x float> %196, <8 x float>* %174, align 1, !tbaa !12
  store <8 x float> %197, <8 x float>* %178, align 1, !tbaa !12
  store <8 x float> %198, <8 x float>* %182, align 1, !tbaa !12
  %199 = add nuw nsw i64 %159, 24
  %200 = icmp ult i64 %199, %13
  br i1 %200, label %158, label %153

201:                                              ; preds = %205
  %202 = trunc i64 %53 to i32
  %203 = mul nsw i32 %9, %202
  %204 = sext i32 %203 to i64
  br label %252

205:                                              ; preds = %154, %205
  %206 = phi i64 [ 0, %154 ], [ %246, %205 ]
  %207 = getelementptr inbounds float, float* %5, i64 %206
  %208 = getelementptr inbounds float, float* %207, i64 8
  %209 = bitcast float* %208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %209, i32 0, i32 1, i32 1)
  %210 = getelementptr inbounds float, float* %3, i64 %206
  %211 = getelementptr inbounds float, float* %210, i64 8
  %212 = bitcast float* %211 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %212, i32 0, i32 1, i32 1)
  %213 = getelementptr inbounds float, float* %207, i64 16
  %214 = bitcast float* %213 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %214, i32 0, i32 1, i32 1)
  %215 = getelementptr inbounds float, float* %210, i64 16
  %216 = bitcast float* %215 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %216, i32 0, i32 1, i32 1)
  %217 = getelementptr inbounds float, float* %207, i64 24
  %218 = bitcast float* %217 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %218, i32 0, i32 1, i32 1)
  %219 = getelementptr inbounds float, float* %210, i64 24
  %220 = bitcast float* %219 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %220, i32 0, i32 1, i32 1)
  %221 = bitcast float* %207 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 1, !tbaa !12
  %223 = add nuw nsw i64 %206, 8
  %224 = getelementptr inbounds float, float* %5, i64 %223
  %225 = bitcast float* %224 to <8 x float>*
  %226 = load <8 x float>, <8 x float>* %225, align 1, !tbaa !12
  %227 = add nuw nsw i64 %206, 16
  %228 = getelementptr inbounds float, float* %5, i64 %227
  %229 = bitcast float* %228 to <8 x float>*
  %230 = load <8 x float>, <8 x float>* %229, align 1, !tbaa !12
  %231 = add nsw i64 %206, %157
  %232 = getelementptr inbounds float, float* %3, i64 %231
  %233 = bitcast float* %232 to <8 x float>*
  %234 = load <8 x float>, <8 x float>* %233, align 1, !tbaa !12
  %235 = add nsw i64 %231, 8
  %236 = getelementptr inbounds float, float* %3, i64 %235
  %237 = bitcast float* %236 to <8 x float>*
  %238 = load <8 x float>, <8 x float>* %237, align 1, !tbaa !12
  %239 = add nsw i64 %231, 16
  %240 = getelementptr inbounds float, float* %3, i64 %239
  %241 = bitcast float* %240 to <8 x float>*
  %242 = load <8 x float>, <8 x float>* %241, align 1, !tbaa !12
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %234, <8 x float> %52, <8 x float> %222) #10
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %238, <8 x float> %52, <8 x float> %226) #10
  %245 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> %52, <8 x float> %230) #10
  store <8 x float> %243, <8 x float>* %221, align 1, !tbaa !12
  store <8 x float> %244, <8 x float>* %225, align 1, !tbaa !12
  store <8 x float> %245, <8 x float>* %229, align 1, !tbaa !12
  %246 = add nuw nsw i64 %206, 24
  %247 = icmp ult i64 %246, %14
  br i1 %247, label %205, label %201

248:                                              ; preds = %252
  %249 = trunc i64 %58 to i32
  %250 = mul nsw i32 %9, %249
  %251 = sext i32 %250 to i64
  br label %299

252:                                              ; preds = %201, %252
  %253 = phi i64 [ 0, %201 ], [ %293, %252 ]
  %254 = getelementptr inbounds float, float* %5, i64 %253
  %255 = getelementptr inbounds float, float* %254, i64 8
  %256 = bitcast float* %255 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %256, i32 0, i32 1, i32 1)
  %257 = getelementptr inbounds float, float* %3, i64 %253
  %258 = getelementptr inbounds float, float* %257, i64 8
  %259 = bitcast float* %258 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %259, i32 0, i32 1, i32 1)
  %260 = getelementptr inbounds float, float* %254, i64 16
  %261 = bitcast float* %260 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %261, i32 0, i32 1, i32 1)
  %262 = getelementptr inbounds float, float* %257, i64 16
  %263 = bitcast float* %262 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %263, i32 0, i32 1, i32 1)
  %264 = getelementptr inbounds float, float* %254, i64 24
  %265 = bitcast float* %264 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %265, i32 0, i32 1, i32 1)
  %266 = getelementptr inbounds float, float* %257, i64 24
  %267 = bitcast float* %266 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %267, i32 0, i32 1, i32 1)
  %268 = bitcast float* %254 to <8 x float>*
  %269 = load <8 x float>, <8 x float>* %268, align 1, !tbaa !12
  %270 = add nuw nsw i64 %253, 8
  %271 = getelementptr inbounds float, float* %5, i64 %270
  %272 = bitcast float* %271 to <8 x float>*
  %273 = load <8 x float>, <8 x float>* %272, align 1, !tbaa !12
  %274 = add nuw nsw i64 %253, 16
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = bitcast float* %275 to <8 x float>*
  %277 = load <8 x float>, <8 x float>* %276, align 1, !tbaa !12
  %278 = add nsw i64 %253, %204
  %279 = getelementptr inbounds float, float* %3, i64 %278
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !tbaa !12
  %282 = add nsw i64 %278, 8
  %283 = getelementptr inbounds float, float* %3, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 1, !tbaa !12
  %286 = add nsw i64 %278, 16
  %287 = getelementptr inbounds float, float* %3, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 1, !tbaa !12
  %290 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %281, <8 x float> %57, <8 x float> %269) #10
  %291 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %285, <8 x float> %57, <8 x float> %273) #10
  %292 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %289, <8 x float> %57, <8 x float> %277) #10
  store <8 x float> %290, <8 x float>* %268, align 1, !tbaa !12
  store <8 x float> %291, <8 x float>* %272, align 1, !tbaa !12
  store <8 x float> %292, <8 x float>* %276, align 1, !tbaa !12
  %293 = add nuw nsw i64 %253, 24
  %294 = icmp slt i64 %293, %15
  br i1 %294, label %252, label %248

295:                                              ; preds = %299
  %296 = trunc i64 %63 to i32
  %297 = mul nsw i32 %9, %296
  %298 = sext i32 %297 to i64
  br label %346

299:                                              ; preds = %248, %299
  %300 = phi i64 [ 0, %248 ], [ %340, %299 ]
  %301 = getelementptr inbounds float, float* %5, i64 %300
  %302 = getelementptr inbounds float, float* %301, i64 8
  %303 = bitcast float* %302 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %303, i32 0, i32 1, i32 1)
  %304 = getelementptr inbounds float, float* %3, i64 %300
  %305 = getelementptr inbounds float, float* %304, i64 8
  %306 = bitcast float* %305 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %306, i32 0, i32 1, i32 1)
  %307 = getelementptr inbounds float, float* %301, i64 16
  %308 = bitcast float* %307 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %308, i32 0, i32 1, i32 1)
  %309 = getelementptr inbounds float, float* %304, i64 16
  %310 = bitcast float* %309 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %310, i32 0, i32 1, i32 1)
  %311 = getelementptr inbounds float, float* %301, i64 24
  %312 = bitcast float* %311 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %312, i32 0, i32 1, i32 1)
  %313 = getelementptr inbounds float, float* %304, i64 24
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %314, i32 0, i32 1, i32 1)
  %315 = bitcast float* %301 to <8 x float>*
  %316 = load <8 x float>, <8 x float>* %315, align 1, !tbaa !12
  %317 = add nuw nsw i64 %300, 8
  %318 = getelementptr inbounds float, float* %5, i64 %317
  %319 = bitcast float* %318 to <8 x float>*
  %320 = load <8 x float>, <8 x float>* %319, align 1, !tbaa !12
  %321 = add nuw nsw i64 %300, 16
  %322 = getelementptr inbounds float, float* %5, i64 %321
  %323 = bitcast float* %322 to <8 x float>*
  %324 = load <8 x float>, <8 x float>* %323, align 1, !tbaa !12
  %325 = add nsw i64 %300, %251
  %326 = getelementptr inbounds float, float* %3, i64 %325
  %327 = bitcast float* %326 to <8 x float>*
  %328 = load <8 x float>, <8 x float>* %327, align 1, !tbaa !12
  %329 = add nsw i64 %325, 8
  %330 = getelementptr inbounds float, float* %3, i64 %329
  %331 = bitcast float* %330 to <8 x float>*
  %332 = load <8 x float>, <8 x float>* %331, align 1, !tbaa !12
  %333 = add nsw i64 %325, 16
  %334 = getelementptr inbounds float, float* %3, i64 %333
  %335 = bitcast float* %334 to <8 x float>*
  %336 = load <8 x float>, <8 x float>* %335, align 1, !tbaa !12
  %337 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %328, <8 x float> %62, <8 x float> %316) #10
  %338 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %332, <8 x float> %62, <8 x float> %320) #10
  %339 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %336, <8 x float> %62, <8 x float> %324) #10
  store <8 x float> %337, <8 x float>* %315, align 1, !tbaa !12
  store <8 x float> %338, <8 x float>* %319, align 1, !tbaa !12
  store <8 x float> %339, <8 x float>* %323, align 1, !tbaa !12
  %340 = add nuw nsw i64 %300, 24
  %341 = icmp slt i64 %340, %16
  br i1 %341, label %299, label %295

342:                                              ; preds = %346
  %343 = trunc i64 %68 to i32
  %344 = mul nsw i32 %9, %343
  %345 = sext i32 %344 to i64
  br label %393

346:                                              ; preds = %295, %346
  %347 = phi i64 [ 0, %295 ], [ %387, %346 ]
  %348 = getelementptr inbounds float, float* %5, i64 %347
  %349 = getelementptr inbounds float, float* %348, i64 8
  %350 = bitcast float* %349 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %350, i32 0, i32 1, i32 1)
  %351 = getelementptr inbounds float, float* %3, i64 %347
  %352 = getelementptr inbounds float, float* %351, i64 8
  %353 = bitcast float* %352 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %353, i32 0, i32 1, i32 1)
  %354 = getelementptr inbounds float, float* %348, i64 16
  %355 = bitcast float* %354 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %355, i32 0, i32 1, i32 1)
  %356 = getelementptr inbounds float, float* %351, i64 16
  %357 = bitcast float* %356 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %357, i32 0, i32 1, i32 1)
  %358 = getelementptr inbounds float, float* %348, i64 24
  %359 = bitcast float* %358 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %359, i32 0, i32 1, i32 1)
  %360 = getelementptr inbounds float, float* %351, i64 24
  %361 = bitcast float* %360 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %361, i32 0, i32 1, i32 1)
  %362 = bitcast float* %348 to <8 x float>*
  %363 = load <8 x float>, <8 x float>* %362, align 1, !tbaa !12
  %364 = add nuw nsw i64 %347, 8
  %365 = getelementptr inbounds float, float* %5, i64 %364
  %366 = bitcast float* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 1, !tbaa !12
  %368 = add nuw nsw i64 %347, 16
  %369 = getelementptr inbounds float, float* %5, i64 %368
  %370 = bitcast float* %369 to <8 x float>*
  %371 = load <8 x float>, <8 x float>* %370, align 1, !tbaa !12
  %372 = add nsw i64 %347, %298
  %373 = getelementptr inbounds float, float* %3, i64 %372
  %374 = bitcast float* %373 to <8 x float>*
  %375 = load <8 x float>, <8 x float>* %374, align 1, !tbaa !12
  %376 = add nsw i64 %372, 8
  %377 = getelementptr inbounds float, float* %3, i64 %376
  %378 = bitcast float* %377 to <8 x float>*
  %379 = load <8 x float>, <8 x float>* %378, align 1, !tbaa !12
  %380 = add nsw i64 %372, 16
  %381 = getelementptr inbounds float, float* %3, i64 %380
  %382 = bitcast float* %381 to <8 x float>*
  %383 = load <8 x float>, <8 x float>* %382, align 1, !tbaa !12
  %384 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %375, <8 x float> %67, <8 x float> %363) #10
  %385 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %379, <8 x float> %67, <8 x float> %367) #10
  %386 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %383, <8 x float> %67, <8 x float> %371) #10
  store <8 x float> %384, <8 x float>* %362, align 1, !tbaa !12
  store <8 x float> %385, <8 x float>* %366, align 1, !tbaa !12
  store <8 x float> %386, <8 x float>* %370, align 1, !tbaa !12
  %387 = add nuw nsw i64 %347, 24
  %388 = icmp slt i64 %387, %17
  br i1 %388, label %346, label %342

389:                                              ; preds = %393
  %390 = trunc i64 %73 to i32
  %391 = mul nsw i32 %9, %390
  %392 = sext i32 %391 to i64
  br label %440

393:                                              ; preds = %342, %393
  %394 = phi i64 [ 0, %342 ], [ %434, %393 ]
  %395 = getelementptr inbounds float, float* %5, i64 %394
  %396 = getelementptr inbounds float, float* %395, i64 8
  %397 = bitcast float* %396 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %397, i32 0, i32 1, i32 1)
  %398 = getelementptr inbounds float, float* %3, i64 %394
  %399 = getelementptr inbounds float, float* %398, i64 8
  %400 = bitcast float* %399 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %400, i32 0, i32 1, i32 1)
  %401 = getelementptr inbounds float, float* %395, i64 16
  %402 = bitcast float* %401 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %402, i32 0, i32 1, i32 1)
  %403 = getelementptr inbounds float, float* %398, i64 16
  %404 = bitcast float* %403 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %404, i32 0, i32 1, i32 1)
  %405 = getelementptr inbounds float, float* %395, i64 24
  %406 = bitcast float* %405 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %406, i32 0, i32 1, i32 1)
  %407 = getelementptr inbounds float, float* %398, i64 24
  %408 = bitcast float* %407 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %408, i32 0, i32 1, i32 1)
  %409 = bitcast float* %395 to <8 x float>*
  %410 = load <8 x float>, <8 x float>* %409, align 1, !tbaa !12
  %411 = add nuw nsw i64 %394, 8
  %412 = getelementptr inbounds float, float* %5, i64 %411
  %413 = bitcast float* %412 to <8 x float>*
  %414 = load <8 x float>, <8 x float>* %413, align 1, !tbaa !12
  %415 = add nuw nsw i64 %394, 16
  %416 = getelementptr inbounds float, float* %5, i64 %415
  %417 = bitcast float* %416 to <8 x float>*
  %418 = load <8 x float>, <8 x float>* %417, align 1, !tbaa !12
  %419 = add nsw i64 %394, %345
  %420 = getelementptr inbounds float, float* %3, i64 %419
  %421 = bitcast float* %420 to <8 x float>*
  %422 = load <8 x float>, <8 x float>* %421, align 1, !tbaa !12
  %423 = add nsw i64 %419, 8
  %424 = getelementptr inbounds float, float* %3, i64 %423
  %425 = bitcast float* %424 to <8 x float>*
  %426 = load <8 x float>, <8 x float>* %425, align 1, !tbaa !12
  %427 = add nsw i64 %419, 16
  %428 = getelementptr inbounds float, float* %3, i64 %427
  %429 = bitcast float* %428 to <8 x float>*
  %430 = load <8 x float>, <8 x float>* %429, align 1, !tbaa !12
  %431 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %422, <8 x float> %72, <8 x float> %410) #10
  %432 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %426, <8 x float> %72, <8 x float> %414) #10
  %433 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %430, <8 x float> %72, <8 x float> %418) #10
  store <8 x float> %431, <8 x float>* %409, align 1, !tbaa !12
  store <8 x float> %432, <8 x float>* %413, align 1, !tbaa !12
  store <8 x float> %433, <8 x float>* %417, align 1, !tbaa !12
  %434 = add nuw nsw i64 %394, 24
  %435 = icmp slt i64 %434, %18
  br i1 %435, label %393, label %389

436:                                              ; preds = %440
  %437 = trunc i64 %78 to i32
  %438 = mul nsw i32 %9, %437
  %439 = sext i32 %438 to i64
  br label %487

440:                                              ; preds = %389, %440
  %441 = phi i64 [ 0, %389 ], [ %481, %440 ]
  %442 = getelementptr inbounds float, float* %5, i64 %441
  %443 = getelementptr inbounds float, float* %442, i64 8
  %444 = bitcast float* %443 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %444, i32 0, i32 1, i32 1)
  %445 = getelementptr inbounds float, float* %3, i64 %441
  %446 = getelementptr inbounds float, float* %445, i64 8
  %447 = bitcast float* %446 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %447, i32 0, i32 1, i32 1)
  %448 = getelementptr inbounds float, float* %442, i64 16
  %449 = bitcast float* %448 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %449, i32 0, i32 1, i32 1)
  %450 = getelementptr inbounds float, float* %445, i64 16
  %451 = bitcast float* %450 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %451, i32 0, i32 1, i32 1)
  %452 = getelementptr inbounds float, float* %442, i64 24
  %453 = bitcast float* %452 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %453, i32 0, i32 1, i32 1)
  %454 = getelementptr inbounds float, float* %445, i64 24
  %455 = bitcast float* %454 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %455, i32 0, i32 1, i32 1)
  %456 = bitcast float* %442 to <8 x float>*
  %457 = load <8 x float>, <8 x float>* %456, align 1, !tbaa !12
  %458 = add nuw nsw i64 %441, 8
  %459 = getelementptr inbounds float, float* %5, i64 %458
  %460 = bitcast float* %459 to <8 x float>*
  %461 = load <8 x float>, <8 x float>* %460, align 1, !tbaa !12
  %462 = add nuw nsw i64 %441, 16
  %463 = getelementptr inbounds float, float* %5, i64 %462
  %464 = bitcast float* %463 to <8 x float>*
  %465 = load <8 x float>, <8 x float>* %464, align 1, !tbaa !12
  %466 = add nsw i64 %441, %392
  %467 = getelementptr inbounds float, float* %3, i64 %466
  %468 = bitcast float* %467 to <8 x float>*
  %469 = load <8 x float>, <8 x float>* %468, align 1, !tbaa !12
  %470 = add nsw i64 %466, 8
  %471 = getelementptr inbounds float, float* %3, i64 %470
  %472 = bitcast float* %471 to <8 x float>*
  %473 = load <8 x float>, <8 x float>* %472, align 1, !tbaa !12
  %474 = add nsw i64 %466, 16
  %475 = getelementptr inbounds float, float* %3, i64 %474
  %476 = bitcast float* %475 to <8 x float>*
  %477 = load <8 x float>, <8 x float>* %476, align 1, !tbaa !12
  %478 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %469, <8 x float> %77, <8 x float> %457) #10
  %479 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %473, <8 x float> %77, <8 x float> %461) #10
  %480 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %477, <8 x float> %77, <8 x float> %465) #10
  store <8 x float> %478, <8 x float>* %456, align 1, !tbaa !12
  store <8 x float> %479, <8 x float>* %460, align 1, !tbaa !12
  store <8 x float> %480, <8 x float>* %464, align 1, !tbaa !12
  %481 = add nuw nsw i64 %441, 24
  %482 = icmp slt i64 %481, %19
  br i1 %482, label %440, label %436

483:                                              ; preds = %487
  %484 = trunc i64 %83 to i32
  %485 = mul nsw i32 %9, %484
  %486 = sext i32 %485 to i64
  br label %534

487:                                              ; preds = %436, %487
  %488 = phi i64 [ 0, %436 ], [ %528, %487 ]
  %489 = getelementptr inbounds float, float* %5, i64 %488
  %490 = getelementptr inbounds float, float* %489, i64 8
  %491 = bitcast float* %490 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %491, i32 0, i32 1, i32 1)
  %492 = getelementptr inbounds float, float* %3, i64 %488
  %493 = getelementptr inbounds float, float* %492, i64 8
  %494 = bitcast float* %493 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %494, i32 0, i32 1, i32 1)
  %495 = getelementptr inbounds float, float* %489, i64 16
  %496 = bitcast float* %495 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %496, i32 0, i32 1, i32 1)
  %497 = getelementptr inbounds float, float* %492, i64 16
  %498 = bitcast float* %497 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %498, i32 0, i32 1, i32 1)
  %499 = getelementptr inbounds float, float* %489, i64 24
  %500 = bitcast float* %499 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %500, i32 0, i32 1, i32 1)
  %501 = getelementptr inbounds float, float* %492, i64 24
  %502 = bitcast float* %501 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %502, i32 0, i32 1, i32 1)
  %503 = bitcast float* %489 to <8 x float>*
  %504 = load <8 x float>, <8 x float>* %503, align 1, !tbaa !12
  %505 = add nuw nsw i64 %488, 8
  %506 = getelementptr inbounds float, float* %5, i64 %505
  %507 = bitcast float* %506 to <8 x float>*
  %508 = load <8 x float>, <8 x float>* %507, align 1, !tbaa !12
  %509 = add nuw nsw i64 %488, 16
  %510 = getelementptr inbounds float, float* %5, i64 %509
  %511 = bitcast float* %510 to <8 x float>*
  %512 = load <8 x float>, <8 x float>* %511, align 1, !tbaa !12
  %513 = add nsw i64 %488, %439
  %514 = getelementptr inbounds float, float* %3, i64 %513
  %515 = bitcast float* %514 to <8 x float>*
  %516 = load <8 x float>, <8 x float>* %515, align 1, !tbaa !12
  %517 = add nsw i64 %513, 8
  %518 = getelementptr inbounds float, float* %3, i64 %517
  %519 = bitcast float* %518 to <8 x float>*
  %520 = load <8 x float>, <8 x float>* %519, align 1, !tbaa !12
  %521 = add nsw i64 %513, 16
  %522 = getelementptr inbounds float, float* %3, i64 %521
  %523 = bitcast float* %522 to <8 x float>*
  %524 = load <8 x float>, <8 x float>* %523, align 1, !tbaa !12
  %525 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %516, <8 x float> %82, <8 x float> %504) #10
  %526 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %520, <8 x float> %82, <8 x float> %508) #10
  %527 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %524, <8 x float> %82, <8 x float> %512) #10
  store <8 x float> %525, <8 x float>* %503, align 1, !tbaa !12
  store <8 x float> %526, <8 x float>* %507, align 1, !tbaa !12
  store <8 x float> %527, <8 x float>* %511, align 1, !tbaa !12
  %528 = add nuw nsw i64 %488, 24
  %529 = icmp slt i64 %528, %20
  br i1 %529, label %487, label %483

530:                                              ; preds = %534
  %531 = trunc i64 %88 to i32
  %532 = mul nsw i32 %9, %531
  %533 = sext i32 %532 to i64
  br label %581

534:                                              ; preds = %483, %534
  %535 = phi i64 [ 0, %483 ], [ %575, %534 ]
  %536 = getelementptr inbounds float, float* %5, i64 %535
  %537 = getelementptr inbounds float, float* %536, i64 8
  %538 = bitcast float* %537 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %538, i32 0, i32 1, i32 1)
  %539 = getelementptr inbounds float, float* %3, i64 %535
  %540 = getelementptr inbounds float, float* %539, i64 8
  %541 = bitcast float* %540 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %541, i32 0, i32 1, i32 1)
  %542 = getelementptr inbounds float, float* %536, i64 16
  %543 = bitcast float* %542 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %543, i32 0, i32 1, i32 1)
  %544 = getelementptr inbounds float, float* %539, i64 16
  %545 = bitcast float* %544 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %545, i32 0, i32 1, i32 1)
  %546 = getelementptr inbounds float, float* %536, i64 24
  %547 = bitcast float* %546 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %547, i32 0, i32 1, i32 1)
  %548 = getelementptr inbounds float, float* %539, i64 24
  %549 = bitcast float* %548 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %549, i32 0, i32 1, i32 1)
  %550 = bitcast float* %536 to <8 x float>*
  %551 = load <8 x float>, <8 x float>* %550, align 1, !tbaa !12
  %552 = add nuw nsw i64 %535, 8
  %553 = getelementptr inbounds float, float* %5, i64 %552
  %554 = bitcast float* %553 to <8 x float>*
  %555 = load <8 x float>, <8 x float>* %554, align 1, !tbaa !12
  %556 = add nuw nsw i64 %535, 16
  %557 = getelementptr inbounds float, float* %5, i64 %556
  %558 = bitcast float* %557 to <8 x float>*
  %559 = load <8 x float>, <8 x float>* %558, align 1, !tbaa !12
  %560 = add nsw i64 %535, %486
  %561 = getelementptr inbounds float, float* %3, i64 %560
  %562 = bitcast float* %561 to <8 x float>*
  %563 = load <8 x float>, <8 x float>* %562, align 1, !tbaa !12
  %564 = add nsw i64 %560, 8
  %565 = getelementptr inbounds float, float* %3, i64 %564
  %566 = bitcast float* %565 to <8 x float>*
  %567 = load <8 x float>, <8 x float>* %566, align 1, !tbaa !12
  %568 = add nsw i64 %560, 16
  %569 = getelementptr inbounds float, float* %3, i64 %568
  %570 = bitcast float* %569 to <8 x float>*
  %571 = load <8 x float>, <8 x float>* %570, align 1, !tbaa !12
  %572 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %563, <8 x float> %87, <8 x float> %551) #10
  %573 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %567, <8 x float> %87, <8 x float> %555) #10
  %574 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %571, <8 x float> %87, <8 x float> %559) #10
  store <8 x float> %572, <8 x float>* %550, align 1, !tbaa !12
  store <8 x float> %573, <8 x float>* %554, align 1, !tbaa !12
  store <8 x float> %574, <8 x float>* %558, align 1, !tbaa !12
  %575 = add nuw nsw i64 %535, 24
  %576 = icmp slt i64 %575, %21
  br i1 %576, label %534, label %530

577:                                              ; preds = %581
  %578 = trunc i64 %93 to i32
  %579 = mul nsw i32 %9, %578
  %580 = sext i32 %579 to i64
  br label %627

581:                                              ; preds = %530, %581
  %582 = phi i64 [ 0, %530 ], [ %622, %581 ]
  %583 = getelementptr inbounds float, float* %5, i64 %582
  %584 = getelementptr inbounds float, float* %583, i64 8
  %585 = bitcast float* %584 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %585, i32 0, i32 1, i32 1)
  %586 = getelementptr inbounds float, float* %3, i64 %582
  %587 = getelementptr inbounds float, float* %586, i64 8
  %588 = bitcast float* %587 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %588, i32 0, i32 1, i32 1)
  %589 = getelementptr inbounds float, float* %583, i64 16
  %590 = bitcast float* %589 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %590, i32 0, i32 1, i32 1)
  %591 = getelementptr inbounds float, float* %586, i64 16
  %592 = bitcast float* %591 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %592, i32 0, i32 1, i32 1)
  %593 = getelementptr inbounds float, float* %583, i64 24
  %594 = bitcast float* %593 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %594, i32 0, i32 1, i32 1)
  %595 = getelementptr inbounds float, float* %586, i64 24
  %596 = bitcast float* %595 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %596, i32 0, i32 1, i32 1)
  %597 = bitcast float* %583 to <8 x float>*
  %598 = load <8 x float>, <8 x float>* %597, align 1, !tbaa !12
  %599 = add nuw nsw i64 %582, 8
  %600 = getelementptr inbounds float, float* %5, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 1, !tbaa !12
  %603 = add nuw nsw i64 %582, 16
  %604 = getelementptr inbounds float, float* %5, i64 %603
  %605 = bitcast float* %604 to <8 x float>*
  %606 = load <8 x float>, <8 x float>* %605, align 1, !tbaa !12
  %607 = add nsw i64 %582, %533
  %608 = getelementptr inbounds float, float* %3, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  %610 = load <8 x float>, <8 x float>* %609, align 1, !tbaa !12
  %611 = add nsw i64 %607, 8
  %612 = getelementptr inbounds float, float* %3, i64 %611
  %613 = bitcast float* %612 to <8 x float>*
  %614 = load <8 x float>, <8 x float>* %613, align 1, !tbaa !12
  %615 = add nsw i64 %607, 16
  %616 = getelementptr inbounds float, float* %3, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 1, !tbaa !12
  %619 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %610, <8 x float> %92, <8 x float> %598) #10
  %620 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %614, <8 x float> %92, <8 x float> %602) #10
  %621 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %618, <8 x float> %92, <8 x float> %606) #10
  store <8 x float> %619, <8 x float>* %597, align 1, !tbaa !12
  store <8 x float> %620, <8 x float>* %601, align 1, !tbaa !12
  store <8 x float> %621, <8 x float>* %605, align 1, !tbaa !12
  %622 = add nuw nsw i64 %582, 24
  %623 = icmp slt i64 %622, %22
  br i1 %623, label %581, label %577

624:                                              ; preds = %627, %101, %37, %153
  %625 = add nuw nsw i64 %38, 12
  %626 = icmp slt i64 %625, %24
  br i1 %626, label %37, label %25

627:                                              ; preds = %577, %627
  %628 = phi i64 [ 0, %577 ], [ %668, %627 ]
  %629 = getelementptr inbounds float, float* %5, i64 %628
  %630 = getelementptr inbounds float, float* %629, i64 8
  %631 = bitcast float* %630 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %631, i32 0, i32 1, i32 1)
  %632 = getelementptr inbounds float, float* %3, i64 %628
  %633 = getelementptr inbounds float, float* %632, i64 8
  %634 = bitcast float* %633 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %634, i32 0, i32 1, i32 1)
  %635 = getelementptr inbounds float, float* %629, i64 16
  %636 = bitcast float* %635 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %636, i32 0, i32 1, i32 1)
  %637 = getelementptr inbounds float, float* %632, i64 16
  %638 = bitcast float* %637 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %638, i32 0, i32 1, i32 1)
  %639 = getelementptr inbounds float, float* %629, i64 24
  %640 = bitcast float* %639 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %640, i32 0, i32 1, i32 1)
  %641 = getelementptr inbounds float, float* %632, i64 24
  %642 = bitcast float* %641 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %642, i32 0, i32 1, i32 1)
  %643 = bitcast float* %629 to <8 x float>*
  %644 = load <8 x float>, <8 x float>* %643, align 1, !tbaa !12
  %645 = add nuw nsw i64 %628, 8
  %646 = getelementptr inbounds float, float* %5, i64 %645
  %647 = bitcast float* %646 to <8 x float>*
  %648 = load <8 x float>, <8 x float>* %647, align 1, !tbaa !12
  %649 = add nuw nsw i64 %628, 16
  %650 = getelementptr inbounds float, float* %5, i64 %649
  %651 = bitcast float* %650 to <8 x float>*
  %652 = load <8 x float>, <8 x float>* %651, align 1, !tbaa !12
  %653 = add nsw i64 %628, %580
  %654 = getelementptr inbounds float, float* %3, i64 %653
  %655 = bitcast float* %654 to <8 x float>*
  %656 = load <8 x float>, <8 x float>* %655, align 1, !tbaa !12
  %657 = add nsw i64 %653, 8
  %658 = getelementptr inbounds float, float* %3, i64 %657
  %659 = bitcast float* %658 to <8 x float>*
  %660 = load <8 x float>, <8 x float>* %659, align 1, !tbaa !12
  %661 = add nsw i64 %653, 16
  %662 = getelementptr inbounds float, float* %3, i64 %661
  %663 = bitcast float* %662 to <8 x float>*
  %664 = load <8 x float>, <8 x float>* %663, align 1, !tbaa !12
  %665 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %656, <8 x float> %97, <8 x float> %644) #10
  %666 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %660, <8 x float> %97, <8 x float> %648) #10
  %667 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %664, <8 x float> %97, <8 x float> %652) #10
  store <8 x float> %665, <8 x float>* %643, align 1, !tbaa !12
  store <8 x float> %666, <8 x float>* %647, align 1, !tbaa !12
  store <8 x float> %667, <8 x float>* %651, align 1, !tbaa !12
  %668 = add nuw nsw i64 %628, 24
  %669 = icmp slt i64 %668, %23
  br i1 %669, label %627, label %624
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 84
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui3_uk12.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
