; ModuleID = 'codes/matvec_ui8_uk8.cpp'
source_filename = "codes/matvec_ui8_uk8.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui8_uk8.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = sdiv i32 %1, 64
  %3 = shl nsw i32 %2, 6
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = sdiv i32 %4, 64
  %6 = shl nsw i32 %5, 6
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %884, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %884
  %21 = phi i64 [ %885, %884 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = or i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = or i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = or i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = or i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = or i64 %21, 7
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %884

63:                                               ; preds = %20
  %64 = zext i32 %61 to i64
  %65 = trunc i64 %21 to i32
  %66 = mul nsw i32 %61, %65
  br label %73

67:                                               ; preds = %73
  br i1 %62, label %68, label %532

68:                                               ; preds = %67
  %69 = trunc i64 %26 to i32
  %70 = mul nsw i32 %61, %69
  %71 = sext i32 %70 to i64
  %72 = zext i32 %61 to i64
  br label %196

73:                                               ; preds = %63, %73
  %74 = phi i64 [ 0, %63 ], [ %188, %73 ]
  %75 = getelementptr inbounds float, float* %5, i64 %74
  %76 = getelementptr inbounds float, float* %75, i64 8
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %77, i32 0, i32 1, i32 1)
  %78 = getelementptr inbounds float, float* %3, i64 %74
  %79 = getelementptr inbounds float, float* %78, i64 8
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %75, i64 16
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %78, i64 16
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %75, i64 24
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %78, i64 24
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %75, i64 32
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %78, i64 32
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %75, i64 40
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %78, i64 40
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %75, i64 48
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %78, i64 48
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %75, i64 56
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %78, i64 56
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %75, i64 64
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %78, i64 64
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = bitcast float* %75 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 1, !tbaa !12
  %111 = or i64 %74, 8
  %112 = getelementptr inbounds float, float* %5, i64 %111
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 1, !tbaa !12
  %115 = or i64 %74, 16
  %116 = getelementptr inbounds float, float* %5, i64 %115
  %117 = bitcast float* %116 to <8 x float>*
  %118 = load <8 x float>, <8 x float>* %117, align 1, !tbaa !12
  %119 = or i64 %74, 24
  %120 = getelementptr inbounds float, float* %5, i64 %119
  %121 = bitcast float* %120 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 1, !tbaa !12
  %123 = or i64 %74, 32
  %124 = getelementptr inbounds float, float* %5, i64 %123
  %125 = bitcast float* %124 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 1, !tbaa !12
  %127 = or i64 %74, 40
  %128 = getelementptr inbounds float, float* %5, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !tbaa !12
  %131 = or i64 %74, 48
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = or i64 %74, 56
  %136 = getelementptr inbounds float, float* %5, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 1, !tbaa !12
  %139 = trunc i64 %74 to i32
  %140 = add nsw i32 %66, %139
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %3, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nsw i32 %140, 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %3, i64 %146
  %148 = bitcast float* %147 to <8 x float>*
  %149 = load <8 x float>, <8 x float>* %148, align 1, !tbaa !12
  %150 = add nsw i32 %140, 16
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %3, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 1, !tbaa !12
  %155 = add nsw i32 %140, 24
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %3, i64 %156
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 1, !tbaa !12
  %160 = add nsw i32 %140, 32
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %3, i64 %161
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 1, !tbaa !12
  %165 = add nsw i32 %140, 40
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %3, i64 %166
  %168 = bitcast float* %167 to <8 x float>*
  %169 = load <8 x float>, <8 x float>* %168, align 1, !tbaa !12
  %170 = add nsw i32 %140, 48
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %3, i64 %171
  %173 = bitcast float* %172 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 1, !tbaa !12
  %175 = add nsw i32 %140, 56
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %3, i64 %176
  %178 = bitcast float* %177 to <8 x float>*
  %179 = load <8 x float>, <8 x float>* %178, align 1, !tbaa !12
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %144, <8 x float> %25, <8 x float> %110) #10
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %25, <8 x float> %114) #10
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %154, <8 x float> %25, <8 x float> %118) #10
  %183 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %159, <8 x float> %25, <8 x float> %122) #10
  %184 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %164, <8 x float> %25, <8 x float> %126) #10
  %185 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %169, <8 x float> %25, <8 x float> %130) #10
  %186 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %25, <8 x float> %134) #10
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %179, <8 x float> %25, <8 x float> %138) #10
  store <8 x float> %180, <8 x float>* %109, align 1, !tbaa !12
  store <8 x float> %181, <8 x float>* %113, align 1, !tbaa !12
  store <8 x float> %182, <8 x float>* %117, align 1, !tbaa !12
  store <8 x float> %183, <8 x float>* %121, align 1, !tbaa !12
  store <8 x float> %184, <8 x float>* %125, align 1, !tbaa !12
  store <8 x float> %185, <8 x float>* %129, align 1, !tbaa !12
  store <8 x float> %186, <8 x float>* %133, align 1, !tbaa !12
  store <8 x float> %187, <8 x float>* %137, align 1, !tbaa !12
  %188 = add nuw nsw i64 %74, 64
  %189 = icmp ult i64 %188, %64
  br i1 %189, label %73, label %67

190:                                              ; preds = %196
  br i1 %62, label %191, label %532

191:                                              ; preds = %190
  %192 = trunc i64 %31 to i32
  %193 = mul nsw i32 %61, %192
  %194 = sext i32 %193 to i64
  %195 = zext i32 %61 to i64
  br label %310

196:                                              ; preds = %68, %196
  %197 = phi i64 [ 0, %68 ], [ %302, %196 ]
  %198 = getelementptr inbounds float, float* %5, i64 %197
  %199 = getelementptr inbounds float, float* %198, i64 8
  %200 = bitcast float* %199 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %200, i32 0, i32 1, i32 1)
  %201 = getelementptr inbounds float, float* %3, i64 %197
  %202 = getelementptr inbounds float, float* %201, i64 8
  %203 = bitcast float* %202 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %203, i32 0, i32 1, i32 1)
  %204 = getelementptr inbounds float, float* %198, i64 16
  %205 = bitcast float* %204 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %205, i32 0, i32 1, i32 1)
  %206 = getelementptr inbounds float, float* %201, i64 16
  %207 = bitcast float* %206 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %207, i32 0, i32 1, i32 1)
  %208 = getelementptr inbounds float, float* %198, i64 24
  %209 = bitcast float* %208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %209, i32 0, i32 1, i32 1)
  %210 = getelementptr inbounds float, float* %201, i64 24
  %211 = bitcast float* %210 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %211, i32 0, i32 1, i32 1)
  %212 = getelementptr inbounds float, float* %198, i64 32
  %213 = bitcast float* %212 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %213, i32 0, i32 1, i32 1)
  %214 = getelementptr inbounds float, float* %201, i64 32
  %215 = bitcast float* %214 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %215, i32 0, i32 1, i32 1)
  %216 = getelementptr inbounds float, float* %198, i64 40
  %217 = bitcast float* %216 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %217, i32 0, i32 1, i32 1)
  %218 = getelementptr inbounds float, float* %201, i64 40
  %219 = bitcast float* %218 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %219, i32 0, i32 1, i32 1)
  %220 = getelementptr inbounds float, float* %198, i64 48
  %221 = bitcast float* %220 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %221, i32 0, i32 1, i32 1)
  %222 = getelementptr inbounds float, float* %201, i64 48
  %223 = bitcast float* %222 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %223, i32 0, i32 1, i32 1)
  %224 = getelementptr inbounds float, float* %198, i64 56
  %225 = bitcast float* %224 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %225, i32 0, i32 1, i32 1)
  %226 = getelementptr inbounds float, float* %201, i64 56
  %227 = bitcast float* %226 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %227, i32 0, i32 1, i32 1)
  %228 = getelementptr inbounds float, float* %198, i64 64
  %229 = bitcast float* %228 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %229, i32 0, i32 1, i32 1)
  %230 = getelementptr inbounds float, float* %201, i64 64
  %231 = bitcast float* %230 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %231, i32 0, i32 1, i32 1)
  %232 = bitcast float* %198 to <8 x float>*
  %233 = load <8 x float>, <8 x float>* %232, align 1, !tbaa !12
  %234 = or i64 %197, 8
  %235 = getelementptr inbounds float, float* %5, i64 %234
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 1, !tbaa !12
  %238 = or i64 %197, 16
  %239 = getelementptr inbounds float, float* %5, i64 %238
  %240 = bitcast float* %239 to <8 x float>*
  %241 = load <8 x float>, <8 x float>* %240, align 1, !tbaa !12
  %242 = or i64 %197, 24
  %243 = getelementptr inbounds float, float* %5, i64 %242
  %244 = bitcast float* %243 to <8 x float>*
  %245 = load <8 x float>, <8 x float>* %244, align 1, !tbaa !12
  %246 = or i64 %197, 32
  %247 = getelementptr inbounds float, float* %5, i64 %246
  %248 = bitcast float* %247 to <8 x float>*
  %249 = load <8 x float>, <8 x float>* %248, align 1, !tbaa !12
  %250 = or i64 %197, 40
  %251 = getelementptr inbounds float, float* %5, i64 %250
  %252 = bitcast float* %251 to <8 x float>*
  %253 = load <8 x float>, <8 x float>* %252, align 1, !tbaa !12
  %254 = or i64 %197, 48
  %255 = getelementptr inbounds float, float* %5, i64 %254
  %256 = bitcast float* %255 to <8 x float>*
  %257 = load <8 x float>, <8 x float>* %256, align 1, !tbaa !12
  %258 = or i64 %197, 56
  %259 = getelementptr inbounds float, float* %5, i64 %258
  %260 = bitcast float* %259 to <8 x float>*
  %261 = load <8 x float>, <8 x float>* %260, align 1, !tbaa !12
  %262 = add nsw i64 %197, %71
  %263 = getelementptr inbounds float, float* %3, i64 %262
  %264 = bitcast float* %263 to <8 x float>*
  %265 = load <8 x float>, <8 x float>* %264, align 1, !tbaa !12
  %266 = add nsw i64 %262, 8
  %267 = getelementptr inbounds float, float* %3, i64 %266
  %268 = bitcast float* %267 to <8 x float>*
  %269 = load <8 x float>, <8 x float>* %268, align 1, !tbaa !12
  %270 = add nsw i64 %262, 16
  %271 = getelementptr inbounds float, float* %3, i64 %270
  %272 = bitcast float* %271 to <8 x float>*
  %273 = load <8 x float>, <8 x float>* %272, align 1, !tbaa !12
  %274 = add nsw i64 %262, 24
  %275 = getelementptr inbounds float, float* %3, i64 %274
  %276 = bitcast float* %275 to <8 x float>*
  %277 = load <8 x float>, <8 x float>* %276, align 1, !tbaa !12
  %278 = add nsw i64 %262, 32
  %279 = getelementptr inbounds float, float* %3, i64 %278
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !tbaa !12
  %282 = add nsw i64 %262, 40
  %283 = getelementptr inbounds float, float* %3, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 1, !tbaa !12
  %286 = add nsw i64 %262, 48
  %287 = getelementptr inbounds float, float* %3, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 1, !tbaa !12
  %290 = add nsw i64 %262, 56
  %291 = getelementptr inbounds float, float* %3, i64 %290
  %292 = bitcast float* %291 to <8 x float>*
  %293 = load <8 x float>, <8 x float>* %292, align 1, !tbaa !12
  %294 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %265, <8 x float> %30, <8 x float> %233) #10
  %295 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %269, <8 x float> %30, <8 x float> %237) #10
  %296 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %273, <8 x float> %30, <8 x float> %241) #10
  %297 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %277, <8 x float> %30, <8 x float> %245) #10
  %298 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %281, <8 x float> %30, <8 x float> %249) #10
  %299 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %285, <8 x float> %30, <8 x float> %253) #10
  %300 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %289, <8 x float> %30, <8 x float> %257) #10
  %301 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %293, <8 x float> %30, <8 x float> %261) #10
  store <8 x float> %294, <8 x float>* %232, align 1, !tbaa !12
  store <8 x float> %295, <8 x float>* %236, align 1, !tbaa !12
  store <8 x float> %296, <8 x float>* %240, align 1, !tbaa !12
  store <8 x float> %297, <8 x float>* %244, align 1, !tbaa !12
  store <8 x float> %298, <8 x float>* %248, align 1, !tbaa !12
  store <8 x float> %299, <8 x float>* %252, align 1, !tbaa !12
  store <8 x float> %300, <8 x float>* %256, align 1, !tbaa !12
  store <8 x float> %301, <8 x float>* %260, align 1, !tbaa !12
  %302 = add nuw nsw i64 %197, 64
  %303 = icmp ult i64 %302, %72
  br i1 %303, label %196, label %190

304:                                              ; preds = %310
  br i1 %62, label %305, label %532

305:                                              ; preds = %304
  %306 = trunc i64 %36 to i32
  %307 = mul nsw i32 %61, %306
  %308 = sext i32 %307 to i64
  %309 = zext i32 %61 to i64
  br label %424

310:                                              ; preds = %191, %310
  %311 = phi i64 [ 0, %191 ], [ %416, %310 ]
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = getelementptr inbounds float, float* %312, i64 8
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %314, i32 0, i32 1, i32 1)
  %315 = getelementptr inbounds float, float* %3, i64 %311
  %316 = getelementptr inbounds float, float* %315, i64 8
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %312, i64 16
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = getelementptr inbounds float, float* %315, i64 16
  %321 = bitcast float* %320 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %321, i32 0, i32 1, i32 1)
  %322 = getelementptr inbounds float, float* %312, i64 24
  %323 = bitcast float* %322 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %323, i32 0, i32 1, i32 1)
  %324 = getelementptr inbounds float, float* %315, i64 24
  %325 = bitcast float* %324 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %325, i32 0, i32 1, i32 1)
  %326 = getelementptr inbounds float, float* %312, i64 32
  %327 = bitcast float* %326 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %327, i32 0, i32 1, i32 1)
  %328 = getelementptr inbounds float, float* %315, i64 32
  %329 = bitcast float* %328 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %329, i32 0, i32 1, i32 1)
  %330 = getelementptr inbounds float, float* %312, i64 40
  %331 = bitcast float* %330 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %331, i32 0, i32 1, i32 1)
  %332 = getelementptr inbounds float, float* %315, i64 40
  %333 = bitcast float* %332 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %333, i32 0, i32 1, i32 1)
  %334 = getelementptr inbounds float, float* %312, i64 48
  %335 = bitcast float* %334 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %335, i32 0, i32 1, i32 1)
  %336 = getelementptr inbounds float, float* %315, i64 48
  %337 = bitcast float* %336 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %337, i32 0, i32 1, i32 1)
  %338 = getelementptr inbounds float, float* %312, i64 56
  %339 = bitcast float* %338 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %339, i32 0, i32 1, i32 1)
  %340 = getelementptr inbounds float, float* %315, i64 56
  %341 = bitcast float* %340 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %341, i32 0, i32 1, i32 1)
  %342 = getelementptr inbounds float, float* %312, i64 64
  %343 = bitcast float* %342 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %343, i32 0, i32 1, i32 1)
  %344 = getelementptr inbounds float, float* %315, i64 64
  %345 = bitcast float* %344 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %345, i32 0, i32 1, i32 1)
  %346 = bitcast float* %312 to <8 x float>*
  %347 = load <8 x float>, <8 x float>* %346, align 1, !tbaa !12
  %348 = or i64 %311, 8
  %349 = getelementptr inbounds float, float* %5, i64 %348
  %350 = bitcast float* %349 to <8 x float>*
  %351 = load <8 x float>, <8 x float>* %350, align 1, !tbaa !12
  %352 = or i64 %311, 16
  %353 = getelementptr inbounds float, float* %5, i64 %352
  %354 = bitcast float* %353 to <8 x float>*
  %355 = load <8 x float>, <8 x float>* %354, align 1, !tbaa !12
  %356 = or i64 %311, 24
  %357 = getelementptr inbounds float, float* %5, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  %359 = load <8 x float>, <8 x float>* %358, align 1, !tbaa !12
  %360 = or i64 %311, 32
  %361 = getelementptr inbounds float, float* %5, i64 %360
  %362 = bitcast float* %361 to <8 x float>*
  %363 = load <8 x float>, <8 x float>* %362, align 1, !tbaa !12
  %364 = or i64 %311, 40
  %365 = getelementptr inbounds float, float* %5, i64 %364
  %366 = bitcast float* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 1, !tbaa !12
  %368 = or i64 %311, 48
  %369 = getelementptr inbounds float, float* %5, i64 %368
  %370 = bitcast float* %369 to <8 x float>*
  %371 = load <8 x float>, <8 x float>* %370, align 1, !tbaa !12
  %372 = or i64 %311, 56
  %373 = getelementptr inbounds float, float* %5, i64 %372
  %374 = bitcast float* %373 to <8 x float>*
  %375 = load <8 x float>, <8 x float>* %374, align 1, !tbaa !12
  %376 = add nsw i64 %311, %194
  %377 = getelementptr inbounds float, float* %3, i64 %376
  %378 = bitcast float* %377 to <8 x float>*
  %379 = load <8 x float>, <8 x float>* %378, align 1, !tbaa !12
  %380 = add nsw i64 %376, 8
  %381 = getelementptr inbounds float, float* %3, i64 %380
  %382 = bitcast float* %381 to <8 x float>*
  %383 = load <8 x float>, <8 x float>* %382, align 1, !tbaa !12
  %384 = add nsw i64 %376, 16
  %385 = getelementptr inbounds float, float* %3, i64 %384
  %386 = bitcast float* %385 to <8 x float>*
  %387 = load <8 x float>, <8 x float>* %386, align 1, !tbaa !12
  %388 = add nsw i64 %376, 24
  %389 = getelementptr inbounds float, float* %3, i64 %388
  %390 = bitcast float* %389 to <8 x float>*
  %391 = load <8 x float>, <8 x float>* %390, align 1, !tbaa !12
  %392 = add nsw i64 %376, 32
  %393 = getelementptr inbounds float, float* %3, i64 %392
  %394 = bitcast float* %393 to <8 x float>*
  %395 = load <8 x float>, <8 x float>* %394, align 1, !tbaa !12
  %396 = add nsw i64 %376, 40
  %397 = getelementptr inbounds float, float* %3, i64 %396
  %398 = bitcast float* %397 to <8 x float>*
  %399 = load <8 x float>, <8 x float>* %398, align 1, !tbaa !12
  %400 = add nsw i64 %376, 48
  %401 = getelementptr inbounds float, float* %3, i64 %400
  %402 = bitcast float* %401 to <8 x float>*
  %403 = load <8 x float>, <8 x float>* %402, align 1, !tbaa !12
  %404 = add nsw i64 %376, 56
  %405 = getelementptr inbounds float, float* %3, i64 %404
  %406 = bitcast float* %405 to <8 x float>*
  %407 = load <8 x float>, <8 x float>* %406, align 1, !tbaa !12
  %408 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %379, <8 x float> %35, <8 x float> %347) #10
  %409 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %383, <8 x float> %35, <8 x float> %351) #10
  %410 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> %35, <8 x float> %355) #10
  %411 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %391, <8 x float> %35, <8 x float> %359) #10
  %412 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %395, <8 x float> %35, <8 x float> %363) #10
  %413 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %399, <8 x float> %35, <8 x float> %367) #10
  %414 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %403, <8 x float> %35, <8 x float> %371) #10
  %415 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %407, <8 x float> %35, <8 x float> %375) #10
  store <8 x float> %408, <8 x float>* %346, align 1, !tbaa !12
  store <8 x float> %409, <8 x float>* %350, align 1, !tbaa !12
  store <8 x float> %410, <8 x float>* %354, align 1, !tbaa !12
  store <8 x float> %411, <8 x float>* %358, align 1, !tbaa !12
  store <8 x float> %412, <8 x float>* %362, align 1, !tbaa !12
  store <8 x float> %413, <8 x float>* %366, align 1, !tbaa !12
  store <8 x float> %414, <8 x float>* %370, align 1, !tbaa !12
  store <8 x float> %415, <8 x float>* %374, align 1, !tbaa !12
  %416 = add nuw nsw i64 %311, 64
  %417 = icmp ult i64 %416, %195
  br i1 %417, label %310, label %304

418:                                              ; preds = %424
  br i1 %62, label %419, label %532

419:                                              ; preds = %418
  %420 = trunc i64 %41 to i32
  %421 = mul nsw i32 %61, %420
  %422 = sext i32 %421 to i64
  %423 = zext i32 %61 to i64
  br label %539

424:                                              ; preds = %305, %424
  %425 = phi i64 [ 0, %305 ], [ %530, %424 ]
  %426 = getelementptr inbounds float, float* %5, i64 %425
  %427 = getelementptr inbounds float, float* %426, i64 8
  %428 = bitcast float* %427 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %428, i32 0, i32 1, i32 1)
  %429 = getelementptr inbounds float, float* %3, i64 %425
  %430 = getelementptr inbounds float, float* %429, i64 8
  %431 = bitcast float* %430 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %431, i32 0, i32 1, i32 1)
  %432 = getelementptr inbounds float, float* %426, i64 16
  %433 = bitcast float* %432 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %433, i32 0, i32 1, i32 1)
  %434 = getelementptr inbounds float, float* %429, i64 16
  %435 = bitcast float* %434 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %435, i32 0, i32 1, i32 1)
  %436 = getelementptr inbounds float, float* %426, i64 24
  %437 = bitcast float* %436 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %437, i32 0, i32 1, i32 1)
  %438 = getelementptr inbounds float, float* %429, i64 24
  %439 = bitcast float* %438 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %439, i32 0, i32 1, i32 1)
  %440 = getelementptr inbounds float, float* %426, i64 32
  %441 = bitcast float* %440 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %441, i32 0, i32 1, i32 1)
  %442 = getelementptr inbounds float, float* %429, i64 32
  %443 = bitcast float* %442 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %443, i32 0, i32 1, i32 1)
  %444 = getelementptr inbounds float, float* %426, i64 40
  %445 = bitcast float* %444 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %445, i32 0, i32 1, i32 1)
  %446 = getelementptr inbounds float, float* %429, i64 40
  %447 = bitcast float* %446 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %447, i32 0, i32 1, i32 1)
  %448 = getelementptr inbounds float, float* %426, i64 48
  %449 = bitcast float* %448 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %449, i32 0, i32 1, i32 1)
  %450 = getelementptr inbounds float, float* %429, i64 48
  %451 = bitcast float* %450 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %451, i32 0, i32 1, i32 1)
  %452 = getelementptr inbounds float, float* %426, i64 56
  %453 = bitcast float* %452 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %453, i32 0, i32 1, i32 1)
  %454 = getelementptr inbounds float, float* %429, i64 56
  %455 = bitcast float* %454 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %455, i32 0, i32 1, i32 1)
  %456 = getelementptr inbounds float, float* %426, i64 64
  %457 = bitcast float* %456 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %457, i32 0, i32 1, i32 1)
  %458 = getelementptr inbounds float, float* %429, i64 64
  %459 = bitcast float* %458 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %459, i32 0, i32 1, i32 1)
  %460 = bitcast float* %426 to <8 x float>*
  %461 = load <8 x float>, <8 x float>* %460, align 1, !tbaa !12
  %462 = or i64 %425, 8
  %463 = getelementptr inbounds float, float* %5, i64 %462
  %464 = bitcast float* %463 to <8 x float>*
  %465 = load <8 x float>, <8 x float>* %464, align 1, !tbaa !12
  %466 = or i64 %425, 16
  %467 = getelementptr inbounds float, float* %5, i64 %466
  %468 = bitcast float* %467 to <8 x float>*
  %469 = load <8 x float>, <8 x float>* %468, align 1, !tbaa !12
  %470 = or i64 %425, 24
  %471 = getelementptr inbounds float, float* %5, i64 %470
  %472 = bitcast float* %471 to <8 x float>*
  %473 = load <8 x float>, <8 x float>* %472, align 1, !tbaa !12
  %474 = or i64 %425, 32
  %475 = getelementptr inbounds float, float* %5, i64 %474
  %476 = bitcast float* %475 to <8 x float>*
  %477 = load <8 x float>, <8 x float>* %476, align 1, !tbaa !12
  %478 = or i64 %425, 40
  %479 = getelementptr inbounds float, float* %5, i64 %478
  %480 = bitcast float* %479 to <8 x float>*
  %481 = load <8 x float>, <8 x float>* %480, align 1, !tbaa !12
  %482 = or i64 %425, 48
  %483 = getelementptr inbounds float, float* %5, i64 %482
  %484 = bitcast float* %483 to <8 x float>*
  %485 = load <8 x float>, <8 x float>* %484, align 1, !tbaa !12
  %486 = or i64 %425, 56
  %487 = getelementptr inbounds float, float* %5, i64 %486
  %488 = bitcast float* %487 to <8 x float>*
  %489 = load <8 x float>, <8 x float>* %488, align 1, !tbaa !12
  %490 = add nsw i64 %425, %308
  %491 = getelementptr inbounds float, float* %3, i64 %490
  %492 = bitcast float* %491 to <8 x float>*
  %493 = load <8 x float>, <8 x float>* %492, align 1, !tbaa !12
  %494 = add nsw i64 %490, 8
  %495 = getelementptr inbounds float, float* %3, i64 %494
  %496 = bitcast float* %495 to <8 x float>*
  %497 = load <8 x float>, <8 x float>* %496, align 1, !tbaa !12
  %498 = add nsw i64 %490, 16
  %499 = getelementptr inbounds float, float* %3, i64 %498
  %500 = bitcast float* %499 to <8 x float>*
  %501 = load <8 x float>, <8 x float>* %500, align 1, !tbaa !12
  %502 = add nsw i64 %490, 24
  %503 = getelementptr inbounds float, float* %3, i64 %502
  %504 = bitcast float* %503 to <8 x float>*
  %505 = load <8 x float>, <8 x float>* %504, align 1, !tbaa !12
  %506 = add nsw i64 %490, 32
  %507 = getelementptr inbounds float, float* %3, i64 %506
  %508 = bitcast float* %507 to <8 x float>*
  %509 = load <8 x float>, <8 x float>* %508, align 1, !tbaa !12
  %510 = add nsw i64 %490, 40
  %511 = getelementptr inbounds float, float* %3, i64 %510
  %512 = bitcast float* %511 to <8 x float>*
  %513 = load <8 x float>, <8 x float>* %512, align 1, !tbaa !12
  %514 = add nsw i64 %490, 48
  %515 = getelementptr inbounds float, float* %3, i64 %514
  %516 = bitcast float* %515 to <8 x float>*
  %517 = load <8 x float>, <8 x float>* %516, align 1, !tbaa !12
  %518 = add nsw i64 %490, 56
  %519 = getelementptr inbounds float, float* %3, i64 %518
  %520 = bitcast float* %519 to <8 x float>*
  %521 = load <8 x float>, <8 x float>* %520, align 1, !tbaa !12
  %522 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %493, <8 x float> %40, <8 x float> %461) #10
  %523 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %497, <8 x float> %40, <8 x float> %465) #10
  %524 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %501, <8 x float> %40, <8 x float> %469) #10
  %525 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %505, <8 x float> %40, <8 x float> %473) #10
  %526 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %509, <8 x float> %40, <8 x float> %477) #10
  %527 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %513, <8 x float> %40, <8 x float> %481) #10
  %528 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %517, <8 x float> %40, <8 x float> %485) #10
  %529 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %521, <8 x float> %40, <8 x float> %489) #10
  store <8 x float> %522, <8 x float>* %460, align 1, !tbaa !12
  store <8 x float> %523, <8 x float>* %464, align 1, !tbaa !12
  store <8 x float> %524, <8 x float>* %468, align 1, !tbaa !12
  store <8 x float> %525, <8 x float>* %472, align 1, !tbaa !12
  store <8 x float> %526, <8 x float>* %476, align 1, !tbaa !12
  store <8 x float> %527, <8 x float>* %480, align 1, !tbaa !12
  store <8 x float> %528, <8 x float>* %484, align 1, !tbaa !12
  store <8 x float> %529, <8 x float>* %488, align 1, !tbaa !12
  %530 = add nuw nsw i64 %425, 64
  %531 = icmp ult i64 %530, %309
  br i1 %531, label %424, label %418

532:                                              ; preds = %539, %67, %190, %304, %418
  %533 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %534 = icmp sgt i32 %533, 0
  br i1 %534, label %535, label %884

535:                                              ; preds = %532
  %536 = zext i32 %533 to i64
  %537 = trunc i64 %46 to i32
  %538 = mul nsw i32 %533, %537
  br label %653

539:                                              ; preds = %419, %539
  %540 = phi i64 [ 0, %419 ], [ %645, %539 ]
  %541 = getelementptr inbounds float, float* %5, i64 %540
  %542 = getelementptr inbounds float, float* %541, i64 8
  %543 = bitcast float* %542 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %543, i32 0, i32 1, i32 1)
  %544 = getelementptr inbounds float, float* %3, i64 %540
  %545 = getelementptr inbounds float, float* %544, i64 8
  %546 = bitcast float* %545 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %546, i32 0, i32 1, i32 1)
  %547 = getelementptr inbounds float, float* %541, i64 16
  %548 = bitcast float* %547 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %548, i32 0, i32 1, i32 1)
  %549 = getelementptr inbounds float, float* %544, i64 16
  %550 = bitcast float* %549 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %550, i32 0, i32 1, i32 1)
  %551 = getelementptr inbounds float, float* %541, i64 24
  %552 = bitcast float* %551 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %552, i32 0, i32 1, i32 1)
  %553 = getelementptr inbounds float, float* %544, i64 24
  %554 = bitcast float* %553 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %554, i32 0, i32 1, i32 1)
  %555 = getelementptr inbounds float, float* %541, i64 32
  %556 = bitcast float* %555 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %556, i32 0, i32 1, i32 1)
  %557 = getelementptr inbounds float, float* %544, i64 32
  %558 = bitcast float* %557 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %558, i32 0, i32 1, i32 1)
  %559 = getelementptr inbounds float, float* %541, i64 40
  %560 = bitcast float* %559 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %560, i32 0, i32 1, i32 1)
  %561 = getelementptr inbounds float, float* %544, i64 40
  %562 = bitcast float* %561 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %562, i32 0, i32 1, i32 1)
  %563 = getelementptr inbounds float, float* %541, i64 48
  %564 = bitcast float* %563 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %564, i32 0, i32 1, i32 1)
  %565 = getelementptr inbounds float, float* %544, i64 48
  %566 = bitcast float* %565 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %566, i32 0, i32 1, i32 1)
  %567 = getelementptr inbounds float, float* %541, i64 56
  %568 = bitcast float* %567 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %568, i32 0, i32 1, i32 1)
  %569 = getelementptr inbounds float, float* %544, i64 56
  %570 = bitcast float* %569 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %570, i32 0, i32 1, i32 1)
  %571 = getelementptr inbounds float, float* %541, i64 64
  %572 = bitcast float* %571 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %572, i32 0, i32 1, i32 1)
  %573 = getelementptr inbounds float, float* %544, i64 64
  %574 = bitcast float* %573 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %574, i32 0, i32 1, i32 1)
  %575 = bitcast float* %541 to <8 x float>*
  %576 = load <8 x float>, <8 x float>* %575, align 1, !tbaa !12
  %577 = or i64 %540, 8
  %578 = getelementptr inbounds float, float* %5, i64 %577
  %579 = bitcast float* %578 to <8 x float>*
  %580 = load <8 x float>, <8 x float>* %579, align 1, !tbaa !12
  %581 = or i64 %540, 16
  %582 = getelementptr inbounds float, float* %5, i64 %581
  %583 = bitcast float* %582 to <8 x float>*
  %584 = load <8 x float>, <8 x float>* %583, align 1, !tbaa !12
  %585 = or i64 %540, 24
  %586 = getelementptr inbounds float, float* %5, i64 %585
  %587 = bitcast float* %586 to <8 x float>*
  %588 = load <8 x float>, <8 x float>* %587, align 1, !tbaa !12
  %589 = or i64 %540, 32
  %590 = getelementptr inbounds float, float* %5, i64 %589
  %591 = bitcast float* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 1, !tbaa !12
  %593 = or i64 %540, 40
  %594 = getelementptr inbounds float, float* %5, i64 %593
  %595 = bitcast float* %594 to <8 x float>*
  %596 = load <8 x float>, <8 x float>* %595, align 1, !tbaa !12
  %597 = or i64 %540, 48
  %598 = getelementptr inbounds float, float* %5, i64 %597
  %599 = bitcast float* %598 to <8 x float>*
  %600 = load <8 x float>, <8 x float>* %599, align 1, !tbaa !12
  %601 = or i64 %540, 56
  %602 = getelementptr inbounds float, float* %5, i64 %601
  %603 = bitcast float* %602 to <8 x float>*
  %604 = load <8 x float>, <8 x float>* %603, align 1, !tbaa !12
  %605 = add nsw i64 %540, %422
  %606 = getelementptr inbounds float, float* %3, i64 %605
  %607 = bitcast float* %606 to <8 x float>*
  %608 = load <8 x float>, <8 x float>* %607, align 1, !tbaa !12
  %609 = add nsw i64 %605, 8
  %610 = getelementptr inbounds float, float* %3, i64 %609
  %611 = bitcast float* %610 to <8 x float>*
  %612 = load <8 x float>, <8 x float>* %611, align 1, !tbaa !12
  %613 = add nsw i64 %605, 16
  %614 = getelementptr inbounds float, float* %3, i64 %613
  %615 = bitcast float* %614 to <8 x float>*
  %616 = load <8 x float>, <8 x float>* %615, align 1, !tbaa !12
  %617 = add nsw i64 %605, 24
  %618 = getelementptr inbounds float, float* %3, i64 %617
  %619 = bitcast float* %618 to <8 x float>*
  %620 = load <8 x float>, <8 x float>* %619, align 1, !tbaa !12
  %621 = add nsw i64 %605, 32
  %622 = getelementptr inbounds float, float* %3, i64 %621
  %623 = bitcast float* %622 to <8 x float>*
  %624 = load <8 x float>, <8 x float>* %623, align 1, !tbaa !12
  %625 = add nsw i64 %605, 40
  %626 = getelementptr inbounds float, float* %3, i64 %625
  %627 = bitcast float* %626 to <8 x float>*
  %628 = load <8 x float>, <8 x float>* %627, align 1, !tbaa !12
  %629 = add nsw i64 %605, 48
  %630 = getelementptr inbounds float, float* %3, i64 %629
  %631 = bitcast float* %630 to <8 x float>*
  %632 = load <8 x float>, <8 x float>* %631, align 1, !tbaa !12
  %633 = add nsw i64 %605, 56
  %634 = getelementptr inbounds float, float* %3, i64 %633
  %635 = bitcast float* %634 to <8 x float>*
  %636 = load <8 x float>, <8 x float>* %635, align 1, !tbaa !12
  %637 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %608, <8 x float> %45, <8 x float> %576) #10
  %638 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %612, <8 x float> %45, <8 x float> %580) #10
  %639 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %616, <8 x float> %45, <8 x float> %584) #10
  %640 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %620, <8 x float> %45, <8 x float> %588) #10
  %641 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %624, <8 x float> %45, <8 x float> %592) #10
  %642 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %628, <8 x float> %45, <8 x float> %596) #10
  %643 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %632, <8 x float> %45, <8 x float> %600) #10
  %644 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %636, <8 x float> %45, <8 x float> %604) #10
  store <8 x float> %637, <8 x float>* %575, align 1, !tbaa !12
  store <8 x float> %638, <8 x float>* %579, align 1, !tbaa !12
  store <8 x float> %639, <8 x float>* %583, align 1, !tbaa !12
  store <8 x float> %640, <8 x float>* %587, align 1, !tbaa !12
  store <8 x float> %641, <8 x float>* %591, align 1, !tbaa !12
  store <8 x float> %642, <8 x float>* %595, align 1, !tbaa !12
  store <8 x float> %643, <8 x float>* %599, align 1, !tbaa !12
  store <8 x float> %644, <8 x float>* %603, align 1, !tbaa !12
  %645 = add nuw nsw i64 %540, 64
  %646 = icmp ult i64 %645, %423
  br i1 %646, label %539, label %532

647:                                              ; preds = %653
  br i1 %534, label %648, label %884

648:                                              ; preds = %647
  %649 = trunc i64 %51 to i32
  %650 = mul nsw i32 %533, %649
  %651 = sext i32 %650 to i64
  %652 = zext i32 %533 to i64
  br label %776

653:                                              ; preds = %535, %653
  %654 = phi i64 [ 0, %535 ], [ %768, %653 ]
  %655 = getelementptr inbounds float, float* %5, i64 %654
  %656 = getelementptr inbounds float, float* %655, i64 8
  %657 = bitcast float* %656 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %657, i32 0, i32 1, i32 1)
  %658 = getelementptr inbounds float, float* %3, i64 %654
  %659 = getelementptr inbounds float, float* %658, i64 8
  %660 = bitcast float* %659 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %660, i32 0, i32 1, i32 1)
  %661 = getelementptr inbounds float, float* %655, i64 16
  %662 = bitcast float* %661 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %662, i32 0, i32 1, i32 1)
  %663 = getelementptr inbounds float, float* %658, i64 16
  %664 = bitcast float* %663 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %664, i32 0, i32 1, i32 1)
  %665 = getelementptr inbounds float, float* %655, i64 24
  %666 = bitcast float* %665 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %666, i32 0, i32 1, i32 1)
  %667 = getelementptr inbounds float, float* %658, i64 24
  %668 = bitcast float* %667 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %668, i32 0, i32 1, i32 1)
  %669 = getelementptr inbounds float, float* %655, i64 32
  %670 = bitcast float* %669 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %670, i32 0, i32 1, i32 1)
  %671 = getelementptr inbounds float, float* %658, i64 32
  %672 = bitcast float* %671 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %672, i32 0, i32 1, i32 1)
  %673 = getelementptr inbounds float, float* %655, i64 40
  %674 = bitcast float* %673 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %674, i32 0, i32 1, i32 1)
  %675 = getelementptr inbounds float, float* %658, i64 40
  %676 = bitcast float* %675 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %676, i32 0, i32 1, i32 1)
  %677 = getelementptr inbounds float, float* %655, i64 48
  %678 = bitcast float* %677 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %678, i32 0, i32 1, i32 1)
  %679 = getelementptr inbounds float, float* %658, i64 48
  %680 = bitcast float* %679 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %680, i32 0, i32 1, i32 1)
  %681 = getelementptr inbounds float, float* %655, i64 56
  %682 = bitcast float* %681 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %682, i32 0, i32 1, i32 1)
  %683 = getelementptr inbounds float, float* %658, i64 56
  %684 = bitcast float* %683 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %684, i32 0, i32 1, i32 1)
  %685 = getelementptr inbounds float, float* %655, i64 64
  %686 = bitcast float* %685 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %686, i32 0, i32 1, i32 1)
  %687 = getelementptr inbounds float, float* %658, i64 64
  %688 = bitcast float* %687 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %688, i32 0, i32 1, i32 1)
  %689 = bitcast float* %655 to <8 x float>*
  %690 = load <8 x float>, <8 x float>* %689, align 1, !tbaa !12
  %691 = or i64 %654, 8
  %692 = getelementptr inbounds float, float* %5, i64 %691
  %693 = bitcast float* %692 to <8 x float>*
  %694 = load <8 x float>, <8 x float>* %693, align 1, !tbaa !12
  %695 = or i64 %654, 16
  %696 = getelementptr inbounds float, float* %5, i64 %695
  %697 = bitcast float* %696 to <8 x float>*
  %698 = load <8 x float>, <8 x float>* %697, align 1, !tbaa !12
  %699 = or i64 %654, 24
  %700 = getelementptr inbounds float, float* %5, i64 %699
  %701 = bitcast float* %700 to <8 x float>*
  %702 = load <8 x float>, <8 x float>* %701, align 1, !tbaa !12
  %703 = or i64 %654, 32
  %704 = getelementptr inbounds float, float* %5, i64 %703
  %705 = bitcast float* %704 to <8 x float>*
  %706 = load <8 x float>, <8 x float>* %705, align 1, !tbaa !12
  %707 = or i64 %654, 40
  %708 = getelementptr inbounds float, float* %5, i64 %707
  %709 = bitcast float* %708 to <8 x float>*
  %710 = load <8 x float>, <8 x float>* %709, align 1, !tbaa !12
  %711 = or i64 %654, 48
  %712 = getelementptr inbounds float, float* %5, i64 %711
  %713 = bitcast float* %712 to <8 x float>*
  %714 = load <8 x float>, <8 x float>* %713, align 1, !tbaa !12
  %715 = or i64 %654, 56
  %716 = getelementptr inbounds float, float* %5, i64 %715
  %717 = bitcast float* %716 to <8 x float>*
  %718 = load <8 x float>, <8 x float>* %717, align 1, !tbaa !12
  %719 = trunc i64 %654 to i32
  %720 = add nsw i32 %538, %719
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds float, float* %3, i64 %721
  %723 = bitcast float* %722 to <8 x float>*
  %724 = load <8 x float>, <8 x float>* %723, align 1, !tbaa !12
  %725 = add nsw i32 %720, 8
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds float, float* %3, i64 %726
  %728 = bitcast float* %727 to <8 x float>*
  %729 = load <8 x float>, <8 x float>* %728, align 1, !tbaa !12
  %730 = add nsw i32 %720, 16
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds float, float* %3, i64 %731
  %733 = bitcast float* %732 to <8 x float>*
  %734 = load <8 x float>, <8 x float>* %733, align 1, !tbaa !12
  %735 = add nsw i32 %720, 24
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds float, float* %3, i64 %736
  %738 = bitcast float* %737 to <8 x float>*
  %739 = load <8 x float>, <8 x float>* %738, align 1, !tbaa !12
  %740 = add nsw i32 %720, 32
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds float, float* %3, i64 %741
  %743 = bitcast float* %742 to <8 x float>*
  %744 = load <8 x float>, <8 x float>* %743, align 1, !tbaa !12
  %745 = add nsw i32 %720, 40
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds float, float* %3, i64 %746
  %748 = bitcast float* %747 to <8 x float>*
  %749 = load <8 x float>, <8 x float>* %748, align 1, !tbaa !12
  %750 = add nsw i32 %720, 48
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds float, float* %3, i64 %751
  %753 = bitcast float* %752 to <8 x float>*
  %754 = load <8 x float>, <8 x float>* %753, align 1, !tbaa !12
  %755 = add nsw i32 %720, 56
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds float, float* %3, i64 %756
  %758 = bitcast float* %757 to <8 x float>*
  %759 = load <8 x float>, <8 x float>* %758, align 1, !tbaa !12
  %760 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %724, <8 x float> %50, <8 x float> %690) #10
  %761 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %729, <8 x float> %50, <8 x float> %694) #10
  %762 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %734, <8 x float> %50, <8 x float> %698) #10
  %763 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %739, <8 x float> %50, <8 x float> %702) #10
  %764 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %744, <8 x float> %50, <8 x float> %706) #10
  %765 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %749, <8 x float> %50, <8 x float> %710) #10
  %766 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %754, <8 x float> %50, <8 x float> %714) #10
  %767 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %759, <8 x float> %50, <8 x float> %718) #10
  store <8 x float> %760, <8 x float>* %689, align 1, !tbaa !12
  store <8 x float> %761, <8 x float>* %693, align 1, !tbaa !12
  store <8 x float> %762, <8 x float>* %697, align 1, !tbaa !12
  store <8 x float> %763, <8 x float>* %701, align 1, !tbaa !12
  store <8 x float> %764, <8 x float>* %705, align 1, !tbaa !12
  store <8 x float> %765, <8 x float>* %709, align 1, !tbaa !12
  store <8 x float> %766, <8 x float>* %713, align 1, !tbaa !12
  store <8 x float> %767, <8 x float>* %717, align 1, !tbaa !12
  %768 = add nuw nsw i64 %654, 64
  %769 = icmp ult i64 %768, %536
  br i1 %769, label %653, label %647

770:                                              ; preds = %776
  br i1 %534, label %771, label %884

771:                                              ; preds = %770
  %772 = trunc i64 %56 to i32
  %773 = mul nsw i32 %533, %772
  %774 = sext i32 %773 to i64
  %775 = zext i32 %533 to i64
  br label %889

776:                                              ; preds = %648, %776
  %777 = phi i64 [ 0, %648 ], [ %882, %776 ]
  %778 = getelementptr inbounds float, float* %5, i64 %777
  %779 = getelementptr inbounds float, float* %778, i64 8
  %780 = bitcast float* %779 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %780, i32 0, i32 1, i32 1)
  %781 = getelementptr inbounds float, float* %3, i64 %777
  %782 = getelementptr inbounds float, float* %781, i64 8
  %783 = bitcast float* %782 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %783, i32 0, i32 1, i32 1)
  %784 = getelementptr inbounds float, float* %778, i64 16
  %785 = bitcast float* %784 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %785, i32 0, i32 1, i32 1)
  %786 = getelementptr inbounds float, float* %781, i64 16
  %787 = bitcast float* %786 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %787, i32 0, i32 1, i32 1)
  %788 = getelementptr inbounds float, float* %778, i64 24
  %789 = bitcast float* %788 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %789, i32 0, i32 1, i32 1)
  %790 = getelementptr inbounds float, float* %781, i64 24
  %791 = bitcast float* %790 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %791, i32 0, i32 1, i32 1)
  %792 = getelementptr inbounds float, float* %778, i64 32
  %793 = bitcast float* %792 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %793, i32 0, i32 1, i32 1)
  %794 = getelementptr inbounds float, float* %781, i64 32
  %795 = bitcast float* %794 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %795, i32 0, i32 1, i32 1)
  %796 = getelementptr inbounds float, float* %778, i64 40
  %797 = bitcast float* %796 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %797, i32 0, i32 1, i32 1)
  %798 = getelementptr inbounds float, float* %781, i64 40
  %799 = bitcast float* %798 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %799, i32 0, i32 1, i32 1)
  %800 = getelementptr inbounds float, float* %778, i64 48
  %801 = bitcast float* %800 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %801, i32 0, i32 1, i32 1)
  %802 = getelementptr inbounds float, float* %781, i64 48
  %803 = bitcast float* %802 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %803, i32 0, i32 1, i32 1)
  %804 = getelementptr inbounds float, float* %778, i64 56
  %805 = bitcast float* %804 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %805, i32 0, i32 1, i32 1)
  %806 = getelementptr inbounds float, float* %781, i64 56
  %807 = bitcast float* %806 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %807, i32 0, i32 1, i32 1)
  %808 = getelementptr inbounds float, float* %778, i64 64
  %809 = bitcast float* %808 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %809, i32 0, i32 1, i32 1)
  %810 = getelementptr inbounds float, float* %781, i64 64
  %811 = bitcast float* %810 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %811, i32 0, i32 1, i32 1)
  %812 = bitcast float* %778 to <8 x float>*
  %813 = load <8 x float>, <8 x float>* %812, align 1, !tbaa !12
  %814 = or i64 %777, 8
  %815 = getelementptr inbounds float, float* %5, i64 %814
  %816 = bitcast float* %815 to <8 x float>*
  %817 = load <8 x float>, <8 x float>* %816, align 1, !tbaa !12
  %818 = or i64 %777, 16
  %819 = getelementptr inbounds float, float* %5, i64 %818
  %820 = bitcast float* %819 to <8 x float>*
  %821 = load <8 x float>, <8 x float>* %820, align 1, !tbaa !12
  %822 = or i64 %777, 24
  %823 = getelementptr inbounds float, float* %5, i64 %822
  %824 = bitcast float* %823 to <8 x float>*
  %825 = load <8 x float>, <8 x float>* %824, align 1, !tbaa !12
  %826 = or i64 %777, 32
  %827 = getelementptr inbounds float, float* %5, i64 %826
  %828 = bitcast float* %827 to <8 x float>*
  %829 = load <8 x float>, <8 x float>* %828, align 1, !tbaa !12
  %830 = or i64 %777, 40
  %831 = getelementptr inbounds float, float* %5, i64 %830
  %832 = bitcast float* %831 to <8 x float>*
  %833 = load <8 x float>, <8 x float>* %832, align 1, !tbaa !12
  %834 = or i64 %777, 48
  %835 = getelementptr inbounds float, float* %5, i64 %834
  %836 = bitcast float* %835 to <8 x float>*
  %837 = load <8 x float>, <8 x float>* %836, align 1, !tbaa !12
  %838 = or i64 %777, 56
  %839 = getelementptr inbounds float, float* %5, i64 %838
  %840 = bitcast float* %839 to <8 x float>*
  %841 = load <8 x float>, <8 x float>* %840, align 1, !tbaa !12
  %842 = add nsw i64 %777, %651
  %843 = getelementptr inbounds float, float* %3, i64 %842
  %844 = bitcast float* %843 to <8 x float>*
  %845 = load <8 x float>, <8 x float>* %844, align 1, !tbaa !12
  %846 = add nsw i64 %842, 8
  %847 = getelementptr inbounds float, float* %3, i64 %846
  %848 = bitcast float* %847 to <8 x float>*
  %849 = load <8 x float>, <8 x float>* %848, align 1, !tbaa !12
  %850 = add nsw i64 %842, 16
  %851 = getelementptr inbounds float, float* %3, i64 %850
  %852 = bitcast float* %851 to <8 x float>*
  %853 = load <8 x float>, <8 x float>* %852, align 1, !tbaa !12
  %854 = add nsw i64 %842, 24
  %855 = getelementptr inbounds float, float* %3, i64 %854
  %856 = bitcast float* %855 to <8 x float>*
  %857 = load <8 x float>, <8 x float>* %856, align 1, !tbaa !12
  %858 = add nsw i64 %842, 32
  %859 = getelementptr inbounds float, float* %3, i64 %858
  %860 = bitcast float* %859 to <8 x float>*
  %861 = load <8 x float>, <8 x float>* %860, align 1, !tbaa !12
  %862 = add nsw i64 %842, 40
  %863 = getelementptr inbounds float, float* %3, i64 %862
  %864 = bitcast float* %863 to <8 x float>*
  %865 = load <8 x float>, <8 x float>* %864, align 1, !tbaa !12
  %866 = add nsw i64 %842, 48
  %867 = getelementptr inbounds float, float* %3, i64 %866
  %868 = bitcast float* %867 to <8 x float>*
  %869 = load <8 x float>, <8 x float>* %868, align 1, !tbaa !12
  %870 = add nsw i64 %842, 56
  %871 = getelementptr inbounds float, float* %3, i64 %870
  %872 = bitcast float* %871 to <8 x float>*
  %873 = load <8 x float>, <8 x float>* %872, align 1, !tbaa !12
  %874 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %845, <8 x float> %55, <8 x float> %813) #10
  %875 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %849, <8 x float> %55, <8 x float> %817) #10
  %876 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %853, <8 x float> %55, <8 x float> %821) #10
  %877 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %857, <8 x float> %55, <8 x float> %825) #10
  %878 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %861, <8 x float> %55, <8 x float> %829) #10
  %879 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %865, <8 x float> %55, <8 x float> %833) #10
  %880 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %869, <8 x float> %55, <8 x float> %837) #10
  %881 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %873, <8 x float> %55, <8 x float> %841) #10
  store <8 x float> %874, <8 x float>* %812, align 1, !tbaa !12
  store <8 x float> %875, <8 x float>* %816, align 1, !tbaa !12
  store <8 x float> %876, <8 x float>* %820, align 1, !tbaa !12
  store <8 x float> %877, <8 x float>* %824, align 1, !tbaa !12
  store <8 x float> %878, <8 x float>* %828, align 1, !tbaa !12
  store <8 x float> %879, <8 x float>* %832, align 1, !tbaa !12
  store <8 x float> %880, <8 x float>* %836, align 1, !tbaa !12
  store <8 x float> %881, <8 x float>* %840, align 1, !tbaa !12
  %882 = add nuw nsw i64 %777, 64
  %883 = icmp ult i64 %882, %652
  br i1 %883, label %776, label %770

884:                                              ; preds = %889, %20, %532, %647, %770
  %885 = add nuw nsw i64 %21, 8
  %886 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %887 = sext i32 %886 to i64
  %888 = icmp slt i64 %885, %887
  br i1 %888, label %20, label %8

889:                                              ; preds = %771, %889
  %890 = phi i64 [ 0, %771 ], [ %995, %889 ]
  %891 = getelementptr inbounds float, float* %5, i64 %890
  %892 = getelementptr inbounds float, float* %891, i64 8
  %893 = bitcast float* %892 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %893, i32 0, i32 1, i32 1)
  %894 = getelementptr inbounds float, float* %3, i64 %890
  %895 = getelementptr inbounds float, float* %894, i64 8
  %896 = bitcast float* %895 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %896, i32 0, i32 1, i32 1)
  %897 = getelementptr inbounds float, float* %891, i64 16
  %898 = bitcast float* %897 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %898, i32 0, i32 1, i32 1)
  %899 = getelementptr inbounds float, float* %894, i64 16
  %900 = bitcast float* %899 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %900, i32 0, i32 1, i32 1)
  %901 = getelementptr inbounds float, float* %891, i64 24
  %902 = bitcast float* %901 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %902, i32 0, i32 1, i32 1)
  %903 = getelementptr inbounds float, float* %894, i64 24
  %904 = bitcast float* %903 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %904, i32 0, i32 1, i32 1)
  %905 = getelementptr inbounds float, float* %891, i64 32
  %906 = bitcast float* %905 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %906, i32 0, i32 1, i32 1)
  %907 = getelementptr inbounds float, float* %894, i64 32
  %908 = bitcast float* %907 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %908, i32 0, i32 1, i32 1)
  %909 = getelementptr inbounds float, float* %891, i64 40
  %910 = bitcast float* %909 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %910, i32 0, i32 1, i32 1)
  %911 = getelementptr inbounds float, float* %894, i64 40
  %912 = bitcast float* %911 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %912, i32 0, i32 1, i32 1)
  %913 = getelementptr inbounds float, float* %891, i64 48
  %914 = bitcast float* %913 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %914, i32 0, i32 1, i32 1)
  %915 = getelementptr inbounds float, float* %894, i64 48
  %916 = bitcast float* %915 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %916, i32 0, i32 1, i32 1)
  %917 = getelementptr inbounds float, float* %891, i64 56
  %918 = bitcast float* %917 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %918, i32 0, i32 1, i32 1)
  %919 = getelementptr inbounds float, float* %894, i64 56
  %920 = bitcast float* %919 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %920, i32 0, i32 1, i32 1)
  %921 = getelementptr inbounds float, float* %891, i64 64
  %922 = bitcast float* %921 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %922, i32 0, i32 1, i32 1)
  %923 = getelementptr inbounds float, float* %894, i64 64
  %924 = bitcast float* %923 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %924, i32 0, i32 1, i32 1)
  %925 = bitcast float* %891 to <8 x float>*
  %926 = load <8 x float>, <8 x float>* %925, align 1, !tbaa !12
  %927 = or i64 %890, 8
  %928 = getelementptr inbounds float, float* %5, i64 %927
  %929 = bitcast float* %928 to <8 x float>*
  %930 = load <8 x float>, <8 x float>* %929, align 1, !tbaa !12
  %931 = or i64 %890, 16
  %932 = getelementptr inbounds float, float* %5, i64 %931
  %933 = bitcast float* %932 to <8 x float>*
  %934 = load <8 x float>, <8 x float>* %933, align 1, !tbaa !12
  %935 = or i64 %890, 24
  %936 = getelementptr inbounds float, float* %5, i64 %935
  %937 = bitcast float* %936 to <8 x float>*
  %938 = load <8 x float>, <8 x float>* %937, align 1, !tbaa !12
  %939 = or i64 %890, 32
  %940 = getelementptr inbounds float, float* %5, i64 %939
  %941 = bitcast float* %940 to <8 x float>*
  %942 = load <8 x float>, <8 x float>* %941, align 1, !tbaa !12
  %943 = or i64 %890, 40
  %944 = getelementptr inbounds float, float* %5, i64 %943
  %945 = bitcast float* %944 to <8 x float>*
  %946 = load <8 x float>, <8 x float>* %945, align 1, !tbaa !12
  %947 = or i64 %890, 48
  %948 = getelementptr inbounds float, float* %5, i64 %947
  %949 = bitcast float* %948 to <8 x float>*
  %950 = load <8 x float>, <8 x float>* %949, align 1, !tbaa !12
  %951 = or i64 %890, 56
  %952 = getelementptr inbounds float, float* %5, i64 %951
  %953 = bitcast float* %952 to <8 x float>*
  %954 = load <8 x float>, <8 x float>* %953, align 1, !tbaa !12
  %955 = add nsw i64 %890, %774
  %956 = getelementptr inbounds float, float* %3, i64 %955
  %957 = bitcast float* %956 to <8 x float>*
  %958 = load <8 x float>, <8 x float>* %957, align 1, !tbaa !12
  %959 = add nsw i64 %955, 8
  %960 = getelementptr inbounds float, float* %3, i64 %959
  %961 = bitcast float* %960 to <8 x float>*
  %962 = load <8 x float>, <8 x float>* %961, align 1, !tbaa !12
  %963 = add nsw i64 %955, 16
  %964 = getelementptr inbounds float, float* %3, i64 %963
  %965 = bitcast float* %964 to <8 x float>*
  %966 = load <8 x float>, <8 x float>* %965, align 1, !tbaa !12
  %967 = add nsw i64 %955, 24
  %968 = getelementptr inbounds float, float* %3, i64 %967
  %969 = bitcast float* %968 to <8 x float>*
  %970 = load <8 x float>, <8 x float>* %969, align 1, !tbaa !12
  %971 = add nsw i64 %955, 32
  %972 = getelementptr inbounds float, float* %3, i64 %971
  %973 = bitcast float* %972 to <8 x float>*
  %974 = load <8 x float>, <8 x float>* %973, align 1, !tbaa !12
  %975 = add nsw i64 %955, 40
  %976 = getelementptr inbounds float, float* %3, i64 %975
  %977 = bitcast float* %976 to <8 x float>*
  %978 = load <8 x float>, <8 x float>* %977, align 1, !tbaa !12
  %979 = add nsw i64 %955, 48
  %980 = getelementptr inbounds float, float* %3, i64 %979
  %981 = bitcast float* %980 to <8 x float>*
  %982 = load <8 x float>, <8 x float>* %981, align 1, !tbaa !12
  %983 = add nsw i64 %955, 56
  %984 = getelementptr inbounds float, float* %3, i64 %983
  %985 = bitcast float* %984 to <8 x float>*
  %986 = load <8 x float>, <8 x float>* %985, align 1, !tbaa !12
  %987 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %958, <8 x float> %60, <8 x float> %926) #10
  %988 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %962, <8 x float> %60, <8 x float> %930) #10
  %989 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %966, <8 x float> %60, <8 x float> %934) #10
  %990 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %970, <8 x float> %60, <8 x float> %938) #10
  %991 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %974, <8 x float> %60, <8 x float> %942) #10
  %992 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %978, <8 x float> %60, <8 x float> %946) #10
  %993 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %982, <8 x float> %60, <8 x float> %950) #10
  %994 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %986, <8 x float> %60, <8 x float> %954) #10
  store <8 x float> %987, <8 x float>* %925, align 1, !tbaa !12
  store <8 x float> %988, <8 x float>* %929, align 1, !tbaa !12
  store <8 x float> %989, <8 x float>* %933, align 1, !tbaa !12
  store <8 x float> %990, <8 x float>* %937, align 1, !tbaa !12
  store <8 x float> %991, <8 x float>* %941, align 1, !tbaa !12
  store <8 x float> %992, <8 x float>* %945, align 1, !tbaa !12
  store <8 x float> %993, <8 x float>* %949, align 1, !tbaa !12
  store <8 x float> %994, <8 x float>* %953, align 1, !tbaa !12
  %995 = add nuw nsw i64 %890, 64
  %996 = icmp ult i64 %995, %775
  br i1 %996, label %889, label %884
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 136
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui8_uk8.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
