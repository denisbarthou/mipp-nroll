; ModuleID = 'codes/matvec_ui14_uk4.cpp'
source_filename = "codes/matvec_ui14_uk4.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui14_uk4.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 112
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = sdiv i32 %4, 32
  %6 = shl nsw i32 %5, 5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %639, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %639
  %21 = phi i64 [ %640, %639 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = or i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %639

43:                                               ; preds = %20
  %44 = zext i32 %41 to i64
  %45 = trunc i64 %21 to i32
  %46 = mul nsw i32 %41, %45
  br label %53

47:                                               ; preds = %53
  br i1 %42, label %48, label %446

48:                                               ; preds = %47
  %49 = trunc i64 %26 to i32
  %50 = mul nsw i32 %41, %49
  %51 = sext i32 %50 to i64
  %52 = zext i32 %41 to i64
  br label %260

53:                                               ; preds = %43, %53
  %54 = phi i64 [ 0, %43 ], [ %252, %53 ]
  %55 = getelementptr inbounds float, float* %5, i64 %54
  %56 = getelementptr inbounds float, float* %55, i64 8
  %57 = bitcast float* %56 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %57, i32 0, i32 1, i32 1)
  %58 = getelementptr inbounds float, float* %3, i64 %54
  %59 = getelementptr inbounds float, float* %58, i64 8
  %60 = bitcast float* %59 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %60, i32 0, i32 1, i32 1)
  %61 = getelementptr inbounds float, float* %55, i64 16
  %62 = bitcast float* %61 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %62, i32 0, i32 1, i32 1)
  %63 = getelementptr inbounds float, float* %58, i64 16
  %64 = bitcast float* %63 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %64, i32 0, i32 1, i32 1)
  %65 = getelementptr inbounds float, float* %55, i64 24
  %66 = bitcast float* %65 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %66, i32 0, i32 1, i32 1)
  %67 = getelementptr inbounds float, float* %58, i64 24
  %68 = bitcast float* %67 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %68, i32 0, i32 1, i32 1)
  %69 = getelementptr inbounds float, float* %55, i64 32
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %70, i32 0, i32 1, i32 1)
  %71 = getelementptr inbounds float, float* %58, i64 32
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %72, i32 0, i32 1, i32 1)
  %73 = getelementptr inbounds float, float* %55, i64 40
  %74 = bitcast float* %73 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %74, i32 0, i32 1, i32 1)
  %75 = getelementptr inbounds float, float* %58, i64 40
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %76, i32 0, i32 1, i32 1)
  %77 = getelementptr inbounds float, float* %55, i64 48
  %78 = bitcast float* %77 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %78, i32 0, i32 1, i32 1)
  %79 = getelementptr inbounds float, float* %58, i64 48
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %55, i64 56
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %58, i64 56
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %55, i64 64
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %58, i64 64
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %55, i64 72
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %58, i64 72
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %55, i64 80
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %58, i64 80
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %55, i64 88
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %58, i64 88
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %55, i64 96
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %58, i64 96
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %55, i64 104
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %58, i64 104
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %55, i64 112
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %58, i64 112
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = bitcast float* %55 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 1, !tbaa !12
  %115 = or i64 %54, 8
  %116 = getelementptr inbounds float, float* %5, i64 %115
  %117 = bitcast float* %116 to <8 x float>*
  %118 = load <8 x float>, <8 x float>* %117, align 1, !tbaa !12
  %119 = add nuw nsw i64 %54, 16
  %120 = getelementptr inbounds float, float* %5, i64 %119
  %121 = bitcast float* %120 to <8 x float>*
  %122 = load <8 x float>, <8 x float>* %121, align 1, !tbaa !12
  %123 = add nuw nsw i64 %54, 24
  %124 = getelementptr inbounds float, float* %5, i64 %123
  %125 = bitcast float* %124 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 1, !tbaa !12
  %127 = add nuw nsw i64 %54, 32
  %128 = getelementptr inbounds float, float* %5, i64 %127
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !tbaa !12
  %131 = add nuw nsw i64 %54, 40
  %132 = getelementptr inbounds float, float* %5, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = add nuw nsw i64 %54, 48
  %136 = getelementptr inbounds float, float* %5, i64 %135
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 1, !tbaa !12
  %139 = add nuw nsw i64 %54, 56
  %140 = getelementptr inbounds float, float* %5, i64 %139
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 1, !tbaa !12
  %143 = add nuw nsw i64 %54, 64
  %144 = getelementptr inbounds float, float* %5, i64 %143
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 1, !tbaa !12
  %147 = add nuw nsw i64 %54, 72
  %148 = getelementptr inbounds float, float* %5, i64 %147
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 1, !tbaa !12
  %151 = add nuw nsw i64 %54, 80
  %152 = getelementptr inbounds float, float* %5, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 1, !tbaa !12
  %155 = add nuw nsw i64 %54, 88
  %156 = getelementptr inbounds float, float* %5, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 1, !tbaa !12
  %159 = add nuw nsw i64 %54, 96
  %160 = getelementptr inbounds float, float* %5, i64 %159
  %161 = bitcast float* %160 to <8 x float>*
  %162 = load <8 x float>, <8 x float>* %161, align 1, !tbaa !12
  %163 = add nuw nsw i64 %54, 104
  %164 = getelementptr inbounds float, float* %5, i64 %163
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 1, !tbaa !12
  %167 = trunc i64 %54 to i32
  %168 = add nsw i32 %46, %167
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float, float* %3, i64 %169
  %171 = bitcast float* %170 to <8 x float>*
  %172 = load <8 x float>, <8 x float>* %171, align 1, !tbaa !12
  %173 = add nsw i32 %168, 8
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds float, float* %3, i64 %174
  %176 = bitcast float* %175 to <8 x float>*
  %177 = load <8 x float>, <8 x float>* %176, align 1, !tbaa !12
  %178 = add nsw i32 %168, 16
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds float, float* %3, i64 %179
  %181 = bitcast float* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 1, !tbaa !12
  %183 = add nsw i32 %168, 24
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float, float* %3, i64 %184
  %186 = bitcast float* %185 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !tbaa !12
  %188 = add nsw i32 %168, 32
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %3, i64 %189
  %191 = bitcast float* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 1, !tbaa !12
  %193 = add nsw i32 %168, 40
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %3, i64 %194
  %196 = bitcast float* %195 to <8 x float>*
  %197 = load <8 x float>, <8 x float>* %196, align 1, !tbaa !12
  %198 = add nsw i32 %168, 48
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float, float* %3, i64 %199
  %201 = bitcast float* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 1, !tbaa !12
  %203 = add nsw i32 %168, 56
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %3, i64 %204
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 1, !tbaa !12
  %208 = add nsw i32 %168, 64
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float* %3, i64 %209
  %211 = bitcast float* %210 to <8 x float>*
  %212 = load <8 x float>, <8 x float>* %211, align 1, !tbaa !12
  %213 = add nsw i32 %168, 72
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %3, i64 %214
  %216 = bitcast float* %215 to <8 x float>*
  %217 = load <8 x float>, <8 x float>* %216, align 1, !tbaa !12
  %218 = add nsw i32 %168, 80
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds float, float* %3, i64 %219
  %221 = bitcast float* %220 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 1, !tbaa !12
  %223 = add nsw i32 %168, 88
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds float, float* %3, i64 %224
  %226 = bitcast float* %225 to <8 x float>*
  %227 = load <8 x float>, <8 x float>* %226, align 1, !tbaa !12
  %228 = add nsw i32 %168, 96
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds float, float* %3, i64 %229
  %231 = bitcast float* %230 to <8 x float>*
  %232 = load <8 x float>, <8 x float>* %231, align 1, !tbaa !12
  %233 = add nsw i32 %168, 104
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds float, float* %3, i64 %234
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 1, !tbaa !12
  %238 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %172, <8 x float> %25, <8 x float> %114) #10
  %239 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %177, <8 x float> %25, <8 x float> %118) #10
  %240 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %182, <8 x float> %25, <8 x float> %122) #10
  %241 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %187, <8 x float> %25, <8 x float> %126) #10
  %242 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %192, <8 x float> %25, <8 x float> %130) #10
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %197, <8 x float> %25, <8 x float> %134) #10
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %25, <8 x float> %138) #10
  %245 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %25, <8 x float> %142) #10
  %246 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %212, <8 x float> %25, <8 x float> %146) #10
  %247 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %217, <8 x float> %25, <8 x float> %150) #10
  %248 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %25, <8 x float> %154) #10
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %227, <8 x float> %25, <8 x float> %158) #10
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %232, <8 x float> %25, <8 x float> %162) #10
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %237, <8 x float> %25, <8 x float> %166) #10
  store <8 x float> %238, <8 x float>* %113, align 1, !tbaa !12
  store <8 x float> %239, <8 x float>* %117, align 1, !tbaa !12
  store <8 x float> %240, <8 x float>* %121, align 1, !tbaa !12
  store <8 x float> %241, <8 x float>* %125, align 1, !tbaa !12
  store <8 x float> %242, <8 x float>* %129, align 1, !tbaa !12
  store <8 x float> %243, <8 x float>* %133, align 1, !tbaa !12
  store <8 x float> %244, <8 x float>* %137, align 1, !tbaa !12
  store <8 x float> %245, <8 x float>* %141, align 1, !tbaa !12
  store <8 x float> %246, <8 x float>* %145, align 1, !tbaa !12
  store <8 x float> %247, <8 x float>* %149, align 1, !tbaa !12
  store <8 x float> %248, <8 x float>* %153, align 1, !tbaa !12
  store <8 x float> %249, <8 x float>* %157, align 1, !tbaa !12
  store <8 x float> %250, <8 x float>* %161, align 1, !tbaa !12
  store <8 x float> %251, <8 x float>* %165, align 1, !tbaa !12
  %252 = add nuw nsw i64 %54, 112
  %253 = icmp ult i64 %252, %44
  br i1 %253, label %53, label %47

254:                                              ; preds = %260
  br i1 %42, label %255, label %446

255:                                              ; preds = %254
  %256 = trunc i64 %31 to i32
  %257 = mul nsw i32 %41, %256
  %258 = sext i32 %257 to i64
  %259 = zext i32 %41 to i64
  br label %453

260:                                              ; preds = %48, %260
  %261 = phi i64 [ 0, %48 ], [ %444, %260 ]
  %262 = getelementptr inbounds float, float* %5, i64 %261
  %263 = getelementptr inbounds float, float* %262, i64 8
  %264 = bitcast float* %263 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %264, i32 0, i32 1, i32 1)
  %265 = getelementptr inbounds float, float* %3, i64 %261
  %266 = getelementptr inbounds float, float* %265, i64 8
  %267 = bitcast float* %266 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %267, i32 0, i32 1, i32 1)
  %268 = getelementptr inbounds float, float* %262, i64 16
  %269 = bitcast float* %268 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %269, i32 0, i32 1, i32 1)
  %270 = getelementptr inbounds float, float* %265, i64 16
  %271 = bitcast float* %270 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %271, i32 0, i32 1, i32 1)
  %272 = getelementptr inbounds float, float* %262, i64 24
  %273 = bitcast float* %272 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %273, i32 0, i32 1, i32 1)
  %274 = getelementptr inbounds float, float* %265, i64 24
  %275 = bitcast float* %274 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %275, i32 0, i32 1, i32 1)
  %276 = getelementptr inbounds float, float* %262, i64 32
  %277 = bitcast float* %276 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %277, i32 0, i32 1, i32 1)
  %278 = getelementptr inbounds float, float* %265, i64 32
  %279 = bitcast float* %278 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %279, i32 0, i32 1, i32 1)
  %280 = getelementptr inbounds float, float* %262, i64 40
  %281 = bitcast float* %280 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %281, i32 0, i32 1, i32 1)
  %282 = getelementptr inbounds float, float* %265, i64 40
  %283 = bitcast float* %282 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %283, i32 0, i32 1, i32 1)
  %284 = getelementptr inbounds float, float* %262, i64 48
  %285 = bitcast float* %284 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %285, i32 0, i32 1, i32 1)
  %286 = getelementptr inbounds float, float* %265, i64 48
  %287 = bitcast float* %286 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %287, i32 0, i32 1, i32 1)
  %288 = getelementptr inbounds float, float* %262, i64 56
  %289 = bitcast float* %288 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %289, i32 0, i32 1, i32 1)
  %290 = getelementptr inbounds float, float* %265, i64 56
  %291 = bitcast float* %290 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %291, i32 0, i32 1, i32 1)
  %292 = getelementptr inbounds float, float* %262, i64 64
  %293 = bitcast float* %292 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %293, i32 0, i32 1, i32 1)
  %294 = getelementptr inbounds float, float* %265, i64 64
  %295 = bitcast float* %294 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %295, i32 0, i32 1, i32 1)
  %296 = getelementptr inbounds float, float* %262, i64 72
  %297 = bitcast float* %296 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %297, i32 0, i32 1, i32 1)
  %298 = getelementptr inbounds float, float* %265, i64 72
  %299 = bitcast float* %298 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %299, i32 0, i32 1, i32 1)
  %300 = getelementptr inbounds float, float* %262, i64 80
  %301 = bitcast float* %300 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %301, i32 0, i32 1, i32 1)
  %302 = getelementptr inbounds float, float* %265, i64 80
  %303 = bitcast float* %302 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %303, i32 0, i32 1, i32 1)
  %304 = getelementptr inbounds float, float* %262, i64 88
  %305 = bitcast float* %304 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %305, i32 0, i32 1, i32 1)
  %306 = getelementptr inbounds float, float* %265, i64 88
  %307 = bitcast float* %306 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %307, i32 0, i32 1, i32 1)
  %308 = getelementptr inbounds float, float* %262, i64 96
  %309 = bitcast float* %308 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %309, i32 0, i32 1, i32 1)
  %310 = getelementptr inbounds float, float* %265, i64 96
  %311 = bitcast float* %310 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %311, i32 0, i32 1, i32 1)
  %312 = getelementptr inbounds float, float* %262, i64 104
  %313 = bitcast float* %312 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %313, i32 0, i32 1, i32 1)
  %314 = getelementptr inbounds float, float* %265, i64 104
  %315 = bitcast float* %314 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %315, i32 0, i32 1, i32 1)
  %316 = getelementptr inbounds float, float* %262, i64 112
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %265, i64 112
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = bitcast float* %262 to <8 x float>*
  %321 = load <8 x float>, <8 x float>* %320, align 1, !tbaa !12
  %322 = or i64 %261, 8
  %323 = getelementptr inbounds float, float* %5, i64 %322
  %324 = bitcast float* %323 to <8 x float>*
  %325 = load <8 x float>, <8 x float>* %324, align 1, !tbaa !12
  %326 = add nuw nsw i64 %261, 16
  %327 = getelementptr inbounds float, float* %5, i64 %326
  %328 = bitcast float* %327 to <8 x float>*
  %329 = load <8 x float>, <8 x float>* %328, align 1, !tbaa !12
  %330 = add nuw nsw i64 %261, 24
  %331 = getelementptr inbounds float, float* %5, i64 %330
  %332 = bitcast float* %331 to <8 x float>*
  %333 = load <8 x float>, <8 x float>* %332, align 1, !tbaa !12
  %334 = add nuw nsw i64 %261, 32
  %335 = getelementptr inbounds float, float* %5, i64 %334
  %336 = bitcast float* %335 to <8 x float>*
  %337 = load <8 x float>, <8 x float>* %336, align 1, !tbaa !12
  %338 = add nuw nsw i64 %261, 40
  %339 = getelementptr inbounds float, float* %5, i64 %338
  %340 = bitcast float* %339 to <8 x float>*
  %341 = load <8 x float>, <8 x float>* %340, align 1, !tbaa !12
  %342 = add nuw nsw i64 %261, 48
  %343 = getelementptr inbounds float, float* %5, i64 %342
  %344 = bitcast float* %343 to <8 x float>*
  %345 = load <8 x float>, <8 x float>* %344, align 1, !tbaa !12
  %346 = add nuw nsw i64 %261, 56
  %347 = getelementptr inbounds float, float* %5, i64 %346
  %348 = bitcast float* %347 to <8 x float>*
  %349 = load <8 x float>, <8 x float>* %348, align 1, !tbaa !12
  %350 = add nuw nsw i64 %261, 64
  %351 = getelementptr inbounds float, float* %5, i64 %350
  %352 = bitcast float* %351 to <8 x float>*
  %353 = load <8 x float>, <8 x float>* %352, align 1, !tbaa !12
  %354 = add nuw nsw i64 %261, 72
  %355 = getelementptr inbounds float, float* %5, i64 %354
  %356 = bitcast float* %355 to <8 x float>*
  %357 = load <8 x float>, <8 x float>* %356, align 1, !tbaa !12
  %358 = add nuw nsw i64 %261, 80
  %359 = getelementptr inbounds float, float* %5, i64 %358
  %360 = bitcast float* %359 to <8 x float>*
  %361 = load <8 x float>, <8 x float>* %360, align 1, !tbaa !12
  %362 = add nuw nsw i64 %261, 88
  %363 = getelementptr inbounds float, float* %5, i64 %362
  %364 = bitcast float* %363 to <8 x float>*
  %365 = load <8 x float>, <8 x float>* %364, align 1, !tbaa !12
  %366 = add nuw nsw i64 %261, 96
  %367 = getelementptr inbounds float, float* %5, i64 %366
  %368 = bitcast float* %367 to <8 x float>*
  %369 = load <8 x float>, <8 x float>* %368, align 1, !tbaa !12
  %370 = add nuw nsw i64 %261, 104
  %371 = getelementptr inbounds float, float* %5, i64 %370
  %372 = bitcast float* %371 to <8 x float>*
  %373 = load <8 x float>, <8 x float>* %372, align 1, !tbaa !12
  %374 = add nsw i64 %261, %51
  %375 = getelementptr inbounds float, float* %3, i64 %374
  %376 = bitcast float* %375 to <8 x float>*
  %377 = load <8 x float>, <8 x float>* %376, align 1, !tbaa !12
  %378 = add nsw i64 %374, 8
  %379 = getelementptr inbounds float, float* %3, i64 %378
  %380 = bitcast float* %379 to <8 x float>*
  %381 = load <8 x float>, <8 x float>* %380, align 1, !tbaa !12
  %382 = add nsw i64 %374, 16
  %383 = getelementptr inbounds float, float* %3, i64 %382
  %384 = bitcast float* %383 to <8 x float>*
  %385 = load <8 x float>, <8 x float>* %384, align 1, !tbaa !12
  %386 = add nsw i64 %374, 24
  %387 = getelementptr inbounds float, float* %3, i64 %386
  %388 = bitcast float* %387 to <8 x float>*
  %389 = load <8 x float>, <8 x float>* %388, align 1, !tbaa !12
  %390 = add nsw i64 %374, 32
  %391 = getelementptr inbounds float, float* %3, i64 %390
  %392 = bitcast float* %391 to <8 x float>*
  %393 = load <8 x float>, <8 x float>* %392, align 1, !tbaa !12
  %394 = add nsw i64 %374, 40
  %395 = getelementptr inbounds float, float* %3, i64 %394
  %396 = bitcast float* %395 to <8 x float>*
  %397 = load <8 x float>, <8 x float>* %396, align 1, !tbaa !12
  %398 = add nsw i64 %374, 48
  %399 = getelementptr inbounds float, float* %3, i64 %398
  %400 = bitcast float* %399 to <8 x float>*
  %401 = load <8 x float>, <8 x float>* %400, align 1, !tbaa !12
  %402 = add nsw i64 %374, 56
  %403 = getelementptr inbounds float, float* %3, i64 %402
  %404 = bitcast float* %403 to <8 x float>*
  %405 = load <8 x float>, <8 x float>* %404, align 1, !tbaa !12
  %406 = add nsw i64 %374, 64
  %407 = getelementptr inbounds float, float* %3, i64 %406
  %408 = bitcast float* %407 to <8 x float>*
  %409 = load <8 x float>, <8 x float>* %408, align 1, !tbaa !12
  %410 = add nsw i64 %374, 72
  %411 = getelementptr inbounds float, float* %3, i64 %410
  %412 = bitcast float* %411 to <8 x float>*
  %413 = load <8 x float>, <8 x float>* %412, align 1, !tbaa !12
  %414 = add nsw i64 %374, 80
  %415 = getelementptr inbounds float, float* %3, i64 %414
  %416 = bitcast float* %415 to <8 x float>*
  %417 = load <8 x float>, <8 x float>* %416, align 1, !tbaa !12
  %418 = add nsw i64 %374, 88
  %419 = getelementptr inbounds float, float* %3, i64 %418
  %420 = bitcast float* %419 to <8 x float>*
  %421 = load <8 x float>, <8 x float>* %420, align 1, !tbaa !12
  %422 = add nsw i64 %374, 96
  %423 = getelementptr inbounds float, float* %3, i64 %422
  %424 = bitcast float* %423 to <8 x float>*
  %425 = load <8 x float>, <8 x float>* %424, align 1, !tbaa !12
  %426 = add nsw i64 %374, 104
  %427 = getelementptr inbounds float, float* %3, i64 %426
  %428 = bitcast float* %427 to <8 x float>*
  %429 = load <8 x float>, <8 x float>* %428, align 1, !tbaa !12
  %430 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %377, <8 x float> %30, <8 x float> %321) #10
  %431 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %381, <8 x float> %30, <8 x float> %325) #10
  %432 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %385, <8 x float> %30, <8 x float> %329) #10
  %433 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %30, <8 x float> %333) #10
  %434 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %393, <8 x float> %30, <8 x float> %337) #10
  %435 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %397, <8 x float> %30, <8 x float> %341) #10
  %436 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %401, <8 x float> %30, <8 x float> %345) #10
  %437 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %405, <8 x float> %30, <8 x float> %349) #10
  %438 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %409, <8 x float> %30, <8 x float> %353) #10
  %439 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %413, <8 x float> %30, <8 x float> %357) #10
  %440 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %417, <8 x float> %30, <8 x float> %361) #10
  %441 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %421, <8 x float> %30, <8 x float> %365) #10
  %442 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %425, <8 x float> %30, <8 x float> %369) #10
  %443 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %429, <8 x float> %30, <8 x float> %373) #10
  store <8 x float> %430, <8 x float>* %320, align 1, !tbaa !12
  store <8 x float> %431, <8 x float>* %324, align 1, !tbaa !12
  store <8 x float> %432, <8 x float>* %328, align 1, !tbaa !12
  store <8 x float> %433, <8 x float>* %332, align 1, !tbaa !12
  store <8 x float> %434, <8 x float>* %336, align 1, !tbaa !12
  store <8 x float> %435, <8 x float>* %340, align 1, !tbaa !12
  store <8 x float> %436, <8 x float>* %344, align 1, !tbaa !12
  store <8 x float> %437, <8 x float>* %348, align 1, !tbaa !12
  store <8 x float> %438, <8 x float>* %352, align 1, !tbaa !12
  store <8 x float> %439, <8 x float>* %356, align 1, !tbaa !12
  store <8 x float> %440, <8 x float>* %360, align 1, !tbaa !12
  store <8 x float> %441, <8 x float>* %364, align 1, !tbaa !12
  store <8 x float> %442, <8 x float>* %368, align 1, !tbaa !12
  store <8 x float> %443, <8 x float>* %372, align 1, !tbaa !12
  %444 = add nuw nsw i64 %261, 112
  %445 = icmp ult i64 %444, %52
  br i1 %445, label %260, label %254

446:                                              ; preds = %453, %47, %254
  %447 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %448 = icmp sgt i32 %447, 0
  br i1 %448, label %449, label %639

449:                                              ; preds = %446
  %450 = zext i32 %447 to i64
  %451 = trunc i64 %36 to i32
  %452 = mul nsw i32 %447, %451
  br label %644

453:                                              ; preds = %255, %453
  %454 = phi i64 [ 0, %255 ], [ %637, %453 ]
  %455 = getelementptr inbounds float, float* %5, i64 %454
  %456 = getelementptr inbounds float, float* %455, i64 8
  %457 = bitcast float* %456 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %457, i32 0, i32 1, i32 1)
  %458 = getelementptr inbounds float, float* %3, i64 %454
  %459 = getelementptr inbounds float, float* %458, i64 8
  %460 = bitcast float* %459 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %460, i32 0, i32 1, i32 1)
  %461 = getelementptr inbounds float, float* %455, i64 16
  %462 = bitcast float* %461 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %462, i32 0, i32 1, i32 1)
  %463 = getelementptr inbounds float, float* %458, i64 16
  %464 = bitcast float* %463 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %464, i32 0, i32 1, i32 1)
  %465 = getelementptr inbounds float, float* %455, i64 24
  %466 = bitcast float* %465 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %466, i32 0, i32 1, i32 1)
  %467 = getelementptr inbounds float, float* %458, i64 24
  %468 = bitcast float* %467 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %468, i32 0, i32 1, i32 1)
  %469 = getelementptr inbounds float, float* %455, i64 32
  %470 = bitcast float* %469 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %470, i32 0, i32 1, i32 1)
  %471 = getelementptr inbounds float, float* %458, i64 32
  %472 = bitcast float* %471 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %472, i32 0, i32 1, i32 1)
  %473 = getelementptr inbounds float, float* %455, i64 40
  %474 = bitcast float* %473 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %474, i32 0, i32 1, i32 1)
  %475 = getelementptr inbounds float, float* %458, i64 40
  %476 = bitcast float* %475 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %476, i32 0, i32 1, i32 1)
  %477 = getelementptr inbounds float, float* %455, i64 48
  %478 = bitcast float* %477 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %478, i32 0, i32 1, i32 1)
  %479 = getelementptr inbounds float, float* %458, i64 48
  %480 = bitcast float* %479 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %480, i32 0, i32 1, i32 1)
  %481 = getelementptr inbounds float, float* %455, i64 56
  %482 = bitcast float* %481 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %482, i32 0, i32 1, i32 1)
  %483 = getelementptr inbounds float, float* %458, i64 56
  %484 = bitcast float* %483 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %484, i32 0, i32 1, i32 1)
  %485 = getelementptr inbounds float, float* %455, i64 64
  %486 = bitcast float* %485 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %486, i32 0, i32 1, i32 1)
  %487 = getelementptr inbounds float, float* %458, i64 64
  %488 = bitcast float* %487 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %488, i32 0, i32 1, i32 1)
  %489 = getelementptr inbounds float, float* %455, i64 72
  %490 = bitcast float* %489 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %490, i32 0, i32 1, i32 1)
  %491 = getelementptr inbounds float, float* %458, i64 72
  %492 = bitcast float* %491 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %492, i32 0, i32 1, i32 1)
  %493 = getelementptr inbounds float, float* %455, i64 80
  %494 = bitcast float* %493 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %494, i32 0, i32 1, i32 1)
  %495 = getelementptr inbounds float, float* %458, i64 80
  %496 = bitcast float* %495 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %496, i32 0, i32 1, i32 1)
  %497 = getelementptr inbounds float, float* %455, i64 88
  %498 = bitcast float* %497 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %498, i32 0, i32 1, i32 1)
  %499 = getelementptr inbounds float, float* %458, i64 88
  %500 = bitcast float* %499 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %500, i32 0, i32 1, i32 1)
  %501 = getelementptr inbounds float, float* %455, i64 96
  %502 = bitcast float* %501 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %502, i32 0, i32 1, i32 1)
  %503 = getelementptr inbounds float, float* %458, i64 96
  %504 = bitcast float* %503 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %504, i32 0, i32 1, i32 1)
  %505 = getelementptr inbounds float, float* %455, i64 104
  %506 = bitcast float* %505 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %506, i32 0, i32 1, i32 1)
  %507 = getelementptr inbounds float, float* %458, i64 104
  %508 = bitcast float* %507 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %508, i32 0, i32 1, i32 1)
  %509 = getelementptr inbounds float, float* %455, i64 112
  %510 = bitcast float* %509 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %510, i32 0, i32 1, i32 1)
  %511 = getelementptr inbounds float, float* %458, i64 112
  %512 = bitcast float* %511 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %512, i32 0, i32 1, i32 1)
  %513 = bitcast float* %455 to <8 x float>*
  %514 = load <8 x float>, <8 x float>* %513, align 1, !tbaa !12
  %515 = or i64 %454, 8
  %516 = getelementptr inbounds float, float* %5, i64 %515
  %517 = bitcast float* %516 to <8 x float>*
  %518 = load <8 x float>, <8 x float>* %517, align 1, !tbaa !12
  %519 = add nuw nsw i64 %454, 16
  %520 = getelementptr inbounds float, float* %5, i64 %519
  %521 = bitcast float* %520 to <8 x float>*
  %522 = load <8 x float>, <8 x float>* %521, align 1, !tbaa !12
  %523 = add nuw nsw i64 %454, 24
  %524 = getelementptr inbounds float, float* %5, i64 %523
  %525 = bitcast float* %524 to <8 x float>*
  %526 = load <8 x float>, <8 x float>* %525, align 1, !tbaa !12
  %527 = add nuw nsw i64 %454, 32
  %528 = getelementptr inbounds float, float* %5, i64 %527
  %529 = bitcast float* %528 to <8 x float>*
  %530 = load <8 x float>, <8 x float>* %529, align 1, !tbaa !12
  %531 = add nuw nsw i64 %454, 40
  %532 = getelementptr inbounds float, float* %5, i64 %531
  %533 = bitcast float* %532 to <8 x float>*
  %534 = load <8 x float>, <8 x float>* %533, align 1, !tbaa !12
  %535 = add nuw nsw i64 %454, 48
  %536 = getelementptr inbounds float, float* %5, i64 %535
  %537 = bitcast float* %536 to <8 x float>*
  %538 = load <8 x float>, <8 x float>* %537, align 1, !tbaa !12
  %539 = add nuw nsw i64 %454, 56
  %540 = getelementptr inbounds float, float* %5, i64 %539
  %541 = bitcast float* %540 to <8 x float>*
  %542 = load <8 x float>, <8 x float>* %541, align 1, !tbaa !12
  %543 = add nuw nsw i64 %454, 64
  %544 = getelementptr inbounds float, float* %5, i64 %543
  %545 = bitcast float* %544 to <8 x float>*
  %546 = load <8 x float>, <8 x float>* %545, align 1, !tbaa !12
  %547 = add nuw nsw i64 %454, 72
  %548 = getelementptr inbounds float, float* %5, i64 %547
  %549 = bitcast float* %548 to <8 x float>*
  %550 = load <8 x float>, <8 x float>* %549, align 1, !tbaa !12
  %551 = add nuw nsw i64 %454, 80
  %552 = getelementptr inbounds float, float* %5, i64 %551
  %553 = bitcast float* %552 to <8 x float>*
  %554 = load <8 x float>, <8 x float>* %553, align 1, !tbaa !12
  %555 = add nuw nsw i64 %454, 88
  %556 = getelementptr inbounds float, float* %5, i64 %555
  %557 = bitcast float* %556 to <8 x float>*
  %558 = load <8 x float>, <8 x float>* %557, align 1, !tbaa !12
  %559 = add nuw nsw i64 %454, 96
  %560 = getelementptr inbounds float, float* %5, i64 %559
  %561 = bitcast float* %560 to <8 x float>*
  %562 = load <8 x float>, <8 x float>* %561, align 1, !tbaa !12
  %563 = add nuw nsw i64 %454, 104
  %564 = getelementptr inbounds float, float* %5, i64 %563
  %565 = bitcast float* %564 to <8 x float>*
  %566 = load <8 x float>, <8 x float>* %565, align 1, !tbaa !12
  %567 = add nsw i64 %454, %258
  %568 = getelementptr inbounds float, float* %3, i64 %567
  %569 = bitcast float* %568 to <8 x float>*
  %570 = load <8 x float>, <8 x float>* %569, align 1, !tbaa !12
  %571 = add nsw i64 %567, 8
  %572 = getelementptr inbounds float, float* %3, i64 %571
  %573 = bitcast float* %572 to <8 x float>*
  %574 = load <8 x float>, <8 x float>* %573, align 1, !tbaa !12
  %575 = add nsw i64 %567, 16
  %576 = getelementptr inbounds float, float* %3, i64 %575
  %577 = bitcast float* %576 to <8 x float>*
  %578 = load <8 x float>, <8 x float>* %577, align 1, !tbaa !12
  %579 = add nsw i64 %567, 24
  %580 = getelementptr inbounds float, float* %3, i64 %579
  %581 = bitcast float* %580 to <8 x float>*
  %582 = load <8 x float>, <8 x float>* %581, align 1, !tbaa !12
  %583 = add nsw i64 %567, 32
  %584 = getelementptr inbounds float, float* %3, i64 %583
  %585 = bitcast float* %584 to <8 x float>*
  %586 = load <8 x float>, <8 x float>* %585, align 1, !tbaa !12
  %587 = add nsw i64 %567, 40
  %588 = getelementptr inbounds float, float* %3, i64 %587
  %589 = bitcast float* %588 to <8 x float>*
  %590 = load <8 x float>, <8 x float>* %589, align 1, !tbaa !12
  %591 = add nsw i64 %567, 48
  %592 = getelementptr inbounds float, float* %3, i64 %591
  %593 = bitcast float* %592 to <8 x float>*
  %594 = load <8 x float>, <8 x float>* %593, align 1, !tbaa !12
  %595 = add nsw i64 %567, 56
  %596 = getelementptr inbounds float, float* %3, i64 %595
  %597 = bitcast float* %596 to <8 x float>*
  %598 = load <8 x float>, <8 x float>* %597, align 1, !tbaa !12
  %599 = add nsw i64 %567, 64
  %600 = getelementptr inbounds float, float* %3, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 1, !tbaa !12
  %603 = add nsw i64 %567, 72
  %604 = getelementptr inbounds float, float* %3, i64 %603
  %605 = bitcast float* %604 to <8 x float>*
  %606 = load <8 x float>, <8 x float>* %605, align 1, !tbaa !12
  %607 = add nsw i64 %567, 80
  %608 = getelementptr inbounds float, float* %3, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  %610 = load <8 x float>, <8 x float>* %609, align 1, !tbaa !12
  %611 = add nsw i64 %567, 88
  %612 = getelementptr inbounds float, float* %3, i64 %611
  %613 = bitcast float* %612 to <8 x float>*
  %614 = load <8 x float>, <8 x float>* %613, align 1, !tbaa !12
  %615 = add nsw i64 %567, 96
  %616 = getelementptr inbounds float, float* %3, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 1, !tbaa !12
  %619 = add nsw i64 %567, 104
  %620 = getelementptr inbounds float, float* %3, i64 %619
  %621 = bitcast float* %620 to <8 x float>*
  %622 = load <8 x float>, <8 x float>* %621, align 1, !tbaa !12
  %623 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %570, <8 x float> %35, <8 x float> %514) #10
  %624 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %574, <8 x float> %35, <8 x float> %518) #10
  %625 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %578, <8 x float> %35, <8 x float> %522) #10
  %626 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %582, <8 x float> %35, <8 x float> %526) #10
  %627 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %586, <8 x float> %35, <8 x float> %530) #10
  %628 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %590, <8 x float> %35, <8 x float> %534) #10
  %629 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %594, <8 x float> %35, <8 x float> %538) #10
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %598, <8 x float> %35, <8 x float> %542) #10
  %631 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %602, <8 x float> %35, <8 x float> %546) #10
  %632 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %606, <8 x float> %35, <8 x float> %550) #10
  %633 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %610, <8 x float> %35, <8 x float> %554) #10
  %634 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %614, <8 x float> %35, <8 x float> %558) #10
  %635 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %618, <8 x float> %35, <8 x float> %562) #10
  %636 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %622, <8 x float> %35, <8 x float> %566) #10
  store <8 x float> %623, <8 x float>* %513, align 1, !tbaa !12
  store <8 x float> %624, <8 x float>* %517, align 1, !tbaa !12
  store <8 x float> %625, <8 x float>* %521, align 1, !tbaa !12
  store <8 x float> %626, <8 x float>* %525, align 1, !tbaa !12
  store <8 x float> %627, <8 x float>* %529, align 1, !tbaa !12
  store <8 x float> %628, <8 x float>* %533, align 1, !tbaa !12
  store <8 x float> %629, <8 x float>* %537, align 1, !tbaa !12
  store <8 x float> %630, <8 x float>* %541, align 1, !tbaa !12
  store <8 x float> %631, <8 x float>* %545, align 1, !tbaa !12
  store <8 x float> %632, <8 x float>* %549, align 1, !tbaa !12
  store <8 x float> %633, <8 x float>* %553, align 1, !tbaa !12
  store <8 x float> %634, <8 x float>* %557, align 1, !tbaa !12
  store <8 x float> %635, <8 x float>* %561, align 1, !tbaa !12
  store <8 x float> %636, <8 x float>* %565, align 1, !tbaa !12
  %637 = add nuw nsw i64 %454, 112
  %638 = icmp ult i64 %637, %259
  br i1 %638, label %453, label %446

639:                                              ; preds = %644, %20, %446
  %640 = add nuw nsw i64 %21, 4
  %641 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %642 = sext i32 %641 to i64
  %643 = icmp slt i64 %640, %642
  br i1 %643, label %20, label %8

644:                                              ; preds = %449, %644
  %645 = phi i64 [ 0, %449 ], [ %843, %644 ]
  %646 = getelementptr inbounds float, float* %5, i64 %645
  %647 = getelementptr inbounds float, float* %646, i64 8
  %648 = bitcast float* %647 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %648, i32 0, i32 1, i32 1)
  %649 = getelementptr inbounds float, float* %3, i64 %645
  %650 = getelementptr inbounds float, float* %649, i64 8
  %651 = bitcast float* %650 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %651, i32 0, i32 1, i32 1)
  %652 = getelementptr inbounds float, float* %646, i64 16
  %653 = bitcast float* %652 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %653, i32 0, i32 1, i32 1)
  %654 = getelementptr inbounds float, float* %649, i64 16
  %655 = bitcast float* %654 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %655, i32 0, i32 1, i32 1)
  %656 = getelementptr inbounds float, float* %646, i64 24
  %657 = bitcast float* %656 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %657, i32 0, i32 1, i32 1)
  %658 = getelementptr inbounds float, float* %649, i64 24
  %659 = bitcast float* %658 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %659, i32 0, i32 1, i32 1)
  %660 = getelementptr inbounds float, float* %646, i64 32
  %661 = bitcast float* %660 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %661, i32 0, i32 1, i32 1)
  %662 = getelementptr inbounds float, float* %649, i64 32
  %663 = bitcast float* %662 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %663, i32 0, i32 1, i32 1)
  %664 = getelementptr inbounds float, float* %646, i64 40
  %665 = bitcast float* %664 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %665, i32 0, i32 1, i32 1)
  %666 = getelementptr inbounds float, float* %649, i64 40
  %667 = bitcast float* %666 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %667, i32 0, i32 1, i32 1)
  %668 = getelementptr inbounds float, float* %646, i64 48
  %669 = bitcast float* %668 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %669, i32 0, i32 1, i32 1)
  %670 = getelementptr inbounds float, float* %649, i64 48
  %671 = bitcast float* %670 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %671, i32 0, i32 1, i32 1)
  %672 = getelementptr inbounds float, float* %646, i64 56
  %673 = bitcast float* %672 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %673, i32 0, i32 1, i32 1)
  %674 = getelementptr inbounds float, float* %649, i64 56
  %675 = bitcast float* %674 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %675, i32 0, i32 1, i32 1)
  %676 = getelementptr inbounds float, float* %646, i64 64
  %677 = bitcast float* %676 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %677, i32 0, i32 1, i32 1)
  %678 = getelementptr inbounds float, float* %649, i64 64
  %679 = bitcast float* %678 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %679, i32 0, i32 1, i32 1)
  %680 = getelementptr inbounds float, float* %646, i64 72
  %681 = bitcast float* %680 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %681, i32 0, i32 1, i32 1)
  %682 = getelementptr inbounds float, float* %649, i64 72
  %683 = bitcast float* %682 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %683, i32 0, i32 1, i32 1)
  %684 = getelementptr inbounds float, float* %646, i64 80
  %685 = bitcast float* %684 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %685, i32 0, i32 1, i32 1)
  %686 = getelementptr inbounds float, float* %649, i64 80
  %687 = bitcast float* %686 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %687, i32 0, i32 1, i32 1)
  %688 = getelementptr inbounds float, float* %646, i64 88
  %689 = bitcast float* %688 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %689, i32 0, i32 1, i32 1)
  %690 = getelementptr inbounds float, float* %649, i64 88
  %691 = bitcast float* %690 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %691, i32 0, i32 1, i32 1)
  %692 = getelementptr inbounds float, float* %646, i64 96
  %693 = bitcast float* %692 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %693, i32 0, i32 1, i32 1)
  %694 = getelementptr inbounds float, float* %649, i64 96
  %695 = bitcast float* %694 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %695, i32 0, i32 1, i32 1)
  %696 = getelementptr inbounds float, float* %646, i64 104
  %697 = bitcast float* %696 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %697, i32 0, i32 1, i32 1)
  %698 = getelementptr inbounds float, float* %649, i64 104
  %699 = bitcast float* %698 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %699, i32 0, i32 1, i32 1)
  %700 = getelementptr inbounds float, float* %646, i64 112
  %701 = bitcast float* %700 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %701, i32 0, i32 1, i32 1)
  %702 = getelementptr inbounds float, float* %649, i64 112
  %703 = bitcast float* %702 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %703, i32 0, i32 1, i32 1)
  %704 = bitcast float* %646 to <8 x float>*
  %705 = load <8 x float>, <8 x float>* %704, align 1, !tbaa !12
  %706 = or i64 %645, 8
  %707 = getelementptr inbounds float, float* %5, i64 %706
  %708 = bitcast float* %707 to <8 x float>*
  %709 = load <8 x float>, <8 x float>* %708, align 1, !tbaa !12
  %710 = add nuw nsw i64 %645, 16
  %711 = getelementptr inbounds float, float* %5, i64 %710
  %712 = bitcast float* %711 to <8 x float>*
  %713 = load <8 x float>, <8 x float>* %712, align 1, !tbaa !12
  %714 = add nuw nsw i64 %645, 24
  %715 = getelementptr inbounds float, float* %5, i64 %714
  %716 = bitcast float* %715 to <8 x float>*
  %717 = load <8 x float>, <8 x float>* %716, align 1, !tbaa !12
  %718 = add nuw nsw i64 %645, 32
  %719 = getelementptr inbounds float, float* %5, i64 %718
  %720 = bitcast float* %719 to <8 x float>*
  %721 = load <8 x float>, <8 x float>* %720, align 1, !tbaa !12
  %722 = add nuw nsw i64 %645, 40
  %723 = getelementptr inbounds float, float* %5, i64 %722
  %724 = bitcast float* %723 to <8 x float>*
  %725 = load <8 x float>, <8 x float>* %724, align 1, !tbaa !12
  %726 = add nuw nsw i64 %645, 48
  %727 = getelementptr inbounds float, float* %5, i64 %726
  %728 = bitcast float* %727 to <8 x float>*
  %729 = load <8 x float>, <8 x float>* %728, align 1, !tbaa !12
  %730 = add nuw nsw i64 %645, 56
  %731 = getelementptr inbounds float, float* %5, i64 %730
  %732 = bitcast float* %731 to <8 x float>*
  %733 = load <8 x float>, <8 x float>* %732, align 1, !tbaa !12
  %734 = add nuw nsw i64 %645, 64
  %735 = getelementptr inbounds float, float* %5, i64 %734
  %736 = bitcast float* %735 to <8 x float>*
  %737 = load <8 x float>, <8 x float>* %736, align 1, !tbaa !12
  %738 = add nuw nsw i64 %645, 72
  %739 = getelementptr inbounds float, float* %5, i64 %738
  %740 = bitcast float* %739 to <8 x float>*
  %741 = load <8 x float>, <8 x float>* %740, align 1, !tbaa !12
  %742 = add nuw nsw i64 %645, 80
  %743 = getelementptr inbounds float, float* %5, i64 %742
  %744 = bitcast float* %743 to <8 x float>*
  %745 = load <8 x float>, <8 x float>* %744, align 1, !tbaa !12
  %746 = add nuw nsw i64 %645, 88
  %747 = getelementptr inbounds float, float* %5, i64 %746
  %748 = bitcast float* %747 to <8 x float>*
  %749 = load <8 x float>, <8 x float>* %748, align 1, !tbaa !12
  %750 = add nuw nsw i64 %645, 96
  %751 = getelementptr inbounds float, float* %5, i64 %750
  %752 = bitcast float* %751 to <8 x float>*
  %753 = load <8 x float>, <8 x float>* %752, align 1, !tbaa !12
  %754 = add nuw nsw i64 %645, 104
  %755 = getelementptr inbounds float, float* %5, i64 %754
  %756 = bitcast float* %755 to <8 x float>*
  %757 = load <8 x float>, <8 x float>* %756, align 1, !tbaa !12
  %758 = trunc i64 %645 to i32
  %759 = add nsw i32 %452, %758
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds float, float* %3, i64 %760
  %762 = bitcast float* %761 to <8 x float>*
  %763 = load <8 x float>, <8 x float>* %762, align 1, !tbaa !12
  %764 = add nsw i32 %759, 8
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds float, float* %3, i64 %765
  %767 = bitcast float* %766 to <8 x float>*
  %768 = load <8 x float>, <8 x float>* %767, align 1, !tbaa !12
  %769 = add nsw i32 %759, 16
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds float, float* %3, i64 %770
  %772 = bitcast float* %771 to <8 x float>*
  %773 = load <8 x float>, <8 x float>* %772, align 1, !tbaa !12
  %774 = add nsw i32 %759, 24
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds float, float* %3, i64 %775
  %777 = bitcast float* %776 to <8 x float>*
  %778 = load <8 x float>, <8 x float>* %777, align 1, !tbaa !12
  %779 = add nsw i32 %759, 32
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds float, float* %3, i64 %780
  %782 = bitcast float* %781 to <8 x float>*
  %783 = load <8 x float>, <8 x float>* %782, align 1, !tbaa !12
  %784 = add nsw i32 %759, 40
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds float, float* %3, i64 %785
  %787 = bitcast float* %786 to <8 x float>*
  %788 = load <8 x float>, <8 x float>* %787, align 1, !tbaa !12
  %789 = add nsw i32 %759, 48
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds float, float* %3, i64 %790
  %792 = bitcast float* %791 to <8 x float>*
  %793 = load <8 x float>, <8 x float>* %792, align 1, !tbaa !12
  %794 = add nsw i32 %759, 56
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds float, float* %3, i64 %795
  %797 = bitcast float* %796 to <8 x float>*
  %798 = load <8 x float>, <8 x float>* %797, align 1, !tbaa !12
  %799 = add nsw i32 %759, 64
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds float, float* %3, i64 %800
  %802 = bitcast float* %801 to <8 x float>*
  %803 = load <8 x float>, <8 x float>* %802, align 1, !tbaa !12
  %804 = add nsw i32 %759, 72
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds float, float* %3, i64 %805
  %807 = bitcast float* %806 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 1, !tbaa !12
  %809 = add nsw i32 %759, 80
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds float, float* %3, i64 %810
  %812 = bitcast float* %811 to <8 x float>*
  %813 = load <8 x float>, <8 x float>* %812, align 1, !tbaa !12
  %814 = add nsw i32 %759, 88
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds float, float* %3, i64 %815
  %817 = bitcast float* %816 to <8 x float>*
  %818 = load <8 x float>, <8 x float>* %817, align 1, !tbaa !12
  %819 = add nsw i32 %759, 96
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds float, float* %3, i64 %820
  %822 = bitcast float* %821 to <8 x float>*
  %823 = load <8 x float>, <8 x float>* %822, align 1, !tbaa !12
  %824 = add nsw i32 %759, 104
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds float, float* %3, i64 %825
  %827 = bitcast float* %826 to <8 x float>*
  %828 = load <8 x float>, <8 x float>* %827, align 1, !tbaa !12
  %829 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %763, <8 x float> %40, <8 x float> %705) #10
  %830 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %768, <8 x float> %40, <8 x float> %709) #10
  %831 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %773, <8 x float> %40, <8 x float> %713) #10
  %832 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %778, <8 x float> %40, <8 x float> %717) #10
  %833 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %783, <8 x float> %40, <8 x float> %721) #10
  %834 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %788, <8 x float> %40, <8 x float> %725) #10
  %835 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %793, <8 x float> %40, <8 x float> %729) #10
  %836 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %798, <8 x float> %40, <8 x float> %733) #10
  %837 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %803, <8 x float> %40, <8 x float> %737) #10
  %838 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %808, <8 x float> %40, <8 x float> %741) #10
  %839 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %813, <8 x float> %40, <8 x float> %745) #10
  %840 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %818, <8 x float> %40, <8 x float> %749) #10
  %841 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %823, <8 x float> %40, <8 x float> %753) #10
  %842 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %40, <8 x float> %757) #10
  store <8 x float> %829, <8 x float>* %704, align 1, !tbaa !12
  store <8 x float> %830, <8 x float>* %708, align 1, !tbaa !12
  store <8 x float> %831, <8 x float>* %712, align 1, !tbaa !12
  store <8 x float> %832, <8 x float>* %716, align 1, !tbaa !12
  store <8 x float> %833, <8 x float>* %720, align 1, !tbaa !12
  store <8 x float> %834, <8 x float>* %724, align 1, !tbaa !12
  store <8 x float> %835, <8 x float>* %728, align 1, !tbaa !12
  store <8 x float> %836, <8 x float>* %732, align 1, !tbaa !12
  store <8 x float> %837, <8 x float>* %736, align 1, !tbaa !12
  store <8 x float> %838, <8 x float>* %740, align 1, !tbaa !12
  store <8 x float> %839, <8 x float>* %744, align 1, !tbaa !12
  store <8 x float> %840, <8 x float>* %748, align 1, !tbaa !12
  store <8 x float> %841, <8 x float>* %752, align 1, !tbaa !12
  store <8 x float> %842, <8 x float>* %756, align 1, !tbaa !12
  %843 = add nuw nsw i64 %645, 112
  %844 = icmp ult i64 %843, %450
  br i1 %844, label %644, label %639
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 116
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui14_uk4.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
