; ModuleID = 'codes/matvec_ui5_uk6.cpp'
source_filename = "codes/matvec_ui5_uk6.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL5mippN = internal unnamed_addr global i1 false, align 4
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui5_uk6.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #19
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #19
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  store i1 true, i1* @_ZL5mippN, align 4
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 40
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 48
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %10 = icmp sgt i32 %9, 0
  %11 = zext i32 %6 to i64
  %12 = zext i32 %9 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %9 to i64
  %15 = zext i32 %9 to i64
  %16 = zext i32 %9 to i64
  %17 = zext i32 %9 to i64
  br label %30

18:                                               ; preds = %440, %0
  %19 = tail call i64 @llvm.x86.rdtsc()
  %20 = uitofp i64 %19 to double
  %21 = fsub double %20, %2
  %22 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %23 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %24 = shl i32 %23, 1
  %25 = add nsw i32 %24, -1
  %26 = mul nsw i32 %25, %22
  %27 = sitofp i32 %26 to float
  %28 = fptrunc double %21 to float
  %29 = fdiv float %27, %28
  ret float %29

30:                                               ; preds = %8, %440
  %31 = phi i64 [ 0, %8 ], [ %441, %440 ]
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = or i64 %31, 1
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %31, 2
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %31, 3
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = add nuw nsw i64 %31, 4
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = add nuw nsw i64 %31, 5
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %61, label %440

61:                                               ; preds = %30
  %62 = trunc i64 %31 to i32
  %63 = mul nsw i32 %9, %62
  br label %69

64:                                               ; preds = %69
  br i1 %10, label %65, label %440

65:                                               ; preds = %64
  %66 = trunc i64 %36 to i32
  %67 = mul nsw i32 %9, %66
  %68 = sext i32 %67 to i64
  br label %149

69:                                               ; preds = %61, %69
  %70 = phi i64 [ 0, %61 ], [ %142, %69 ]
  %71 = getelementptr inbounds float, float* %5, i64 %70
  %72 = getelementptr inbounds float, float* %71, i64 8
  %73 = bitcast float* %72 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %73, i32 0, i32 1, i32 1)
  %74 = getelementptr inbounds float, float* %3, i64 %70
  %75 = getelementptr inbounds float, float* %74, i64 8
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %76, i32 0, i32 1, i32 1)
  %77 = getelementptr inbounds float, float* %71, i64 16
  %78 = bitcast float* %77 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %78, i32 0, i32 1, i32 1)
  %79 = getelementptr inbounds float, float* %74, i64 16
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %71, i64 24
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %74, i64 24
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %71, i64 32
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %74, i64 32
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %71, i64 40
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %74, i64 40
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = bitcast float* %71 to <8 x float>*
  %94 = load <8 x float>, <8 x float>* %93, align 1, !tbaa !12
  %95 = add nuw nsw i64 %70, 8
  %96 = getelementptr inbounds float, float* %5, i64 %95
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 1, !tbaa !12
  %99 = add nuw nsw i64 %70, 16
  %100 = getelementptr inbounds float, float* %5, i64 %99
  %101 = bitcast float* %100 to <8 x float>*
  %102 = load <8 x float>, <8 x float>* %101, align 1, !tbaa !12
  %103 = add nuw nsw i64 %70, 24
  %104 = getelementptr inbounds float, float* %5, i64 %103
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 1, !tbaa !12
  %107 = add nuw nsw i64 %70, 32
  %108 = getelementptr inbounds float, float* %5, i64 %107
  %109 = bitcast float* %108 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 1, !tbaa !12
  %111 = trunc i64 %70 to i32
  %112 = add nsw i32 %63, %111
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %3, i64 %113
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 1, !tbaa !12
  %117 = add nsw i32 %112, 8
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %3, i64 %118
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !tbaa !12
  %122 = add nsw i32 %112, 16
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %3, i64 %123
  %125 = bitcast float* %124 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 1, !tbaa !12
  %127 = add nsw i32 %112, 24
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %3, i64 %128
  %130 = bitcast float* %129 to <8 x float>*
  %131 = load <8 x float>, <8 x float>* %130, align 1, !tbaa !12
  %132 = add nsw i32 %112, 32
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %3, i64 %133
  %135 = bitcast float* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 1, !tbaa !12
  %137 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %116, <8 x float> %35, <8 x float> %94) #10
  %138 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %35, <8 x float> %98) #10
  %139 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %126, <8 x float> %35, <8 x float> %102) #10
  %140 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> %35, <8 x float> %106) #10
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %136, <8 x float> %35, <8 x float> %110) #10
  store <8 x float> %137, <8 x float>* %93, align 1, !tbaa !12
  store <8 x float> %138, <8 x float>* %97, align 1, !tbaa !12
  store <8 x float> %139, <8 x float>* %101, align 1, !tbaa !12
  store <8 x float> %140, <8 x float>* %105, align 1, !tbaa !12
  store <8 x float> %141, <8 x float>* %109, align 1, !tbaa !12
  %142 = add nuw nsw i64 %70, 40
  %143 = icmp ult i64 %142, %12
  br i1 %143, label %69, label %64

144:                                              ; preds = %149
  br i1 %10, label %145, label %440

145:                                              ; preds = %144
  %146 = trunc i64 %41 to i32
  %147 = mul nsw i32 %9, %146
  %148 = sext i32 %147 to i64
  br label %223

149:                                              ; preds = %65, %149
  %150 = phi i64 [ 0, %65 ], [ %216, %149 ]
  %151 = getelementptr inbounds float, float* %5, i64 %150
  %152 = getelementptr inbounds float, float* %151, i64 8
  %153 = bitcast float* %152 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %153, i32 0, i32 1, i32 1)
  %154 = getelementptr inbounds float, float* %3, i64 %150
  %155 = getelementptr inbounds float, float* %154, i64 8
  %156 = bitcast float* %155 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %156, i32 0, i32 1, i32 1)
  %157 = getelementptr inbounds float, float* %151, i64 16
  %158 = bitcast float* %157 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %158, i32 0, i32 1, i32 1)
  %159 = getelementptr inbounds float, float* %154, i64 16
  %160 = bitcast float* %159 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %160, i32 0, i32 1, i32 1)
  %161 = getelementptr inbounds float, float* %151, i64 24
  %162 = bitcast float* %161 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %162, i32 0, i32 1, i32 1)
  %163 = getelementptr inbounds float, float* %154, i64 24
  %164 = bitcast float* %163 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %164, i32 0, i32 1, i32 1)
  %165 = getelementptr inbounds float, float* %151, i64 32
  %166 = bitcast float* %165 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %166, i32 0, i32 1, i32 1)
  %167 = getelementptr inbounds float, float* %154, i64 32
  %168 = bitcast float* %167 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %168, i32 0, i32 1, i32 1)
  %169 = getelementptr inbounds float, float* %151, i64 40
  %170 = bitcast float* %169 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %170, i32 0, i32 1, i32 1)
  %171 = getelementptr inbounds float, float* %154, i64 40
  %172 = bitcast float* %171 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %172, i32 0, i32 1, i32 1)
  %173 = bitcast float* %151 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 1, !tbaa !12
  %175 = add nuw nsw i64 %150, 8
  %176 = getelementptr inbounds float, float* %5, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 1, !tbaa !12
  %179 = add nuw nsw i64 %150, 16
  %180 = getelementptr inbounds float, float* %5, i64 %179
  %181 = bitcast float* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 1, !tbaa !12
  %183 = add nuw nsw i64 %150, 24
  %184 = getelementptr inbounds float, float* %5, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 1, !tbaa !12
  %187 = add nuw nsw i64 %150, 32
  %188 = getelementptr inbounds float, float* %5, i64 %187
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 1, !tbaa !12
  %191 = add nsw i64 %150, %68
  %192 = getelementptr inbounds float, float* %3, i64 %191
  %193 = bitcast float* %192 to <8 x float>*
  %194 = load <8 x float>, <8 x float>* %193, align 1, !tbaa !12
  %195 = add nsw i64 %191, 8
  %196 = getelementptr inbounds float, float* %3, i64 %195
  %197 = bitcast float* %196 to <8 x float>*
  %198 = load <8 x float>, <8 x float>* %197, align 1, !tbaa !12
  %199 = add nsw i64 %191, 16
  %200 = getelementptr inbounds float, float* %3, i64 %199
  %201 = bitcast float* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 1, !tbaa !12
  %203 = add nsw i64 %191, 24
  %204 = getelementptr inbounds float, float* %3, i64 %203
  %205 = bitcast float* %204 to <8 x float>*
  %206 = load <8 x float>, <8 x float>* %205, align 1, !tbaa !12
  %207 = add nsw i64 %191, 32
  %208 = getelementptr inbounds float, float* %3, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  %210 = load <8 x float>, <8 x float>* %209, align 1, !tbaa !12
  %211 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %194, <8 x float> %40, <8 x float> %174) #10
  %212 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %198, <8 x float> %40, <8 x float> %178) #10
  %213 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %40, <8 x float> %182) #10
  %214 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %206, <8 x float> %40, <8 x float> %186) #10
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %210, <8 x float> %40, <8 x float> %190) #10
  store <8 x float> %211, <8 x float>* %173, align 1, !tbaa !12
  store <8 x float> %212, <8 x float>* %177, align 1, !tbaa !12
  store <8 x float> %213, <8 x float>* %181, align 1, !tbaa !12
  store <8 x float> %214, <8 x float>* %185, align 1, !tbaa !12
  store <8 x float> %215, <8 x float>* %189, align 1, !tbaa !12
  %216 = add nuw nsw i64 %150, 40
  %217 = icmp ult i64 %216, %13
  br i1 %217, label %149, label %144

218:                                              ; preds = %223
  br i1 %10, label %219, label %440

219:                                              ; preds = %218
  %220 = trunc i64 %46 to i32
  %221 = mul nsw i32 %9, %220
  %222 = sext i32 %221 to i64
  br label %297

223:                                              ; preds = %145, %223
  %224 = phi i64 [ 0, %145 ], [ %290, %223 ]
  %225 = getelementptr inbounds float, float* %5, i64 %224
  %226 = getelementptr inbounds float, float* %225, i64 8
  %227 = bitcast float* %226 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %227, i32 0, i32 1, i32 1)
  %228 = getelementptr inbounds float, float* %3, i64 %224
  %229 = getelementptr inbounds float, float* %228, i64 8
  %230 = bitcast float* %229 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %230, i32 0, i32 1, i32 1)
  %231 = getelementptr inbounds float, float* %225, i64 16
  %232 = bitcast float* %231 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %232, i32 0, i32 1, i32 1)
  %233 = getelementptr inbounds float, float* %228, i64 16
  %234 = bitcast float* %233 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %234, i32 0, i32 1, i32 1)
  %235 = getelementptr inbounds float, float* %225, i64 24
  %236 = bitcast float* %235 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %236, i32 0, i32 1, i32 1)
  %237 = getelementptr inbounds float, float* %228, i64 24
  %238 = bitcast float* %237 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %238, i32 0, i32 1, i32 1)
  %239 = getelementptr inbounds float, float* %225, i64 32
  %240 = bitcast float* %239 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %240, i32 0, i32 1, i32 1)
  %241 = getelementptr inbounds float, float* %228, i64 32
  %242 = bitcast float* %241 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %242, i32 0, i32 1, i32 1)
  %243 = getelementptr inbounds float, float* %225, i64 40
  %244 = bitcast float* %243 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %244, i32 0, i32 1, i32 1)
  %245 = getelementptr inbounds float, float* %228, i64 40
  %246 = bitcast float* %245 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %246, i32 0, i32 1, i32 1)
  %247 = bitcast float* %225 to <8 x float>*
  %248 = load <8 x float>, <8 x float>* %247, align 1, !tbaa !12
  %249 = add nuw nsw i64 %224, 8
  %250 = getelementptr inbounds float, float* %5, i64 %249
  %251 = bitcast float* %250 to <8 x float>*
  %252 = load <8 x float>, <8 x float>* %251, align 1, !tbaa !12
  %253 = add nuw nsw i64 %224, 16
  %254 = getelementptr inbounds float, float* %5, i64 %253
  %255 = bitcast float* %254 to <8 x float>*
  %256 = load <8 x float>, <8 x float>* %255, align 1, !tbaa !12
  %257 = add nuw nsw i64 %224, 24
  %258 = getelementptr inbounds float, float* %5, i64 %257
  %259 = bitcast float* %258 to <8 x float>*
  %260 = load <8 x float>, <8 x float>* %259, align 1, !tbaa !12
  %261 = add nuw nsw i64 %224, 32
  %262 = getelementptr inbounds float, float* %5, i64 %261
  %263 = bitcast float* %262 to <8 x float>*
  %264 = load <8 x float>, <8 x float>* %263, align 1, !tbaa !12
  %265 = add nsw i64 %224, %148
  %266 = getelementptr inbounds float, float* %3, i64 %265
  %267 = bitcast float* %266 to <8 x float>*
  %268 = load <8 x float>, <8 x float>* %267, align 1, !tbaa !12
  %269 = add nsw i64 %265, 8
  %270 = getelementptr inbounds float, float* %3, i64 %269
  %271 = bitcast float* %270 to <8 x float>*
  %272 = load <8 x float>, <8 x float>* %271, align 1, !tbaa !12
  %273 = add nsw i64 %265, 16
  %274 = getelementptr inbounds float, float* %3, i64 %273
  %275 = bitcast float* %274 to <8 x float>*
  %276 = load <8 x float>, <8 x float>* %275, align 1, !tbaa !12
  %277 = add nsw i64 %265, 24
  %278 = getelementptr inbounds float, float* %3, i64 %277
  %279 = bitcast float* %278 to <8 x float>*
  %280 = load <8 x float>, <8 x float>* %279, align 1, !tbaa !12
  %281 = add nsw i64 %265, 32
  %282 = getelementptr inbounds float, float* %3, i64 %281
  %283 = bitcast float* %282 to <8 x float>*
  %284 = load <8 x float>, <8 x float>* %283, align 1, !tbaa !12
  %285 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %268, <8 x float> %45, <8 x float> %248) #10
  %286 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %272, <8 x float> %45, <8 x float> %252) #10
  %287 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %276, <8 x float> %45, <8 x float> %256) #10
  %288 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %280, <8 x float> %45, <8 x float> %260) #10
  %289 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %284, <8 x float> %45, <8 x float> %264) #10
  store <8 x float> %285, <8 x float>* %247, align 1, !tbaa !12
  store <8 x float> %286, <8 x float>* %251, align 1, !tbaa !12
  store <8 x float> %287, <8 x float>* %255, align 1, !tbaa !12
  store <8 x float> %288, <8 x float>* %259, align 1, !tbaa !12
  store <8 x float> %289, <8 x float>* %263, align 1, !tbaa !12
  %290 = add nuw nsw i64 %224, 40
  %291 = icmp ult i64 %290, %14
  br i1 %291, label %223, label %218

292:                                              ; preds = %297
  br i1 %10, label %293, label %440

293:                                              ; preds = %292
  %294 = trunc i64 %51 to i32
  %295 = mul nsw i32 %9, %294
  %296 = sext i32 %295 to i64
  br label %371

297:                                              ; preds = %219, %297
  %298 = phi i64 [ 0, %219 ], [ %364, %297 ]
  %299 = getelementptr inbounds float, float* %5, i64 %298
  %300 = getelementptr inbounds float, float* %299, i64 8
  %301 = bitcast float* %300 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %301, i32 0, i32 1, i32 1)
  %302 = getelementptr inbounds float, float* %3, i64 %298
  %303 = getelementptr inbounds float, float* %302, i64 8
  %304 = bitcast float* %303 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %304, i32 0, i32 1, i32 1)
  %305 = getelementptr inbounds float, float* %299, i64 16
  %306 = bitcast float* %305 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %306, i32 0, i32 1, i32 1)
  %307 = getelementptr inbounds float, float* %302, i64 16
  %308 = bitcast float* %307 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %308, i32 0, i32 1, i32 1)
  %309 = getelementptr inbounds float, float* %299, i64 24
  %310 = bitcast float* %309 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %310, i32 0, i32 1, i32 1)
  %311 = getelementptr inbounds float, float* %302, i64 24
  %312 = bitcast float* %311 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %312, i32 0, i32 1, i32 1)
  %313 = getelementptr inbounds float, float* %299, i64 32
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %314, i32 0, i32 1, i32 1)
  %315 = getelementptr inbounds float, float* %302, i64 32
  %316 = bitcast float* %315 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %316, i32 0, i32 1, i32 1)
  %317 = getelementptr inbounds float, float* %299, i64 40
  %318 = bitcast float* %317 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %318, i32 0, i32 1, i32 1)
  %319 = getelementptr inbounds float, float* %302, i64 40
  %320 = bitcast float* %319 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %320, i32 0, i32 1, i32 1)
  %321 = bitcast float* %299 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 1, !tbaa !12
  %323 = add nuw nsw i64 %298, 8
  %324 = getelementptr inbounds float, float* %5, i64 %323
  %325 = bitcast float* %324 to <8 x float>*
  %326 = load <8 x float>, <8 x float>* %325, align 1, !tbaa !12
  %327 = add nuw nsw i64 %298, 16
  %328 = getelementptr inbounds float, float* %5, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  %330 = load <8 x float>, <8 x float>* %329, align 1, !tbaa !12
  %331 = add nuw nsw i64 %298, 24
  %332 = getelementptr inbounds float, float* %5, i64 %331
  %333 = bitcast float* %332 to <8 x float>*
  %334 = load <8 x float>, <8 x float>* %333, align 1, !tbaa !12
  %335 = add nuw nsw i64 %298, 32
  %336 = getelementptr inbounds float, float* %5, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  %338 = load <8 x float>, <8 x float>* %337, align 1, !tbaa !12
  %339 = add nsw i64 %298, %222
  %340 = getelementptr inbounds float, float* %3, i64 %339
  %341 = bitcast float* %340 to <8 x float>*
  %342 = load <8 x float>, <8 x float>* %341, align 1, !tbaa !12
  %343 = add nsw i64 %339, 8
  %344 = getelementptr inbounds float, float* %3, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  %346 = load <8 x float>, <8 x float>* %345, align 1, !tbaa !12
  %347 = add nsw i64 %339, 16
  %348 = getelementptr inbounds float, float* %3, i64 %347
  %349 = bitcast float* %348 to <8 x float>*
  %350 = load <8 x float>, <8 x float>* %349, align 1, !tbaa !12
  %351 = add nsw i64 %339, 24
  %352 = getelementptr inbounds float, float* %3, i64 %351
  %353 = bitcast float* %352 to <8 x float>*
  %354 = load <8 x float>, <8 x float>* %353, align 1, !tbaa !12
  %355 = add nsw i64 %339, 32
  %356 = getelementptr inbounds float, float* %3, i64 %355
  %357 = bitcast float* %356 to <8 x float>*
  %358 = load <8 x float>, <8 x float>* %357, align 1, !tbaa !12
  %359 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %342, <8 x float> %50, <8 x float> %322) #10
  %360 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %346, <8 x float> %50, <8 x float> %326) #10
  %361 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %350, <8 x float> %50, <8 x float> %330) #10
  %362 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %354, <8 x float> %50, <8 x float> %334) #10
  %363 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %358, <8 x float> %50, <8 x float> %338) #10
  store <8 x float> %359, <8 x float>* %321, align 1, !tbaa !12
  store <8 x float> %360, <8 x float>* %325, align 1, !tbaa !12
  store <8 x float> %361, <8 x float>* %329, align 1, !tbaa !12
  store <8 x float> %362, <8 x float>* %333, align 1, !tbaa !12
  store <8 x float> %363, <8 x float>* %337, align 1, !tbaa !12
  %364 = add nuw nsw i64 %298, 40
  %365 = icmp ult i64 %364, %15
  br i1 %365, label %297, label %292

366:                                              ; preds = %371
  br i1 %10, label %367, label %440

367:                                              ; preds = %366
  %368 = trunc i64 %56 to i32
  %369 = mul nsw i32 %9, %368
  %370 = sext i32 %369 to i64
  br label %443

371:                                              ; preds = %293, %371
  %372 = phi i64 [ 0, %293 ], [ %438, %371 ]
  %373 = getelementptr inbounds float, float* %5, i64 %372
  %374 = getelementptr inbounds float, float* %373, i64 8
  %375 = bitcast float* %374 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %375, i32 0, i32 1, i32 1)
  %376 = getelementptr inbounds float, float* %3, i64 %372
  %377 = getelementptr inbounds float, float* %376, i64 8
  %378 = bitcast float* %377 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %378, i32 0, i32 1, i32 1)
  %379 = getelementptr inbounds float, float* %373, i64 16
  %380 = bitcast float* %379 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %380, i32 0, i32 1, i32 1)
  %381 = getelementptr inbounds float, float* %376, i64 16
  %382 = bitcast float* %381 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %382, i32 0, i32 1, i32 1)
  %383 = getelementptr inbounds float, float* %373, i64 24
  %384 = bitcast float* %383 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %384, i32 0, i32 1, i32 1)
  %385 = getelementptr inbounds float, float* %376, i64 24
  %386 = bitcast float* %385 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %386, i32 0, i32 1, i32 1)
  %387 = getelementptr inbounds float, float* %373, i64 32
  %388 = bitcast float* %387 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %388, i32 0, i32 1, i32 1)
  %389 = getelementptr inbounds float, float* %376, i64 32
  %390 = bitcast float* %389 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %390, i32 0, i32 1, i32 1)
  %391 = getelementptr inbounds float, float* %373, i64 40
  %392 = bitcast float* %391 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %392, i32 0, i32 1, i32 1)
  %393 = getelementptr inbounds float, float* %376, i64 40
  %394 = bitcast float* %393 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %394, i32 0, i32 1, i32 1)
  %395 = bitcast float* %373 to <8 x float>*
  %396 = load <8 x float>, <8 x float>* %395, align 1, !tbaa !12
  %397 = add nuw nsw i64 %372, 8
  %398 = getelementptr inbounds float, float* %5, i64 %397
  %399 = bitcast float* %398 to <8 x float>*
  %400 = load <8 x float>, <8 x float>* %399, align 1, !tbaa !12
  %401 = add nuw nsw i64 %372, 16
  %402 = getelementptr inbounds float, float* %5, i64 %401
  %403 = bitcast float* %402 to <8 x float>*
  %404 = load <8 x float>, <8 x float>* %403, align 1, !tbaa !12
  %405 = add nuw nsw i64 %372, 24
  %406 = getelementptr inbounds float, float* %5, i64 %405
  %407 = bitcast float* %406 to <8 x float>*
  %408 = load <8 x float>, <8 x float>* %407, align 1, !tbaa !12
  %409 = add nuw nsw i64 %372, 32
  %410 = getelementptr inbounds float, float* %5, i64 %409
  %411 = bitcast float* %410 to <8 x float>*
  %412 = load <8 x float>, <8 x float>* %411, align 1, !tbaa !12
  %413 = add nsw i64 %372, %296
  %414 = getelementptr inbounds float, float* %3, i64 %413
  %415 = bitcast float* %414 to <8 x float>*
  %416 = load <8 x float>, <8 x float>* %415, align 1, !tbaa !12
  %417 = add nsw i64 %413, 8
  %418 = getelementptr inbounds float, float* %3, i64 %417
  %419 = bitcast float* %418 to <8 x float>*
  %420 = load <8 x float>, <8 x float>* %419, align 1, !tbaa !12
  %421 = add nsw i64 %413, 16
  %422 = getelementptr inbounds float, float* %3, i64 %421
  %423 = bitcast float* %422 to <8 x float>*
  %424 = load <8 x float>, <8 x float>* %423, align 1, !tbaa !12
  %425 = add nsw i64 %413, 24
  %426 = getelementptr inbounds float, float* %3, i64 %425
  %427 = bitcast float* %426 to <8 x float>*
  %428 = load <8 x float>, <8 x float>* %427, align 1, !tbaa !12
  %429 = add nsw i64 %413, 32
  %430 = getelementptr inbounds float, float* %3, i64 %429
  %431 = bitcast float* %430 to <8 x float>*
  %432 = load <8 x float>, <8 x float>* %431, align 1, !tbaa !12
  %433 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %416, <8 x float> %55, <8 x float> %396) #10
  %434 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %420, <8 x float> %55, <8 x float> %400) #10
  %435 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %424, <8 x float> %55, <8 x float> %404) #10
  %436 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %428, <8 x float> %55, <8 x float> %408) #10
  %437 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %432, <8 x float> %55, <8 x float> %412) #10
  store <8 x float> %433, <8 x float>* %395, align 1, !tbaa !12
  store <8 x float> %434, <8 x float>* %399, align 1, !tbaa !12
  store <8 x float> %435, <8 x float>* %403, align 1, !tbaa !12
  store <8 x float> %436, <8 x float>* %407, align 1, !tbaa !12
  store <8 x float> %437, <8 x float>* %411, align 1, !tbaa !12
  %438 = add nuw nsw i64 %372, 40
  %439 = icmp ult i64 %438, %16
  br i1 %439, label %371, label %366

440:                                              ; preds = %443, %30, %64, %144, %218, %292, %366
  %441 = add nuw nsw i64 %31, 6
  %442 = icmp ult i64 %441, %11
  br i1 %442, label %30, label %18

443:                                              ; preds = %367, %443
  %444 = phi i64 [ 0, %367 ], [ %510, %443 ]
  %445 = getelementptr inbounds float, float* %5, i64 %444
  %446 = getelementptr inbounds float, float* %445, i64 8
  %447 = bitcast float* %446 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %447, i32 0, i32 1, i32 1)
  %448 = getelementptr inbounds float, float* %3, i64 %444
  %449 = getelementptr inbounds float, float* %448, i64 8
  %450 = bitcast float* %449 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %450, i32 0, i32 1, i32 1)
  %451 = getelementptr inbounds float, float* %445, i64 16
  %452 = bitcast float* %451 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %452, i32 0, i32 1, i32 1)
  %453 = getelementptr inbounds float, float* %448, i64 16
  %454 = bitcast float* %453 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %454, i32 0, i32 1, i32 1)
  %455 = getelementptr inbounds float, float* %445, i64 24
  %456 = bitcast float* %455 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %456, i32 0, i32 1, i32 1)
  %457 = getelementptr inbounds float, float* %448, i64 24
  %458 = bitcast float* %457 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %458, i32 0, i32 1, i32 1)
  %459 = getelementptr inbounds float, float* %445, i64 32
  %460 = bitcast float* %459 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %460, i32 0, i32 1, i32 1)
  %461 = getelementptr inbounds float, float* %448, i64 32
  %462 = bitcast float* %461 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %462, i32 0, i32 1, i32 1)
  %463 = getelementptr inbounds float, float* %445, i64 40
  %464 = bitcast float* %463 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %464, i32 0, i32 1, i32 1)
  %465 = getelementptr inbounds float, float* %448, i64 40
  %466 = bitcast float* %465 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %466, i32 0, i32 1, i32 1)
  %467 = bitcast float* %445 to <8 x float>*
  %468 = load <8 x float>, <8 x float>* %467, align 1, !tbaa !12
  %469 = add nuw nsw i64 %444, 8
  %470 = getelementptr inbounds float, float* %5, i64 %469
  %471 = bitcast float* %470 to <8 x float>*
  %472 = load <8 x float>, <8 x float>* %471, align 1, !tbaa !12
  %473 = add nuw nsw i64 %444, 16
  %474 = getelementptr inbounds float, float* %5, i64 %473
  %475 = bitcast float* %474 to <8 x float>*
  %476 = load <8 x float>, <8 x float>* %475, align 1, !tbaa !12
  %477 = add nuw nsw i64 %444, 24
  %478 = getelementptr inbounds float, float* %5, i64 %477
  %479 = bitcast float* %478 to <8 x float>*
  %480 = load <8 x float>, <8 x float>* %479, align 1, !tbaa !12
  %481 = add nuw nsw i64 %444, 32
  %482 = getelementptr inbounds float, float* %5, i64 %481
  %483 = bitcast float* %482 to <8 x float>*
  %484 = load <8 x float>, <8 x float>* %483, align 1, !tbaa !12
  %485 = add nsw i64 %444, %370
  %486 = getelementptr inbounds float, float* %3, i64 %485
  %487 = bitcast float* %486 to <8 x float>*
  %488 = load <8 x float>, <8 x float>* %487, align 1, !tbaa !12
  %489 = add nsw i64 %485, 8
  %490 = getelementptr inbounds float, float* %3, i64 %489
  %491 = bitcast float* %490 to <8 x float>*
  %492 = load <8 x float>, <8 x float>* %491, align 1, !tbaa !12
  %493 = add nsw i64 %485, 16
  %494 = getelementptr inbounds float, float* %3, i64 %493
  %495 = bitcast float* %494 to <8 x float>*
  %496 = load <8 x float>, <8 x float>* %495, align 1, !tbaa !12
  %497 = add nsw i64 %485, 24
  %498 = getelementptr inbounds float, float* %3, i64 %497
  %499 = bitcast float* %498 to <8 x float>*
  %500 = load <8 x float>, <8 x float>* %499, align 1, !tbaa !12
  %501 = add nsw i64 %485, 32
  %502 = getelementptr inbounds float, float* %3, i64 %501
  %503 = bitcast float* %502 to <8 x float>*
  %504 = load <8 x float>, <8 x float>* %503, align 1, !tbaa !12
  %505 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %488, <8 x float> %60, <8 x float> %468) #10
  %506 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %492, <8 x float> %60, <8 x float> %472) #10
  %507 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %496, <8 x float> %60, <8 x float> %476) #10
  %508 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %500, <8 x float> %60, <8 x float> %480) #10
  %509 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %504, <8 x float> %60, <8 x float> %484) #10
  store <8 x float> %505, <8 x float>* %467, align 1, !tbaa !12
  store <8 x float> %506, <8 x float>* %471, align 1, !tbaa !12
  store <8 x float> %507, <8 x float>* %475, align 1, !tbaa !12
  store <8 x float> %508, <8 x float>* %479, align 1, !tbaa !12
  store <8 x float> %509, <8 x float>* %483, align 1, !tbaa !12
  %510 = add nuw nsw i64 %444, 40
  %511 = icmp ult i64 %510, %17
  br i1 %511, label %443, label %440
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  %1 = load i1, i1* @_ZL5mippN, align 4
  %2 = select i1 %1, i32 240, i32 -30
  %3 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = icmp sle i32 %2, %3
  %5 = load i32, i32* @_ZL6BLOCKK, align 4
  %6 = icmp sgt i32 %5, 5
  %7 = and i1 %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #13 {
  ret i32 66
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #14

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #15

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #16

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #15

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #17

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui5_uk6.cpp() #18 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone speculatable willreturn }
attributes #18 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
