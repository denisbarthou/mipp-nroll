; ModuleID = 'codes/matvec_ui6_uk14.cpp'
source_filename = "codes/matvec_ui6_uk14.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui6_uk14.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 48
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 112
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1264, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1264
  %21 = phi i64 [ %1265, %1264 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = add nuw nsw i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = add nuw nsw i64 %21, 7
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !18
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = add nuw nsw i64 %21, 8
  %62 = getelementptr inbounds float, float* %4, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !18
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = add nuw nsw i64 %21, 9
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !18
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = add nuw nsw i64 %21, 10
  %72 = getelementptr inbounds float, float* %4, i64 %71
  %73 = load float, float* %72, align 4, !tbaa !18
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = add nuw nsw i64 %21, 11
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !18
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = add nuw nsw i64 %21, 12
  %82 = getelementptr inbounds float, float* %4, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !18
  %84 = insertelement <8 x float> undef, float %83, i32 0
  %85 = shufflevector <8 x float> %84, <8 x float> undef, <8 x i32> zeroinitializer
  %86 = add nuw nsw i64 %21, 13
  %87 = getelementptr inbounds float, float* %4, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !18
  %89 = insertelement <8 x float> undef, float %88, i32 0
  %90 = shufflevector <8 x float> %89, <8 x float> undef, <8 x i32> zeroinitializer
  %91 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %93, label %1264

93:                                               ; preds = %20
  %94 = zext i32 %91 to i64
  %95 = trunc i64 %21 to i32
  %96 = mul nsw i32 %91, %95
  br label %103

97:                                               ; preds = %103
  br i1 %92, label %98, label %544

98:                                               ; preds = %97
  %99 = trunc i64 %26 to i32
  %100 = mul nsw i32 %91, %99
  %101 = sext i32 %100 to i64
  %102 = zext i32 %91 to i64
  br label %198

103:                                              ; preds = %93, %103
  %104 = phi i64 [ 0, %93 ], [ %190, %103 ]
  %105 = getelementptr inbounds float, float* %5, i64 %104
  %106 = getelementptr inbounds float, float* %105, i64 8
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %107, i32 0, i32 1, i32 1)
  %108 = getelementptr inbounds float, float* %3, i64 %104
  %109 = getelementptr inbounds float, float* %108, i64 8
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %105, i64 16
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = getelementptr inbounds float, float* %108, i64 16
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %105, i64 24
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %108, i64 24
  %118 = bitcast float* %117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %118, i32 0, i32 1, i32 1)
  %119 = getelementptr inbounds float, float* %105, i64 32
  %120 = bitcast float* %119 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %120, i32 0, i32 1, i32 1)
  %121 = getelementptr inbounds float, float* %108, i64 32
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %122, i32 0, i32 1, i32 1)
  %123 = getelementptr inbounds float, float* %105, i64 40
  %124 = bitcast float* %123 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %124, i32 0, i32 1, i32 1)
  %125 = getelementptr inbounds float, float* %108, i64 40
  %126 = bitcast float* %125 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %126, i32 0, i32 1, i32 1)
  %127 = getelementptr inbounds float, float* %105, i64 48
  %128 = bitcast float* %127 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %128, i32 0, i32 1, i32 1)
  %129 = getelementptr inbounds float, float* %108, i64 48
  %130 = bitcast float* %129 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %130, i32 0, i32 1, i32 1)
  %131 = bitcast float* %105 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !tbaa !12
  %133 = or i64 %104, 8
  %134 = getelementptr inbounds float, float* %5, i64 %133
  %135 = bitcast float* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 1, !tbaa !12
  %137 = add nuw nsw i64 %104, 16
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 1, !tbaa !12
  %141 = add nuw nsw i64 %104, 24
  %142 = getelementptr inbounds float, float* %5, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nuw nsw i64 %104, 32
  %146 = getelementptr inbounds float, float* %5, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = add nuw nsw i64 %104, 40
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 1, !tbaa !12
  %153 = trunc i64 %104 to i32
  %154 = add nsw i32 %96, %153
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds float, float* %3, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 1, !tbaa !12
  %159 = add nsw i32 %154, 8
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float* %3, i64 %160
  %162 = bitcast float* %161 to <8 x float>*
  %163 = load <8 x float>, <8 x float>* %162, align 1, !tbaa !12
  %164 = add nsw i32 %154, 16
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %3, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nsw i32 %154, 24
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds float, float* %3, i64 %170
  %172 = bitcast float* %171 to <8 x float>*
  %173 = load <8 x float>, <8 x float>* %172, align 1, !tbaa !12
  %174 = add nsw i32 %154, 32
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %3, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 1, !tbaa !12
  %179 = add nsw i32 %154, 40
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds float, float* %3, i64 %180
  %182 = bitcast float* %181 to <8 x float>*
  %183 = load <8 x float>, <8 x float>* %182, align 1, !tbaa !12
  %184 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %158, <8 x float> %25, <8 x float> %132) #10
  %185 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %163, <8 x float> %25, <8 x float> %136) #10
  %186 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %25, <8 x float> %140) #10
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %25, <8 x float> %144) #10
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %25, <8 x float> %148) #10
  %189 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %183, <8 x float> %25, <8 x float> %152) #10
  store <8 x float> %184, <8 x float>* %131, align 1, !tbaa !12
  store <8 x float> %185, <8 x float>* %135, align 1, !tbaa !12
  store <8 x float> %186, <8 x float>* %139, align 1, !tbaa !12
  store <8 x float> %187, <8 x float>* %143, align 1, !tbaa !12
  store <8 x float> %188, <8 x float>* %147, align 1, !tbaa !12
  store <8 x float> %189, <8 x float>* %151, align 1, !tbaa !12
  %190 = add nuw nsw i64 %104, 48
  %191 = icmp ult i64 %190, %94
  br i1 %191, label %103, label %97

192:                                              ; preds = %198
  br i1 %92, label %193, label %544

193:                                              ; preds = %192
  %194 = trunc i64 %31 to i32
  %195 = mul nsw i32 %91, %194
  %196 = sext i32 %195 to i64
  %197 = zext i32 %91 to i64
  br label %286

198:                                              ; preds = %98, %198
  %199 = phi i64 [ 0, %98 ], [ %278, %198 ]
  %200 = getelementptr inbounds float, float* %5, i64 %199
  %201 = getelementptr inbounds float, float* %200, i64 8
  %202 = bitcast float* %201 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %202, i32 0, i32 1, i32 1)
  %203 = getelementptr inbounds float, float* %3, i64 %199
  %204 = getelementptr inbounds float, float* %203, i64 8
  %205 = bitcast float* %204 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %205, i32 0, i32 1, i32 1)
  %206 = getelementptr inbounds float, float* %200, i64 16
  %207 = bitcast float* %206 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %207, i32 0, i32 1, i32 1)
  %208 = getelementptr inbounds float, float* %203, i64 16
  %209 = bitcast float* %208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %209, i32 0, i32 1, i32 1)
  %210 = getelementptr inbounds float, float* %200, i64 24
  %211 = bitcast float* %210 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %211, i32 0, i32 1, i32 1)
  %212 = getelementptr inbounds float, float* %203, i64 24
  %213 = bitcast float* %212 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %213, i32 0, i32 1, i32 1)
  %214 = getelementptr inbounds float, float* %200, i64 32
  %215 = bitcast float* %214 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %215, i32 0, i32 1, i32 1)
  %216 = getelementptr inbounds float, float* %203, i64 32
  %217 = bitcast float* %216 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %217, i32 0, i32 1, i32 1)
  %218 = getelementptr inbounds float, float* %200, i64 40
  %219 = bitcast float* %218 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %219, i32 0, i32 1, i32 1)
  %220 = getelementptr inbounds float, float* %203, i64 40
  %221 = bitcast float* %220 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %221, i32 0, i32 1, i32 1)
  %222 = getelementptr inbounds float, float* %200, i64 48
  %223 = bitcast float* %222 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %223, i32 0, i32 1, i32 1)
  %224 = getelementptr inbounds float, float* %203, i64 48
  %225 = bitcast float* %224 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %225, i32 0, i32 1, i32 1)
  %226 = bitcast float* %200 to <8 x float>*
  %227 = load <8 x float>, <8 x float>* %226, align 1, !tbaa !12
  %228 = or i64 %199, 8
  %229 = getelementptr inbounds float, float* %5, i64 %228
  %230 = bitcast float* %229 to <8 x float>*
  %231 = load <8 x float>, <8 x float>* %230, align 1, !tbaa !12
  %232 = add nuw nsw i64 %199, 16
  %233 = getelementptr inbounds float, float* %5, i64 %232
  %234 = bitcast float* %233 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 1, !tbaa !12
  %236 = add nuw nsw i64 %199, 24
  %237 = getelementptr inbounds float, float* %5, i64 %236
  %238 = bitcast float* %237 to <8 x float>*
  %239 = load <8 x float>, <8 x float>* %238, align 1, !tbaa !12
  %240 = add nuw nsw i64 %199, 32
  %241 = getelementptr inbounds float, float* %5, i64 %240
  %242 = bitcast float* %241 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !tbaa !12
  %244 = add nuw nsw i64 %199, 40
  %245 = getelementptr inbounds float, float* %5, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  %247 = load <8 x float>, <8 x float>* %246, align 1, !tbaa !12
  %248 = add nsw i64 %199, %101
  %249 = getelementptr inbounds float, float* %3, i64 %248
  %250 = bitcast float* %249 to <8 x float>*
  %251 = load <8 x float>, <8 x float>* %250, align 1, !tbaa !12
  %252 = add nsw i64 %248, 8
  %253 = getelementptr inbounds float, float* %3, i64 %252
  %254 = bitcast float* %253 to <8 x float>*
  %255 = load <8 x float>, <8 x float>* %254, align 1, !tbaa !12
  %256 = add nsw i64 %248, 16
  %257 = getelementptr inbounds float, float* %3, i64 %256
  %258 = bitcast float* %257 to <8 x float>*
  %259 = load <8 x float>, <8 x float>* %258, align 1, !tbaa !12
  %260 = add nsw i64 %248, 24
  %261 = getelementptr inbounds float, float* %3, i64 %260
  %262 = bitcast float* %261 to <8 x float>*
  %263 = load <8 x float>, <8 x float>* %262, align 1, !tbaa !12
  %264 = add nsw i64 %248, 32
  %265 = getelementptr inbounds float, float* %3, i64 %264
  %266 = bitcast float* %265 to <8 x float>*
  %267 = load <8 x float>, <8 x float>* %266, align 1, !tbaa !12
  %268 = add nsw i64 %248, 40
  %269 = getelementptr inbounds float, float* %3, i64 %268
  %270 = bitcast float* %269 to <8 x float>*
  %271 = load <8 x float>, <8 x float>* %270, align 1, !tbaa !12
  %272 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %251, <8 x float> %30, <8 x float> %227) #10
  %273 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %255, <8 x float> %30, <8 x float> %231) #10
  %274 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %259, <8 x float> %30, <8 x float> %235) #10
  %275 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> %30, <8 x float> %239) #10
  %276 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %267, <8 x float> %30, <8 x float> %243) #10
  %277 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %271, <8 x float> %30, <8 x float> %247) #10
  store <8 x float> %272, <8 x float>* %226, align 1, !tbaa !12
  store <8 x float> %273, <8 x float>* %230, align 1, !tbaa !12
  store <8 x float> %274, <8 x float>* %234, align 1, !tbaa !12
  store <8 x float> %275, <8 x float>* %238, align 1, !tbaa !12
  store <8 x float> %276, <8 x float>* %242, align 1, !tbaa !12
  store <8 x float> %277, <8 x float>* %246, align 1, !tbaa !12
  %278 = add nuw nsw i64 %199, 48
  %279 = icmp ult i64 %278, %102
  br i1 %279, label %198, label %192

280:                                              ; preds = %286
  br i1 %92, label %281, label %544

281:                                              ; preds = %280
  %282 = trunc i64 %36 to i32
  %283 = mul nsw i32 %91, %282
  %284 = sext i32 %283 to i64
  %285 = zext i32 %91 to i64
  br label %374

286:                                              ; preds = %193, %286
  %287 = phi i64 [ 0, %193 ], [ %366, %286 ]
  %288 = getelementptr inbounds float, float* %5, i64 %287
  %289 = getelementptr inbounds float, float* %288, i64 8
  %290 = bitcast float* %289 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %290, i32 0, i32 1, i32 1)
  %291 = getelementptr inbounds float, float* %3, i64 %287
  %292 = getelementptr inbounds float, float* %291, i64 8
  %293 = bitcast float* %292 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %293, i32 0, i32 1, i32 1)
  %294 = getelementptr inbounds float, float* %288, i64 16
  %295 = bitcast float* %294 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %295, i32 0, i32 1, i32 1)
  %296 = getelementptr inbounds float, float* %291, i64 16
  %297 = bitcast float* %296 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %297, i32 0, i32 1, i32 1)
  %298 = getelementptr inbounds float, float* %288, i64 24
  %299 = bitcast float* %298 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %299, i32 0, i32 1, i32 1)
  %300 = getelementptr inbounds float, float* %291, i64 24
  %301 = bitcast float* %300 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %301, i32 0, i32 1, i32 1)
  %302 = getelementptr inbounds float, float* %288, i64 32
  %303 = bitcast float* %302 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %303, i32 0, i32 1, i32 1)
  %304 = getelementptr inbounds float, float* %291, i64 32
  %305 = bitcast float* %304 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %305, i32 0, i32 1, i32 1)
  %306 = getelementptr inbounds float, float* %288, i64 40
  %307 = bitcast float* %306 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %307, i32 0, i32 1, i32 1)
  %308 = getelementptr inbounds float, float* %291, i64 40
  %309 = bitcast float* %308 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %309, i32 0, i32 1, i32 1)
  %310 = getelementptr inbounds float, float* %288, i64 48
  %311 = bitcast float* %310 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %311, i32 0, i32 1, i32 1)
  %312 = getelementptr inbounds float, float* %291, i64 48
  %313 = bitcast float* %312 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %313, i32 0, i32 1, i32 1)
  %314 = bitcast float* %288 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 1, !tbaa !12
  %316 = or i64 %287, 8
  %317 = getelementptr inbounds float, float* %5, i64 %316
  %318 = bitcast float* %317 to <8 x float>*
  %319 = load <8 x float>, <8 x float>* %318, align 1, !tbaa !12
  %320 = add nuw nsw i64 %287, 16
  %321 = getelementptr inbounds float, float* %5, i64 %320
  %322 = bitcast float* %321 to <8 x float>*
  %323 = load <8 x float>, <8 x float>* %322, align 1, !tbaa !12
  %324 = add nuw nsw i64 %287, 24
  %325 = getelementptr inbounds float, float* %5, i64 %324
  %326 = bitcast float* %325 to <8 x float>*
  %327 = load <8 x float>, <8 x float>* %326, align 1, !tbaa !12
  %328 = add nuw nsw i64 %287, 32
  %329 = getelementptr inbounds float, float* %5, i64 %328
  %330 = bitcast float* %329 to <8 x float>*
  %331 = load <8 x float>, <8 x float>* %330, align 1, !tbaa !12
  %332 = add nuw nsw i64 %287, 40
  %333 = getelementptr inbounds float, float* %5, i64 %332
  %334 = bitcast float* %333 to <8 x float>*
  %335 = load <8 x float>, <8 x float>* %334, align 1, !tbaa !12
  %336 = add nsw i64 %287, %196
  %337 = getelementptr inbounds float, float* %3, i64 %336
  %338 = bitcast float* %337 to <8 x float>*
  %339 = load <8 x float>, <8 x float>* %338, align 1, !tbaa !12
  %340 = add nsw i64 %336, 8
  %341 = getelementptr inbounds float, float* %3, i64 %340
  %342 = bitcast float* %341 to <8 x float>*
  %343 = load <8 x float>, <8 x float>* %342, align 1, !tbaa !12
  %344 = add nsw i64 %336, 16
  %345 = getelementptr inbounds float, float* %3, i64 %344
  %346 = bitcast float* %345 to <8 x float>*
  %347 = load <8 x float>, <8 x float>* %346, align 1, !tbaa !12
  %348 = add nsw i64 %336, 24
  %349 = getelementptr inbounds float, float* %3, i64 %348
  %350 = bitcast float* %349 to <8 x float>*
  %351 = load <8 x float>, <8 x float>* %350, align 1, !tbaa !12
  %352 = add nsw i64 %336, 32
  %353 = getelementptr inbounds float, float* %3, i64 %352
  %354 = bitcast float* %353 to <8 x float>*
  %355 = load <8 x float>, <8 x float>* %354, align 1, !tbaa !12
  %356 = add nsw i64 %336, 40
  %357 = getelementptr inbounds float, float* %3, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  %359 = load <8 x float>, <8 x float>* %358, align 1, !tbaa !12
  %360 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %339, <8 x float> %35, <8 x float> %315) #10
  %361 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %343, <8 x float> %35, <8 x float> %319) #10
  %362 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %347, <8 x float> %35, <8 x float> %323) #10
  %363 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %351, <8 x float> %35, <8 x float> %327) #10
  %364 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %355, <8 x float> %35, <8 x float> %331) #10
  %365 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %359, <8 x float> %35, <8 x float> %335) #10
  store <8 x float> %360, <8 x float>* %314, align 1, !tbaa !12
  store <8 x float> %361, <8 x float>* %318, align 1, !tbaa !12
  store <8 x float> %362, <8 x float>* %322, align 1, !tbaa !12
  store <8 x float> %363, <8 x float>* %326, align 1, !tbaa !12
  store <8 x float> %364, <8 x float>* %330, align 1, !tbaa !12
  store <8 x float> %365, <8 x float>* %334, align 1, !tbaa !12
  %366 = add nuw nsw i64 %287, 48
  %367 = icmp ult i64 %366, %197
  br i1 %367, label %286, label %280

368:                                              ; preds = %374
  br i1 %92, label %369, label %544

369:                                              ; preds = %368
  %370 = trunc i64 %41 to i32
  %371 = mul nsw i32 %91, %370
  %372 = sext i32 %371 to i64
  %373 = zext i32 %91 to i64
  br label %462

374:                                              ; preds = %281, %374
  %375 = phi i64 [ 0, %281 ], [ %454, %374 ]
  %376 = getelementptr inbounds float, float* %5, i64 %375
  %377 = getelementptr inbounds float, float* %376, i64 8
  %378 = bitcast float* %377 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %378, i32 0, i32 1, i32 1)
  %379 = getelementptr inbounds float, float* %3, i64 %375
  %380 = getelementptr inbounds float, float* %379, i64 8
  %381 = bitcast float* %380 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %381, i32 0, i32 1, i32 1)
  %382 = getelementptr inbounds float, float* %376, i64 16
  %383 = bitcast float* %382 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %383, i32 0, i32 1, i32 1)
  %384 = getelementptr inbounds float, float* %379, i64 16
  %385 = bitcast float* %384 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %385, i32 0, i32 1, i32 1)
  %386 = getelementptr inbounds float, float* %376, i64 24
  %387 = bitcast float* %386 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %387, i32 0, i32 1, i32 1)
  %388 = getelementptr inbounds float, float* %379, i64 24
  %389 = bitcast float* %388 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %389, i32 0, i32 1, i32 1)
  %390 = getelementptr inbounds float, float* %376, i64 32
  %391 = bitcast float* %390 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %391, i32 0, i32 1, i32 1)
  %392 = getelementptr inbounds float, float* %379, i64 32
  %393 = bitcast float* %392 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %393, i32 0, i32 1, i32 1)
  %394 = getelementptr inbounds float, float* %376, i64 40
  %395 = bitcast float* %394 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %395, i32 0, i32 1, i32 1)
  %396 = getelementptr inbounds float, float* %379, i64 40
  %397 = bitcast float* %396 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %397, i32 0, i32 1, i32 1)
  %398 = getelementptr inbounds float, float* %376, i64 48
  %399 = bitcast float* %398 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %399, i32 0, i32 1, i32 1)
  %400 = getelementptr inbounds float, float* %379, i64 48
  %401 = bitcast float* %400 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %401, i32 0, i32 1, i32 1)
  %402 = bitcast float* %376 to <8 x float>*
  %403 = load <8 x float>, <8 x float>* %402, align 1, !tbaa !12
  %404 = or i64 %375, 8
  %405 = getelementptr inbounds float, float* %5, i64 %404
  %406 = bitcast float* %405 to <8 x float>*
  %407 = load <8 x float>, <8 x float>* %406, align 1, !tbaa !12
  %408 = add nuw nsw i64 %375, 16
  %409 = getelementptr inbounds float, float* %5, i64 %408
  %410 = bitcast float* %409 to <8 x float>*
  %411 = load <8 x float>, <8 x float>* %410, align 1, !tbaa !12
  %412 = add nuw nsw i64 %375, 24
  %413 = getelementptr inbounds float, float* %5, i64 %412
  %414 = bitcast float* %413 to <8 x float>*
  %415 = load <8 x float>, <8 x float>* %414, align 1, !tbaa !12
  %416 = add nuw nsw i64 %375, 32
  %417 = getelementptr inbounds float, float* %5, i64 %416
  %418 = bitcast float* %417 to <8 x float>*
  %419 = load <8 x float>, <8 x float>* %418, align 1, !tbaa !12
  %420 = add nuw nsw i64 %375, 40
  %421 = getelementptr inbounds float, float* %5, i64 %420
  %422 = bitcast float* %421 to <8 x float>*
  %423 = load <8 x float>, <8 x float>* %422, align 1, !tbaa !12
  %424 = add nsw i64 %375, %284
  %425 = getelementptr inbounds float, float* %3, i64 %424
  %426 = bitcast float* %425 to <8 x float>*
  %427 = load <8 x float>, <8 x float>* %426, align 1, !tbaa !12
  %428 = add nsw i64 %424, 8
  %429 = getelementptr inbounds float, float* %3, i64 %428
  %430 = bitcast float* %429 to <8 x float>*
  %431 = load <8 x float>, <8 x float>* %430, align 1, !tbaa !12
  %432 = add nsw i64 %424, 16
  %433 = getelementptr inbounds float, float* %3, i64 %432
  %434 = bitcast float* %433 to <8 x float>*
  %435 = load <8 x float>, <8 x float>* %434, align 1, !tbaa !12
  %436 = add nsw i64 %424, 24
  %437 = getelementptr inbounds float, float* %3, i64 %436
  %438 = bitcast float* %437 to <8 x float>*
  %439 = load <8 x float>, <8 x float>* %438, align 1, !tbaa !12
  %440 = add nsw i64 %424, 32
  %441 = getelementptr inbounds float, float* %3, i64 %440
  %442 = bitcast float* %441 to <8 x float>*
  %443 = load <8 x float>, <8 x float>* %442, align 1, !tbaa !12
  %444 = add nsw i64 %424, 40
  %445 = getelementptr inbounds float, float* %3, i64 %444
  %446 = bitcast float* %445 to <8 x float>*
  %447 = load <8 x float>, <8 x float>* %446, align 1, !tbaa !12
  %448 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %427, <8 x float> %40, <8 x float> %403) #10
  %449 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %431, <8 x float> %40, <8 x float> %407) #10
  %450 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %435, <8 x float> %40, <8 x float> %411) #10
  %451 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %439, <8 x float> %40, <8 x float> %415) #10
  %452 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %443, <8 x float> %40, <8 x float> %419) #10
  %453 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %447, <8 x float> %40, <8 x float> %423) #10
  store <8 x float> %448, <8 x float>* %402, align 1, !tbaa !12
  store <8 x float> %449, <8 x float>* %406, align 1, !tbaa !12
  store <8 x float> %450, <8 x float>* %410, align 1, !tbaa !12
  store <8 x float> %451, <8 x float>* %414, align 1, !tbaa !12
  store <8 x float> %452, <8 x float>* %418, align 1, !tbaa !12
  store <8 x float> %453, <8 x float>* %422, align 1, !tbaa !12
  %454 = add nuw nsw i64 %375, 48
  %455 = icmp ult i64 %454, %285
  br i1 %455, label %374, label %368

456:                                              ; preds = %462
  br i1 %92, label %457, label %544

457:                                              ; preds = %456
  %458 = trunc i64 %46 to i32
  %459 = mul nsw i32 %91, %458
  %460 = sext i32 %459 to i64
  %461 = zext i32 %91 to i64
  br label %551

462:                                              ; preds = %369, %462
  %463 = phi i64 [ 0, %369 ], [ %542, %462 ]
  %464 = getelementptr inbounds float, float* %5, i64 %463
  %465 = getelementptr inbounds float, float* %464, i64 8
  %466 = bitcast float* %465 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %466, i32 0, i32 1, i32 1)
  %467 = getelementptr inbounds float, float* %3, i64 %463
  %468 = getelementptr inbounds float, float* %467, i64 8
  %469 = bitcast float* %468 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %469, i32 0, i32 1, i32 1)
  %470 = getelementptr inbounds float, float* %464, i64 16
  %471 = bitcast float* %470 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %471, i32 0, i32 1, i32 1)
  %472 = getelementptr inbounds float, float* %467, i64 16
  %473 = bitcast float* %472 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %473, i32 0, i32 1, i32 1)
  %474 = getelementptr inbounds float, float* %464, i64 24
  %475 = bitcast float* %474 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %475, i32 0, i32 1, i32 1)
  %476 = getelementptr inbounds float, float* %467, i64 24
  %477 = bitcast float* %476 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %477, i32 0, i32 1, i32 1)
  %478 = getelementptr inbounds float, float* %464, i64 32
  %479 = bitcast float* %478 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %479, i32 0, i32 1, i32 1)
  %480 = getelementptr inbounds float, float* %467, i64 32
  %481 = bitcast float* %480 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %481, i32 0, i32 1, i32 1)
  %482 = getelementptr inbounds float, float* %464, i64 40
  %483 = bitcast float* %482 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %483, i32 0, i32 1, i32 1)
  %484 = getelementptr inbounds float, float* %467, i64 40
  %485 = bitcast float* %484 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %485, i32 0, i32 1, i32 1)
  %486 = getelementptr inbounds float, float* %464, i64 48
  %487 = bitcast float* %486 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %487, i32 0, i32 1, i32 1)
  %488 = getelementptr inbounds float, float* %467, i64 48
  %489 = bitcast float* %488 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %489, i32 0, i32 1, i32 1)
  %490 = bitcast float* %464 to <8 x float>*
  %491 = load <8 x float>, <8 x float>* %490, align 1, !tbaa !12
  %492 = or i64 %463, 8
  %493 = getelementptr inbounds float, float* %5, i64 %492
  %494 = bitcast float* %493 to <8 x float>*
  %495 = load <8 x float>, <8 x float>* %494, align 1, !tbaa !12
  %496 = add nuw nsw i64 %463, 16
  %497 = getelementptr inbounds float, float* %5, i64 %496
  %498 = bitcast float* %497 to <8 x float>*
  %499 = load <8 x float>, <8 x float>* %498, align 1, !tbaa !12
  %500 = add nuw nsw i64 %463, 24
  %501 = getelementptr inbounds float, float* %5, i64 %500
  %502 = bitcast float* %501 to <8 x float>*
  %503 = load <8 x float>, <8 x float>* %502, align 1, !tbaa !12
  %504 = add nuw nsw i64 %463, 32
  %505 = getelementptr inbounds float, float* %5, i64 %504
  %506 = bitcast float* %505 to <8 x float>*
  %507 = load <8 x float>, <8 x float>* %506, align 1, !tbaa !12
  %508 = add nuw nsw i64 %463, 40
  %509 = getelementptr inbounds float, float* %5, i64 %508
  %510 = bitcast float* %509 to <8 x float>*
  %511 = load <8 x float>, <8 x float>* %510, align 1, !tbaa !12
  %512 = add nsw i64 %463, %372
  %513 = getelementptr inbounds float, float* %3, i64 %512
  %514 = bitcast float* %513 to <8 x float>*
  %515 = load <8 x float>, <8 x float>* %514, align 1, !tbaa !12
  %516 = add nsw i64 %512, 8
  %517 = getelementptr inbounds float, float* %3, i64 %516
  %518 = bitcast float* %517 to <8 x float>*
  %519 = load <8 x float>, <8 x float>* %518, align 1, !tbaa !12
  %520 = add nsw i64 %512, 16
  %521 = getelementptr inbounds float, float* %3, i64 %520
  %522 = bitcast float* %521 to <8 x float>*
  %523 = load <8 x float>, <8 x float>* %522, align 1, !tbaa !12
  %524 = add nsw i64 %512, 24
  %525 = getelementptr inbounds float, float* %3, i64 %524
  %526 = bitcast float* %525 to <8 x float>*
  %527 = load <8 x float>, <8 x float>* %526, align 1, !tbaa !12
  %528 = add nsw i64 %512, 32
  %529 = getelementptr inbounds float, float* %3, i64 %528
  %530 = bitcast float* %529 to <8 x float>*
  %531 = load <8 x float>, <8 x float>* %530, align 1, !tbaa !12
  %532 = add nsw i64 %512, 40
  %533 = getelementptr inbounds float, float* %3, i64 %532
  %534 = bitcast float* %533 to <8 x float>*
  %535 = load <8 x float>, <8 x float>* %534, align 1, !tbaa !12
  %536 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %515, <8 x float> %45, <8 x float> %491) #10
  %537 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> %45, <8 x float> %495) #10
  %538 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %523, <8 x float> %45, <8 x float> %499) #10
  %539 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %527, <8 x float> %45, <8 x float> %503) #10
  %540 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %531, <8 x float> %45, <8 x float> %507) #10
  %541 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %535, <8 x float> %45, <8 x float> %511) #10
  store <8 x float> %536, <8 x float>* %490, align 1, !tbaa !12
  store <8 x float> %537, <8 x float>* %494, align 1, !tbaa !12
  store <8 x float> %538, <8 x float>* %498, align 1, !tbaa !12
  store <8 x float> %539, <8 x float>* %502, align 1, !tbaa !12
  store <8 x float> %540, <8 x float>* %506, align 1, !tbaa !12
  store <8 x float> %541, <8 x float>* %510, align 1, !tbaa !12
  %542 = add nuw nsw i64 %463, 48
  %543 = icmp ult i64 %542, %373
  br i1 %543, label %462, label %456

544:                                              ; preds = %551, %97, %192, %280, %368, %456
  %545 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %546 = icmp sgt i32 %545, 0
  br i1 %546, label %547, label %1264

547:                                              ; preds = %544
  %548 = zext i32 %545 to i64
  %549 = trunc i64 %51 to i32
  %550 = mul nsw i32 %545, %549
  br label %639

551:                                              ; preds = %457, %551
  %552 = phi i64 [ 0, %457 ], [ %631, %551 ]
  %553 = getelementptr inbounds float, float* %5, i64 %552
  %554 = getelementptr inbounds float, float* %553, i64 8
  %555 = bitcast float* %554 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %555, i32 0, i32 1, i32 1)
  %556 = getelementptr inbounds float, float* %3, i64 %552
  %557 = getelementptr inbounds float, float* %556, i64 8
  %558 = bitcast float* %557 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %558, i32 0, i32 1, i32 1)
  %559 = getelementptr inbounds float, float* %553, i64 16
  %560 = bitcast float* %559 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %560, i32 0, i32 1, i32 1)
  %561 = getelementptr inbounds float, float* %556, i64 16
  %562 = bitcast float* %561 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %562, i32 0, i32 1, i32 1)
  %563 = getelementptr inbounds float, float* %553, i64 24
  %564 = bitcast float* %563 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %564, i32 0, i32 1, i32 1)
  %565 = getelementptr inbounds float, float* %556, i64 24
  %566 = bitcast float* %565 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %566, i32 0, i32 1, i32 1)
  %567 = getelementptr inbounds float, float* %553, i64 32
  %568 = bitcast float* %567 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %568, i32 0, i32 1, i32 1)
  %569 = getelementptr inbounds float, float* %556, i64 32
  %570 = bitcast float* %569 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %570, i32 0, i32 1, i32 1)
  %571 = getelementptr inbounds float, float* %553, i64 40
  %572 = bitcast float* %571 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %572, i32 0, i32 1, i32 1)
  %573 = getelementptr inbounds float, float* %556, i64 40
  %574 = bitcast float* %573 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %574, i32 0, i32 1, i32 1)
  %575 = getelementptr inbounds float, float* %553, i64 48
  %576 = bitcast float* %575 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %576, i32 0, i32 1, i32 1)
  %577 = getelementptr inbounds float, float* %556, i64 48
  %578 = bitcast float* %577 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %578, i32 0, i32 1, i32 1)
  %579 = bitcast float* %553 to <8 x float>*
  %580 = load <8 x float>, <8 x float>* %579, align 1, !tbaa !12
  %581 = or i64 %552, 8
  %582 = getelementptr inbounds float, float* %5, i64 %581
  %583 = bitcast float* %582 to <8 x float>*
  %584 = load <8 x float>, <8 x float>* %583, align 1, !tbaa !12
  %585 = add nuw nsw i64 %552, 16
  %586 = getelementptr inbounds float, float* %5, i64 %585
  %587 = bitcast float* %586 to <8 x float>*
  %588 = load <8 x float>, <8 x float>* %587, align 1, !tbaa !12
  %589 = add nuw nsw i64 %552, 24
  %590 = getelementptr inbounds float, float* %5, i64 %589
  %591 = bitcast float* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 1, !tbaa !12
  %593 = add nuw nsw i64 %552, 32
  %594 = getelementptr inbounds float, float* %5, i64 %593
  %595 = bitcast float* %594 to <8 x float>*
  %596 = load <8 x float>, <8 x float>* %595, align 1, !tbaa !12
  %597 = add nuw nsw i64 %552, 40
  %598 = getelementptr inbounds float, float* %5, i64 %597
  %599 = bitcast float* %598 to <8 x float>*
  %600 = load <8 x float>, <8 x float>* %599, align 1, !tbaa !12
  %601 = add nsw i64 %552, %460
  %602 = getelementptr inbounds float, float* %3, i64 %601
  %603 = bitcast float* %602 to <8 x float>*
  %604 = load <8 x float>, <8 x float>* %603, align 1, !tbaa !12
  %605 = add nsw i64 %601, 8
  %606 = getelementptr inbounds float, float* %3, i64 %605
  %607 = bitcast float* %606 to <8 x float>*
  %608 = load <8 x float>, <8 x float>* %607, align 1, !tbaa !12
  %609 = add nsw i64 %601, 16
  %610 = getelementptr inbounds float, float* %3, i64 %609
  %611 = bitcast float* %610 to <8 x float>*
  %612 = load <8 x float>, <8 x float>* %611, align 1, !tbaa !12
  %613 = add nsw i64 %601, 24
  %614 = getelementptr inbounds float, float* %3, i64 %613
  %615 = bitcast float* %614 to <8 x float>*
  %616 = load <8 x float>, <8 x float>* %615, align 1, !tbaa !12
  %617 = add nsw i64 %601, 32
  %618 = getelementptr inbounds float, float* %3, i64 %617
  %619 = bitcast float* %618 to <8 x float>*
  %620 = load <8 x float>, <8 x float>* %619, align 1, !tbaa !12
  %621 = add nsw i64 %601, 40
  %622 = getelementptr inbounds float, float* %3, i64 %621
  %623 = bitcast float* %622 to <8 x float>*
  %624 = load <8 x float>, <8 x float>* %623, align 1, !tbaa !12
  %625 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %604, <8 x float> %50, <8 x float> %580) #10
  %626 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %608, <8 x float> %50, <8 x float> %584) #10
  %627 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %612, <8 x float> %50, <8 x float> %588) #10
  %628 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %616, <8 x float> %50, <8 x float> %592) #10
  %629 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %620, <8 x float> %50, <8 x float> %596) #10
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %624, <8 x float> %50, <8 x float> %600) #10
  store <8 x float> %625, <8 x float>* %579, align 1, !tbaa !12
  store <8 x float> %626, <8 x float>* %583, align 1, !tbaa !12
  store <8 x float> %627, <8 x float>* %587, align 1, !tbaa !12
  store <8 x float> %628, <8 x float>* %591, align 1, !tbaa !12
  store <8 x float> %629, <8 x float>* %595, align 1, !tbaa !12
  store <8 x float> %630, <8 x float>* %599, align 1, !tbaa !12
  %631 = add nuw nsw i64 %552, 48
  %632 = icmp ult i64 %631, %461
  br i1 %632, label %551, label %544

633:                                              ; preds = %639
  br i1 %546, label %634, label %1080

634:                                              ; preds = %633
  %635 = trunc i64 %56 to i32
  %636 = mul nsw i32 %545, %635
  %637 = sext i32 %636 to i64
  %638 = zext i32 %545 to i64
  br label %734

639:                                              ; preds = %547, %639
  %640 = phi i64 [ 0, %547 ], [ %726, %639 ]
  %641 = getelementptr inbounds float, float* %5, i64 %640
  %642 = getelementptr inbounds float, float* %641, i64 8
  %643 = bitcast float* %642 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %643, i32 0, i32 1, i32 1)
  %644 = getelementptr inbounds float, float* %3, i64 %640
  %645 = getelementptr inbounds float, float* %644, i64 8
  %646 = bitcast float* %645 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %646, i32 0, i32 1, i32 1)
  %647 = getelementptr inbounds float, float* %641, i64 16
  %648 = bitcast float* %647 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %648, i32 0, i32 1, i32 1)
  %649 = getelementptr inbounds float, float* %644, i64 16
  %650 = bitcast float* %649 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %650, i32 0, i32 1, i32 1)
  %651 = getelementptr inbounds float, float* %641, i64 24
  %652 = bitcast float* %651 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %652, i32 0, i32 1, i32 1)
  %653 = getelementptr inbounds float, float* %644, i64 24
  %654 = bitcast float* %653 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %654, i32 0, i32 1, i32 1)
  %655 = getelementptr inbounds float, float* %641, i64 32
  %656 = bitcast float* %655 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %656, i32 0, i32 1, i32 1)
  %657 = getelementptr inbounds float, float* %644, i64 32
  %658 = bitcast float* %657 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %658, i32 0, i32 1, i32 1)
  %659 = getelementptr inbounds float, float* %641, i64 40
  %660 = bitcast float* %659 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %660, i32 0, i32 1, i32 1)
  %661 = getelementptr inbounds float, float* %644, i64 40
  %662 = bitcast float* %661 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %662, i32 0, i32 1, i32 1)
  %663 = getelementptr inbounds float, float* %641, i64 48
  %664 = bitcast float* %663 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %664, i32 0, i32 1, i32 1)
  %665 = getelementptr inbounds float, float* %644, i64 48
  %666 = bitcast float* %665 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %666, i32 0, i32 1, i32 1)
  %667 = bitcast float* %641 to <8 x float>*
  %668 = load <8 x float>, <8 x float>* %667, align 1, !tbaa !12
  %669 = or i64 %640, 8
  %670 = getelementptr inbounds float, float* %5, i64 %669
  %671 = bitcast float* %670 to <8 x float>*
  %672 = load <8 x float>, <8 x float>* %671, align 1, !tbaa !12
  %673 = add nuw nsw i64 %640, 16
  %674 = getelementptr inbounds float, float* %5, i64 %673
  %675 = bitcast float* %674 to <8 x float>*
  %676 = load <8 x float>, <8 x float>* %675, align 1, !tbaa !12
  %677 = add nuw nsw i64 %640, 24
  %678 = getelementptr inbounds float, float* %5, i64 %677
  %679 = bitcast float* %678 to <8 x float>*
  %680 = load <8 x float>, <8 x float>* %679, align 1, !tbaa !12
  %681 = add nuw nsw i64 %640, 32
  %682 = getelementptr inbounds float, float* %5, i64 %681
  %683 = bitcast float* %682 to <8 x float>*
  %684 = load <8 x float>, <8 x float>* %683, align 1, !tbaa !12
  %685 = add nuw nsw i64 %640, 40
  %686 = getelementptr inbounds float, float* %5, i64 %685
  %687 = bitcast float* %686 to <8 x float>*
  %688 = load <8 x float>, <8 x float>* %687, align 1, !tbaa !12
  %689 = trunc i64 %640 to i32
  %690 = add nsw i32 %550, %689
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds float, float* %3, i64 %691
  %693 = bitcast float* %692 to <8 x float>*
  %694 = load <8 x float>, <8 x float>* %693, align 1, !tbaa !12
  %695 = add nsw i32 %690, 8
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds float, float* %3, i64 %696
  %698 = bitcast float* %697 to <8 x float>*
  %699 = load <8 x float>, <8 x float>* %698, align 1, !tbaa !12
  %700 = add nsw i32 %690, 16
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds float, float* %3, i64 %701
  %703 = bitcast float* %702 to <8 x float>*
  %704 = load <8 x float>, <8 x float>* %703, align 1, !tbaa !12
  %705 = add nsw i32 %690, 24
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds float, float* %3, i64 %706
  %708 = bitcast float* %707 to <8 x float>*
  %709 = load <8 x float>, <8 x float>* %708, align 1, !tbaa !12
  %710 = add nsw i32 %690, 32
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds float, float* %3, i64 %711
  %713 = bitcast float* %712 to <8 x float>*
  %714 = load <8 x float>, <8 x float>* %713, align 1, !tbaa !12
  %715 = add nsw i32 %690, 40
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds float, float* %3, i64 %716
  %718 = bitcast float* %717 to <8 x float>*
  %719 = load <8 x float>, <8 x float>* %718, align 1, !tbaa !12
  %720 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %694, <8 x float> %55, <8 x float> %668) #10
  %721 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %699, <8 x float> %55, <8 x float> %672) #10
  %722 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %704, <8 x float> %55, <8 x float> %676) #10
  %723 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %709, <8 x float> %55, <8 x float> %680) #10
  %724 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %714, <8 x float> %55, <8 x float> %684) #10
  %725 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %719, <8 x float> %55, <8 x float> %688) #10
  store <8 x float> %720, <8 x float>* %667, align 1, !tbaa !12
  store <8 x float> %721, <8 x float>* %671, align 1, !tbaa !12
  store <8 x float> %722, <8 x float>* %675, align 1, !tbaa !12
  store <8 x float> %723, <8 x float>* %679, align 1, !tbaa !12
  store <8 x float> %724, <8 x float>* %683, align 1, !tbaa !12
  store <8 x float> %725, <8 x float>* %687, align 1, !tbaa !12
  %726 = add nuw nsw i64 %640, 48
  %727 = icmp ult i64 %726, %548
  br i1 %727, label %639, label %633

728:                                              ; preds = %734
  br i1 %546, label %729, label %1080

729:                                              ; preds = %728
  %730 = trunc i64 %61 to i32
  %731 = mul nsw i32 %545, %730
  %732 = sext i32 %731 to i64
  %733 = zext i32 %545 to i64
  br label %822

734:                                              ; preds = %634, %734
  %735 = phi i64 [ 0, %634 ], [ %814, %734 ]
  %736 = getelementptr inbounds float, float* %5, i64 %735
  %737 = getelementptr inbounds float, float* %736, i64 8
  %738 = bitcast float* %737 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %738, i32 0, i32 1, i32 1)
  %739 = getelementptr inbounds float, float* %3, i64 %735
  %740 = getelementptr inbounds float, float* %739, i64 8
  %741 = bitcast float* %740 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %741, i32 0, i32 1, i32 1)
  %742 = getelementptr inbounds float, float* %736, i64 16
  %743 = bitcast float* %742 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %743, i32 0, i32 1, i32 1)
  %744 = getelementptr inbounds float, float* %739, i64 16
  %745 = bitcast float* %744 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %745, i32 0, i32 1, i32 1)
  %746 = getelementptr inbounds float, float* %736, i64 24
  %747 = bitcast float* %746 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %747, i32 0, i32 1, i32 1)
  %748 = getelementptr inbounds float, float* %739, i64 24
  %749 = bitcast float* %748 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %749, i32 0, i32 1, i32 1)
  %750 = getelementptr inbounds float, float* %736, i64 32
  %751 = bitcast float* %750 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %751, i32 0, i32 1, i32 1)
  %752 = getelementptr inbounds float, float* %739, i64 32
  %753 = bitcast float* %752 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %753, i32 0, i32 1, i32 1)
  %754 = getelementptr inbounds float, float* %736, i64 40
  %755 = bitcast float* %754 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %755, i32 0, i32 1, i32 1)
  %756 = getelementptr inbounds float, float* %739, i64 40
  %757 = bitcast float* %756 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %757, i32 0, i32 1, i32 1)
  %758 = getelementptr inbounds float, float* %736, i64 48
  %759 = bitcast float* %758 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %759, i32 0, i32 1, i32 1)
  %760 = getelementptr inbounds float, float* %739, i64 48
  %761 = bitcast float* %760 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %761, i32 0, i32 1, i32 1)
  %762 = bitcast float* %736 to <8 x float>*
  %763 = load <8 x float>, <8 x float>* %762, align 1, !tbaa !12
  %764 = or i64 %735, 8
  %765 = getelementptr inbounds float, float* %5, i64 %764
  %766 = bitcast float* %765 to <8 x float>*
  %767 = load <8 x float>, <8 x float>* %766, align 1, !tbaa !12
  %768 = add nuw nsw i64 %735, 16
  %769 = getelementptr inbounds float, float* %5, i64 %768
  %770 = bitcast float* %769 to <8 x float>*
  %771 = load <8 x float>, <8 x float>* %770, align 1, !tbaa !12
  %772 = add nuw nsw i64 %735, 24
  %773 = getelementptr inbounds float, float* %5, i64 %772
  %774 = bitcast float* %773 to <8 x float>*
  %775 = load <8 x float>, <8 x float>* %774, align 1, !tbaa !12
  %776 = add nuw nsw i64 %735, 32
  %777 = getelementptr inbounds float, float* %5, i64 %776
  %778 = bitcast float* %777 to <8 x float>*
  %779 = load <8 x float>, <8 x float>* %778, align 1, !tbaa !12
  %780 = add nuw nsw i64 %735, 40
  %781 = getelementptr inbounds float, float* %5, i64 %780
  %782 = bitcast float* %781 to <8 x float>*
  %783 = load <8 x float>, <8 x float>* %782, align 1, !tbaa !12
  %784 = add nsw i64 %735, %637
  %785 = getelementptr inbounds float, float* %3, i64 %784
  %786 = bitcast float* %785 to <8 x float>*
  %787 = load <8 x float>, <8 x float>* %786, align 1, !tbaa !12
  %788 = add nsw i64 %784, 8
  %789 = getelementptr inbounds float, float* %3, i64 %788
  %790 = bitcast float* %789 to <8 x float>*
  %791 = load <8 x float>, <8 x float>* %790, align 1, !tbaa !12
  %792 = add nsw i64 %784, 16
  %793 = getelementptr inbounds float, float* %3, i64 %792
  %794 = bitcast float* %793 to <8 x float>*
  %795 = load <8 x float>, <8 x float>* %794, align 1, !tbaa !12
  %796 = add nsw i64 %784, 24
  %797 = getelementptr inbounds float, float* %3, i64 %796
  %798 = bitcast float* %797 to <8 x float>*
  %799 = load <8 x float>, <8 x float>* %798, align 1, !tbaa !12
  %800 = add nsw i64 %784, 32
  %801 = getelementptr inbounds float, float* %3, i64 %800
  %802 = bitcast float* %801 to <8 x float>*
  %803 = load <8 x float>, <8 x float>* %802, align 1, !tbaa !12
  %804 = add nsw i64 %784, 40
  %805 = getelementptr inbounds float, float* %3, i64 %804
  %806 = bitcast float* %805 to <8 x float>*
  %807 = load <8 x float>, <8 x float>* %806, align 1, !tbaa !12
  %808 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %787, <8 x float> %60, <8 x float> %763) #10
  %809 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %791, <8 x float> %60, <8 x float> %767) #10
  %810 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %795, <8 x float> %60, <8 x float> %771) #10
  %811 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %799, <8 x float> %60, <8 x float> %775) #10
  %812 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %803, <8 x float> %60, <8 x float> %779) #10
  %813 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %807, <8 x float> %60, <8 x float> %783) #10
  store <8 x float> %808, <8 x float>* %762, align 1, !tbaa !12
  store <8 x float> %809, <8 x float>* %766, align 1, !tbaa !12
  store <8 x float> %810, <8 x float>* %770, align 1, !tbaa !12
  store <8 x float> %811, <8 x float>* %774, align 1, !tbaa !12
  store <8 x float> %812, <8 x float>* %778, align 1, !tbaa !12
  store <8 x float> %813, <8 x float>* %782, align 1, !tbaa !12
  %814 = add nuw nsw i64 %735, 48
  %815 = icmp ult i64 %814, %638
  br i1 %815, label %734, label %728

816:                                              ; preds = %822
  br i1 %546, label %817, label %1080

817:                                              ; preds = %816
  %818 = trunc i64 %66 to i32
  %819 = mul nsw i32 %545, %818
  %820 = sext i32 %819 to i64
  %821 = zext i32 %545 to i64
  br label %910

822:                                              ; preds = %729, %822
  %823 = phi i64 [ 0, %729 ], [ %902, %822 ]
  %824 = getelementptr inbounds float, float* %5, i64 %823
  %825 = getelementptr inbounds float, float* %824, i64 8
  %826 = bitcast float* %825 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %826, i32 0, i32 1, i32 1)
  %827 = getelementptr inbounds float, float* %3, i64 %823
  %828 = getelementptr inbounds float, float* %827, i64 8
  %829 = bitcast float* %828 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %829, i32 0, i32 1, i32 1)
  %830 = getelementptr inbounds float, float* %824, i64 16
  %831 = bitcast float* %830 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %831, i32 0, i32 1, i32 1)
  %832 = getelementptr inbounds float, float* %827, i64 16
  %833 = bitcast float* %832 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %833, i32 0, i32 1, i32 1)
  %834 = getelementptr inbounds float, float* %824, i64 24
  %835 = bitcast float* %834 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %835, i32 0, i32 1, i32 1)
  %836 = getelementptr inbounds float, float* %827, i64 24
  %837 = bitcast float* %836 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %837, i32 0, i32 1, i32 1)
  %838 = getelementptr inbounds float, float* %824, i64 32
  %839 = bitcast float* %838 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %839, i32 0, i32 1, i32 1)
  %840 = getelementptr inbounds float, float* %827, i64 32
  %841 = bitcast float* %840 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %841, i32 0, i32 1, i32 1)
  %842 = getelementptr inbounds float, float* %824, i64 40
  %843 = bitcast float* %842 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %843, i32 0, i32 1, i32 1)
  %844 = getelementptr inbounds float, float* %827, i64 40
  %845 = bitcast float* %844 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %845, i32 0, i32 1, i32 1)
  %846 = getelementptr inbounds float, float* %824, i64 48
  %847 = bitcast float* %846 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %847, i32 0, i32 1, i32 1)
  %848 = getelementptr inbounds float, float* %827, i64 48
  %849 = bitcast float* %848 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %849, i32 0, i32 1, i32 1)
  %850 = bitcast float* %824 to <8 x float>*
  %851 = load <8 x float>, <8 x float>* %850, align 1, !tbaa !12
  %852 = or i64 %823, 8
  %853 = getelementptr inbounds float, float* %5, i64 %852
  %854 = bitcast float* %853 to <8 x float>*
  %855 = load <8 x float>, <8 x float>* %854, align 1, !tbaa !12
  %856 = add nuw nsw i64 %823, 16
  %857 = getelementptr inbounds float, float* %5, i64 %856
  %858 = bitcast float* %857 to <8 x float>*
  %859 = load <8 x float>, <8 x float>* %858, align 1, !tbaa !12
  %860 = add nuw nsw i64 %823, 24
  %861 = getelementptr inbounds float, float* %5, i64 %860
  %862 = bitcast float* %861 to <8 x float>*
  %863 = load <8 x float>, <8 x float>* %862, align 1, !tbaa !12
  %864 = add nuw nsw i64 %823, 32
  %865 = getelementptr inbounds float, float* %5, i64 %864
  %866 = bitcast float* %865 to <8 x float>*
  %867 = load <8 x float>, <8 x float>* %866, align 1, !tbaa !12
  %868 = add nuw nsw i64 %823, 40
  %869 = getelementptr inbounds float, float* %5, i64 %868
  %870 = bitcast float* %869 to <8 x float>*
  %871 = load <8 x float>, <8 x float>* %870, align 1, !tbaa !12
  %872 = add nsw i64 %823, %732
  %873 = getelementptr inbounds float, float* %3, i64 %872
  %874 = bitcast float* %873 to <8 x float>*
  %875 = load <8 x float>, <8 x float>* %874, align 1, !tbaa !12
  %876 = add nsw i64 %872, 8
  %877 = getelementptr inbounds float, float* %3, i64 %876
  %878 = bitcast float* %877 to <8 x float>*
  %879 = load <8 x float>, <8 x float>* %878, align 1, !tbaa !12
  %880 = add nsw i64 %872, 16
  %881 = getelementptr inbounds float, float* %3, i64 %880
  %882 = bitcast float* %881 to <8 x float>*
  %883 = load <8 x float>, <8 x float>* %882, align 1, !tbaa !12
  %884 = add nsw i64 %872, 24
  %885 = getelementptr inbounds float, float* %3, i64 %884
  %886 = bitcast float* %885 to <8 x float>*
  %887 = load <8 x float>, <8 x float>* %886, align 1, !tbaa !12
  %888 = add nsw i64 %872, 32
  %889 = getelementptr inbounds float, float* %3, i64 %888
  %890 = bitcast float* %889 to <8 x float>*
  %891 = load <8 x float>, <8 x float>* %890, align 1, !tbaa !12
  %892 = add nsw i64 %872, 40
  %893 = getelementptr inbounds float, float* %3, i64 %892
  %894 = bitcast float* %893 to <8 x float>*
  %895 = load <8 x float>, <8 x float>* %894, align 1, !tbaa !12
  %896 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %875, <8 x float> %65, <8 x float> %851) #10
  %897 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %879, <8 x float> %65, <8 x float> %855) #10
  %898 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %883, <8 x float> %65, <8 x float> %859) #10
  %899 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %887, <8 x float> %65, <8 x float> %863) #10
  %900 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %891, <8 x float> %65, <8 x float> %867) #10
  %901 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %895, <8 x float> %65, <8 x float> %871) #10
  store <8 x float> %896, <8 x float>* %850, align 1, !tbaa !12
  store <8 x float> %897, <8 x float>* %854, align 1, !tbaa !12
  store <8 x float> %898, <8 x float>* %858, align 1, !tbaa !12
  store <8 x float> %899, <8 x float>* %862, align 1, !tbaa !12
  store <8 x float> %900, <8 x float>* %866, align 1, !tbaa !12
  store <8 x float> %901, <8 x float>* %870, align 1, !tbaa !12
  %902 = add nuw nsw i64 %823, 48
  %903 = icmp ult i64 %902, %733
  br i1 %903, label %822, label %816

904:                                              ; preds = %910
  br i1 %546, label %905, label %1080

905:                                              ; preds = %904
  %906 = trunc i64 %71 to i32
  %907 = mul nsw i32 %545, %906
  %908 = sext i32 %907 to i64
  %909 = zext i32 %545 to i64
  br label %998

910:                                              ; preds = %817, %910
  %911 = phi i64 [ 0, %817 ], [ %990, %910 ]
  %912 = getelementptr inbounds float, float* %5, i64 %911
  %913 = getelementptr inbounds float, float* %912, i64 8
  %914 = bitcast float* %913 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %914, i32 0, i32 1, i32 1)
  %915 = getelementptr inbounds float, float* %3, i64 %911
  %916 = getelementptr inbounds float, float* %915, i64 8
  %917 = bitcast float* %916 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %917, i32 0, i32 1, i32 1)
  %918 = getelementptr inbounds float, float* %912, i64 16
  %919 = bitcast float* %918 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %919, i32 0, i32 1, i32 1)
  %920 = getelementptr inbounds float, float* %915, i64 16
  %921 = bitcast float* %920 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %921, i32 0, i32 1, i32 1)
  %922 = getelementptr inbounds float, float* %912, i64 24
  %923 = bitcast float* %922 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %923, i32 0, i32 1, i32 1)
  %924 = getelementptr inbounds float, float* %915, i64 24
  %925 = bitcast float* %924 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %925, i32 0, i32 1, i32 1)
  %926 = getelementptr inbounds float, float* %912, i64 32
  %927 = bitcast float* %926 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %927, i32 0, i32 1, i32 1)
  %928 = getelementptr inbounds float, float* %915, i64 32
  %929 = bitcast float* %928 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %929, i32 0, i32 1, i32 1)
  %930 = getelementptr inbounds float, float* %912, i64 40
  %931 = bitcast float* %930 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %931, i32 0, i32 1, i32 1)
  %932 = getelementptr inbounds float, float* %915, i64 40
  %933 = bitcast float* %932 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %933, i32 0, i32 1, i32 1)
  %934 = getelementptr inbounds float, float* %912, i64 48
  %935 = bitcast float* %934 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %935, i32 0, i32 1, i32 1)
  %936 = getelementptr inbounds float, float* %915, i64 48
  %937 = bitcast float* %936 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %937, i32 0, i32 1, i32 1)
  %938 = bitcast float* %912 to <8 x float>*
  %939 = load <8 x float>, <8 x float>* %938, align 1, !tbaa !12
  %940 = or i64 %911, 8
  %941 = getelementptr inbounds float, float* %5, i64 %940
  %942 = bitcast float* %941 to <8 x float>*
  %943 = load <8 x float>, <8 x float>* %942, align 1, !tbaa !12
  %944 = add nuw nsw i64 %911, 16
  %945 = getelementptr inbounds float, float* %5, i64 %944
  %946 = bitcast float* %945 to <8 x float>*
  %947 = load <8 x float>, <8 x float>* %946, align 1, !tbaa !12
  %948 = add nuw nsw i64 %911, 24
  %949 = getelementptr inbounds float, float* %5, i64 %948
  %950 = bitcast float* %949 to <8 x float>*
  %951 = load <8 x float>, <8 x float>* %950, align 1, !tbaa !12
  %952 = add nuw nsw i64 %911, 32
  %953 = getelementptr inbounds float, float* %5, i64 %952
  %954 = bitcast float* %953 to <8 x float>*
  %955 = load <8 x float>, <8 x float>* %954, align 1, !tbaa !12
  %956 = add nuw nsw i64 %911, 40
  %957 = getelementptr inbounds float, float* %5, i64 %956
  %958 = bitcast float* %957 to <8 x float>*
  %959 = load <8 x float>, <8 x float>* %958, align 1, !tbaa !12
  %960 = add nsw i64 %911, %820
  %961 = getelementptr inbounds float, float* %3, i64 %960
  %962 = bitcast float* %961 to <8 x float>*
  %963 = load <8 x float>, <8 x float>* %962, align 1, !tbaa !12
  %964 = add nsw i64 %960, 8
  %965 = getelementptr inbounds float, float* %3, i64 %964
  %966 = bitcast float* %965 to <8 x float>*
  %967 = load <8 x float>, <8 x float>* %966, align 1, !tbaa !12
  %968 = add nsw i64 %960, 16
  %969 = getelementptr inbounds float, float* %3, i64 %968
  %970 = bitcast float* %969 to <8 x float>*
  %971 = load <8 x float>, <8 x float>* %970, align 1, !tbaa !12
  %972 = add nsw i64 %960, 24
  %973 = getelementptr inbounds float, float* %3, i64 %972
  %974 = bitcast float* %973 to <8 x float>*
  %975 = load <8 x float>, <8 x float>* %974, align 1, !tbaa !12
  %976 = add nsw i64 %960, 32
  %977 = getelementptr inbounds float, float* %3, i64 %976
  %978 = bitcast float* %977 to <8 x float>*
  %979 = load <8 x float>, <8 x float>* %978, align 1, !tbaa !12
  %980 = add nsw i64 %960, 40
  %981 = getelementptr inbounds float, float* %3, i64 %980
  %982 = bitcast float* %981 to <8 x float>*
  %983 = load <8 x float>, <8 x float>* %982, align 1, !tbaa !12
  %984 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %963, <8 x float> %70, <8 x float> %939) #10
  %985 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %967, <8 x float> %70, <8 x float> %943) #10
  %986 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %971, <8 x float> %70, <8 x float> %947) #10
  %987 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %975, <8 x float> %70, <8 x float> %951) #10
  %988 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %70, <8 x float> %955) #10
  %989 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %983, <8 x float> %70, <8 x float> %959) #10
  store <8 x float> %984, <8 x float>* %938, align 1, !tbaa !12
  store <8 x float> %985, <8 x float>* %942, align 1, !tbaa !12
  store <8 x float> %986, <8 x float>* %946, align 1, !tbaa !12
  store <8 x float> %987, <8 x float>* %950, align 1, !tbaa !12
  store <8 x float> %988, <8 x float>* %954, align 1, !tbaa !12
  store <8 x float> %989, <8 x float>* %958, align 1, !tbaa !12
  %990 = add nuw nsw i64 %911, 48
  %991 = icmp ult i64 %990, %821
  br i1 %991, label %910, label %904

992:                                              ; preds = %998
  br i1 %546, label %993, label %1080

993:                                              ; preds = %992
  %994 = trunc i64 %76 to i32
  %995 = mul nsw i32 %545, %994
  %996 = sext i32 %995 to i64
  %997 = zext i32 %545 to i64
  br label %1087

998:                                              ; preds = %905, %998
  %999 = phi i64 [ 0, %905 ], [ %1078, %998 ]
  %1000 = getelementptr inbounds float, float* %5, i64 %999
  %1001 = getelementptr inbounds float, float* %1000, i64 8
  %1002 = bitcast float* %1001 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1002, i32 0, i32 1, i32 1)
  %1003 = getelementptr inbounds float, float* %3, i64 %999
  %1004 = getelementptr inbounds float, float* %1003, i64 8
  %1005 = bitcast float* %1004 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1005, i32 0, i32 1, i32 1)
  %1006 = getelementptr inbounds float, float* %1000, i64 16
  %1007 = bitcast float* %1006 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1007, i32 0, i32 1, i32 1)
  %1008 = getelementptr inbounds float, float* %1003, i64 16
  %1009 = bitcast float* %1008 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1009, i32 0, i32 1, i32 1)
  %1010 = getelementptr inbounds float, float* %1000, i64 24
  %1011 = bitcast float* %1010 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1011, i32 0, i32 1, i32 1)
  %1012 = getelementptr inbounds float, float* %1003, i64 24
  %1013 = bitcast float* %1012 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1013, i32 0, i32 1, i32 1)
  %1014 = getelementptr inbounds float, float* %1000, i64 32
  %1015 = bitcast float* %1014 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1015, i32 0, i32 1, i32 1)
  %1016 = getelementptr inbounds float, float* %1003, i64 32
  %1017 = bitcast float* %1016 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1017, i32 0, i32 1, i32 1)
  %1018 = getelementptr inbounds float, float* %1000, i64 40
  %1019 = bitcast float* %1018 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1019, i32 0, i32 1, i32 1)
  %1020 = getelementptr inbounds float, float* %1003, i64 40
  %1021 = bitcast float* %1020 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1021, i32 0, i32 1, i32 1)
  %1022 = getelementptr inbounds float, float* %1000, i64 48
  %1023 = bitcast float* %1022 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1023, i32 0, i32 1, i32 1)
  %1024 = getelementptr inbounds float, float* %1003, i64 48
  %1025 = bitcast float* %1024 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1025, i32 0, i32 1, i32 1)
  %1026 = bitcast float* %1000 to <8 x float>*
  %1027 = load <8 x float>, <8 x float>* %1026, align 1, !tbaa !12
  %1028 = or i64 %999, 8
  %1029 = getelementptr inbounds float, float* %5, i64 %1028
  %1030 = bitcast float* %1029 to <8 x float>*
  %1031 = load <8 x float>, <8 x float>* %1030, align 1, !tbaa !12
  %1032 = add nuw nsw i64 %999, 16
  %1033 = getelementptr inbounds float, float* %5, i64 %1032
  %1034 = bitcast float* %1033 to <8 x float>*
  %1035 = load <8 x float>, <8 x float>* %1034, align 1, !tbaa !12
  %1036 = add nuw nsw i64 %999, 24
  %1037 = getelementptr inbounds float, float* %5, i64 %1036
  %1038 = bitcast float* %1037 to <8 x float>*
  %1039 = load <8 x float>, <8 x float>* %1038, align 1, !tbaa !12
  %1040 = add nuw nsw i64 %999, 32
  %1041 = getelementptr inbounds float, float* %5, i64 %1040
  %1042 = bitcast float* %1041 to <8 x float>*
  %1043 = load <8 x float>, <8 x float>* %1042, align 1, !tbaa !12
  %1044 = add nuw nsw i64 %999, 40
  %1045 = getelementptr inbounds float, float* %5, i64 %1044
  %1046 = bitcast float* %1045 to <8 x float>*
  %1047 = load <8 x float>, <8 x float>* %1046, align 1, !tbaa !12
  %1048 = add nsw i64 %999, %908
  %1049 = getelementptr inbounds float, float* %3, i64 %1048
  %1050 = bitcast float* %1049 to <8 x float>*
  %1051 = load <8 x float>, <8 x float>* %1050, align 1, !tbaa !12
  %1052 = add nsw i64 %1048, 8
  %1053 = getelementptr inbounds float, float* %3, i64 %1052
  %1054 = bitcast float* %1053 to <8 x float>*
  %1055 = load <8 x float>, <8 x float>* %1054, align 1, !tbaa !12
  %1056 = add nsw i64 %1048, 16
  %1057 = getelementptr inbounds float, float* %3, i64 %1056
  %1058 = bitcast float* %1057 to <8 x float>*
  %1059 = load <8 x float>, <8 x float>* %1058, align 1, !tbaa !12
  %1060 = add nsw i64 %1048, 24
  %1061 = getelementptr inbounds float, float* %3, i64 %1060
  %1062 = bitcast float* %1061 to <8 x float>*
  %1063 = load <8 x float>, <8 x float>* %1062, align 1, !tbaa !12
  %1064 = add nsw i64 %1048, 32
  %1065 = getelementptr inbounds float, float* %3, i64 %1064
  %1066 = bitcast float* %1065 to <8 x float>*
  %1067 = load <8 x float>, <8 x float>* %1066, align 1, !tbaa !12
  %1068 = add nsw i64 %1048, 40
  %1069 = getelementptr inbounds float, float* %3, i64 %1068
  %1070 = bitcast float* %1069 to <8 x float>*
  %1071 = load <8 x float>, <8 x float>* %1070, align 1, !tbaa !12
  %1072 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1051, <8 x float> %75, <8 x float> %1027) #10
  %1073 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1055, <8 x float> %75, <8 x float> %1031) #10
  %1074 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1059, <8 x float> %75, <8 x float> %1035) #10
  %1075 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1063, <8 x float> %75, <8 x float> %1039) #10
  %1076 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1067, <8 x float> %75, <8 x float> %1043) #10
  %1077 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1071, <8 x float> %75, <8 x float> %1047) #10
  store <8 x float> %1072, <8 x float>* %1026, align 1, !tbaa !12
  store <8 x float> %1073, <8 x float>* %1030, align 1, !tbaa !12
  store <8 x float> %1074, <8 x float>* %1034, align 1, !tbaa !12
  store <8 x float> %1075, <8 x float>* %1038, align 1, !tbaa !12
  store <8 x float> %1076, <8 x float>* %1042, align 1, !tbaa !12
  store <8 x float> %1077, <8 x float>* %1046, align 1, !tbaa !12
  %1078 = add nuw nsw i64 %999, 48
  %1079 = icmp ult i64 %1078, %909
  br i1 %1079, label %998, label %992

1080:                                             ; preds = %1087, %633, %728, %816, %904, %992
  %1081 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %1082 = icmp sgt i32 %1081, 0
  br i1 %1082, label %1083, label %1264

1083:                                             ; preds = %1080
  %1084 = zext i32 %1081 to i64
  %1085 = trunc i64 %81 to i32
  %1086 = mul nsw i32 %1081, %1085
  br label %1175

1087:                                             ; preds = %993, %1087
  %1088 = phi i64 [ 0, %993 ], [ %1167, %1087 ]
  %1089 = getelementptr inbounds float, float* %5, i64 %1088
  %1090 = getelementptr inbounds float, float* %1089, i64 8
  %1091 = bitcast float* %1090 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1091, i32 0, i32 1, i32 1)
  %1092 = getelementptr inbounds float, float* %3, i64 %1088
  %1093 = getelementptr inbounds float, float* %1092, i64 8
  %1094 = bitcast float* %1093 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1094, i32 0, i32 1, i32 1)
  %1095 = getelementptr inbounds float, float* %1089, i64 16
  %1096 = bitcast float* %1095 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1096, i32 0, i32 1, i32 1)
  %1097 = getelementptr inbounds float, float* %1092, i64 16
  %1098 = bitcast float* %1097 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1098, i32 0, i32 1, i32 1)
  %1099 = getelementptr inbounds float, float* %1089, i64 24
  %1100 = bitcast float* %1099 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1100, i32 0, i32 1, i32 1)
  %1101 = getelementptr inbounds float, float* %1092, i64 24
  %1102 = bitcast float* %1101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1102, i32 0, i32 1, i32 1)
  %1103 = getelementptr inbounds float, float* %1089, i64 32
  %1104 = bitcast float* %1103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1104, i32 0, i32 1, i32 1)
  %1105 = getelementptr inbounds float, float* %1092, i64 32
  %1106 = bitcast float* %1105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1106, i32 0, i32 1, i32 1)
  %1107 = getelementptr inbounds float, float* %1089, i64 40
  %1108 = bitcast float* %1107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1108, i32 0, i32 1, i32 1)
  %1109 = getelementptr inbounds float, float* %1092, i64 40
  %1110 = bitcast float* %1109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1110, i32 0, i32 1, i32 1)
  %1111 = getelementptr inbounds float, float* %1089, i64 48
  %1112 = bitcast float* %1111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1112, i32 0, i32 1, i32 1)
  %1113 = getelementptr inbounds float, float* %1092, i64 48
  %1114 = bitcast float* %1113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1114, i32 0, i32 1, i32 1)
  %1115 = bitcast float* %1089 to <8 x float>*
  %1116 = load <8 x float>, <8 x float>* %1115, align 1, !tbaa !12
  %1117 = or i64 %1088, 8
  %1118 = getelementptr inbounds float, float* %5, i64 %1117
  %1119 = bitcast float* %1118 to <8 x float>*
  %1120 = load <8 x float>, <8 x float>* %1119, align 1, !tbaa !12
  %1121 = add nuw nsw i64 %1088, 16
  %1122 = getelementptr inbounds float, float* %5, i64 %1121
  %1123 = bitcast float* %1122 to <8 x float>*
  %1124 = load <8 x float>, <8 x float>* %1123, align 1, !tbaa !12
  %1125 = add nuw nsw i64 %1088, 24
  %1126 = getelementptr inbounds float, float* %5, i64 %1125
  %1127 = bitcast float* %1126 to <8 x float>*
  %1128 = load <8 x float>, <8 x float>* %1127, align 1, !tbaa !12
  %1129 = add nuw nsw i64 %1088, 32
  %1130 = getelementptr inbounds float, float* %5, i64 %1129
  %1131 = bitcast float* %1130 to <8 x float>*
  %1132 = load <8 x float>, <8 x float>* %1131, align 1, !tbaa !12
  %1133 = add nuw nsw i64 %1088, 40
  %1134 = getelementptr inbounds float, float* %5, i64 %1133
  %1135 = bitcast float* %1134 to <8 x float>*
  %1136 = load <8 x float>, <8 x float>* %1135, align 1, !tbaa !12
  %1137 = add nsw i64 %1088, %996
  %1138 = getelementptr inbounds float, float* %3, i64 %1137
  %1139 = bitcast float* %1138 to <8 x float>*
  %1140 = load <8 x float>, <8 x float>* %1139, align 1, !tbaa !12
  %1141 = add nsw i64 %1137, 8
  %1142 = getelementptr inbounds float, float* %3, i64 %1141
  %1143 = bitcast float* %1142 to <8 x float>*
  %1144 = load <8 x float>, <8 x float>* %1143, align 1, !tbaa !12
  %1145 = add nsw i64 %1137, 16
  %1146 = getelementptr inbounds float, float* %3, i64 %1145
  %1147 = bitcast float* %1146 to <8 x float>*
  %1148 = load <8 x float>, <8 x float>* %1147, align 1, !tbaa !12
  %1149 = add nsw i64 %1137, 24
  %1150 = getelementptr inbounds float, float* %3, i64 %1149
  %1151 = bitcast float* %1150 to <8 x float>*
  %1152 = load <8 x float>, <8 x float>* %1151, align 1, !tbaa !12
  %1153 = add nsw i64 %1137, 32
  %1154 = getelementptr inbounds float, float* %3, i64 %1153
  %1155 = bitcast float* %1154 to <8 x float>*
  %1156 = load <8 x float>, <8 x float>* %1155, align 1, !tbaa !12
  %1157 = add nsw i64 %1137, 40
  %1158 = getelementptr inbounds float, float* %3, i64 %1157
  %1159 = bitcast float* %1158 to <8 x float>*
  %1160 = load <8 x float>, <8 x float>* %1159, align 1, !tbaa !12
  %1161 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1140, <8 x float> %80, <8 x float> %1116) #10
  %1162 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1144, <8 x float> %80, <8 x float> %1120) #10
  %1163 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1148, <8 x float> %80, <8 x float> %1124) #10
  %1164 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1152, <8 x float> %80, <8 x float> %1128) #10
  %1165 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1156, <8 x float> %80, <8 x float> %1132) #10
  %1166 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1160, <8 x float> %80, <8 x float> %1136) #10
  store <8 x float> %1161, <8 x float>* %1115, align 1, !tbaa !12
  store <8 x float> %1162, <8 x float>* %1119, align 1, !tbaa !12
  store <8 x float> %1163, <8 x float>* %1123, align 1, !tbaa !12
  store <8 x float> %1164, <8 x float>* %1127, align 1, !tbaa !12
  store <8 x float> %1165, <8 x float>* %1131, align 1, !tbaa !12
  store <8 x float> %1166, <8 x float>* %1135, align 1, !tbaa !12
  %1167 = add nuw nsw i64 %1088, 48
  %1168 = icmp ult i64 %1167, %997
  br i1 %1168, label %1087, label %1080

1169:                                             ; preds = %1175
  br i1 %1082, label %1170, label %1264

1170:                                             ; preds = %1169
  %1171 = trunc i64 %86 to i32
  %1172 = mul nsw i32 %1081, %1171
  %1173 = sext i32 %1172 to i64
  %1174 = zext i32 %1081 to i64
  br label %1269

1175:                                             ; preds = %1083, %1175
  %1176 = phi i64 [ 0, %1083 ], [ %1262, %1175 ]
  %1177 = getelementptr inbounds float, float* %5, i64 %1176
  %1178 = getelementptr inbounds float, float* %1177, i64 8
  %1179 = bitcast float* %1178 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1179, i32 0, i32 1, i32 1)
  %1180 = getelementptr inbounds float, float* %3, i64 %1176
  %1181 = getelementptr inbounds float, float* %1180, i64 8
  %1182 = bitcast float* %1181 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1182, i32 0, i32 1, i32 1)
  %1183 = getelementptr inbounds float, float* %1177, i64 16
  %1184 = bitcast float* %1183 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1184, i32 0, i32 1, i32 1)
  %1185 = getelementptr inbounds float, float* %1180, i64 16
  %1186 = bitcast float* %1185 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1186, i32 0, i32 1, i32 1)
  %1187 = getelementptr inbounds float, float* %1177, i64 24
  %1188 = bitcast float* %1187 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1188, i32 0, i32 1, i32 1)
  %1189 = getelementptr inbounds float, float* %1180, i64 24
  %1190 = bitcast float* %1189 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1190, i32 0, i32 1, i32 1)
  %1191 = getelementptr inbounds float, float* %1177, i64 32
  %1192 = bitcast float* %1191 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1192, i32 0, i32 1, i32 1)
  %1193 = getelementptr inbounds float, float* %1180, i64 32
  %1194 = bitcast float* %1193 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1194, i32 0, i32 1, i32 1)
  %1195 = getelementptr inbounds float, float* %1177, i64 40
  %1196 = bitcast float* %1195 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1196, i32 0, i32 1, i32 1)
  %1197 = getelementptr inbounds float, float* %1180, i64 40
  %1198 = bitcast float* %1197 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1198, i32 0, i32 1, i32 1)
  %1199 = getelementptr inbounds float, float* %1177, i64 48
  %1200 = bitcast float* %1199 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1200, i32 0, i32 1, i32 1)
  %1201 = getelementptr inbounds float, float* %1180, i64 48
  %1202 = bitcast float* %1201 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1202, i32 0, i32 1, i32 1)
  %1203 = bitcast float* %1177 to <8 x float>*
  %1204 = load <8 x float>, <8 x float>* %1203, align 1, !tbaa !12
  %1205 = or i64 %1176, 8
  %1206 = getelementptr inbounds float, float* %5, i64 %1205
  %1207 = bitcast float* %1206 to <8 x float>*
  %1208 = load <8 x float>, <8 x float>* %1207, align 1, !tbaa !12
  %1209 = add nuw nsw i64 %1176, 16
  %1210 = getelementptr inbounds float, float* %5, i64 %1209
  %1211 = bitcast float* %1210 to <8 x float>*
  %1212 = load <8 x float>, <8 x float>* %1211, align 1, !tbaa !12
  %1213 = add nuw nsw i64 %1176, 24
  %1214 = getelementptr inbounds float, float* %5, i64 %1213
  %1215 = bitcast float* %1214 to <8 x float>*
  %1216 = load <8 x float>, <8 x float>* %1215, align 1, !tbaa !12
  %1217 = add nuw nsw i64 %1176, 32
  %1218 = getelementptr inbounds float, float* %5, i64 %1217
  %1219 = bitcast float* %1218 to <8 x float>*
  %1220 = load <8 x float>, <8 x float>* %1219, align 1, !tbaa !12
  %1221 = add nuw nsw i64 %1176, 40
  %1222 = getelementptr inbounds float, float* %5, i64 %1221
  %1223 = bitcast float* %1222 to <8 x float>*
  %1224 = load <8 x float>, <8 x float>* %1223, align 1, !tbaa !12
  %1225 = trunc i64 %1176 to i32
  %1226 = add nsw i32 %1086, %1225
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds float, float* %3, i64 %1227
  %1229 = bitcast float* %1228 to <8 x float>*
  %1230 = load <8 x float>, <8 x float>* %1229, align 1, !tbaa !12
  %1231 = add nsw i32 %1226, 8
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds float, float* %3, i64 %1232
  %1234 = bitcast float* %1233 to <8 x float>*
  %1235 = load <8 x float>, <8 x float>* %1234, align 1, !tbaa !12
  %1236 = add nsw i32 %1226, 16
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds float, float* %3, i64 %1237
  %1239 = bitcast float* %1238 to <8 x float>*
  %1240 = load <8 x float>, <8 x float>* %1239, align 1, !tbaa !12
  %1241 = add nsw i32 %1226, 24
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds float, float* %3, i64 %1242
  %1244 = bitcast float* %1243 to <8 x float>*
  %1245 = load <8 x float>, <8 x float>* %1244, align 1, !tbaa !12
  %1246 = add nsw i32 %1226, 32
  %1247 = sext i32 %1246 to i64
  %1248 = getelementptr inbounds float, float* %3, i64 %1247
  %1249 = bitcast float* %1248 to <8 x float>*
  %1250 = load <8 x float>, <8 x float>* %1249, align 1, !tbaa !12
  %1251 = add nsw i32 %1226, 40
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds float, float* %3, i64 %1252
  %1254 = bitcast float* %1253 to <8 x float>*
  %1255 = load <8 x float>, <8 x float>* %1254, align 1, !tbaa !12
  %1256 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1230, <8 x float> %85, <8 x float> %1204) #10
  %1257 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1235, <8 x float> %85, <8 x float> %1208) #10
  %1258 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1240, <8 x float> %85, <8 x float> %1212) #10
  %1259 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1245, <8 x float> %85, <8 x float> %1216) #10
  %1260 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1250, <8 x float> %85, <8 x float> %1220) #10
  %1261 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1255, <8 x float> %85, <8 x float> %1224) #10
  store <8 x float> %1256, <8 x float>* %1203, align 1, !tbaa !12
  store <8 x float> %1257, <8 x float>* %1207, align 1, !tbaa !12
  store <8 x float> %1258, <8 x float>* %1211, align 1, !tbaa !12
  store <8 x float> %1259, <8 x float>* %1215, align 1, !tbaa !12
  store <8 x float> %1260, <8 x float>* %1219, align 1, !tbaa !12
  store <8 x float> %1261, <8 x float>* %1223, align 1, !tbaa !12
  %1262 = add nuw nsw i64 %1176, 48
  %1263 = icmp ult i64 %1262, %1084
  br i1 %1263, label %1175, label %1169

1264:                                             ; preds = %1269, %20, %544, %1080, %1169
  %1265 = add nuw nsw i64 %21, 14
  %1266 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1267 = sext i32 %1266 to i64
  %1268 = icmp slt i64 %1265, %1267
  br i1 %1268, label %20, label %8

1269:                                             ; preds = %1170, %1269
  %1270 = phi i64 [ 0, %1170 ], [ %1349, %1269 ]
  %1271 = getelementptr inbounds float, float* %5, i64 %1270
  %1272 = getelementptr inbounds float, float* %1271, i64 8
  %1273 = bitcast float* %1272 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1273, i32 0, i32 1, i32 1)
  %1274 = getelementptr inbounds float, float* %3, i64 %1270
  %1275 = getelementptr inbounds float, float* %1274, i64 8
  %1276 = bitcast float* %1275 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1276, i32 0, i32 1, i32 1)
  %1277 = getelementptr inbounds float, float* %1271, i64 16
  %1278 = bitcast float* %1277 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1278, i32 0, i32 1, i32 1)
  %1279 = getelementptr inbounds float, float* %1274, i64 16
  %1280 = bitcast float* %1279 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1280, i32 0, i32 1, i32 1)
  %1281 = getelementptr inbounds float, float* %1271, i64 24
  %1282 = bitcast float* %1281 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1282, i32 0, i32 1, i32 1)
  %1283 = getelementptr inbounds float, float* %1274, i64 24
  %1284 = bitcast float* %1283 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1284, i32 0, i32 1, i32 1)
  %1285 = getelementptr inbounds float, float* %1271, i64 32
  %1286 = bitcast float* %1285 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1286, i32 0, i32 1, i32 1)
  %1287 = getelementptr inbounds float, float* %1274, i64 32
  %1288 = bitcast float* %1287 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1288, i32 0, i32 1, i32 1)
  %1289 = getelementptr inbounds float, float* %1271, i64 40
  %1290 = bitcast float* %1289 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1290, i32 0, i32 1, i32 1)
  %1291 = getelementptr inbounds float, float* %1274, i64 40
  %1292 = bitcast float* %1291 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1292, i32 0, i32 1, i32 1)
  %1293 = getelementptr inbounds float, float* %1271, i64 48
  %1294 = bitcast float* %1293 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1294, i32 0, i32 1, i32 1)
  %1295 = getelementptr inbounds float, float* %1274, i64 48
  %1296 = bitcast float* %1295 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1296, i32 0, i32 1, i32 1)
  %1297 = bitcast float* %1271 to <8 x float>*
  %1298 = load <8 x float>, <8 x float>* %1297, align 1, !tbaa !12
  %1299 = or i64 %1270, 8
  %1300 = getelementptr inbounds float, float* %5, i64 %1299
  %1301 = bitcast float* %1300 to <8 x float>*
  %1302 = load <8 x float>, <8 x float>* %1301, align 1, !tbaa !12
  %1303 = add nuw nsw i64 %1270, 16
  %1304 = getelementptr inbounds float, float* %5, i64 %1303
  %1305 = bitcast float* %1304 to <8 x float>*
  %1306 = load <8 x float>, <8 x float>* %1305, align 1, !tbaa !12
  %1307 = add nuw nsw i64 %1270, 24
  %1308 = getelementptr inbounds float, float* %5, i64 %1307
  %1309 = bitcast float* %1308 to <8 x float>*
  %1310 = load <8 x float>, <8 x float>* %1309, align 1, !tbaa !12
  %1311 = add nuw nsw i64 %1270, 32
  %1312 = getelementptr inbounds float, float* %5, i64 %1311
  %1313 = bitcast float* %1312 to <8 x float>*
  %1314 = load <8 x float>, <8 x float>* %1313, align 1, !tbaa !12
  %1315 = add nuw nsw i64 %1270, 40
  %1316 = getelementptr inbounds float, float* %5, i64 %1315
  %1317 = bitcast float* %1316 to <8 x float>*
  %1318 = load <8 x float>, <8 x float>* %1317, align 1, !tbaa !12
  %1319 = add nsw i64 %1270, %1173
  %1320 = getelementptr inbounds float, float* %3, i64 %1319
  %1321 = bitcast float* %1320 to <8 x float>*
  %1322 = load <8 x float>, <8 x float>* %1321, align 1, !tbaa !12
  %1323 = add nsw i64 %1319, 8
  %1324 = getelementptr inbounds float, float* %3, i64 %1323
  %1325 = bitcast float* %1324 to <8 x float>*
  %1326 = load <8 x float>, <8 x float>* %1325, align 1, !tbaa !12
  %1327 = add nsw i64 %1319, 16
  %1328 = getelementptr inbounds float, float* %3, i64 %1327
  %1329 = bitcast float* %1328 to <8 x float>*
  %1330 = load <8 x float>, <8 x float>* %1329, align 1, !tbaa !12
  %1331 = add nsw i64 %1319, 24
  %1332 = getelementptr inbounds float, float* %3, i64 %1331
  %1333 = bitcast float* %1332 to <8 x float>*
  %1334 = load <8 x float>, <8 x float>* %1333, align 1, !tbaa !12
  %1335 = add nsw i64 %1319, 32
  %1336 = getelementptr inbounds float, float* %3, i64 %1335
  %1337 = bitcast float* %1336 to <8 x float>*
  %1338 = load <8 x float>, <8 x float>* %1337, align 1, !tbaa !12
  %1339 = add nsw i64 %1319, 40
  %1340 = getelementptr inbounds float, float* %3, i64 %1339
  %1341 = bitcast float* %1340 to <8 x float>*
  %1342 = load <8 x float>, <8 x float>* %1341, align 1, !tbaa !12
  %1343 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1322, <8 x float> %90, <8 x float> %1298) #10
  %1344 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1326, <8 x float> %90, <8 x float> %1302) #10
  %1345 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1330, <8 x float> %90, <8 x float> %1306) #10
  %1346 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1334, <8 x float> %90, <8 x float> %1310) #10
  %1347 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1338, <8 x float> %90, <8 x float> %1314) #10
  %1348 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1342, <8 x float> %90, <8 x float> %1318) #10
  store <8 x float> %1343, <8 x float>* %1297, align 1, !tbaa !12
  store <8 x float> %1344, <8 x float>* %1301, align 1, !tbaa !12
  store <8 x float> %1345, <8 x float>* %1305, align 1, !tbaa !12
  store <8 x float> %1346, <8 x float>* %1309, align 1, !tbaa !12
  store <8 x float> %1347, <8 x float>* %1313, align 1, !tbaa !12
  store <8 x float> %1348, <8 x float>* %1317, align 1, !tbaa !12
  %1349 = add nuw nsw i64 %1270, 48
  %1350 = icmp ult i64 %1349, %1174
  br i1 %1350, label %1269, label %1264
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 182
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui6_uk14.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
