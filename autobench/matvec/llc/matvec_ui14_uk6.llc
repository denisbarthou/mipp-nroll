; ModuleID = 'codes/matvec_ui14_uk6.cpp'
source_filename = "codes/matvec_ui14_uk6.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui14_uk6.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 112
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 48
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1048, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1048
  %21 = phi i64 [ %1049, %1048 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %1048

53:                                               ; preds = %20
  %54 = zext i32 %51 to i64
  %55 = trunc i64 %21 to i32
  %56 = mul nsw i32 %51, %55
  br label %63

57:                                               ; preds = %63
  br i1 %52, label %58, label %456

58:                                               ; preds = %57
  %59 = trunc i64 %26 to i32
  %60 = mul nsw i32 %51, %59
  %61 = sext i32 %60 to i64
  %62 = zext i32 %51 to i64
  br label %270

63:                                               ; preds = %53, %63
  %64 = phi i64 [ 0, %53 ], [ %262, %63 ]
  %65 = getelementptr inbounds float, float* %5, i64 %64
  %66 = getelementptr inbounds float, float* %65, i64 8
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %3, i64 %64
  %69 = getelementptr inbounds float, float* %68, i64 8
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %70, i32 0, i32 1, i32 1)
  %71 = getelementptr inbounds float, float* %65, i64 16
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %72, i32 0, i32 1, i32 1)
  %73 = getelementptr inbounds float, float* %68, i64 16
  %74 = bitcast float* %73 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %74, i32 0, i32 1, i32 1)
  %75 = getelementptr inbounds float, float* %65, i64 24
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %76, i32 0, i32 1, i32 1)
  %77 = getelementptr inbounds float, float* %68, i64 24
  %78 = bitcast float* %77 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %78, i32 0, i32 1, i32 1)
  %79 = getelementptr inbounds float, float* %65, i64 32
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %68, i64 32
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %65, i64 40
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %68, i64 40
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %65, i64 48
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %68, i64 48
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %65, i64 56
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %68, i64 56
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %65, i64 64
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %68, i64 64
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %65, i64 72
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %68, i64 72
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %65, i64 80
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %68, i64 80
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %65, i64 88
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %68, i64 88
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = getelementptr inbounds float, float* %65, i64 96
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %112, i32 0, i32 1, i32 1)
  %113 = getelementptr inbounds float, float* %68, i64 96
  %114 = bitcast float* %113 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %114, i32 0, i32 1, i32 1)
  %115 = getelementptr inbounds float, float* %65, i64 104
  %116 = bitcast float* %115 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %116, i32 0, i32 1, i32 1)
  %117 = getelementptr inbounds float, float* %68, i64 104
  %118 = bitcast float* %117 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %118, i32 0, i32 1, i32 1)
  %119 = getelementptr inbounds float, float* %65, i64 112
  %120 = bitcast float* %119 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %120, i32 0, i32 1, i32 1)
  %121 = getelementptr inbounds float, float* %68, i64 112
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %122, i32 0, i32 1, i32 1)
  %123 = bitcast float* %65 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 1, !tbaa !12
  %125 = or i64 %64, 8
  %126 = getelementptr inbounds float, float* %5, i64 %125
  %127 = bitcast float* %126 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 1, !tbaa !12
  %129 = add nuw nsw i64 %64, 16
  %130 = getelementptr inbounds float, float* %5, i64 %129
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !tbaa !12
  %133 = add nuw nsw i64 %64, 24
  %134 = getelementptr inbounds float, float* %5, i64 %133
  %135 = bitcast float* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 1, !tbaa !12
  %137 = add nuw nsw i64 %64, 32
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 1, !tbaa !12
  %141 = add nuw nsw i64 %64, 40
  %142 = getelementptr inbounds float, float* %5, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nuw nsw i64 %64, 48
  %146 = getelementptr inbounds float, float* %5, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = add nuw nsw i64 %64, 56
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 1, !tbaa !12
  %153 = add nuw nsw i64 %64, 64
  %154 = getelementptr inbounds float, float* %5, i64 %153
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 1, !tbaa !12
  %157 = add nuw nsw i64 %64, 72
  %158 = getelementptr inbounds float, float* %5, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 1, !tbaa !12
  %161 = add nuw nsw i64 %64, 80
  %162 = getelementptr inbounds float, float* %5, i64 %161
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 1, !tbaa !12
  %165 = add nuw nsw i64 %64, 88
  %166 = getelementptr inbounds float, float* %5, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nuw nsw i64 %64, 96
  %170 = getelementptr inbounds float, float* %5, i64 %169
  %171 = bitcast float* %170 to <8 x float>*
  %172 = load <8 x float>, <8 x float>* %171, align 1, !tbaa !12
  %173 = add nuw nsw i64 %64, 104
  %174 = getelementptr inbounds float, float* %5, i64 %173
  %175 = bitcast float* %174 to <8 x float>*
  %176 = load <8 x float>, <8 x float>* %175, align 1, !tbaa !12
  %177 = trunc i64 %64 to i32
  %178 = add nsw i32 %56, %177
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds float, float* %3, i64 %179
  %181 = bitcast float* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 1, !tbaa !12
  %183 = add nsw i32 %178, 8
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float, float* %3, i64 %184
  %186 = bitcast float* %185 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !tbaa !12
  %188 = add nsw i32 %178, 16
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %3, i64 %189
  %191 = bitcast float* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 1, !tbaa !12
  %193 = add nsw i32 %178, 24
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %3, i64 %194
  %196 = bitcast float* %195 to <8 x float>*
  %197 = load <8 x float>, <8 x float>* %196, align 1, !tbaa !12
  %198 = add nsw i32 %178, 32
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds float, float* %3, i64 %199
  %201 = bitcast float* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 1, !tbaa !12
  %203 = add nsw i32 %178, 40
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %3, i64 %204
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 1, !tbaa !12
  %208 = add nsw i32 %178, 48
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float* %3, i64 %209
  %211 = bitcast float* %210 to <8 x float>*
  %212 = load <8 x float>, <8 x float>* %211, align 1, !tbaa !12
  %213 = add nsw i32 %178, 56
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %3, i64 %214
  %216 = bitcast float* %215 to <8 x float>*
  %217 = load <8 x float>, <8 x float>* %216, align 1, !tbaa !12
  %218 = add nsw i32 %178, 64
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds float, float* %3, i64 %219
  %221 = bitcast float* %220 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 1, !tbaa !12
  %223 = add nsw i32 %178, 72
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds float, float* %3, i64 %224
  %226 = bitcast float* %225 to <8 x float>*
  %227 = load <8 x float>, <8 x float>* %226, align 1, !tbaa !12
  %228 = add nsw i32 %178, 80
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds float, float* %3, i64 %229
  %231 = bitcast float* %230 to <8 x float>*
  %232 = load <8 x float>, <8 x float>* %231, align 1, !tbaa !12
  %233 = add nsw i32 %178, 88
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds float, float* %3, i64 %234
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 1, !tbaa !12
  %238 = add nsw i32 %178, 96
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds float, float* %3, i64 %239
  %241 = bitcast float* %240 to <8 x float>*
  %242 = load <8 x float>, <8 x float>* %241, align 1, !tbaa !12
  %243 = add nsw i32 %178, 104
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds float, float* %3, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  %247 = load <8 x float>, <8 x float>* %246, align 1, !tbaa !12
  %248 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %182, <8 x float> %25, <8 x float> %124) #10
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %187, <8 x float> %25, <8 x float> %128) #10
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %192, <8 x float> %25, <8 x float> %132) #10
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %197, <8 x float> %25, <8 x float> %136) #10
  %252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %25, <8 x float> %140) #10
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %25, <8 x float> %144) #10
  %254 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %212, <8 x float> %25, <8 x float> %148) #10
  %255 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %217, <8 x float> %25, <8 x float> %152) #10
  %256 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %25, <8 x float> %156) #10
  %257 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %227, <8 x float> %25, <8 x float> %160) #10
  %258 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %232, <8 x float> %25, <8 x float> %164) #10
  %259 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %237, <8 x float> %25, <8 x float> %168) #10
  %260 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> %25, <8 x float> %172) #10
  %261 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %25, <8 x float> %176) #10
  store <8 x float> %248, <8 x float>* %123, align 1, !tbaa !12
  store <8 x float> %249, <8 x float>* %127, align 1, !tbaa !12
  store <8 x float> %250, <8 x float>* %131, align 1, !tbaa !12
  store <8 x float> %251, <8 x float>* %135, align 1, !tbaa !12
  store <8 x float> %252, <8 x float>* %139, align 1, !tbaa !12
  store <8 x float> %253, <8 x float>* %143, align 1, !tbaa !12
  store <8 x float> %254, <8 x float>* %147, align 1, !tbaa !12
  store <8 x float> %255, <8 x float>* %151, align 1, !tbaa !12
  store <8 x float> %256, <8 x float>* %155, align 1, !tbaa !12
  store <8 x float> %257, <8 x float>* %159, align 1, !tbaa !12
  store <8 x float> %258, <8 x float>* %163, align 1, !tbaa !12
  store <8 x float> %259, <8 x float>* %167, align 1, !tbaa !12
  store <8 x float> %260, <8 x float>* %171, align 1, !tbaa !12
  store <8 x float> %261, <8 x float>* %175, align 1, !tbaa !12
  %262 = add nuw nsw i64 %64, 112
  %263 = icmp ult i64 %262, %54
  br i1 %263, label %63, label %57

264:                                              ; preds = %270
  br i1 %52, label %265, label %456

265:                                              ; preds = %264
  %266 = trunc i64 %31 to i32
  %267 = mul nsw i32 %51, %266
  %268 = sext i32 %267 to i64
  %269 = zext i32 %51 to i64
  br label %463

270:                                              ; preds = %58, %270
  %271 = phi i64 [ 0, %58 ], [ %454, %270 ]
  %272 = getelementptr inbounds float, float* %5, i64 %271
  %273 = getelementptr inbounds float, float* %272, i64 8
  %274 = bitcast float* %273 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %274, i32 0, i32 1, i32 1)
  %275 = getelementptr inbounds float, float* %3, i64 %271
  %276 = getelementptr inbounds float, float* %275, i64 8
  %277 = bitcast float* %276 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %277, i32 0, i32 1, i32 1)
  %278 = getelementptr inbounds float, float* %272, i64 16
  %279 = bitcast float* %278 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %279, i32 0, i32 1, i32 1)
  %280 = getelementptr inbounds float, float* %275, i64 16
  %281 = bitcast float* %280 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %281, i32 0, i32 1, i32 1)
  %282 = getelementptr inbounds float, float* %272, i64 24
  %283 = bitcast float* %282 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %283, i32 0, i32 1, i32 1)
  %284 = getelementptr inbounds float, float* %275, i64 24
  %285 = bitcast float* %284 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %285, i32 0, i32 1, i32 1)
  %286 = getelementptr inbounds float, float* %272, i64 32
  %287 = bitcast float* %286 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %287, i32 0, i32 1, i32 1)
  %288 = getelementptr inbounds float, float* %275, i64 32
  %289 = bitcast float* %288 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %289, i32 0, i32 1, i32 1)
  %290 = getelementptr inbounds float, float* %272, i64 40
  %291 = bitcast float* %290 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %291, i32 0, i32 1, i32 1)
  %292 = getelementptr inbounds float, float* %275, i64 40
  %293 = bitcast float* %292 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %293, i32 0, i32 1, i32 1)
  %294 = getelementptr inbounds float, float* %272, i64 48
  %295 = bitcast float* %294 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %295, i32 0, i32 1, i32 1)
  %296 = getelementptr inbounds float, float* %275, i64 48
  %297 = bitcast float* %296 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %297, i32 0, i32 1, i32 1)
  %298 = getelementptr inbounds float, float* %272, i64 56
  %299 = bitcast float* %298 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %299, i32 0, i32 1, i32 1)
  %300 = getelementptr inbounds float, float* %275, i64 56
  %301 = bitcast float* %300 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %301, i32 0, i32 1, i32 1)
  %302 = getelementptr inbounds float, float* %272, i64 64
  %303 = bitcast float* %302 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %303, i32 0, i32 1, i32 1)
  %304 = getelementptr inbounds float, float* %275, i64 64
  %305 = bitcast float* %304 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %305, i32 0, i32 1, i32 1)
  %306 = getelementptr inbounds float, float* %272, i64 72
  %307 = bitcast float* %306 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %307, i32 0, i32 1, i32 1)
  %308 = getelementptr inbounds float, float* %275, i64 72
  %309 = bitcast float* %308 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %309, i32 0, i32 1, i32 1)
  %310 = getelementptr inbounds float, float* %272, i64 80
  %311 = bitcast float* %310 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %311, i32 0, i32 1, i32 1)
  %312 = getelementptr inbounds float, float* %275, i64 80
  %313 = bitcast float* %312 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %313, i32 0, i32 1, i32 1)
  %314 = getelementptr inbounds float, float* %272, i64 88
  %315 = bitcast float* %314 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %315, i32 0, i32 1, i32 1)
  %316 = getelementptr inbounds float, float* %275, i64 88
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %272, i64 96
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = getelementptr inbounds float, float* %275, i64 96
  %321 = bitcast float* %320 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %321, i32 0, i32 1, i32 1)
  %322 = getelementptr inbounds float, float* %272, i64 104
  %323 = bitcast float* %322 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %323, i32 0, i32 1, i32 1)
  %324 = getelementptr inbounds float, float* %275, i64 104
  %325 = bitcast float* %324 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %325, i32 0, i32 1, i32 1)
  %326 = getelementptr inbounds float, float* %272, i64 112
  %327 = bitcast float* %326 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %327, i32 0, i32 1, i32 1)
  %328 = getelementptr inbounds float, float* %275, i64 112
  %329 = bitcast float* %328 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %329, i32 0, i32 1, i32 1)
  %330 = bitcast float* %272 to <8 x float>*
  %331 = load <8 x float>, <8 x float>* %330, align 1, !tbaa !12
  %332 = or i64 %271, 8
  %333 = getelementptr inbounds float, float* %5, i64 %332
  %334 = bitcast float* %333 to <8 x float>*
  %335 = load <8 x float>, <8 x float>* %334, align 1, !tbaa !12
  %336 = add nuw nsw i64 %271, 16
  %337 = getelementptr inbounds float, float* %5, i64 %336
  %338 = bitcast float* %337 to <8 x float>*
  %339 = load <8 x float>, <8 x float>* %338, align 1, !tbaa !12
  %340 = add nuw nsw i64 %271, 24
  %341 = getelementptr inbounds float, float* %5, i64 %340
  %342 = bitcast float* %341 to <8 x float>*
  %343 = load <8 x float>, <8 x float>* %342, align 1, !tbaa !12
  %344 = add nuw nsw i64 %271, 32
  %345 = getelementptr inbounds float, float* %5, i64 %344
  %346 = bitcast float* %345 to <8 x float>*
  %347 = load <8 x float>, <8 x float>* %346, align 1, !tbaa !12
  %348 = add nuw nsw i64 %271, 40
  %349 = getelementptr inbounds float, float* %5, i64 %348
  %350 = bitcast float* %349 to <8 x float>*
  %351 = load <8 x float>, <8 x float>* %350, align 1, !tbaa !12
  %352 = add nuw nsw i64 %271, 48
  %353 = getelementptr inbounds float, float* %5, i64 %352
  %354 = bitcast float* %353 to <8 x float>*
  %355 = load <8 x float>, <8 x float>* %354, align 1, !tbaa !12
  %356 = add nuw nsw i64 %271, 56
  %357 = getelementptr inbounds float, float* %5, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  %359 = load <8 x float>, <8 x float>* %358, align 1, !tbaa !12
  %360 = add nuw nsw i64 %271, 64
  %361 = getelementptr inbounds float, float* %5, i64 %360
  %362 = bitcast float* %361 to <8 x float>*
  %363 = load <8 x float>, <8 x float>* %362, align 1, !tbaa !12
  %364 = add nuw nsw i64 %271, 72
  %365 = getelementptr inbounds float, float* %5, i64 %364
  %366 = bitcast float* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 1, !tbaa !12
  %368 = add nuw nsw i64 %271, 80
  %369 = getelementptr inbounds float, float* %5, i64 %368
  %370 = bitcast float* %369 to <8 x float>*
  %371 = load <8 x float>, <8 x float>* %370, align 1, !tbaa !12
  %372 = add nuw nsw i64 %271, 88
  %373 = getelementptr inbounds float, float* %5, i64 %372
  %374 = bitcast float* %373 to <8 x float>*
  %375 = load <8 x float>, <8 x float>* %374, align 1, !tbaa !12
  %376 = add nuw nsw i64 %271, 96
  %377 = getelementptr inbounds float, float* %5, i64 %376
  %378 = bitcast float* %377 to <8 x float>*
  %379 = load <8 x float>, <8 x float>* %378, align 1, !tbaa !12
  %380 = add nuw nsw i64 %271, 104
  %381 = getelementptr inbounds float, float* %5, i64 %380
  %382 = bitcast float* %381 to <8 x float>*
  %383 = load <8 x float>, <8 x float>* %382, align 1, !tbaa !12
  %384 = add nsw i64 %271, %61
  %385 = getelementptr inbounds float, float* %3, i64 %384
  %386 = bitcast float* %385 to <8 x float>*
  %387 = load <8 x float>, <8 x float>* %386, align 1, !tbaa !12
  %388 = add nsw i64 %384, 8
  %389 = getelementptr inbounds float, float* %3, i64 %388
  %390 = bitcast float* %389 to <8 x float>*
  %391 = load <8 x float>, <8 x float>* %390, align 1, !tbaa !12
  %392 = add nsw i64 %384, 16
  %393 = getelementptr inbounds float, float* %3, i64 %392
  %394 = bitcast float* %393 to <8 x float>*
  %395 = load <8 x float>, <8 x float>* %394, align 1, !tbaa !12
  %396 = add nsw i64 %384, 24
  %397 = getelementptr inbounds float, float* %3, i64 %396
  %398 = bitcast float* %397 to <8 x float>*
  %399 = load <8 x float>, <8 x float>* %398, align 1, !tbaa !12
  %400 = add nsw i64 %384, 32
  %401 = getelementptr inbounds float, float* %3, i64 %400
  %402 = bitcast float* %401 to <8 x float>*
  %403 = load <8 x float>, <8 x float>* %402, align 1, !tbaa !12
  %404 = add nsw i64 %384, 40
  %405 = getelementptr inbounds float, float* %3, i64 %404
  %406 = bitcast float* %405 to <8 x float>*
  %407 = load <8 x float>, <8 x float>* %406, align 1, !tbaa !12
  %408 = add nsw i64 %384, 48
  %409 = getelementptr inbounds float, float* %3, i64 %408
  %410 = bitcast float* %409 to <8 x float>*
  %411 = load <8 x float>, <8 x float>* %410, align 1, !tbaa !12
  %412 = add nsw i64 %384, 56
  %413 = getelementptr inbounds float, float* %3, i64 %412
  %414 = bitcast float* %413 to <8 x float>*
  %415 = load <8 x float>, <8 x float>* %414, align 1, !tbaa !12
  %416 = add nsw i64 %384, 64
  %417 = getelementptr inbounds float, float* %3, i64 %416
  %418 = bitcast float* %417 to <8 x float>*
  %419 = load <8 x float>, <8 x float>* %418, align 1, !tbaa !12
  %420 = add nsw i64 %384, 72
  %421 = getelementptr inbounds float, float* %3, i64 %420
  %422 = bitcast float* %421 to <8 x float>*
  %423 = load <8 x float>, <8 x float>* %422, align 1, !tbaa !12
  %424 = add nsw i64 %384, 80
  %425 = getelementptr inbounds float, float* %3, i64 %424
  %426 = bitcast float* %425 to <8 x float>*
  %427 = load <8 x float>, <8 x float>* %426, align 1, !tbaa !12
  %428 = add nsw i64 %384, 88
  %429 = getelementptr inbounds float, float* %3, i64 %428
  %430 = bitcast float* %429 to <8 x float>*
  %431 = load <8 x float>, <8 x float>* %430, align 1, !tbaa !12
  %432 = add nsw i64 %384, 96
  %433 = getelementptr inbounds float, float* %3, i64 %432
  %434 = bitcast float* %433 to <8 x float>*
  %435 = load <8 x float>, <8 x float>* %434, align 1, !tbaa !12
  %436 = add nsw i64 %384, 104
  %437 = getelementptr inbounds float, float* %3, i64 %436
  %438 = bitcast float* %437 to <8 x float>*
  %439 = load <8 x float>, <8 x float>* %438, align 1, !tbaa !12
  %440 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> %30, <8 x float> %331) #10
  %441 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %391, <8 x float> %30, <8 x float> %335) #10
  %442 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %395, <8 x float> %30, <8 x float> %339) #10
  %443 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %399, <8 x float> %30, <8 x float> %343) #10
  %444 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %403, <8 x float> %30, <8 x float> %347) #10
  %445 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %407, <8 x float> %30, <8 x float> %351) #10
  %446 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %411, <8 x float> %30, <8 x float> %355) #10
  %447 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %415, <8 x float> %30, <8 x float> %359) #10
  %448 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %419, <8 x float> %30, <8 x float> %363) #10
  %449 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %423, <8 x float> %30, <8 x float> %367) #10
  %450 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %427, <8 x float> %30, <8 x float> %371) #10
  %451 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %431, <8 x float> %30, <8 x float> %375) #10
  %452 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %435, <8 x float> %30, <8 x float> %379) #10
  %453 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %439, <8 x float> %30, <8 x float> %383) #10
  store <8 x float> %440, <8 x float>* %330, align 1, !tbaa !12
  store <8 x float> %441, <8 x float>* %334, align 1, !tbaa !12
  store <8 x float> %442, <8 x float>* %338, align 1, !tbaa !12
  store <8 x float> %443, <8 x float>* %342, align 1, !tbaa !12
  store <8 x float> %444, <8 x float>* %346, align 1, !tbaa !12
  store <8 x float> %445, <8 x float>* %350, align 1, !tbaa !12
  store <8 x float> %446, <8 x float>* %354, align 1, !tbaa !12
  store <8 x float> %447, <8 x float>* %358, align 1, !tbaa !12
  store <8 x float> %448, <8 x float>* %362, align 1, !tbaa !12
  store <8 x float> %449, <8 x float>* %366, align 1, !tbaa !12
  store <8 x float> %450, <8 x float>* %370, align 1, !tbaa !12
  store <8 x float> %451, <8 x float>* %374, align 1, !tbaa !12
  store <8 x float> %452, <8 x float>* %378, align 1, !tbaa !12
  store <8 x float> %453, <8 x float>* %382, align 1, !tbaa !12
  %454 = add nuw nsw i64 %271, 112
  %455 = icmp ult i64 %454, %62
  br i1 %455, label %270, label %264

456:                                              ; preds = %463, %57, %264
  %457 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %458 = icmp sgt i32 %457, 0
  br i1 %458, label %459, label %1048

459:                                              ; preds = %456
  %460 = zext i32 %457 to i64
  %461 = trunc i64 %36 to i32
  %462 = mul nsw i32 %457, %461
  br label %655

463:                                              ; preds = %265, %463
  %464 = phi i64 [ 0, %265 ], [ %647, %463 ]
  %465 = getelementptr inbounds float, float* %5, i64 %464
  %466 = getelementptr inbounds float, float* %465, i64 8
  %467 = bitcast float* %466 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %467, i32 0, i32 1, i32 1)
  %468 = getelementptr inbounds float, float* %3, i64 %464
  %469 = getelementptr inbounds float, float* %468, i64 8
  %470 = bitcast float* %469 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %470, i32 0, i32 1, i32 1)
  %471 = getelementptr inbounds float, float* %465, i64 16
  %472 = bitcast float* %471 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %472, i32 0, i32 1, i32 1)
  %473 = getelementptr inbounds float, float* %468, i64 16
  %474 = bitcast float* %473 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %474, i32 0, i32 1, i32 1)
  %475 = getelementptr inbounds float, float* %465, i64 24
  %476 = bitcast float* %475 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %476, i32 0, i32 1, i32 1)
  %477 = getelementptr inbounds float, float* %468, i64 24
  %478 = bitcast float* %477 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %478, i32 0, i32 1, i32 1)
  %479 = getelementptr inbounds float, float* %465, i64 32
  %480 = bitcast float* %479 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %480, i32 0, i32 1, i32 1)
  %481 = getelementptr inbounds float, float* %468, i64 32
  %482 = bitcast float* %481 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %482, i32 0, i32 1, i32 1)
  %483 = getelementptr inbounds float, float* %465, i64 40
  %484 = bitcast float* %483 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %484, i32 0, i32 1, i32 1)
  %485 = getelementptr inbounds float, float* %468, i64 40
  %486 = bitcast float* %485 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %486, i32 0, i32 1, i32 1)
  %487 = getelementptr inbounds float, float* %465, i64 48
  %488 = bitcast float* %487 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %488, i32 0, i32 1, i32 1)
  %489 = getelementptr inbounds float, float* %468, i64 48
  %490 = bitcast float* %489 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %490, i32 0, i32 1, i32 1)
  %491 = getelementptr inbounds float, float* %465, i64 56
  %492 = bitcast float* %491 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %492, i32 0, i32 1, i32 1)
  %493 = getelementptr inbounds float, float* %468, i64 56
  %494 = bitcast float* %493 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %494, i32 0, i32 1, i32 1)
  %495 = getelementptr inbounds float, float* %465, i64 64
  %496 = bitcast float* %495 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %496, i32 0, i32 1, i32 1)
  %497 = getelementptr inbounds float, float* %468, i64 64
  %498 = bitcast float* %497 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %498, i32 0, i32 1, i32 1)
  %499 = getelementptr inbounds float, float* %465, i64 72
  %500 = bitcast float* %499 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %500, i32 0, i32 1, i32 1)
  %501 = getelementptr inbounds float, float* %468, i64 72
  %502 = bitcast float* %501 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %502, i32 0, i32 1, i32 1)
  %503 = getelementptr inbounds float, float* %465, i64 80
  %504 = bitcast float* %503 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %504, i32 0, i32 1, i32 1)
  %505 = getelementptr inbounds float, float* %468, i64 80
  %506 = bitcast float* %505 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %506, i32 0, i32 1, i32 1)
  %507 = getelementptr inbounds float, float* %465, i64 88
  %508 = bitcast float* %507 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %508, i32 0, i32 1, i32 1)
  %509 = getelementptr inbounds float, float* %468, i64 88
  %510 = bitcast float* %509 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %510, i32 0, i32 1, i32 1)
  %511 = getelementptr inbounds float, float* %465, i64 96
  %512 = bitcast float* %511 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %512, i32 0, i32 1, i32 1)
  %513 = getelementptr inbounds float, float* %468, i64 96
  %514 = bitcast float* %513 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %514, i32 0, i32 1, i32 1)
  %515 = getelementptr inbounds float, float* %465, i64 104
  %516 = bitcast float* %515 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %516, i32 0, i32 1, i32 1)
  %517 = getelementptr inbounds float, float* %468, i64 104
  %518 = bitcast float* %517 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %518, i32 0, i32 1, i32 1)
  %519 = getelementptr inbounds float, float* %465, i64 112
  %520 = bitcast float* %519 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %520, i32 0, i32 1, i32 1)
  %521 = getelementptr inbounds float, float* %468, i64 112
  %522 = bitcast float* %521 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %522, i32 0, i32 1, i32 1)
  %523 = bitcast float* %465 to <8 x float>*
  %524 = load <8 x float>, <8 x float>* %523, align 1, !tbaa !12
  %525 = or i64 %464, 8
  %526 = getelementptr inbounds float, float* %5, i64 %525
  %527 = bitcast float* %526 to <8 x float>*
  %528 = load <8 x float>, <8 x float>* %527, align 1, !tbaa !12
  %529 = add nuw nsw i64 %464, 16
  %530 = getelementptr inbounds float, float* %5, i64 %529
  %531 = bitcast float* %530 to <8 x float>*
  %532 = load <8 x float>, <8 x float>* %531, align 1, !tbaa !12
  %533 = add nuw nsw i64 %464, 24
  %534 = getelementptr inbounds float, float* %5, i64 %533
  %535 = bitcast float* %534 to <8 x float>*
  %536 = load <8 x float>, <8 x float>* %535, align 1, !tbaa !12
  %537 = add nuw nsw i64 %464, 32
  %538 = getelementptr inbounds float, float* %5, i64 %537
  %539 = bitcast float* %538 to <8 x float>*
  %540 = load <8 x float>, <8 x float>* %539, align 1, !tbaa !12
  %541 = add nuw nsw i64 %464, 40
  %542 = getelementptr inbounds float, float* %5, i64 %541
  %543 = bitcast float* %542 to <8 x float>*
  %544 = load <8 x float>, <8 x float>* %543, align 1, !tbaa !12
  %545 = add nuw nsw i64 %464, 48
  %546 = getelementptr inbounds float, float* %5, i64 %545
  %547 = bitcast float* %546 to <8 x float>*
  %548 = load <8 x float>, <8 x float>* %547, align 1, !tbaa !12
  %549 = add nuw nsw i64 %464, 56
  %550 = getelementptr inbounds float, float* %5, i64 %549
  %551 = bitcast float* %550 to <8 x float>*
  %552 = load <8 x float>, <8 x float>* %551, align 1, !tbaa !12
  %553 = add nuw nsw i64 %464, 64
  %554 = getelementptr inbounds float, float* %5, i64 %553
  %555 = bitcast float* %554 to <8 x float>*
  %556 = load <8 x float>, <8 x float>* %555, align 1, !tbaa !12
  %557 = add nuw nsw i64 %464, 72
  %558 = getelementptr inbounds float, float* %5, i64 %557
  %559 = bitcast float* %558 to <8 x float>*
  %560 = load <8 x float>, <8 x float>* %559, align 1, !tbaa !12
  %561 = add nuw nsw i64 %464, 80
  %562 = getelementptr inbounds float, float* %5, i64 %561
  %563 = bitcast float* %562 to <8 x float>*
  %564 = load <8 x float>, <8 x float>* %563, align 1, !tbaa !12
  %565 = add nuw nsw i64 %464, 88
  %566 = getelementptr inbounds float, float* %5, i64 %565
  %567 = bitcast float* %566 to <8 x float>*
  %568 = load <8 x float>, <8 x float>* %567, align 1, !tbaa !12
  %569 = add nuw nsw i64 %464, 96
  %570 = getelementptr inbounds float, float* %5, i64 %569
  %571 = bitcast float* %570 to <8 x float>*
  %572 = load <8 x float>, <8 x float>* %571, align 1, !tbaa !12
  %573 = add nuw nsw i64 %464, 104
  %574 = getelementptr inbounds float, float* %5, i64 %573
  %575 = bitcast float* %574 to <8 x float>*
  %576 = load <8 x float>, <8 x float>* %575, align 1, !tbaa !12
  %577 = add nsw i64 %464, %268
  %578 = getelementptr inbounds float, float* %3, i64 %577
  %579 = bitcast float* %578 to <8 x float>*
  %580 = load <8 x float>, <8 x float>* %579, align 1, !tbaa !12
  %581 = add nsw i64 %577, 8
  %582 = getelementptr inbounds float, float* %3, i64 %581
  %583 = bitcast float* %582 to <8 x float>*
  %584 = load <8 x float>, <8 x float>* %583, align 1, !tbaa !12
  %585 = add nsw i64 %577, 16
  %586 = getelementptr inbounds float, float* %3, i64 %585
  %587 = bitcast float* %586 to <8 x float>*
  %588 = load <8 x float>, <8 x float>* %587, align 1, !tbaa !12
  %589 = add nsw i64 %577, 24
  %590 = getelementptr inbounds float, float* %3, i64 %589
  %591 = bitcast float* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 1, !tbaa !12
  %593 = add nsw i64 %577, 32
  %594 = getelementptr inbounds float, float* %3, i64 %593
  %595 = bitcast float* %594 to <8 x float>*
  %596 = load <8 x float>, <8 x float>* %595, align 1, !tbaa !12
  %597 = add nsw i64 %577, 40
  %598 = getelementptr inbounds float, float* %3, i64 %597
  %599 = bitcast float* %598 to <8 x float>*
  %600 = load <8 x float>, <8 x float>* %599, align 1, !tbaa !12
  %601 = add nsw i64 %577, 48
  %602 = getelementptr inbounds float, float* %3, i64 %601
  %603 = bitcast float* %602 to <8 x float>*
  %604 = load <8 x float>, <8 x float>* %603, align 1, !tbaa !12
  %605 = add nsw i64 %577, 56
  %606 = getelementptr inbounds float, float* %3, i64 %605
  %607 = bitcast float* %606 to <8 x float>*
  %608 = load <8 x float>, <8 x float>* %607, align 1, !tbaa !12
  %609 = add nsw i64 %577, 64
  %610 = getelementptr inbounds float, float* %3, i64 %609
  %611 = bitcast float* %610 to <8 x float>*
  %612 = load <8 x float>, <8 x float>* %611, align 1, !tbaa !12
  %613 = add nsw i64 %577, 72
  %614 = getelementptr inbounds float, float* %3, i64 %613
  %615 = bitcast float* %614 to <8 x float>*
  %616 = load <8 x float>, <8 x float>* %615, align 1, !tbaa !12
  %617 = add nsw i64 %577, 80
  %618 = getelementptr inbounds float, float* %3, i64 %617
  %619 = bitcast float* %618 to <8 x float>*
  %620 = load <8 x float>, <8 x float>* %619, align 1, !tbaa !12
  %621 = add nsw i64 %577, 88
  %622 = getelementptr inbounds float, float* %3, i64 %621
  %623 = bitcast float* %622 to <8 x float>*
  %624 = load <8 x float>, <8 x float>* %623, align 1, !tbaa !12
  %625 = add nsw i64 %577, 96
  %626 = getelementptr inbounds float, float* %3, i64 %625
  %627 = bitcast float* %626 to <8 x float>*
  %628 = load <8 x float>, <8 x float>* %627, align 1, !tbaa !12
  %629 = add nsw i64 %577, 104
  %630 = getelementptr inbounds float, float* %3, i64 %629
  %631 = bitcast float* %630 to <8 x float>*
  %632 = load <8 x float>, <8 x float>* %631, align 1, !tbaa !12
  %633 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %580, <8 x float> %35, <8 x float> %524) #10
  %634 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %584, <8 x float> %35, <8 x float> %528) #10
  %635 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %588, <8 x float> %35, <8 x float> %532) #10
  %636 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %592, <8 x float> %35, <8 x float> %536) #10
  %637 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %596, <8 x float> %35, <8 x float> %540) #10
  %638 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %600, <8 x float> %35, <8 x float> %544) #10
  %639 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %604, <8 x float> %35, <8 x float> %548) #10
  %640 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %608, <8 x float> %35, <8 x float> %552) #10
  %641 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %612, <8 x float> %35, <8 x float> %556) #10
  %642 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %616, <8 x float> %35, <8 x float> %560) #10
  %643 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %620, <8 x float> %35, <8 x float> %564) #10
  %644 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %624, <8 x float> %35, <8 x float> %568) #10
  %645 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %628, <8 x float> %35, <8 x float> %572) #10
  %646 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %632, <8 x float> %35, <8 x float> %576) #10
  store <8 x float> %633, <8 x float>* %523, align 1, !tbaa !12
  store <8 x float> %634, <8 x float>* %527, align 1, !tbaa !12
  store <8 x float> %635, <8 x float>* %531, align 1, !tbaa !12
  store <8 x float> %636, <8 x float>* %535, align 1, !tbaa !12
  store <8 x float> %637, <8 x float>* %539, align 1, !tbaa !12
  store <8 x float> %638, <8 x float>* %543, align 1, !tbaa !12
  store <8 x float> %639, <8 x float>* %547, align 1, !tbaa !12
  store <8 x float> %640, <8 x float>* %551, align 1, !tbaa !12
  store <8 x float> %641, <8 x float>* %555, align 1, !tbaa !12
  store <8 x float> %642, <8 x float>* %559, align 1, !tbaa !12
  store <8 x float> %643, <8 x float>* %563, align 1, !tbaa !12
  store <8 x float> %644, <8 x float>* %567, align 1, !tbaa !12
  store <8 x float> %645, <8 x float>* %571, align 1, !tbaa !12
  store <8 x float> %646, <8 x float>* %575, align 1, !tbaa !12
  %647 = add nuw nsw i64 %464, 112
  %648 = icmp ult i64 %647, %269
  br i1 %648, label %463, label %456

649:                                              ; preds = %655
  br i1 %458, label %650, label %1048

650:                                              ; preds = %649
  %651 = trunc i64 %41 to i32
  %652 = mul nsw i32 %457, %651
  %653 = sext i32 %652 to i64
  %654 = zext i32 %457 to i64
  br label %862

655:                                              ; preds = %459, %655
  %656 = phi i64 [ 0, %459 ], [ %854, %655 ]
  %657 = getelementptr inbounds float, float* %5, i64 %656
  %658 = getelementptr inbounds float, float* %657, i64 8
  %659 = bitcast float* %658 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %659, i32 0, i32 1, i32 1)
  %660 = getelementptr inbounds float, float* %3, i64 %656
  %661 = getelementptr inbounds float, float* %660, i64 8
  %662 = bitcast float* %661 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %662, i32 0, i32 1, i32 1)
  %663 = getelementptr inbounds float, float* %657, i64 16
  %664 = bitcast float* %663 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %664, i32 0, i32 1, i32 1)
  %665 = getelementptr inbounds float, float* %660, i64 16
  %666 = bitcast float* %665 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %666, i32 0, i32 1, i32 1)
  %667 = getelementptr inbounds float, float* %657, i64 24
  %668 = bitcast float* %667 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %668, i32 0, i32 1, i32 1)
  %669 = getelementptr inbounds float, float* %660, i64 24
  %670 = bitcast float* %669 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %670, i32 0, i32 1, i32 1)
  %671 = getelementptr inbounds float, float* %657, i64 32
  %672 = bitcast float* %671 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %672, i32 0, i32 1, i32 1)
  %673 = getelementptr inbounds float, float* %660, i64 32
  %674 = bitcast float* %673 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %674, i32 0, i32 1, i32 1)
  %675 = getelementptr inbounds float, float* %657, i64 40
  %676 = bitcast float* %675 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %676, i32 0, i32 1, i32 1)
  %677 = getelementptr inbounds float, float* %660, i64 40
  %678 = bitcast float* %677 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %678, i32 0, i32 1, i32 1)
  %679 = getelementptr inbounds float, float* %657, i64 48
  %680 = bitcast float* %679 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %680, i32 0, i32 1, i32 1)
  %681 = getelementptr inbounds float, float* %660, i64 48
  %682 = bitcast float* %681 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %682, i32 0, i32 1, i32 1)
  %683 = getelementptr inbounds float, float* %657, i64 56
  %684 = bitcast float* %683 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %684, i32 0, i32 1, i32 1)
  %685 = getelementptr inbounds float, float* %660, i64 56
  %686 = bitcast float* %685 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %686, i32 0, i32 1, i32 1)
  %687 = getelementptr inbounds float, float* %657, i64 64
  %688 = bitcast float* %687 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %688, i32 0, i32 1, i32 1)
  %689 = getelementptr inbounds float, float* %660, i64 64
  %690 = bitcast float* %689 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %690, i32 0, i32 1, i32 1)
  %691 = getelementptr inbounds float, float* %657, i64 72
  %692 = bitcast float* %691 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %692, i32 0, i32 1, i32 1)
  %693 = getelementptr inbounds float, float* %660, i64 72
  %694 = bitcast float* %693 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %694, i32 0, i32 1, i32 1)
  %695 = getelementptr inbounds float, float* %657, i64 80
  %696 = bitcast float* %695 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %696, i32 0, i32 1, i32 1)
  %697 = getelementptr inbounds float, float* %660, i64 80
  %698 = bitcast float* %697 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %698, i32 0, i32 1, i32 1)
  %699 = getelementptr inbounds float, float* %657, i64 88
  %700 = bitcast float* %699 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %700, i32 0, i32 1, i32 1)
  %701 = getelementptr inbounds float, float* %660, i64 88
  %702 = bitcast float* %701 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %702, i32 0, i32 1, i32 1)
  %703 = getelementptr inbounds float, float* %657, i64 96
  %704 = bitcast float* %703 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %704, i32 0, i32 1, i32 1)
  %705 = getelementptr inbounds float, float* %660, i64 96
  %706 = bitcast float* %705 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %706, i32 0, i32 1, i32 1)
  %707 = getelementptr inbounds float, float* %657, i64 104
  %708 = bitcast float* %707 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %708, i32 0, i32 1, i32 1)
  %709 = getelementptr inbounds float, float* %660, i64 104
  %710 = bitcast float* %709 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %710, i32 0, i32 1, i32 1)
  %711 = getelementptr inbounds float, float* %657, i64 112
  %712 = bitcast float* %711 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %712, i32 0, i32 1, i32 1)
  %713 = getelementptr inbounds float, float* %660, i64 112
  %714 = bitcast float* %713 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %714, i32 0, i32 1, i32 1)
  %715 = bitcast float* %657 to <8 x float>*
  %716 = load <8 x float>, <8 x float>* %715, align 1, !tbaa !12
  %717 = or i64 %656, 8
  %718 = getelementptr inbounds float, float* %5, i64 %717
  %719 = bitcast float* %718 to <8 x float>*
  %720 = load <8 x float>, <8 x float>* %719, align 1, !tbaa !12
  %721 = add nuw nsw i64 %656, 16
  %722 = getelementptr inbounds float, float* %5, i64 %721
  %723 = bitcast float* %722 to <8 x float>*
  %724 = load <8 x float>, <8 x float>* %723, align 1, !tbaa !12
  %725 = add nuw nsw i64 %656, 24
  %726 = getelementptr inbounds float, float* %5, i64 %725
  %727 = bitcast float* %726 to <8 x float>*
  %728 = load <8 x float>, <8 x float>* %727, align 1, !tbaa !12
  %729 = add nuw nsw i64 %656, 32
  %730 = getelementptr inbounds float, float* %5, i64 %729
  %731 = bitcast float* %730 to <8 x float>*
  %732 = load <8 x float>, <8 x float>* %731, align 1, !tbaa !12
  %733 = add nuw nsw i64 %656, 40
  %734 = getelementptr inbounds float, float* %5, i64 %733
  %735 = bitcast float* %734 to <8 x float>*
  %736 = load <8 x float>, <8 x float>* %735, align 1, !tbaa !12
  %737 = add nuw nsw i64 %656, 48
  %738 = getelementptr inbounds float, float* %5, i64 %737
  %739 = bitcast float* %738 to <8 x float>*
  %740 = load <8 x float>, <8 x float>* %739, align 1, !tbaa !12
  %741 = add nuw nsw i64 %656, 56
  %742 = getelementptr inbounds float, float* %5, i64 %741
  %743 = bitcast float* %742 to <8 x float>*
  %744 = load <8 x float>, <8 x float>* %743, align 1, !tbaa !12
  %745 = add nuw nsw i64 %656, 64
  %746 = getelementptr inbounds float, float* %5, i64 %745
  %747 = bitcast float* %746 to <8 x float>*
  %748 = load <8 x float>, <8 x float>* %747, align 1, !tbaa !12
  %749 = add nuw nsw i64 %656, 72
  %750 = getelementptr inbounds float, float* %5, i64 %749
  %751 = bitcast float* %750 to <8 x float>*
  %752 = load <8 x float>, <8 x float>* %751, align 1, !tbaa !12
  %753 = add nuw nsw i64 %656, 80
  %754 = getelementptr inbounds float, float* %5, i64 %753
  %755 = bitcast float* %754 to <8 x float>*
  %756 = load <8 x float>, <8 x float>* %755, align 1, !tbaa !12
  %757 = add nuw nsw i64 %656, 88
  %758 = getelementptr inbounds float, float* %5, i64 %757
  %759 = bitcast float* %758 to <8 x float>*
  %760 = load <8 x float>, <8 x float>* %759, align 1, !tbaa !12
  %761 = add nuw nsw i64 %656, 96
  %762 = getelementptr inbounds float, float* %5, i64 %761
  %763 = bitcast float* %762 to <8 x float>*
  %764 = load <8 x float>, <8 x float>* %763, align 1, !tbaa !12
  %765 = add nuw nsw i64 %656, 104
  %766 = getelementptr inbounds float, float* %5, i64 %765
  %767 = bitcast float* %766 to <8 x float>*
  %768 = load <8 x float>, <8 x float>* %767, align 1, !tbaa !12
  %769 = trunc i64 %656 to i32
  %770 = add nsw i32 %462, %769
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds float, float* %3, i64 %771
  %773 = bitcast float* %772 to <8 x float>*
  %774 = load <8 x float>, <8 x float>* %773, align 1, !tbaa !12
  %775 = add nsw i32 %770, 8
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds float, float* %3, i64 %776
  %778 = bitcast float* %777 to <8 x float>*
  %779 = load <8 x float>, <8 x float>* %778, align 1, !tbaa !12
  %780 = add nsw i32 %770, 16
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds float, float* %3, i64 %781
  %783 = bitcast float* %782 to <8 x float>*
  %784 = load <8 x float>, <8 x float>* %783, align 1, !tbaa !12
  %785 = add nsw i32 %770, 24
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds float, float* %3, i64 %786
  %788 = bitcast float* %787 to <8 x float>*
  %789 = load <8 x float>, <8 x float>* %788, align 1, !tbaa !12
  %790 = add nsw i32 %770, 32
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds float, float* %3, i64 %791
  %793 = bitcast float* %792 to <8 x float>*
  %794 = load <8 x float>, <8 x float>* %793, align 1, !tbaa !12
  %795 = add nsw i32 %770, 40
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds float, float* %3, i64 %796
  %798 = bitcast float* %797 to <8 x float>*
  %799 = load <8 x float>, <8 x float>* %798, align 1, !tbaa !12
  %800 = add nsw i32 %770, 48
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds float, float* %3, i64 %801
  %803 = bitcast float* %802 to <8 x float>*
  %804 = load <8 x float>, <8 x float>* %803, align 1, !tbaa !12
  %805 = add nsw i32 %770, 56
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds float, float* %3, i64 %806
  %808 = bitcast float* %807 to <8 x float>*
  %809 = load <8 x float>, <8 x float>* %808, align 1, !tbaa !12
  %810 = add nsw i32 %770, 64
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds float, float* %3, i64 %811
  %813 = bitcast float* %812 to <8 x float>*
  %814 = load <8 x float>, <8 x float>* %813, align 1, !tbaa !12
  %815 = add nsw i32 %770, 72
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds float, float* %3, i64 %816
  %818 = bitcast float* %817 to <8 x float>*
  %819 = load <8 x float>, <8 x float>* %818, align 1, !tbaa !12
  %820 = add nsw i32 %770, 80
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds float, float* %3, i64 %821
  %823 = bitcast float* %822 to <8 x float>*
  %824 = load <8 x float>, <8 x float>* %823, align 1, !tbaa !12
  %825 = add nsw i32 %770, 88
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds float, float* %3, i64 %826
  %828 = bitcast float* %827 to <8 x float>*
  %829 = load <8 x float>, <8 x float>* %828, align 1, !tbaa !12
  %830 = add nsw i32 %770, 96
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds float, float* %3, i64 %831
  %833 = bitcast float* %832 to <8 x float>*
  %834 = load <8 x float>, <8 x float>* %833, align 1, !tbaa !12
  %835 = add nsw i32 %770, 104
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds float, float* %3, i64 %836
  %838 = bitcast float* %837 to <8 x float>*
  %839 = load <8 x float>, <8 x float>* %838, align 1, !tbaa !12
  %840 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %774, <8 x float> %40, <8 x float> %716) #10
  %841 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %779, <8 x float> %40, <8 x float> %720) #10
  %842 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %784, <8 x float> %40, <8 x float> %724) #10
  %843 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %789, <8 x float> %40, <8 x float> %728) #10
  %844 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %794, <8 x float> %40, <8 x float> %732) #10
  %845 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %799, <8 x float> %40, <8 x float> %736) #10
  %846 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %804, <8 x float> %40, <8 x float> %740) #10
  %847 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %809, <8 x float> %40, <8 x float> %744) #10
  %848 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %814, <8 x float> %40, <8 x float> %748) #10
  %849 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %819, <8 x float> %40, <8 x float> %752) #10
  %850 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %824, <8 x float> %40, <8 x float> %756) #10
  %851 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %829, <8 x float> %40, <8 x float> %760) #10
  %852 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %834, <8 x float> %40, <8 x float> %764) #10
  %853 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %839, <8 x float> %40, <8 x float> %768) #10
  store <8 x float> %840, <8 x float>* %715, align 1, !tbaa !12
  store <8 x float> %841, <8 x float>* %719, align 1, !tbaa !12
  store <8 x float> %842, <8 x float>* %723, align 1, !tbaa !12
  store <8 x float> %843, <8 x float>* %727, align 1, !tbaa !12
  store <8 x float> %844, <8 x float>* %731, align 1, !tbaa !12
  store <8 x float> %845, <8 x float>* %735, align 1, !tbaa !12
  store <8 x float> %846, <8 x float>* %739, align 1, !tbaa !12
  store <8 x float> %847, <8 x float>* %743, align 1, !tbaa !12
  store <8 x float> %848, <8 x float>* %747, align 1, !tbaa !12
  store <8 x float> %849, <8 x float>* %751, align 1, !tbaa !12
  store <8 x float> %850, <8 x float>* %755, align 1, !tbaa !12
  store <8 x float> %851, <8 x float>* %759, align 1, !tbaa !12
  store <8 x float> %852, <8 x float>* %763, align 1, !tbaa !12
  store <8 x float> %853, <8 x float>* %767, align 1, !tbaa !12
  %854 = add nuw nsw i64 %656, 112
  %855 = icmp ult i64 %854, %460
  br i1 %855, label %655, label %649

856:                                              ; preds = %862
  br i1 %458, label %857, label %1048

857:                                              ; preds = %856
  %858 = trunc i64 %46 to i32
  %859 = mul nsw i32 %457, %858
  %860 = sext i32 %859 to i64
  %861 = zext i32 %457 to i64
  br label %1053

862:                                              ; preds = %650, %862
  %863 = phi i64 [ 0, %650 ], [ %1046, %862 ]
  %864 = getelementptr inbounds float, float* %5, i64 %863
  %865 = getelementptr inbounds float, float* %864, i64 8
  %866 = bitcast float* %865 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %866, i32 0, i32 1, i32 1)
  %867 = getelementptr inbounds float, float* %3, i64 %863
  %868 = getelementptr inbounds float, float* %867, i64 8
  %869 = bitcast float* %868 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %869, i32 0, i32 1, i32 1)
  %870 = getelementptr inbounds float, float* %864, i64 16
  %871 = bitcast float* %870 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %871, i32 0, i32 1, i32 1)
  %872 = getelementptr inbounds float, float* %867, i64 16
  %873 = bitcast float* %872 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %873, i32 0, i32 1, i32 1)
  %874 = getelementptr inbounds float, float* %864, i64 24
  %875 = bitcast float* %874 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %875, i32 0, i32 1, i32 1)
  %876 = getelementptr inbounds float, float* %867, i64 24
  %877 = bitcast float* %876 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %877, i32 0, i32 1, i32 1)
  %878 = getelementptr inbounds float, float* %864, i64 32
  %879 = bitcast float* %878 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %879, i32 0, i32 1, i32 1)
  %880 = getelementptr inbounds float, float* %867, i64 32
  %881 = bitcast float* %880 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %881, i32 0, i32 1, i32 1)
  %882 = getelementptr inbounds float, float* %864, i64 40
  %883 = bitcast float* %882 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %883, i32 0, i32 1, i32 1)
  %884 = getelementptr inbounds float, float* %867, i64 40
  %885 = bitcast float* %884 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %885, i32 0, i32 1, i32 1)
  %886 = getelementptr inbounds float, float* %864, i64 48
  %887 = bitcast float* %886 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %887, i32 0, i32 1, i32 1)
  %888 = getelementptr inbounds float, float* %867, i64 48
  %889 = bitcast float* %888 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %889, i32 0, i32 1, i32 1)
  %890 = getelementptr inbounds float, float* %864, i64 56
  %891 = bitcast float* %890 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %891, i32 0, i32 1, i32 1)
  %892 = getelementptr inbounds float, float* %867, i64 56
  %893 = bitcast float* %892 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %893, i32 0, i32 1, i32 1)
  %894 = getelementptr inbounds float, float* %864, i64 64
  %895 = bitcast float* %894 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %895, i32 0, i32 1, i32 1)
  %896 = getelementptr inbounds float, float* %867, i64 64
  %897 = bitcast float* %896 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %897, i32 0, i32 1, i32 1)
  %898 = getelementptr inbounds float, float* %864, i64 72
  %899 = bitcast float* %898 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %899, i32 0, i32 1, i32 1)
  %900 = getelementptr inbounds float, float* %867, i64 72
  %901 = bitcast float* %900 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %901, i32 0, i32 1, i32 1)
  %902 = getelementptr inbounds float, float* %864, i64 80
  %903 = bitcast float* %902 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %903, i32 0, i32 1, i32 1)
  %904 = getelementptr inbounds float, float* %867, i64 80
  %905 = bitcast float* %904 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %905, i32 0, i32 1, i32 1)
  %906 = getelementptr inbounds float, float* %864, i64 88
  %907 = bitcast float* %906 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %907, i32 0, i32 1, i32 1)
  %908 = getelementptr inbounds float, float* %867, i64 88
  %909 = bitcast float* %908 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %909, i32 0, i32 1, i32 1)
  %910 = getelementptr inbounds float, float* %864, i64 96
  %911 = bitcast float* %910 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %911, i32 0, i32 1, i32 1)
  %912 = getelementptr inbounds float, float* %867, i64 96
  %913 = bitcast float* %912 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %913, i32 0, i32 1, i32 1)
  %914 = getelementptr inbounds float, float* %864, i64 104
  %915 = bitcast float* %914 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %915, i32 0, i32 1, i32 1)
  %916 = getelementptr inbounds float, float* %867, i64 104
  %917 = bitcast float* %916 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %917, i32 0, i32 1, i32 1)
  %918 = getelementptr inbounds float, float* %864, i64 112
  %919 = bitcast float* %918 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %919, i32 0, i32 1, i32 1)
  %920 = getelementptr inbounds float, float* %867, i64 112
  %921 = bitcast float* %920 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %921, i32 0, i32 1, i32 1)
  %922 = bitcast float* %864 to <8 x float>*
  %923 = load <8 x float>, <8 x float>* %922, align 1, !tbaa !12
  %924 = or i64 %863, 8
  %925 = getelementptr inbounds float, float* %5, i64 %924
  %926 = bitcast float* %925 to <8 x float>*
  %927 = load <8 x float>, <8 x float>* %926, align 1, !tbaa !12
  %928 = add nuw nsw i64 %863, 16
  %929 = getelementptr inbounds float, float* %5, i64 %928
  %930 = bitcast float* %929 to <8 x float>*
  %931 = load <8 x float>, <8 x float>* %930, align 1, !tbaa !12
  %932 = add nuw nsw i64 %863, 24
  %933 = getelementptr inbounds float, float* %5, i64 %932
  %934 = bitcast float* %933 to <8 x float>*
  %935 = load <8 x float>, <8 x float>* %934, align 1, !tbaa !12
  %936 = add nuw nsw i64 %863, 32
  %937 = getelementptr inbounds float, float* %5, i64 %936
  %938 = bitcast float* %937 to <8 x float>*
  %939 = load <8 x float>, <8 x float>* %938, align 1, !tbaa !12
  %940 = add nuw nsw i64 %863, 40
  %941 = getelementptr inbounds float, float* %5, i64 %940
  %942 = bitcast float* %941 to <8 x float>*
  %943 = load <8 x float>, <8 x float>* %942, align 1, !tbaa !12
  %944 = add nuw nsw i64 %863, 48
  %945 = getelementptr inbounds float, float* %5, i64 %944
  %946 = bitcast float* %945 to <8 x float>*
  %947 = load <8 x float>, <8 x float>* %946, align 1, !tbaa !12
  %948 = add nuw nsw i64 %863, 56
  %949 = getelementptr inbounds float, float* %5, i64 %948
  %950 = bitcast float* %949 to <8 x float>*
  %951 = load <8 x float>, <8 x float>* %950, align 1, !tbaa !12
  %952 = add nuw nsw i64 %863, 64
  %953 = getelementptr inbounds float, float* %5, i64 %952
  %954 = bitcast float* %953 to <8 x float>*
  %955 = load <8 x float>, <8 x float>* %954, align 1, !tbaa !12
  %956 = add nuw nsw i64 %863, 72
  %957 = getelementptr inbounds float, float* %5, i64 %956
  %958 = bitcast float* %957 to <8 x float>*
  %959 = load <8 x float>, <8 x float>* %958, align 1, !tbaa !12
  %960 = add nuw nsw i64 %863, 80
  %961 = getelementptr inbounds float, float* %5, i64 %960
  %962 = bitcast float* %961 to <8 x float>*
  %963 = load <8 x float>, <8 x float>* %962, align 1, !tbaa !12
  %964 = add nuw nsw i64 %863, 88
  %965 = getelementptr inbounds float, float* %5, i64 %964
  %966 = bitcast float* %965 to <8 x float>*
  %967 = load <8 x float>, <8 x float>* %966, align 1, !tbaa !12
  %968 = add nuw nsw i64 %863, 96
  %969 = getelementptr inbounds float, float* %5, i64 %968
  %970 = bitcast float* %969 to <8 x float>*
  %971 = load <8 x float>, <8 x float>* %970, align 1, !tbaa !12
  %972 = add nuw nsw i64 %863, 104
  %973 = getelementptr inbounds float, float* %5, i64 %972
  %974 = bitcast float* %973 to <8 x float>*
  %975 = load <8 x float>, <8 x float>* %974, align 1, !tbaa !12
  %976 = add nsw i64 %863, %653
  %977 = getelementptr inbounds float, float* %3, i64 %976
  %978 = bitcast float* %977 to <8 x float>*
  %979 = load <8 x float>, <8 x float>* %978, align 1, !tbaa !12
  %980 = add nsw i64 %976, 8
  %981 = getelementptr inbounds float, float* %3, i64 %980
  %982 = bitcast float* %981 to <8 x float>*
  %983 = load <8 x float>, <8 x float>* %982, align 1, !tbaa !12
  %984 = add nsw i64 %976, 16
  %985 = getelementptr inbounds float, float* %3, i64 %984
  %986 = bitcast float* %985 to <8 x float>*
  %987 = load <8 x float>, <8 x float>* %986, align 1, !tbaa !12
  %988 = add nsw i64 %976, 24
  %989 = getelementptr inbounds float, float* %3, i64 %988
  %990 = bitcast float* %989 to <8 x float>*
  %991 = load <8 x float>, <8 x float>* %990, align 1, !tbaa !12
  %992 = add nsw i64 %976, 32
  %993 = getelementptr inbounds float, float* %3, i64 %992
  %994 = bitcast float* %993 to <8 x float>*
  %995 = load <8 x float>, <8 x float>* %994, align 1, !tbaa !12
  %996 = add nsw i64 %976, 40
  %997 = getelementptr inbounds float, float* %3, i64 %996
  %998 = bitcast float* %997 to <8 x float>*
  %999 = load <8 x float>, <8 x float>* %998, align 1, !tbaa !12
  %1000 = add nsw i64 %976, 48
  %1001 = getelementptr inbounds float, float* %3, i64 %1000
  %1002 = bitcast float* %1001 to <8 x float>*
  %1003 = load <8 x float>, <8 x float>* %1002, align 1, !tbaa !12
  %1004 = add nsw i64 %976, 56
  %1005 = getelementptr inbounds float, float* %3, i64 %1004
  %1006 = bitcast float* %1005 to <8 x float>*
  %1007 = load <8 x float>, <8 x float>* %1006, align 1, !tbaa !12
  %1008 = add nsw i64 %976, 64
  %1009 = getelementptr inbounds float, float* %3, i64 %1008
  %1010 = bitcast float* %1009 to <8 x float>*
  %1011 = load <8 x float>, <8 x float>* %1010, align 1, !tbaa !12
  %1012 = add nsw i64 %976, 72
  %1013 = getelementptr inbounds float, float* %3, i64 %1012
  %1014 = bitcast float* %1013 to <8 x float>*
  %1015 = load <8 x float>, <8 x float>* %1014, align 1, !tbaa !12
  %1016 = add nsw i64 %976, 80
  %1017 = getelementptr inbounds float, float* %3, i64 %1016
  %1018 = bitcast float* %1017 to <8 x float>*
  %1019 = load <8 x float>, <8 x float>* %1018, align 1, !tbaa !12
  %1020 = add nsw i64 %976, 88
  %1021 = getelementptr inbounds float, float* %3, i64 %1020
  %1022 = bitcast float* %1021 to <8 x float>*
  %1023 = load <8 x float>, <8 x float>* %1022, align 1, !tbaa !12
  %1024 = add nsw i64 %976, 96
  %1025 = getelementptr inbounds float, float* %3, i64 %1024
  %1026 = bitcast float* %1025 to <8 x float>*
  %1027 = load <8 x float>, <8 x float>* %1026, align 1, !tbaa !12
  %1028 = add nsw i64 %976, 104
  %1029 = getelementptr inbounds float, float* %3, i64 %1028
  %1030 = bitcast float* %1029 to <8 x float>*
  %1031 = load <8 x float>, <8 x float>* %1030, align 1, !tbaa !12
  %1032 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %45, <8 x float> %923) #10
  %1033 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %983, <8 x float> %45, <8 x float> %927) #10
  %1034 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %987, <8 x float> %45, <8 x float> %931) #10
  %1035 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %991, <8 x float> %45, <8 x float> %935) #10
  %1036 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %995, <8 x float> %45, <8 x float> %939) #10
  %1037 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %999, <8 x float> %45, <8 x float> %943) #10
  %1038 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1003, <8 x float> %45, <8 x float> %947) #10
  %1039 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1007, <8 x float> %45, <8 x float> %951) #10
  %1040 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1011, <8 x float> %45, <8 x float> %955) #10
  %1041 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1015, <8 x float> %45, <8 x float> %959) #10
  %1042 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1019, <8 x float> %45, <8 x float> %963) #10
  %1043 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1023, <8 x float> %45, <8 x float> %967) #10
  %1044 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1027, <8 x float> %45, <8 x float> %971) #10
  %1045 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1031, <8 x float> %45, <8 x float> %975) #10
  store <8 x float> %1032, <8 x float>* %922, align 1, !tbaa !12
  store <8 x float> %1033, <8 x float>* %926, align 1, !tbaa !12
  store <8 x float> %1034, <8 x float>* %930, align 1, !tbaa !12
  store <8 x float> %1035, <8 x float>* %934, align 1, !tbaa !12
  store <8 x float> %1036, <8 x float>* %938, align 1, !tbaa !12
  store <8 x float> %1037, <8 x float>* %942, align 1, !tbaa !12
  store <8 x float> %1038, <8 x float>* %946, align 1, !tbaa !12
  store <8 x float> %1039, <8 x float>* %950, align 1, !tbaa !12
  store <8 x float> %1040, <8 x float>* %954, align 1, !tbaa !12
  store <8 x float> %1041, <8 x float>* %958, align 1, !tbaa !12
  store <8 x float> %1042, <8 x float>* %962, align 1, !tbaa !12
  store <8 x float> %1043, <8 x float>* %966, align 1, !tbaa !12
  store <8 x float> %1044, <8 x float>* %970, align 1, !tbaa !12
  store <8 x float> %1045, <8 x float>* %974, align 1, !tbaa !12
  %1046 = add nuw nsw i64 %863, 112
  %1047 = icmp ult i64 %1046, %654
  br i1 %1047, label %862, label %856

1048:                                             ; preds = %1053, %20, %456, %649, %856
  %1049 = add nuw nsw i64 %21, 6
  %1050 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1051 = sext i32 %1050 to i64
  %1052 = icmp slt i64 %1049, %1051
  br i1 %1052, label %20, label %8

1053:                                             ; preds = %857, %1053
  %1054 = phi i64 [ 0, %857 ], [ %1237, %1053 ]
  %1055 = getelementptr inbounds float, float* %5, i64 %1054
  %1056 = getelementptr inbounds float, float* %1055, i64 8
  %1057 = bitcast float* %1056 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1057, i32 0, i32 1, i32 1)
  %1058 = getelementptr inbounds float, float* %3, i64 %1054
  %1059 = getelementptr inbounds float, float* %1058, i64 8
  %1060 = bitcast float* %1059 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1060, i32 0, i32 1, i32 1)
  %1061 = getelementptr inbounds float, float* %1055, i64 16
  %1062 = bitcast float* %1061 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1062, i32 0, i32 1, i32 1)
  %1063 = getelementptr inbounds float, float* %1058, i64 16
  %1064 = bitcast float* %1063 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1064, i32 0, i32 1, i32 1)
  %1065 = getelementptr inbounds float, float* %1055, i64 24
  %1066 = bitcast float* %1065 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1066, i32 0, i32 1, i32 1)
  %1067 = getelementptr inbounds float, float* %1058, i64 24
  %1068 = bitcast float* %1067 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1068, i32 0, i32 1, i32 1)
  %1069 = getelementptr inbounds float, float* %1055, i64 32
  %1070 = bitcast float* %1069 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1070, i32 0, i32 1, i32 1)
  %1071 = getelementptr inbounds float, float* %1058, i64 32
  %1072 = bitcast float* %1071 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1072, i32 0, i32 1, i32 1)
  %1073 = getelementptr inbounds float, float* %1055, i64 40
  %1074 = bitcast float* %1073 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1074, i32 0, i32 1, i32 1)
  %1075 = getelementptr inbounds float, float* %1058, i64 40
  %1076 = bitcast float* %1075 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1076, i32 0, i32 1, i32 1)
  %1077 = getelementptr inbounds float, float* %1055, i64 48
  %1078 = bitcast float* %1077 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1078, i32 0, i32 1, i32 1)
  %1079 = getelementptr inbounds float, float* %1058, i64 48
  %1080 = bitcast float* %1079 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1080, i32 0, i32 1, i32 1)
  %1081 = getelementptr inbounds float, float* %1055, i64 56
  %1082 = bitcast float* %1081 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1082, i32 0, i32 1, i32 1)
  %1083 = getelementptr inbounds float, float* %1058, i64 56
  %1084 = bitcast float* %1083 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1084, i32 0, i32 1, i32 1)
  %1085 = getelementptr inbounds float, float* %1055, i64 64
  %1086 = bitcast float* %1085 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1086, i32 0, i32 1, i32 1)
  %1087 = getelementptr inbounds float, float* %1058, i64 64
  %1088 = bitcast float* %1087 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1088, i32 0, i32 1, i32 1)
  %1089 = getelementptr inbounds float, float* %1055, i64 72
  %1090 = bitcast float* %1089 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1090, i32 0, i32 1, i32 1)
  %1091 = getelementptr inbounds float, float* %1058, i64 72
  %1092 = bitcast float* %1091 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1092, i32 0, i32 1, i32 1)
  %1093 = getelementptr inbounds float, float* %1055, i64 80
  %1094 = bitcast float* %1093 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1094, i32 0, i32 1, i32 1)
  %1095 = getelementptr inbounds float, float* %1058, i64 80
  %1096 = bitcast float* %1095 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1096, i32 0, i32 1, i32 1)
  %1097 = getelementptr inbounds float, float* %1055, i64 88
  %1098 = bitcast float* %1097 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1098, i32 0, i32 1, i32 1)
  %1099 = getelementptr inbounds float, float* %1058, i64 88
  %1100 = bitcast float* %1099 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1100, i32 0, i32 1, i32 1)
  %1101 = getelementptr inbounds float, float* %1055, i64 96
  %1102 = bitcast float* %1101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1102, i32 0, i32 1, i32 1)
  %1103 = getelementptr inbounds float, float* %1058, i64 96
  %1104 = bitcast float* %1103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1104, i32 0, i32 1, i32 1)
  %1105 = getelementptr inbounds float, float* %1055, i64 104
  %1106 = bitcast float* %1105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1106, i32 0, i32 1, i32 1)
  %1107 = getelementptr inbounds float, float* %1058, i64 104
  %1108 = bitcast float* %1107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1108, i32 0, i32 1, i32 1)
  %1109 = getelementptr inbounds float, float* %1055, i64 112
  %1110 = bitcast float* %1109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1110, i32 0, i32 1, i32 1)
  %1111 = getelementptr inbounds float, float* %1058, i64 112
  %1112 = bitcast float* %1111 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1112, i32 0, i32 1, i32 1)
  %1113 = bitcast float* %1055 to <8 x float>*
  %1114 = load <8 x float>, <8 x float>* %1113, align 1, !tbaa !12
  %1115 = or i64 %1054, 8
  %1116 = getelementptr inbounds float, float* %5, i64 %1115
  %1117 = bitcast float* %1116 to <8 x float>*
  %1118 = load <8 x float>, <8 x float>* %1117, align 1, !tbaa !12
  %1119 = add nuw nsw i64 %1054, 16
  %1120 = getelementptr inbounds float, float* %5, i64 %1119
  %1121 = bitcast float* %1120 to <8 x float>*
  %1122 = load <8 x float>, <8 x float>* %1121, align 1, !tbaa !12
  %1123 = add nuw nsw i64 %1054, 24
  %1124 = getelementptr inbounds float, float* %5, i64 %1123
  %1125 = bitcast float* %1124 to <8 x float>*
  %1126 = load <8 x float>, <8 x float>* %1125, align 1, !tbaa !12
  %1127 = add nuw nsw i64 %1054, 32
  %1128 = getelementptr inbounds float, float* %5, i64 %1127
  %1129 = bitcast float* %1128 to <8 x float>*
  %1130 = load <8 x float>, <8 x float>* %1129, align 1, !tbaa !12
  %1131 = add nuw nsw i64 %1054, 40
  %1132 = getelementptr inbounds float, float* %5, i64 %1131
  %1133 = bitcast float* %1132 to <8 x float>*
  %1134 = load <8 x float>, <8 x float>* %1133, align 1, !tbaa !12
  %1135 = add nuw nsw i64 %1054, 48
  %1136 = getelementptr inbounds float, float* %5, i64 %1135
  %1137 = bitcast float* %1136 to <8 x float>*
  %1138 = load <8 x float>, <8 x float>* %1137, align 1, !tbaa !12
  %1139 = add nuw nsw i64 %1054, 56
  %1140 = getelementptr inbounds float, float* %5, i64 %1139
  %1141 = bitcast float* %1140 to <8 x float>*
  %1142 = load <8 x float>, <8 x float>* %1141, align 1, !tbaa !12
  %1143 = add nuw nsw i64 %1054, 64
  %1144 = getelementptr inbounds float, float* %5, i64 %1143
  %1145 = bitcast float* %1144 to <8 x float>*
  %1146 = load <8 x float>, <8 x float>* %1145, align 1, !tbaa !12
  %1147 = add nuw nsw i64 %1054, 72
  %1148 = getelementptr inbounds float, float* %5, i64 %1147
  %1149 = bitcast float* %1148 to <8 x float>*
  %1150 = load <8 x float>, <8 x float>* %1149, align 1, !tbaa !12
  %1151 = add nuw nsw i64 %1054, 80
  %1152 = getelementptr inbounds float, float* %5, i64 %1151
  %1153 = bitcast float* %1152 to <8 x float>*
  %1154 = load <8 x float>, <8 x float>* %1153, align 1, !tbaa !12
  %1155 = add nuw nsw i64 %1054, 88
  %1156 = getelementptr inbounds float, float* %5, i64 %1155
  %1157 = bitcast float* %1156 to <8 x float>*
  %1158 = load <8 x float>, <8 x float>* %1157, align 1, !tbaa !12
  %1159 = add nuw nsw i64 %1054, 96
  %1160 = getelementptr inbounds float, float* %5, i64 %1159
  %1161 = bitcast float* %1160 to <8 x float>*
  %1162 = load <8 x float>, <8 x float>* %1161, align 1, !tbaa !12
  %1163 = add nuw nsw i64 %1054, 104
  %1164 = getelementptr inbounds float, float* %5, i64 %1163
  %1165 = bitcast float* %1164 to <8 x float>*
  %1166 = load <8 x float>, <8 x float>* %1165, align 1, !tbaa !12
  %1167 = add nsw i64 %1054, %860
  %1168 = getelementptr inbounds float, float* %3, i64 %1167
  %1169 = bitcast float* %1168 to <8 x float>*
  %1170 = load <8 x float>, <8 x float>* %1169, align 1, !tbaa !12
  %1171 = add nsw i64 %1167, 8
  %1172 = getelementptr inbounds float, float* %3, i64 %1171
  %1173 = bitcast float* %1172 to <8 x float>*
  %1174 = load <8 x float>, <8 x float>* %1173, align 1, !tbaa !12
  %1175 = add nsw i64 %1167, 16
  %1176 = getelementptr inbounds float, float* %3, i64 %1175
  %1177 = bitcast float* %1176 to <8 x float>*
  %1178 = load <8 x float>, <8 x float>* %1177, align 1, !tbaa !12
  %1179 = add nsw i64 %1167, 24
  %1180 = getelementptr inbounds float, float* %3, i64 %1179
  %1181 = bitcast float* %1180 to <8 x float>*
  %1182 = load <8 x float>, <8 x float>* %1181, align 1, !tbaa !12
  %1183 = add nsw i64 %1167, 32
  %1184 = getelementptr inbounds float, float* %3, i64 %1183
  %1185 = bitcast float* %1184 to <8 x float>*
  %1186 = load <8 x float>, <8 x float>* %1185, align 1, !tbaa !12
  %1187 = add nsw i64 %1167, 40
  %1188 = getelementptr inbounds float, float* %3, i64 %1187
  %1189 = bitcast float* %1188 to <8 x float>*
  %1190 = load <8 x float>, <8 x float>* %1189, align 1, !tbaa !12
  %1191 = add nsw i64 %1167, 48
  %1192 = getelementptr inbounds float, float* %3, i64 %1191
  %1193 = bitcast float* %1192 to <8 x float>*
  %1194 = load <8 x float>, <8 x float>* %1193, align 1, !tbaa !12
  %1195 = add nsw i64 %1167, 56
  %1196 = getelementptr inbounds float, float* %3, i64 %1195
  %1197 = bitcast float* %1196 to <8 x float>*
  %1198 = load <8 x float>, <8 x float>* %1197, align 1, !tbaa !12
  %1199 = add nsw i64 %1167, 64
  %1200 = getelementptr inbounds float, float* %3, i64 %1199
  %1201 = bitcast float* %1200 to <8 x float>*
  %1202 = load <8 x float>, <8 x float>* %1201, align 1, !tbaa !12
  %1203 = add nsw i64 %1167, 72
  %1204 = getelementptr inbounds float, float* %3, i64 %1203
  %1205 = bitcast float* %1204 to <8 x float>*
  %1206 = load <8 x float>, <8 x float>* %1205, align 1, !tbaa !12
  %1207 = add nsw i64 %1167, 80
  %1208 = getelementptr inbounds float, float* %3, i64 %1207
  %1209 = bitcast float* %1208 to <8 x float>*
  %1210 = load <8 x float>, <8 x float>* %1209, align 1, !tbaa !12
  %1211 = add nsw i64 %1167, 88
  %1212 = getelementptr inbounds float, float* %3, i64 %1211
  %1213 = bitcast float* %1212 to <8 x float>*
  %1214 = load <8 x float>, <8 x float>* %1213, align 1, !tbaa !12
  %1215 = add nsw i64 %1167, 96
  %1216 = getelementptr inbounds float, float* %3, i64 %1215
  %1217 = bitcast float* %1216 to <8 x float>*
  %1218 = load <8 x float>, <8 x float>* %1217, align 1, !tbaa !12
  %1219 = add nsw i64 %1167, 104
  %1220 = getelementptr inbounds float, float* %3, i64 %1219
  %1221 = bitcast float* %1220 to <8 x float>*
  %1222 = load <8 x float>, <8 x float>* %1221, align 1, !tbaa !12
  %1223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1170, <8 x float> %50, <8 x float> %1114) #10
  %1224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1174, <8 x float> %50, <8 x float> %1118) #10
  %1225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1178, <8 x float> %50, <8 x float> %1122) #10
  %1226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1182, <8 x float> %50, <8 x float> %1126) #10
  %1227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1186, <8 x float> %50, <8 x float> %1130) #10
  %1228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1190, <8 x float> %50, <8 x float> %1134) #10
  %1229 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1194, <8 x float> %50, <8 x float> %1138) #10
  %1230 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1198, <8 x float> %50, <8 x float> %1142) #10
  %1231 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1202, <8 x float> %50, <8 x float> %1146) #10
  %1232 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1206, <8 x float> %50, <8 x float> %1150) #10
  %1233 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1210, <8 x float> %50, <8 x float> %1154) #10
  %1234 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1214, <8 x float> %50, <8 x float> %1158) #10
  %1235 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1218, <8 x float> %50, <8 x float> %1162) #10
  %1236 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1222, <8 x float> %50, <8 x float> %1166) #10
  store <8 x float> %1223, <8 x float>* %1113, align 1, !tbaa !12
  store <8 x float> %1224, <8 x float>* %1117, align 1, !tbaa !12
  store <8 x float> %1225, <8 x float>* %1121, align 1, !tbaa !12
  store <8 x float> %1226, <8 x float>* %1125, align 1, !tbaa !12
  store <8 x float> %1227, <8 x float>* %1129, align 1, !tbaa !12
  store <8 x float> %1228, <8 x float>* %1133, align 1, !tbaa !12
  store <8 x float> %1229, <8 x float>* %1137, align 1, !tbaa !12
  store <8 x float> %1230, <8 x float>* %1141, align 1, !tbaa !12
  store <8 x float> %1231, <8 x float>* %1145, align 1, !tbaa !12
  store <8 x float> %1232, <8 x float>* %1149, align 1, !tbaa !12
  store <8 x float> %1233, <8 x float>* %1153, align 1, !tbaa !12
  store <8 x float> %1234, <8 x float>* %1157, align 1, !tbaa !12
  store <8 x float> %1235, <8 x float>* %1161, align 1, !tbaa !12
  store <8 x float> %1236, <8 x float>* %1165, align 1, !tbaa !12
  %1237 = add nuw nsw i64 %1054, 112
  %1238 = icmp ult i64 %1237, %861
  br i1 %1238, label %1053, label %1048
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 174
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui14_uk6.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
