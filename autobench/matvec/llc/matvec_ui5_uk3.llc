; ModuleID = 'codes/matvec_ui5_uk3.cpp'
source_filename = "codes/matvec_ui5_uk3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL5mippN = internal unnamed_addr global i1 false, align 4
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui5_uk3.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #19
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #19
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  store i1 true, i1* @_ZL5mippN, align 4
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 40
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 24
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %0
  %9 = load i32, i32* @_ZL6BLOCKI, align 4
  %10 = icmp sgt i32 %9, 0
  %11 = sext i32 %9 to i64
  %12 = zext i32 %6 to i64
  br label %25

13:                                               ; preds = %187, %0
  %14 = tail call i64 @llvm.x86.rdtsc()
  %15 = uitofp i64 %14 to double
  %16 = fsub double %15, %2
  %17 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %18 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %19 = shl i32 %18, 1
  %20 = add nsw i32 %19, -1
  %21 = mul nsw i32 %20, %17
  %22 = sitofp i32 %21 to float
  %23 = fptrunc double %16 to float
  %24 = fdiv float %22, %23
  ret float %24

25:                                               ; preds = %8, %187
  %26 = phi i64 [ 0, %8 ], [ %188, %187 ]
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %26, 1
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %26, 2
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %10, label %41, label %187

41:                                               ; preds = %25
  %42 = mul nsw i64 %26, %11
  br label %46

43:                                               ; preds = %46
  br i1 %10, label %44, label %187

44:                                               ; preds = %43
  %45 = mul nsw i64 %31, %11
  br label %118

46:                                               ; preds = %41, %46
  %47 = phi i64 [ 0, %41 ], [ %113, %46 ]
  %48 = getelementptr inbounds float, float* %5, i64 %47
  %49 = getelementptr inbounds float, float* %48, i64 8
  %50 = bitcast float* %49 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %50, i32 0, i32 1, i32 1)
  %51 = getelementptr inbounds float, float* %3, i64 %47
  %52 = getelementptr inbounds float, float* %51, i64 8
  %53 = bitcast float* %52 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %53, i32 0, i32 1, i32 1)
  %54 = getelementptr inbounds float, float* %48, i64 16
  %55 = bitcast float* %54 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %55, i32 0, i32 1, i32 1)
  %56 = getelementptr inbounds float, float* %51, i64 16
  %57 = bitcast float* %56 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %57, i32 0, i32 1, i32 1)
  %58 = getelementptr inbounds float, float* %48, i64 24
  %59 = bitcast float* %58 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %59, i32 0, i32 1, i32 1)
  %60 = getelementptr inbounds float, float* %51, i64 24
  %61 = bitcast float* %60 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %61, i32 0, i32 1, i32 1)
  %62 = getelementptr inbounds float, float* %48, i64 32
  %63 = bitcast float* %62 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %63, i32 0, i32 1, i32 1)
  %64 = getelementptr inbounds float, float* %51, i64 32
  %65 = bitcast float* %64 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %65, i32 0, i32 1, i32 1)
  %66 = getelementptr inbounds float, float* %48, i64 40
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %51, i64 40
  %69 = bitcast float* %68 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %69, i32 0, i32 1, i32 1)
  %70 = bitcast float* %48 to <8 x float>*
  %71 = load <8 x float>, <8 x float>* %70, align 1, !tbaa !12
  %72 = add nuw nsw i64 %47, 8
  %73 = getelementptr inbounds float, float* %5, i64 %72
  %74 = bitcast float* %73 to <8 x float>*
  %75 = load <8 x float>, <8 x float>* %74, align 1, !tbaa !12
  %76 = add nuw nsw i64 %47, 16
  %77 = getelementptr inbounds float, float* %5, i64 %76
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 1, !tbaa !12
  %80 = add nuw nsw i64 %47, 24
  %81 = getelementptr inbounds float, float* %5, i64 %80
  %82 = bitcast float* %81 to <8 x float>*
  %83 = load <8 x float>, <8 x float>* %82, align 1, !tbaa !12
  %84 = add nuw nsw i64 %47, 32
  %85 = getelementptr inbounds float, float* %5, i64 %84
  %86 = bitcast float* %85 to <8 x float>*
  %87 = load <8 x float>, <8 x float>* %86, align 1, !tbaa !12
  %88 = add nsw i64 %42, %47
  %89 = getelementptr inbounds float, float* %3, i64 %88
  %90 = bitcast float* %89 to <8 x float>*
  %91 = load <8 x float>, <8 x float>* %90, align 1, !tbaa !12
  %92 = add nsw i64 %88, 8
  %93 = getelementptr inbounds float, float* %3, i64 %92
  %94 = bitcast float* %93 to <8 x float>*
  %95 = load <8 x float>, <8 x float>* %94, align 1, !tbaa !12
  %96 = add nsw i64 %88, 16
  %97 = getelementptr inbounds float, float* %3, i64 %96
  %98 = bitcast float* %97 to <8 x float>*
  %99 = load <8 x float>, <8 x float>* %98, align 1, !tbaa !12
  %100 = add nsw i64 %88, 24
  %101 = getelementptr inbounds float, float* %3, i64 %100
  %102 = bitcast float* %101 to <8 x float>*
  %103 = load <8 x float>, <8 x float>* %102, align 1, !tbaa !12
  %104 = add nsw i64 %88, 32
  %105 = getelementptr inbounds float, float* %3, i64 %104
  %106 = bitcast float* %105 to <8 x float>*
  %107 = load <8 x float>, <8 x float>* %106, align 1, !tbaa !12
  %108 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %91, <8 x float> %30, <8 x float> %71) #10
  %109 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %95, <8 x float> %30, <8 x float> %75) #10
  %110 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %99, <8 x float> %30, <8 x float> %79) #10
  %111 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %103, <8 x float> %30, <8 x float> %83) #10
  %112 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %107, <8 x float> %30, <8 x float> %87) #10
  store <8 x float> %108, <8 x float>* %70, align 1, !tbaa !12
  store <8 x float> %109, <8 x float>* %74, align 1, !tbaa !12
  store <8 x float> %110, <8 x float>* %78, align 1, !tbaa !12
  store <8 x float> %111, <8 x float>* %82, align 1, !tbaa !12
  store <8 x float> %112, <8 x float>* %86, align 1, !tbaa !12
  %113 = add nuw nsw i64 %47, 40
  %114 = icmp slt i64 %113, %11
  br i1 %114, label %46, label %43

115:                                              ; preds = %118
  br i1 %10, label %116, label %187

116:                                              ; preds = %115
  %117 = mul nsw i64 %36, %11
  br label %190

118:                                              ; preds = %44, %118
  %119 = phi i64 [ 0, %44 ], [ %185, %118 ]
  %120 = getelementptr inbounds float, float* %5, i64 %119
  %121 = getelementptr inbounds float, float* %120, i64 8
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %122, i32 0, i32 1, i32 1)
  %123 = getelementptr inbounds float, float* %3, i64 %119
  %124 = getelementptr inbounds float, float* %123, i64 8
  %125 = bitcast float* %124 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %125, i32 0, i32 1, i32 1)
  %126 = getelementptr inbounds float, float* %120, i64 16
  %127 = bitcast float* %126 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %127, i32 0, i32 1, i32 1)
  %128 = getelementptr inbounds float, float* %123, i64 16
  %129 = bitcast float* %128 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %129, i32 0, i32 1, i32 1)
  %130 = getelementptr inbounds float, float* %120, i64 24
  %131 = bitcast float* %130 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %131, i32 0, i32 1, i32 1)
  %132 = getelementptr inbounds float, float* %123, i64 24
  %133 = bitcast float* %132 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %133, i32 0, i32 1, i32 1)
  %134 = getelementptr inbounds float, float* %120, i64 32
  %135 = bitcast float* %134 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %135, i32 0, i32 1, i32 1)
  %136 = getelementptr inbounds float, float* %123, i64 32
  %137 = bitcast float* %136 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %137, i32 0, i32 1, i32 1)
  %138 = getelementptr inbounds float, float* %120, i64 40
  %139 = bitcast float* %138 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %139, i32 0, i32 1, i32 1)
  %140 = getelementptr inbounds float, float* %123, i64 40
  %141 = bitcast float* %140 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %141, i32 0, i32 1, i32 1)
  %142 = bitcast float* %120 to <8 x float>*
  %143 = load <8 x float>, <8 x float>* %142, align 1, !tbaa !12
  %144 = add nuw nsw i64 %119, 8
  %145 = getelementptr inbounds float, float* %5, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 1, !tbaa !12
  %148 = add nuw nsw i64 %119, 16
  %149 = getelementptr inbounds float, float* %5, i64 %148
  %150 = bitcast float* %149 to <8 x float>*
  %151 = load <8 x float>, <8 x float>* %150, align 1, !tbaa !12
  %152 = add nuw nsw i64 %119, 24
  %153 = getelementptr inbounds float, float* %5, i64 %152
  %154 = bitcast float* %153 to <8 x float>*
  %155 = load <8 x float>, <8 x float>* %154, align 1, !tbaa !12
  %156 = add nuw nsw i64 %119, 32
  %157 = getelementptr inbounds float, float* %5, i64 %156
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 1, !tbaa !12
  %160 = add nsw i64 %119, %45
  %161 = getelementptr inbounds float, float* %3, i64 %160
  %162 = bitcast float* %161 to <8 x float>*
  %163 = load <8 x float>, <8 x float>* %162, align 1, !tbaa !12
  %164 = add nsw i64 %160, 8
  %165 = getelementptr inbounds float, float* %3, i64 %164
  %166 = bitcast float* %165 to <8 x float>*
  %167 = load <8 x float>, <8 x float>* %166, align 1, !tbaa !12
  %168 = add nsw i64 %160, 16
  %169 = getelementptr inbounds float, float* %3, i64 %168
  %170 = bitcast float* %169 to <8 x float>*
  %171 = load <8 x float>, <8 x float>* %170, align 1, !tbaa !12
  %172 = add nsw i64 %160, 24
  %173 = getelementptr inbounds float, float* %3, i64 %172
  %174 = bitcast float* %173 to <8 x float>*
  %175 = load <8 x float>, <8 x float>* %174, align 1, !tbaa !12
  %176 = add nsw i64 %160, 32
  %177 = getelementptr inbounds float, float* %3, i64 %176
  %178 = bitcast float* %177 to <8 x float>*
  %179 = load <8 x float>, <8 x float>* %178, align 1, !tbaa !12
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %163, <8 x float> %35, <8 x float> %143) #10
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %167, <8 x float> %35, <8 x float> %147) #10
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %171, <8 x float> %35, <8 x float> %151) #10
  %183 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %175, <8 x float> %35, <8 x float> %155) #10
  %184 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %179, <8 x float> %35, <8 x float> %159) #10
  store <8 x float> %180, <8 x float>* %142, align 1, !tbaa !12
  store <8 x float> %181, <8 x float>* %146, align 1, !tbaa !12
  store <8 x float> %182, <8 x float>* %150, align 1, !tbaa !12
  store <8 x float> %183, <8 x float>* %154, align 1, !tbaa !12
  store <8 x float> %184, <8 x float>* %158, align 1, !tbaa !12
  %185 = add nuw nsw i64 %119, 40
  %186 = icmp slt i64 %185, %11
  br i1 %186, label %118, label %115

187:                                              ; preds = %190, %25, %43, %115
  %188 = add nuw nsw i64 %26, 3
  %189 = icmp ult i64 %188, %12
  br i1 %189, label %25, label %13

190:                                              ; preds = %116, %190
  %191 = phi i64 [ 0, %116 ], [ %257, %190 ]
  %192 = getelementptr inbounds float, float* %5, i64 %191
  %193 = getelementptr inbounds float, float* %192, i64 8
  %194 = bitcast float* %193 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %194, i32 0, i32 1, i32 1)
  %195 = getelementptr inbounds float, float* %3, i64 %191
  %196 = getelementptr inbounds float, float* %195, i64 8
  %197 = bitcast float* %196 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %197, i32 0, i32 1, i32 1)
  %198 = getelementptr inbounds float, float* %192, i64 16
  %199 = bitcast float* %198 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %199, i32 0, i32 1, i32 1)
  %200 = getelementptr inbounds float, float* %195, i64 16
  %201 = bitcast float* %200 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %201, i32 0, i32 1, i32 1)
  %202 = getelementptr inbounds float, float* %192, i64 24
  %203 = bitcast float* %202 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %203, i32 0, i32 1, i32 1)
  %204 = getelementptr inbounds float, float* %195, i64 24
  %205 = bitcast float* %204 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %205, i32 0, i32 1, i32 1)
  %206 = getelementptr inbounds float, float* %192, i64 32
  %207 = bitcast float* %206 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %207, i32 0, i32 1, i32 1)
  %208 = getelementptr inbounds float, float* %195, i64 32
  %209 = bitcast float* %208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %209, i32 0, i32 1, i32 1)
  %210 = getelementptr inbounds float, float* %192, i64 40
  %211 = bitcast float* %210 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %211, i32 0, i32 1, i32 1)
  %212 = getelementptr inbounds float, float* %195, i64 40
  %213 = bitcast float* %212 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %213, i32 0, i32 1, i32 1)
  %214 = bitcast float* %192 to <8 x float>*
  %215 = load <8 x float>, <8 x float>* %214, align 1, !tbaa !12
  %216 = add nuw nsw i64 %191, 8
  %217 = getelementptr inbounds float, float* %5, i64 %216
  %218 = bitcast float* %217 to <8 x float>*
  %219 = load <8 x float>, <8 x float>* %218, align 1, !tbaa !12
  %220 = add nuw nsw i64 %191, 16
  %221 = getelementptr inbounds float, float* %5, i64 %220
  %222 = bitcast float* %221 to <8 x float>*
  %223 = load <8 x float>, <8 x float>* %222, align 1, !tbaa !12
  %224 = add nuw nsw i64 %191, 24
  %225 = getelementptr inbounds float, float* %5, i64 %224
  %226 = bitcast float* %225 to <8 x float>*
  %227 = load <8 x float>, <8 x float>* %226, align 1, !tbaa !12
  %228 = add nuw nsw i64 %191, 32
  %229 = getelementptr inbounds float, float* %5, i64 %228
  %230 = bitcast float* %229 to <8 x float>*
  %231 = load <8 x float>, <8 x float>* %230, align 1, !tbaa !12
  %232 = add nsw i64 %191, %117
  %233 = getelementptr inbounds float, float* %3, i64 %232
  %234 = bitcast float* %233 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 1, !tbaa !12
  %236 = add nsw i64 %232, 8
  %237 = getelementptr inbounds float, float* %3, i64 %236
  %238 = bitcast float* %237 to <8 x float>*
  %239 = load <8 x float>, <8 x float>* %238, align 1, !tbaa !12
  %240 = add nsw i64 %232, 16
  %241 = getelementptr inbounds float, float* %3, i64 %240
  %242 = bitcast float* %241 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !tbaa !12
  %244 = add nsw i64 %232, 24
  %245 = getelementptr inbounds float, float* %3, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  %247 = load <8 x float>, <8 x float>* %246, align 1, !tbaa !12
  %248 = add nsw i64 %232, 32
  %249 = getelementptr inbounds float, float* %3, i64 %248
  %250 = bitcast float* %249 to <8 x float>*
  %251 = load <8 x float>, <8 x float>* %250, align 1, !tbaa !12
  %252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %235, <8 x float> %40, <8 x float> %215) #10
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %239, <8 x float> %40, <8 x float> %219) #10
  %254 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %40, <8 x float> %223) #10
  %255 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %40, <8 x float> %227) #10
  %256 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %251, <8 x float> %40, <8 x float> %231) #10
  store <8 x float> %252, <8 x float>* %214, align 1, !tbaa !12
  store <8 x float> %253, <8 x float>* %218, align 1, !tbaa !12
  store <8 x float> %254, <8 x float>* %222, align 1, !tbaa !12
  store <8 x float> %255, <8 x float>* %226, align 1, !tbaa !12
  store <8 x float> %256, <8 x float>* %230, align 1, !tbaa !12
  %257 = add nuw nsw i64 %191, 40
  %258 = icmp slt i64 %257, %11
  br i1 %258, label %190, label %187
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  %1 = load i1, i1* @_ZL5mippN, align 4
  %2 = select i1 %1, i32 120, i32 -15
  %3 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = icmp sle i32 %2, %3
  %5 = load i32, i32* @_ZL6BLOCKK, align 4
  %6 = icmp sgt i32 %5, 2
  %7 = and i1 %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #13 {
  ret i32 33
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #14

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #15

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #16

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #15

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #17

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui5_uk3.cpp() #18 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone speculatable willreturn }
attributes #18 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
