; ModuleID = 'codes/matvec_ui8_uk6.cpp'
source_filename = "codes/matvec_ui8_uk6.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui8_uk6.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = sdiv i32 %1, 64
  %3 = shl nsw i32 %2, 6
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 48
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %637, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %637
  %21 = phi i64 [ %638, %637 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %637

53:                                               ; preds = %20
  %54 = zext i32 %51 to i64
  %55 = trunc i64 %21 to i32
  %56 = mul nsw i32 %51, %55
  br label %63

57:                                               ; preds = %63
  br i1 %52, label %58, label %522

58:                                               ; preds = %57
  %59 = trunc i64 %26 to i32
  %60 = mul nsw i32 %51, %59
  %61 = sext i32 %60 to i64
  %62 = zext i32 %51 to i64
  br label %186

63:                                               ; preds = %53, %63
  %64 = phi i64 [ 0, %53 ], [ %178, %63 ]
  %65 = getelementptr inbounds float, float* %5, i64 %64
  %66 = getelementptr inbounds float, float* %65, i64 8
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %3, i64 %64
  %69 = getelementptr inbounds float, float* %68, i64 8
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %70, i32 0, i32 1, i32 1)
  %71 = getelementptr inbounds float, float* %65, i64 16
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %72, i32 0, i32 1, i32 1)
  %73 = getelementptr inbounds float, float* %68, i64 16
  %74 = bitcast float* %73 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %74, i32 0, i32 1, i32 1)
  %75 = getelementptr inbounds float, float* %65, i64 24
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %76, i32 0, i32 1, i32 1)
  %77 = getelementptr inbounds float, float* %68, i64 24
  %78 = bitcast float* %77 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %78, i32 0, i32 1, i32 1)
  %79 = getelementptr inbounds float, float* %65, i64 32
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %68, i64 32
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %65, i64 40
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %68, i64 40
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %65, i64 48
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %68, i64 48
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %65, i64 56
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %68, i64 56
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %65, i64 64
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %68, i64 64
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = bitcast float* %65 to <8 x float>*
  %100 = load <8 x float>, <8 x float>* %99, align 1, !tbaa !12
  %101 = or i64 %64, 8
  %102 = getelementptr inbounds float, float* %5, i64 %101
  %103 = bitcast float* %102 to <8 x float>*
  %104 = load <8 x float>, <8 x float>* %103, align 1, !tbaa !12
  %105 = or i64 %64, 16
  %106 = getelementptr inbounds float, float* %5, i64 %105
  %107 = bitcast float* %106 to <8 x float>*
  %108 = load <8 x float>, <8 x float>* %107, align 1, !tbaa !12
  %109 = or i64 %64, 24
  %110 = getelementptr inbounds float, float* %5, i64 %109
  %111 = bitcast float* %110 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 1, !tbaa !12
  %113 = or i64 %64, 32
  %114 = getelementptr inbounds float, float* %5, i64 %113
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 1, !tbaa !12
  %117 = or i64 %64, 40
  %118 = getelementptr inbounds float, float* %5, i64 %117
  %119 = bitcast float* %118 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 1, !tbaa !12
  %121 = or i64 %64, 48
  %122 = getelementptr inbounds float, float* %5, i64 %121
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 1, !tbaa !12
  %125 = or i64 %64, 56
  %126 = getelementptr inbounds float, float* %5, i64 %125
  %127 = bitcast float* %126 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 1, !tbaa !12
  %129 = trunc i64 %64 to i32
  %130 = add nsw i32 %56, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %3, i64 %131
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 1, !tbaa !12
  %135 = add nsw i32 %130, 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %3, i64 %136
  %138 = bitcast float* %137 to <8 x float>*
  %139 = load <8 x float>, <8 x float>* %138, align 1, !tbaa !12
  %140 = add nsw i32 %130, 16
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %3, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nsw i32 %130, 24
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %3, i64 %146
  %148 = bitcast float* %147 to <8 x float>*
  %149 = load <8 x float>, <8 x float>* %148, align 1, !tbaa !12
  %150 = add nsw i32 %130, 32
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %3, i64 %151
  %153 = bitcast float* %152 to <8 x float>*
  %154 = load <8 x float>, <8 x float>* %153, align 1, !tbaa !12
  %155 = add nsw i32 %130, 40
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %3, i64 %156
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 1, !tbaa !12
  %160 = add nsw i32 %130, 48
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %3, i64 %161
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 1, !tbaa !12
  %165 = add nsw i32 %130, 56
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %3, i64 %166
  %168 = bitcast float* %167 to <8 x float>*
  %169 = load <8 x float>, <8 x float>* %168, align 1, !tbaa !12
  %170 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %25, <8 x float> %100) #10
  %171 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %25, <8 x float> %104) #10
  %172 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %144, <8 x float> %25, <8 x float> %108) #10
  %173 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %25, <8 x float> %112) #10
  %174 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %154, <8 x float> %25, <8 x float> %116) #10
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %159, <8 x float> %25, <8 x float> %120) #10
  %176 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %164, <8 x float> %25, <8 x float> %124) #10
  %177 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %169, <8 x float> %25, <8 x float> %128) #10
  store <8 x float> %170, <8 x float>* %99, align 1, !tbaa !12
  store <8 x float> %171, <8 x float>* %103, align 1, !tbaa !12
  store <8 x float> %172, <8 x float>* %107, align 1, !tbaa !12
  store <8 x float> %173, <8 x float>* %111, align 1, !tbaa !12
  store <8 x float> %174, <8 x float>* %115, align 1, !tbaa !12
  store <8 x float> %175, <8 x float>* %119, align 1, !tbaa !12
  store <8 x float> %176, <8 x float>* %123, align 1, !tbaa !12
  store <8 x float> %177, <8 x float>* %127, align 1, !tbaa !12
  %178 = add nuw nsw i64 %64, 64
  %179 = icmp ult i64 %178, %54
  br i1 %179, label %63, label %57

180:                                              ; preds = %186
  br i1 %52, label %181, label %522

181:                                              ; preds = %180
  %182 = trunc i64 %31 to i32
  %183 = mul nsw i32 %51, %182
  %184 = sext i32 %183 to i64
  %185 = zext i32 %51 to i64
  br label %300

186:                                              ; preds = %58, %186
  %187 = phi i64 [ 0, %58 ], [ %292, %186 ]
  %188 = getelementptr inbounds float, float* %5, i64 %187
  %189 = getelementptr inbounds float, float* %188, i64 8
  %190 = bitcast float* %189 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %190, i32 0, i32 1, i32 1)
  %191 = getelementptr inbounds float, float* %3, i64 %187
  %192 = getelementptr inbounds float, float* %191, i64 8
  %193 = bitcast float* %192 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %193, i32 0, i32 1, i32 1)
  %194 = getelementptr inbounds float, float* %188, i64 16
  %195 = bitcast float* %194 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %195, i32 0, i32 1, i32 1)
  %196 = getelementptr inbounds float, float* %191, i64 16
  %197 = bitcast float* %196 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %197, i32 0, i32 1, i32 1)
  %198 = getelementptr inbounds float, float* %188, i64 24
  %199 = bitcast float* %198 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %199, i32 0, i32 1, i32 1)
  %200 = getelementptr inbounds float, float* %191, i64 24
  %201 = bitcast float* %200 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %201, i32 0, i32 1, i32 1)
  %202 = getelementptr inbounds float, float* %188, i64 32
  %203 = bitcast float* %202 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %203, i32 0, i32 1, i32 1)
  %204 = getelementptr inbounds float, float* %191, i64 32
  %205 = bitcast float* %204 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %205, i32 0, i32 1, i32 1)
  %206 = getelementptr inbounds float, float* %188, i64 40
  %207 = bitcast float* %206 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %207, i32 0, i32 1, i32 1)
  %208 = getelementptr inbounds float, float* %191, i64 40
  %209 = bitcast float* %208 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %209, i32 0, i32 1, i32 1)
  %210 = getelementptr inbounds float, float* %188, i64 48
  %211 = bitcast float* %210 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %211, i32 0, i32 1, i32 1)
  %212 = getelementptr inbounds float, float* %191, i64 48
  %213 = bitcast float* %212 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %213, i32 0, i32 1, i32 1)
  %214 = getelementptr inbounds float, float* %188, i64 56
  %215 = bitcast float* %214 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %215, i32 0, i32 1, i32 1)
  %216 = getelementptr inbounds float, float* %191, i64 56
  %217 = bitcast float* %216 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %217, i32 0, i32 1, i32 1)
  %218 = getelementptr inbounds float, float* %188, i64 64
  %219 = bitcast float* %218 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %219, i32 0, i32 1, i32 1)
  %220 = getelementptr inbounds float, float* %191, i64 64
  %221 = bitcast float* %220 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %221, i32 0, i32 1, i32 1)
  %222 = bitcast float* %188 to <8 x float>*
  %223 = load <8 x float>, <8 x float>* %222, align 1, !tbaa !12
  %224 = or i64 %187, 8
  %225 = getelementptr inbounds float, float* %5, i64 %224
  %226 = bitcast float* %225 to <8 x float>*
  %227 = load <8 x float>, <8 x float>* %226, align 1, !tbaa !12
  %228 = or i64 %187, 16
  %229 = getelementptr inbounds float, float* %5, i64 %228
  %230 = bitcast float* %229 to <8 x float>*
  %231 = load <8 x float>, <8 x float>* %230, align 1, !tbaa !12
  %232 = or i64 %187, 24
  %233 = getelementptr inbounds float, float* %5, i64 %232
  %234 = bitcast float* %233 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 1, !tbaa !12
  %236 = or i64 %187, 32
  %237 = getelementptr inbounds float, float* %5, i64 %236
  %238 = bitcast float* %237 to <8 x float>*
  %239 = load <8 x float>, <8 x float>* %238, align 1, !tbaa !12
  %240 = or i64 %187, 40
  %241 = getelementptr inbounds float, float* %5, i64 %240
  %242 = bitcast float* %241 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !tbaa !12
  %244 = or i64 %187, 48
  %245 = getelementptr inbounds float, float* %5, i64 %244
  %246 = bitcast float* %245 to <8 x float>*
  %247 = load <8 x float>, <8 x float>* %246, align 1, !tbaa !12
  %248 = or i64 %187, 56
  %249 = getelementptr inbounds float, float* %5, i64 %248
  %250 = bitcast float* %249 to <8 x float>*
  %251 = load <8 x float>, <8 x float>* %250, align 1, !tbaa !12
  %252 = add nsw i64 %187, %61
  %253 = getelementptr inbounds float, float* %3, i64 %252
  %254 = bitcast float* %253 to <8 x float>*
  %255 = load <8 x float>, <8 x float>* %254, align 1, !tbaa !12
  %256 = add nsw i64 %252, 8
  %257 = getelementptr inbounds float, float* %3, i64 %256
  %258 = bitcast float* %257 to <8 x float>*
  %259 = load <8 x float>, <8 x float>* %258, align 1, !tbaa !12
  %260 = add nsw i64 %252, 16
  %261 = getelementptr inbounds float, float* %3, i64 %260
  %262 = bitcast float* %261 to <8 x float>*
  %263 = load <8 x float>, <8 x float>* %262, align 1, !tbaa !12
  %264 = add nsw i64 %252, 24
  %265 = getelementptr inbounds float, float* %3, i64 %264
  %266 = bitcast float* %265 to <8 x float>*
  %267 = load <8 x float>, <8 x float>* %266, align 1, !tbaa !12
  %268 = add nsw i64 %252, 32
  %269 = getelementptr inbounds float, float* %3, i64 %268
  %270 = bitcast float* %269 to <8 x float>*
  %271 = load <8 x float>, <8 x float>* %270, align 1, !tbaa !12
  %272 = add nsw i64 %252, 40
  %273 = getelementptr inbounds float, float* %3, i64 %272
  %274 = bitcast float* %273 to <8 x float>*
  %275 = load <8 x float>, <8 x float>* %274, align 1, !tbaa !12
  %276 = add nsw i64 %252, 48
  %277 = getelementptr inbounds float, float* %3, i64 %276
  %278 = bitcast float* %277 to <8 x float>*
  %279 = load <8 x float>, <8 x float>* %278, align 1, !tbaa !12
  %280 = add nsw i64 %252, 56
  %281 = getelementptr inbounds float, float* %3, i64 %280
  %282 = bitcast float* %281 to <8 x float>*
  %283 = load <8 x float>, <8 x float>* %282, align 1, !tbaa !12
  %284 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %255, <8 x float> %30, <8 x float> %223) #10
  %285 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %259, <8 x float> %30, <8 x float> %227) #10
  %286 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> %30, <8 x float> %231) #10
  %287 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %267, <8 x float> %30, <8 x float> %235) #10
  %288 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %271, <8 x float> %30, <8 x float> %239) #10
  %289 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %275, <8 x float> %30, <8 x float> %243) #10
  %290 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %279, <8 x float> %30, <8 x float> %247) #10
  %291 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %283, <8 x float> %30, <8 x float> %251) #10
  store <8 x float> %284, <8 x float>* %222, align 1, !tbaa !12
  store <8 x float> %285, <8 x float>* %226, align 1, !tbaa !12
  store <8 x float> %286, <8 x float>* %230, align 1, !tbaa !12
  store <8 x float> %287, <8 x float>* %234, align 1, !tbaa !12
  store <8 x float> %288, <8 x float>* %238, align 1, !tbaa !12
  store <8 x float> %289, <8 x float>* %242, align 1, !tbaa !12
  store <8 x float> %290, <8 x float>* %246, align 1, !tbaa !12
  store <8 x float> %291, <8 x float>* %250, align 1, !tbaa !12
  %292 = add nuw nsw i64 %187, 64
  %293 = icmp ult i64 %292, %62
  br i1 %293, label %186, label %180

294:                                              ; preds = %300
  br i1 %52, label %295, label %522

295:                                              ; preds = %294
  %296 = trunc i64 %36 to i32
  %297 = mul nsw i32 %51, %296
  %298 = sext i32 %297 to i64
  %299 = zext i32 %51 to i64
  br label %414

300:                                              ; preds = %181, %300
  %301 = phi i64 [ 0, %181 ], [ %406, %300 ]
  %302 = getelementptr inbounds float, float* %5, i64 %301
  %303 = getelementptr inbounds float, float* %302, i64 8
  %304 = bitcast float* %303 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %304, i32 0, i32 1, i32 1)
  %305 = getelementptr inbounds float, float* %3, i64 %301
  %306 = getelementptr inbounds float, float* %305, i64 8
  %307 = bitcast float* %306 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %307, i32 0, i32 1, i32 1)
  %308 = getelementptr inbounds float, float* %302, i64 16
  %309 = bitcast float* %308 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %309, i32 0, i32 1, i32 1)
  %310 = getelementptr inbounds float, float* %305, i64 16
  %311 = bitcast float* %310 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %311, i32 0, i32 1, i32 1)
  %312 = getelementptr inbounds float, float* %302, i64 24
  %313 = bitcast float* %312 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %313, i32 0, i32 1, i32 1)
  %314 = getelementptr inbounds float, float* %305, i64 24
  %315 = bitcast float* %314 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %315, i32 0, i32 1, i32 1)
  %316 = getelementptr inbounds float, float* %302, i64 32
  %317 = bitcast float* %316 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %317, i32 0, i32 1, i32 1)
  %318 = getelementptr inbounds float, float* %305, i64 32
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %319, i32 0, i32 1, i32 1)
  %320 = getelementptr inbounds float, float* %302, i64 40
  %321 = bitcast float* %320 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %321, i32 0, i32 1, i32 1)
  %322 = getelementptr inbounds float, float* %305, i64 40
  %323 = bitcast float* %322 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %323, i32 0, i32 1, i32 1)
  %324 = getelementptr inbounds float, float* %302, i64 48
  %325 = bitcast float* %324 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %325, i32 0, i32 1, i32 1)
  %326 = getelementptr inbounds float, float* %305, i64 48
  %327 = bitcast float* %326 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %327, i32 0, i32 1, i32 1)
  %328 = getelementptr inbounds float, float* %302, i64 56
  %329 = bitcast float* %328 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %329, i32 0, i32 1, i32 1)
  %330 = getelementptr inbounds float, float* %305, i64 56
  %331 = bitcast float* %330 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %331, i32 0, i32 1, i32 1)
  %332 = getelementptr inbounds float, float* %302, i64 64
  %333 = bitcast float* %332 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %333, i32 0, i32 1, i32 1)
  %334 = getelementptr inbounds float, float* %305, i64 64
  %335 = bitcast float* %334 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %335, i32 0, i32 1, i32 1)
  %336 = bitcast float* %302 to <8 x float>*
  %337 = load <8 x float>, <8 x float>* %336, align 1, !tbaa !12
  %338 = or i64 %301, 8
  %339 = getelementptr inbounds float, float* %5, i64 %338
  %340 = bitcast float* %339 to <8 x float>*
  %341 = load <8 x float>, <8 x float>* %340, align 1, !tbaa !12
  %342 = or i64 %301, 16
  %343 = getelementptr inbounds float, float* %5, i64 %342
  %344 = bitcast float* %343 to <8 x float>*
  %345 = load <8 x float>, <8 x float>* %344, align 1, !tbaa !12
  %346 = or i64 %301, 24
  %347 = getelementptr inbounds float, float* %5, i64 %346
  %348 = bitcast float* %347 to <8 x float>*
  %349 = load <8 x float>, <8 x float>* %348, align 1, !tbaa !12
  %350 = or i64 %301, 32
  %351 = getelementptr inbounds float, float* %5, i64 %350
  %352 = bitcast float* %351 to <8 x float>*
  %353 = load <8 x float>, <8 x float>* %352, align 1, !tbaa !12
  %354 = or i64 %301, 40
  %355 = getelementptr inbounds float, float* %5, i64 %354
  %356 = bitcast float* %355 to <8 x float>*
  %357 = load <8 x float>, <8 x float>* %356, align 1, !tbaa !12
  %358 = or i64 %301, 48
  %359 = getelementptr inbounds float, float* %5, i64 %358
  %360 = bitcast float* %359 to <8 x float>*
  %361 = load <8 x float>, <8 x float>* %360, align 1, !tbaa !12
  %362 = or i64 %301, 56
  %363 = getelementptr inbounds float, float* %5, i64 %362
  %364 = bitcast float* %363 to <8 x float>*
  %365 = load <8 x float>, <8 x float>* %364, align 1, !tbaa !12
  %366 = add nsw i64 %301, %184
  %367 = getelementptr inbounds float, float* %3, i64 %366
  %368 = bitcast float* %367 to <8 x float>*
  %369 = load <8 x float>, <8 x float>* %368, align 1, !tbaa !12
  %370 = add nsw i64 %366, 8
  %371 = getelementptr inbounds float, float* %3, i64 %370
  %372 = bitcast float* %371 to <8 x float>*
  %373 = load <8 x float>, <8 x float>* %372, align 1, !tbaa !12
  %374 = add nsw i64 %366, 16
  %375 = getelementptr inbounds float, float* %3, i64 %374
  %376 = bitcast float* %375 to <8 x float>*
  %377 = load <8 x float>, <8 x float>* %376, align 1, !tbaa !12
  %378 = add nsw i64 %366, 24
  %379 = getelementptr inbounds float, float* %3, i64 %378
  %380 = bitcast float* %379 to <8 x float>*
  %381 = load <8 x float>, <8 x float>* %380, align 1, !tbaa !12
  %382 = add nsw i64 %366, 32
  %383 = getelementptr inbounds float, float* %3, i64 %382
  %384 = bitcast float* %383 to <8 x float>*
  %385 = load <8 x float>, <8 x float>* %384, align 1, !tbaa !12
  %386 = add nsw i64 %366, 40
  %387 = getelementptr inbounds float, float* %3, i64 %386
  %388 = bitcast float* %387 to <8 x float>*
  %389 = load <8 x float>, <8 x float>* %388, align 1, !tbaa !12
  %390 = add nsw i64 %366, 48
  %391 = getelementptr inbounds float, float* %3, i64 %390
  %392 = bitcast float* %391 to <8 x float>*
  %393 = load <8 x float>, <8 x float>* %392, align 1, !tbaa !12
  %394 = add nsw i64 %366, 56
  %395 = getelementptr inbounds float, float* %3, i64 %394
  %396 = bitcast float* %395 to <8 x float>*
  %397 = load <8 x float>, <8 x float>* %396, align 1, !tbaa !12
  %398 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %369, <8 x float> %35, <8 x float> %337) #10
  %399 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %373, <8 x float> %35, <8 x float> %341) #10
  %400 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %377, <8 x float> %35, <8 x float> %345) #10
  %401 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %381, <8 x float> %35, <8 x float> %349) #10
  %402 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %385, <8 x float> %35, <8 x float> %353) #10
  %403 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %35, <8 x float> %357) #10
  %404 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %393, <8 x float> %35, <8 x float> %361) #10
  %405 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %397, <8 x float> %35, <8 x float> %365) #10
  store <8 x float> %398, <8 x float>* %336, align 1, !tbaa !12
  store <8 x float> %399, <8 x float>* %340, align 1, !tbaa !12
  store <8 x float> %400, <8 x float>* %344, align 1, !tbaa !12
  store <8 x float> %401, <8 x float>* %348, align 1, !tbaa !12
  store <8 x float> %402, <8 x float>* %352, align 1, !tbaa !12
  store <8 x float> %403, <8 x float>* %356, align 1, !tbaa !12
  store <8 x float> %404, <8 x float>* %360, align 1, !tbaa !12
  store <8 x float> %405, <8 x float>* %364, align 1, !tbaa !12
  %406 = add nuw nsw i64 %301, 64
  %407 = icmp ult i64 %406, %185
  br i1 %407, label %300, label %294

408:                                              ; preds = %414
  br i1 %52, label %409, label %522

409:                                              ; preds = %408
  %410 = trunc i64 %41 to i32
  %411 = mul nsw i32 %51, %410
  %412 = sext i32 %411 to i64
  %413 = zext i32 %51 to i64
  br label %529

414:                                              ; preds = %295, %414
  %415 = phi i64 [ 0, %295 ], [ %520, %414 ]
  %416 = getelementptr inbounds float, float* %5, i64 %415
  %417 = getelementptr inbounds float, float* %416, i64 8
  %418 = bitcast float* %417 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %418, i32 0, i32 1, i32 1)
  %419 = getelementptr inbounds float, float* %3, i64 %415
  %420 = getelementptr inbounds float, float* %419, i64 8
  %421 = bitcast float* %420 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %421, i32 0, i32 1, i32 1)
  %422 = getelementptr inbounds float, float* %416, i64 16
  %423 = bitcast float* %422 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %423, i32 0, i32 1, i32 1)
  %424 = getelementptr inbounds float, float* %419, i64 16
  %425 = bitcast float* %424 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %425, i32 0, i32 1, i32 1)
  %426 = getelementptr inbounds float, float* %416, i64 24
  %427 = bitcast float* %426 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %427, i32 0, i32 1, i32 1)
  %428 = getelementptr inbounds float, float* %419, i64 24
  %429 = bitcast float* %428 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %429, i32 0, i32 1, i32 1)
  %430 = getelementptr inbounds float, float* %416, i64 32
  %431 = bitcast float* %430 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %431, i32 0, i32 1, i32 1)
  %432 = getelementptr inbounds float, float* %419, i64 32
  %433 = bitcast float* %432 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %433, i32 0, i32 1, i32 1)
  %434 = getelementptr inbounds float, float* %416, i64 40
  %435 = bitcast float* %434 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %435, i32 0, i32 1, i32 1)
  %436 = getelementptr inbounds float, float* %419, i64 40
  %437 = bitcast float* %436 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %437, i32 0, i32 1, i32 1)
  %438 = getelementptr inbounds float, float* %416, i64 48
  %439 = bitcast float* %438 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %439, i32 0, i32 1, i32 1)
  %440 = getelementptr inbounds float, float* %419, i64 48
  %441 = bitcast float* %440 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %441, i32 0, i32 1, i32 1)
  %442 = getelementptr inbounds float, float* %416, i64 56
  %443 = bitcast float* %442 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %443, i32 0, i32 1, i32 1)
  %444 = getelementptr inbounds float, float* %419, i64 56
  %445 = bitcast float* %444 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %445, i32 0, i32 1, i32 1)
  %446 = getelementptr inbounds float, float* %416, i64 64
  %447 = bitcast float* %446 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %447, i32 0, i32 1, i32 1)
  %448 = getelementptr inbounds float, float* %419, i64 64
  %449 = bitcast float* %448 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %449, i32 0, i32 1, i32 1)
  %450 = bitcast float* %416 to <8 x float>*
  %451 = load <8 x float>, <8 x float>* %450, align 1, !tbaa !12
  %452 = or i64 %415, 8
  %453 = getelementptr inbounds float, float* %5, i64 %452
  %454 = bitcast float* %453 to <8 x float>*
  %455 = load <8 x float>, <8 x float>* %454, align 1, !tbaa !12
  %456 = or i64 %415, 16
  %457 = getelementptr inbounds float, float* %5, i64 %456
  %458 = bitcast float* %457 to <8 x float>*
  %459 = load <8 x float>, <8 x float>* %458, align 1, !tbaa !12
  %460 = or i64 %415, 24
  %461 = getelementptr inbounds float, float* %5, i64 %460
  %462 = bitcast float* %461 to <8 x float>*
  %463 = load <8 x float>, <8 x float>* %462, align 1, !tbaa !12
  %464 = or i64 %415, 32
  %465 = getelementptr inbounds float, float* %5, i64 %464
  %466 = bitcast float* %465 to <8 x float>*
  %467 = load <8 x float>, <8 x float>* %466, align 1, !tbaa !12
  %468 = or i64 %415, 40
  %469 = getelementptr inbounds float, float* %5, i64 %468
  %470 = bitcast float* %469 to <8 x float>*
  %471 = load <8 x float>, <8 x float>* %470, align 1, !tbaa !12
  %472 = or i64 %415, 48
  %473 = getelementptr inbounds float, float* %5, i64 %472
  %474 = bitcast float* %473 to <8 x float>*
  %475 = load <8 x float>, <8 x float>* %474, align 1, !tbaa !12
  %476 = or i64 %415, 56
  %477 = getelementptr inbounds float, float* %5, i64 %476
  %478 = bitcast float* %477 to <8 x float>*
  %479 = load <8 x float>, <8 x float>* %478, align 1, !tbaa !12
  %480 = add nsw i64 %415, %298
  %481 = getelementptr inbounds float, float* %3, i64 %480
  %482 = bitcast float* %481 to <8 x float>*
  %483 = load <8 x float>, <8 x float>* %482, align 1, !tbaa !12
  %484 = add nsw i64 %480, 8
  %485 = getelementptr inbounds float, float* %3, i64 %484
  %486 = bitcast float* %485 to <8 x float>*
  %487 = load <8 x float>, <8 x float>* %486, align 1, !tbaa !12
  %488 = add nsw i64 %480, 16
  %489 = getelementptr inbounds float, float* %3, i64 %488
  %490 = bitcast float* %489 to <8 x float>*
  %491 = load <8 x float>, <8 x float>* %490, align 1, !tbaa !12
  %492 = add nsw i64 %480, 24
  %493 = getelementptr inbounds float, float* %3, i64 %492
  %494 = bitcast float* %493 to <8 x float>*
  %495 = load <8 x float>, <8 x float>* %494, align 1, !tbaa !12
  %496 = add nsw i64 %480, 32
  %497 = getelementptr inbounds float, float* %3, i64 %496
  %498 = bitcast float* %497 to <8 x float>*
  %499 = load <8 x float>, <8 x float>* %498, align 1, !tbaa !12
  %500 = add nsw i64 %480, 40
  %501 = getelementptr inbounds float, float* %3, i64 %500
  %502 = bitcast float* %501 to <8 x float>*
  %503 = load <8 x float>, <8 x float>* %502, align 1, !tbaa !12
  %504 = add nsw i64 %480, 48
  %505 = getelementptr inbounds float, float* %3, i64 %504
  %506 = bitcast float* %505 to <8 x float>*
  %507 = load <8 x float>, <8 x float>* %506, align 1, !tbaa !12
  %508 = add nsw i64 %480, 56
  %509 = getelementptr inbounds float, float* %3, i64 %508
  %510 = bitcast float* %509 to <8 x float>*
  %511 = load <8 x float>, <8 x float>* %510, align 1, !tbaa !12
  %512 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %483, <8 x float> %40, <8 x float> %451) #10
  %513 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %487, <8 x float> %40, <8 x float> %455) #10
  %514 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %491, <8 x float> %40, <8 x float> %459) #10
  %515 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %495, <8 x float> %40, <8 x float> %463) #10
  %516 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %499, <8 x float> %40, <8 x float> %467) #10
  %517 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %503, <8 x float> %40, <8 x float> %471) #10
  %518 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %507, <8 x float> %40, <8 x float> %475) #10
  %519 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %511, <8 x float> %40, <8 x float> %479) #10
  store <8 x float> %512, <8 x float>* %450, align 1, !tbaa !12
  store <8 x float> %513, <8 x float>* %454, align 1, !tbaa !12
  store <8 x float> %514, <8 x float>* %458, align 1, !tbaa !12
  store <8 x float> %515, <8 x float>* %462, align 1, !tbaa !12
  store <8 x float> %516, <8 x float>* %466, align 1, !tbaa !12
  store <8 x float> %517, <8 x float>* %470, align 1, !tbaa !12
  store <8 x float> %518, <8 x float>* %474, align 1, !tbaa !12
  store <8 x float> %519, <8 x float>* %478, align 1, !tbaa !12
  %520 = add nuw nsw i64 %415, 64
  %521 = icmp ult i64 %520, %299
  br i1 %521, label %414, label %408

522:                                              ; preds = %529, %57, %180, %294, %408
  %523 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %524 = icmp sgt i32 %523, 0
  br i1 %524, label %525, label %637

525:                                              ; preds = %522
  %526 = zext i32 %523 to i64
  %527 = trunc i64 %46 to i32
  %528 = mul nsw i32 %523, %527
  br label %642

529:                                              ; preds = %409, %529
  %530 = phi i64 [ 0, %409 ], [ %635, %529 ]
  %531 = getelementptr inbounds float, float* %5, i64 %530
  %532 = getelementptr inbounds float, float* %531, i64 8
  %533 = bitcast float* %532 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %533, i32 0, i32 1, i32 1)
  %534 = getelementptr inbounds float, float* %3, i64 %530
  %535 = getelementptr inbounds float, float* %534, i64 8
  %536 = bitcast float* %535 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %536, i32 0, i32 1, i32 1)
  %537 = getelementptr inbounds float, float* %531, i64 16
  %538 = bitcast float* %537 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %538, i32 0, i32 1, i32 1)
  %539 = getelementptr inbounds float, float* %534, i64 16
  %540 = bitcast float* %539 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %540, i32 0, i32 1, i32 1)
  %541 = getelementptr inbounds float, float* %531, i64 24
  %542 = bitcast float* %541 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %542, i32 0, i32 1, i32 1)
  %543 = getelementptr inbounds float, float* %534, i64 24
  %544 = bitcast float* %543 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %544, i32 0, i32 1, i32 1)
  %545 = getelementptr inbounds float, float* %531, i64 32
  %546 = bitcast float* %545 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %546, i32 0, i32 1, i32 1)
  %547 = getelementptr inbounds float, float* %534, i64 32
  %548 = bitcast float* %547 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %548, i32 0, i32 1, i32 1)
  %549 = getelementptr inbounds float, float* %531, i64 40
  %550 = bitcast float* %549 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %550, i32 0, i32 1, i32 1)
  %551 = getelementptr inbounds float, float* %534, i64 40
  %552 = bitcast float* %551 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %552, i32 0, i32 1, i32 1)
  %553 = getelementptr inbounds float, float* %531, i64 48
  %554 = bitcast float* %553 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %554, i32 0, i32 1, i32 1)
  %555 = getelementptr inbounds float, float* %534, i64 48
  %556 = bitcast float* %555 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %556, i32 0, i32 1, i32 1)
  %557 = getelementptr inbounds float, float* %531, i64 56
  %558 = bitcast float* %557 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %558, i32 0, i32 1, i32 1)
  %559 = getelementptr inbounds float, float* %534, i64 56
  %560 = bitcast float* %559 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %560, i32 0, i32 1, i32 1)
  %561 = getelementptr inbounds float, float* %531, i64 64
  %562 = bitcast float* %561 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %562, i32 0, i32 1, i32 1)
  %563 = getelementptr inbounds float, float* %534, i64 64
  %564 = bitcast float* %563 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %564, i32 0, i32 1, i32 1)
  %565 = bitcast float* %531 to <8 x float>*
  %566 = load <8 x float>, <8 x float>* %565, align 1, !tbaa !12
  %567 = or i64 %530, 8
  %568 = getelementptr inbounds float, float* %5, i64 %567
  %569 = bitcast float* %568 to <8 x float>*
  %570 = load <8 x float>, <8 x float>* %569, align 1, !tbaa !12
  %571 = or i64 %530, 16
  %572 = getelementptr inbounds float, float* %5, i64 %571
  %573 = bitcast float* %572 to <8 x float>*
  %574 = load <8 x float>, <8 x float>* %573, align 1, !tbaa !12
  %575 = or i64 %530, 24
  %576 = getelementptr inbounds float, float* %5, i64 %575
  %577 = bitcast float* %576 to <8 x float>*
  %578 = load <8 x float>, <8 x float>* %577, align 1, !tbaa !12
  %579 = or i64 %530, 32
  %580 = getelementptr inbounds float, float* %5, i64 %579
  %581 = bitcast float* %580 to <8 x float>*
  %582 = load <8 x float>, <8 x float>* %581, align 1, !tbaa !12
  %583 = or i64 %530, 40
  %584 = getelementptr inbounds float, float* %5, i64 %583
  %585 = bitcast float* %584 to <8 x float>*
  %586 = load <8 x float>, <8 x float>* %585, align 1, !tbaa !12
  %587 = or i64 %530, 48
  %588 = getelementptr inbounds float, float* %5, i64 %587
  %589 = bitcast float* %588 to <8 x float>*
  %590 = load <8 x float>, <8 x float>* %589, align 1, !tbaa !12
  %591 = or i64 %530, 56
  %592 = getelementptr inbounds float, float* %5, i64 %591
  %593 = bitcast float* %592 to <8 x float>*
  %594 = load <8 x float>, <8 x float>* %593, align 1, !tbaa !12
  %595 = add nsw i64 %530, %412
  %596 = getelementptr inbounds float, float* %3, i64 %595
  %597 = bitcast float* %596 to <8 x float>*
  %598 = load <8 x float>, <8 x float>* %597, align 1, !tbaa !12
  %599 = add nsw i64 %595, 8
  %600 = getelementptr inbounds float, float* %3, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 1, !tbaa !12
  %603 = add nsw i64 %595, 16
  %604 = getelementptr inbounds float, float* %3, i64 %603
  %605 = bitcast float* %604 to <8 x float>*
  %606 = load <8 x float>, <8 x float>* %605, align 1, !tbaa !12
  %607 = add nsw i64 %595, 24
  %608 = getelementptr inbounds float, float* %3, i64 %607
  %609 = bitcast float* %608 to <8 x float>*
  %610 = load <8 x float>, <8 x float>* %609, align 1, !tbaa !12
  %611 = add nsw i64 %595, 32
  %612 = getelementptr inbounds float, float* %3, i64 %611
  %613 = bitcast float* %612 to <8 x float>*
  %614 = load <8 x float>, <8 x float>* %613, align 1, !tbaa !12
  %615 = add nsw i64 %595, 40
  %616 = getelementptr inbounds float, float* %3, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 1, !tbaa !12
  %619 = add nsw i64 %595, 48
  %620 = getelementptr inbounds float, float* %3, i64 %619
  %621 = bitcast float* %620 to <8 x float>*
  %622 = load <8 x float>, <8 x float>* %621, align 1, !tbaa !12
  %623 = add nsw i64 %595, 56
  %624 = getelementptr inbounds float, float* %3, i64 %623
  %625 = bitcast float* %624 to <8 x float>*
  %626 = load <8 x float>, <8 x float>* %625, align 1, !tbaa !12
  %627 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %598, <8 x float> %45, <8 x float> %566) #10
  %628 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %602, <8 x float> %45, <8 x float> %570) #10
  %629 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %606, <8 x float> %45, <8 x float> %574) #10
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %610, <8 x float> %45, <8 x float> %578) #10
  %631 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %614, <8 x float> %45, <8 x float> %582) #10
  %632 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %618, <8 x float> %45, <8 x float> %586) #10
  %633 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %622, <8 x float> %45, <8 x float> %590) #10
  %634 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %626, <8 x float> %45, <8 x float> %594) #10
  store <8 x float> %627, <8 x float>* %565, align 1, !tbaa !12
  store <8 x float> %628, <8 x float>* %569, align 1, !tbaa !12
  store <8 x float> %629, <8 x float>* %573, align 1, !tbaa !12
  store <8 x float> %630, <8 x float>* %577, align 1, !tbaa !12
  store <8 x float> %631, <8 x float>* %581, align 1, !tbaa !12
  store <8 x float> %632, <8 x float>* %585, align 1, !tbaa !12
  store <8 x float> %633, <8 x float>* %589, align 1, !tbaa !12
  store <8 x float> %634, <8 x float>* %593, align 1, !tbaa !12
  %635 = add nuw nsw i64 %530, 64
  %636 = icmp ult i64 %635, %413
  br i1 %636, label %529, label %522

637:                                              ; preds = %642, %20, %522
  %638 = add nuw nsw i64 %21, 6
  %639 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %640 = sext i32 %639 to i64
  %641 = icmp slt i64 %638, %640
  br i1 %641, label %20, label %8

642:                                              ; preds = %525, %642
  %643 = phi i64 [ 0, %525 ], [ %757, %642 ]
  %644 = getelementptr inbounds float, float* %5, i64 %643
  %645 = getelementptr inbounds float, float* %644, i64 8
  %646 = bitcast float* %645 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %646, i32 0, i32 1, i32 1)
  %647 = getelementptr inbounds float, float* %3, i64 %643
  %648 = getelementptr inbounds float, float* %647, i64 8
  %649 = bitcast float* %648 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %649, i32 0, i32 1, i32 1)
  %650 = getelementptr inbounds float, float* %644, i64 16
  %651 = bitcast float* %650 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %651, i32 0, i32 1, i32 1)
  %652 = getelementptr inbounds float, float* %647, i64 16
  %653 = bitcast float* %652 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %653, i32 0, i32 1, i32 1)
  %654 = getelementptr inbounds float, float* %644, i64 24
  %655 = bitcast float* %654 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %655, i32 0, i32 1, i32 1)
  %656 = getelementptr inbounds float, float* %647, i64 24
  %657 = bitcast float* %656 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %657, i32 0, i32 1, i32 1)
  %658 = getelementptr inbounds float, float* %644, i64 32
  %659 = bitcast float* %658 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %659, i32 0, i32 1, i32 1)
  %660 = getelementptr inbounds float, float* %647, i64 32
  %661 = bitcast float* %660 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %661, i32 0, i32 1, i32 1)
  %662 = getelementptr inbounds float, float* %644, i64 40
  %663 = bitcast float* %662 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %663, i32 0, i32 1, i32 1)
  %664 = getelementptr inbounds float, float* %647, i64 40
  %665 = bitcast float* %664 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %665, i32 0, i32 1, i32 1)
  %666 = getelementptr inbounds float, float* %644, i64 48
  %667 = bitcast float* %666 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %667, i32 0, i32 1, i32 1)
  %668 = getelementptr inbounds float, float* %647, i64 48
  %669 = bitcast float* %668 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %669, i32 0, i32 1, i32 1)
  %670 = getelementptr inbounds float, float* %644, i64 56
  %671 = bitcast float* %670 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %671, i32 0, i32 1, i32 1)
  %672 = getelementptr inbounds float, float* %647, i64 56
  %673 = bitcast float* %672 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %673, i32 0, i32 1, i32 1)
  %674 = getelementptr inbounds float, float* %644, i64 64
  %675 = bitcast float* %674 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %675, i32 0, i32 1, i32 1)
  %676 = getelementptr inbounds float, float* %647, i64 64
  %677 = bitcast float* %676 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %677, i32 0, i32 1, i32 1)
  %678 = bitcast float* %644 to <8 x float>*
  %679 = load <8 x float>, <8 x float>* %678, align 1, !tbaa !12
  %680 = or i64 %643, 8
  %681 = getelementptr inbounds float, float* %5, i64 %680
  %682 = bitcast float* %681 to <8 x float>*
  %683 = load <8 x float>, <8 x float>* %682, align 1, !tbaa !12
  %684 = or i64 %643, 16
  %685 = getelementptr inbounds float, float* %5, i64 %684
  %686 = bitcast float* %685 to <8 x float>*
  %687 = load <8 x float>, <8 x float>* %686, align 1, !tbaa !12
  %688 = or i64 %643, 24
  %689 = getelementptr inbounds float, float* %5, i64 %688
  %690 = bitcast float* %689 to <8 x float>*
  %691 = load <8 x float>, <8 x float>* %690, align 1, !tbaa !12
  %692 = or i64 %643, 32
  %693 = getelementptr inbounds float, float* %5, i64 %692
  %694 = bitcast float* %693 to <8 x float>*
  %695 = load <8 x float>, <8 x float>* %694, align 1, !tbaa !12
  %696 = or i64 %643, 40
  %697 = getelementptr inbounds float, float* %5, i64 %696
  %698 = bitcast float* %697 to <8 x float>*
  %699 = load <8 x float>, <8 x float>* %698, align 1, !tbaa !12
  %700 = or i64 %643, 48
  %701 = getelementptr inbounds float, float* %5, i64 %700
  %702 = bitcast float* %701 to <8 x float>*
  %703 = load <8 x float>, <8 x float>* %702, align 1, !tbaa !12
  %704 = or i64 %643, 56
  %705 = getelementptr inbounds float, float* %5, i64 %704
  %706 = bitcast float* %705 to <8 x float>*
  %707 = load <8 x float>, <8 x float>* %706, align 1, !tbaa !12
  %708 = trunc i64 %643 to i32
  %709 = add nsw i32 %528, %708
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds float, float* %3, i64 %710
  %712 = bitcast float* %711 to <8 x float>*
  %713 = load <8 x float>, <8 x float>* %712, align 1, !tbaa !12
  %714 = add nsw i32 %709, 8
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds float, float* %3, i64 %715
  %717 = bitcast float* %716 to <8 x float>*
  %718 = load <8 x float>, <8 x float>* %717, align 1, !tbaa !12
  %719 = add nsw i32 %709, 16
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds float, float* %3, i64 %720
  %722 = bitcast float* %721 to <8 x float>*
  %723 = load <8 x float>, <8 x float>* %722, align 1, !tbaa !12
  %724 = add nsw i32 %709, 24
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds float, float* %3, i64 %725
  %727 = bitcast float* %726 to <8 x float>*
  %728 = load <8 x float>, <8 x float>* %727, align 1, !tbaa !12
  %729 = add nsw i32 %709, 32
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds float, float* %3, i64 %730
  %732 = bitcast float* %731 to <8 x float>*
  %733 = load <8 x float>, <8 x float>* %732, align 1, !tbaa !12
  %734 = add nsw i32 %709, 40
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds float, float* %3, i64 %735
  %737 = bitcast float* %736 to <8 x float>*
  %738 = load <8 x float>, <8 x float>* %737, align 1, !tbaa !12
  %739 = add nsw i32 %709, 48
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds float, float* %3, i64 %740
  %742 = bitcast float* %741 to <8 x float>*
  %743 = load <8 x float>, <8 x float>* %742, align 1, !tbaa !12
  %744 = add nsw i32 %709, 56
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds float, float* %3, i64 %745
  %747 = bitcast float* %746 to <8 x float>*
  %748 = load <8 x float>, <8 x float>* %747, align 1, !tbaa !12
  %749 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %713, <8 x float> %50, <8 x float> %679) #10
  %750 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %718, <8 x float> %50, <8 x float> %683) #10
  %751 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %723, <8 x float> %50, <8 x float> %687) #10
  %752 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %728, <8 x float> %50, <8 x float> %691) #10
  %753 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %733, <8 x float> %50, <8 x float> %695) #10
  %754 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %738, <8 x float> %50, <8 x float> %699) #10
  %755 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %743, <8 x float> %50, <8 x float> %703) #10
  %756 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %748, <8 x float> %50, <8 x float> %707) #10
  store <8 x float> %749, <8 x float>* %678, align 1, !tbaa !12
  store <8 x float> %750, <8 x float>* %682, align 1, !tbaa !12
  store <8 x float> %751, <8 x float>* %686, align 1, !tbaa !12
  store <8 x float> %752, <8 x float>* %690, align 1, !tbaa !12
  store <8 x float> %753, <8 x float>* %694, align 1, !tbaa !12
  store <8 x float> %754, <8 x float>* %698, align 1, !tbaa !12
  store <8 x float> %755, <8 x float>* %702, align 1, !tbaa !12
  store <8 x float> %756, <8 x float>* %706, align 1, !tbaa !12
  %757 = add nuw nsw i64 %643, 64
  %758 = icmp ult i64 %757, %526
  br i1 %758, label %642, label %637
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 102
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui8_uk6.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
