; ModuleID = 'codes/matvec_ui11_uk7.cpp'
source_filename = "codes/matvec_ui11_uk7.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui11_uk7.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 88
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 56
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %1005, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %1005
  %21 = phi i64 [ %1006, %1005 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = add nuw nsw i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = add nuw nsw i64 %21, 6
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !18
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %1005

58:                                               ; preds = %20
  %59 = zext i32 %56 to i64
  %60 = trunc i64 %21 to i32
  %61 = mul nsw i32 %56, %60
  br label %68

62:                                               ; preds = %68
  br i1 %57, label %63, label %533

63:                                               ; preds = %62
  %64 = trunc i64 %26 to i32
  %65 = mul nsw i32 %56, %64
  %66 = sext i32 %65 to i64
  %67 = zext i32 %56 to i64
  br label %233

68:                                               ; preds = %58, %68
  %69 = phi i64 [ 0, %58 ], [ %225, %68 ]
  %70 = getelementptr inbounds float, float* %5, i64 %69
  %71 = getelementptr inbounds float, float* %70, i64 8
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %72, i32 0, i32 1, i32 1)
  %73 = getelementptr inbounds float, float* %3, i64 %69
  %74 = getelementptr inbounds float, float* %73, i64 8
  %75 = bitcast float* %74 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %75, i32 0, i32 1, i32 1)
  %76 = getelementptr inbounds float, float* %70, i64 16
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %77, i32 0, i32 1, i32 1)
  %78 = getelementptr inbounds float, float* %73, i64 16
  %79 = bitcast float* %78 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %79, i32 0, i32 1, i32 1)
  %80 = getelementptr inbounds float, float* %70, i64 24
  %81 = bitcast float* %80 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %81, i32 0, i32 1, i32 1)
  %82 = getelementptr inbounds float, float* %73, i64 24
  %83 = bitcast float* %82 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %83, i32 0, i32 1, i32 1)
  %84 = getelementptr inbounds float, float* %70, i64 32
  %85 = bitcast float* %84 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %85, i32 0, i32 1, i32 1)
  %86 = getelementptr inbounds float, float* %73, i64 32
  %87 = bitcast float* %86 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %87, i32 0, i32 1, i32 1)
  %88 = getelementptr inbounds float, float* %70, i64 40
  %89 = bitcast float* %88 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %89, i32 0, i32 1, i32 1)
  %90 = getelementptr inbounds float, float* %73, i64 40
  %91 = bitcast float* %90 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %91, i32 0, i32 1, i32 1)
  %92 = getelementptr inbounds float, float* %70, i64 48
  %93 = bitcast float* %92 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %93, i32 0, i32 1, i32 1)
  %94 = getelementptr inbounds float, float* %73, i64 48
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %95, i32 0, i32 1, i32 1)
  %96 = getelementptr inbounds float, float* %70, i64 56
  %97 = bitcast float* %96 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %97, i32 0, i32 1, i32 1)
  %98 = getelementptr inbounds float, float* %73, i64 56
  %99 = bitcast float* %98 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %99, i32 0, i32 1, i32 1)
  %100 = getelementptr inbounds float, float* %70, i64 64
  %101 = bitcast float* %100 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %101, i32 0, i32 1, i32 1)
  %102 = getelementptr inbounds float, float* %73, i64 64
  %103 = bitcast float* %102 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %103, i32 0, i32 1, i32 1)
  %104 = getelementptr inbounds float, float* %70, i64 72
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %105, i32 0, i32 1, i32 1)
  %106 = getelementptr inbounds float, float* %73, i64 72
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %107, i32 0, i32 1, i32 1)
  %108 = getelementptr inbounds float, float* %70, i64 80
  %109 = bitcast float* %108 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %109, i32 0, i32 1, i32 1)
  %110 = getelementptr inbounds float, float* %73, i64 80
  %111 = bitcast float* %110 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %111, i32 0, i32 1, i32 1)
  %112 = getelementptr inbounds float, float* %70, i64 88
  %113 = bitcast float* %112 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %113, i32 0, i32 1, i32 1)
  %114 = getelementptr inbounds float, float* %73, i64 88
  %115 = bitcast float* %114 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %115, i32 0, i32 1, i32 1)
  %116 = bitcast float* %70 to <8 x float>*
  %117 = load <8 x float>, <8 x float>* %116, align 1, !tbaa !12
  %118 = add nuw nsw i64 %69, 8
  %119 = getelementptr inbounds float, float* %5, i64 %118
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !tbaa !12
  %122 = add nuw nsw i64 %69, 16
  %123 = getelementptr inbounds float, float* %5, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 1, !tbaa !12
  %126 = add nuw nsw i64 %69, 24
  %127 = getelementptr inbounds float, float* %5, i64 %126
  %128 = bitcast float* %127 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !tbaa !12
  %130 = add nuw nsw i64 %69, 32
  %131 = getelementptr inbounds float, float* %5, i64 %130
  %132 = bitcast float* %131 to <8 x float>*
  %133 = load <8 x float>, <8 x float>* %132, align 1, !tbaa !12
  %134 = add nuw nsw i64 %69, 40
  %135 = getelementptr inbounds float, float* %5, i64 %134
  %136 = bitcast float* %135 to <8 x float>*
  %137 = load <8 x float>, <8 x float>* %136, align 1, !tbaa !12
  %138 = add nuw nsw i64 %69, 48
  %139 = getelementptr inbounds float, float* %5, i64 %138
  %140 = bitcast float* %139 to <8 x float>*
  %141 = load <8 x float>, <8 x float>* %140, align 1, !tbaa !12
  %142 = add nuw nsw i64 %69, 56
  %143 = getelementptr inbounds float, float* %5, i64 %142
  %144 = bitcast float* %143 to <8 x float>*
  %145 = load <8 x float>, <8 x float>* %144, align 1, !tbaa !12
  %146 = add nuw nsw i64 %69, 64
  %147 = getelementptr inbounds float, float* %5, i64 %146
  %148 = bitcast float* %147 to <8 x float>*
  %149 = load <8 x float>, <8 x float>* %148, align 1, !tbaa !12
  %150 = add nuw nsw i64 %69, 72
  %151 = getelementptr inbounds float, float* %5, i64 %150
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !tbaa !12
  %154 = add nuw nsw i64 %69, 80
  %155 = getelementptr inbounds float, float* %5, i64 %154
  %156 = bitcast float* %155 to <8 x float>*
  %157 = load <8 x float>, <8 x float>* %156, align 1, !tbaa !12
  %158 = trunc i64 %69 to i32
  %159 = add nsw i32 %61, %158
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float* %3, i64 %160
  %162 = bitcast float* %161 to <8 x float>*
  %163 = load <8 x float>, <8 x float>* %162, align 1, !tbaa !12
  %164 = add nsw i32 %159, 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %3, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nsw i32 %159, 16
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds float, float* %3, i64 %170
  %172 = bitcast float* %171 to <8 x float>*
  %173 = load <8 x float>, <8 x float>* %172, align 1, !tbaa !12
  %174 = add nsw i32 %159, 24
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %3, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 1, !tbaa !12
  %179 = add nsw i32 %159, 32
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds float, float* %3, i64 %180
  %182 = bitcast float* %181 to <8 x float>*
  %183 = load <8 x float>, <8 x float>* %182, align 1, !tbaa !12
  %184 = add nsw i32 %159, 40
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds float, float* %3, i64 %185
  %187 = bitcast float* %186 to <8 x float>*
  %188 = load <8 x float>, <8 x float>* %187, align 1, !tbaa !12
  %189 = add nsw i32 %159, 48
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %3, i64 %190
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 1, !tbaa !12
  %194 = add nsw i32 %159, 56
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float* %3, i64 %195
  %197 = bitcast float* %196 to <8 x float>*
  %198 = load <8 x float>, <8 x float>* %197, align 1, !tbaa !12
  %199 = add nsw i32 %159, 64
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %3, i64 %200
  %202 = bitcast float* %201 to <8 x float>*
  %203 = load <8 x float>, <8 x float>* %202, align 1, !tbaa !12
  %204 = add nsw i32 %159, 72
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %3, i64 %205
  %207 = bitcast float* %206 to <8 x float>*
  %208 = load <8 x float>, <8 x float>* %207, align 1, !tbaa !12
  %209 = add nsw i32 %159, 80
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds float, float* %3, i64 %210
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 1, !tbaa !12
  %214 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %163, <8 x float> %25, <8 x float> %117) #10
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %25, <8 x float> %121) #10
  %216 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %25, <8 x float> %125) #10
  %217 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %25, <8 x float> %129) #10
  %218 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %183, <8 x float> %25, <8 x float> %133) #10
  %219 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %188, <8 x float> %25, <8 x float> %137) #10
  %220 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %193, <8 x float> %25, <8 x float> %141) #10
  %221 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %198, <8 x float> %25, <8 x float> %145) #10
  %222 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> %25, <8 x float> %149) #10
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %208, <8 x float> %25, <8 x float> %153) #10
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %213, <8 x float> %25, <8 x float> %157) #10
  store <8 x float> %214, <8 x float>* %116, align 1, !tbaa !12
  store <8 x float> %215, <8 x float>* %120, align 1, !tbaa !12
  store <8 x float> %216, <8 x float>* %124, align 1, !tbaa !12
  store <8 x float> %217, <8 x float>* %128, align 1, !tbaa !12
  store <8 x float> %218, <8 x float>* %132, align 1, !tbaa !12
  store <8 x float> %219, <8 x float>* %136, align 1, !tbaa !12
  store <8 x float> %220, <8 x float>* %140, align 1, !tbaa !12
  store <8 x float> %221, <8 x float>* %144, align 1, !tbaa !12
  store <8 x float> %222, <8 x float>* %148, align 1, !tbaa !12
  store <8 x float> %223, <8 x float>* %152, align 1, !tbaa !12
  store <8 x float> %224, <8 x float>* %156, align 1, !tbaa !12
  %225 = add nuw nsw i64 %69, 88
  %226 = icmp ult i64 %225, %59
  br i1 %226, label %68, label %62

227:                                              ; preds = %233
  br i1 %57, label %228, label %533

228:                                              ; preds = %227
  %229 = trunc i64 %31 to i32
  %230 = mul nsw i32 %56, %229
  %231 = sext i32 %230 to i64
  %232 = zext i32 %56 to i64
  br label %386

233:                                              ; preds = %63, %233
  %234 = phi i64 [ 0, %63 ], [ %378, %233 ]
  %235 = getelementptr inbounds float, float* %5, i64 %234
  %236 = getelementptr inbounds float, float* %235, i64 8
  %237 = bitcast float* %236 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %237, i32 0, i32 1, i32 1)
  %238 = getelementptr inbounds float, float* %3, i64 %234
  %239 = getelementptr inbounds float, float* %238, i64 8
  %240 = bitcast float* %239 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %240, i32 0, i32 1, i32 1)
  %241 = getelementptr inbounds float, float* %235, i64 16
  %242 = bitcast float* %241 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %242, i32 0, i32 1, i32 1)
  %243 = getelementptr inbounds float, float* %238, i64 16
  %244 = bitcast float* %243 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %244, i32 0, i32 1, i32 1)
  %245 = getelementptr inbounds float, float* %235, i64 24
  %246 = bitcast float* %245 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %246, i32 0, i32 1, i32 1)
  %247 = getelementptr inbounds float, float* %238, i64 24
  %248 = bitcast float* %247 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %248, i32 0, i32 1, i32 1)
  %249 = getelementptr inbounds float, float* %235, i64 32
  %250 = bitcast float* %249 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %250, i32 0, i32 1, i32 1)
  %251 = getelementptr inbounds float, float* %238, i64 32
  %252 = bitcast float* %251 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %252, i32 0, i32 1, i32 1)
  %253 = getelementptr inbounds float, float* %235, i64 40
  %254 = bitcast float* %253 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %254, i32 0, i32 1, i32 1)
  %255 = getelementptr inbounds float, float* %238, i64 40
  %256 = bitcast float* %255 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %256, i32 0, i32 1, i32 1)
  %257 = getelementptr inbounds float, float* %235, i64 48
  %258 = bitcast float* %257 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %258, i32 0, i32 1, i32 1)
  %259 = getelementptr inbounds float, float* %238, i64 48
  %260 = bitcast float* %259 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %260, i32 0, i32 1, i32 1)
  %261 = getelementptr inbounds float, float* %235, i64 56
  %262 = bitcast float* %261 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %262, i32 0, i32 1, i32 1)
  %263 = getelementptr inbounds float, float* %238, i64 56
  %264 = bitcast float* %263 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %264, i32 0, i32 1, i32 1)
  %265 = getelementptr inbounds float, float* %235, i64 64
  %266 = bitcast float* %265 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %266, i32 0, i32 1, i32 1)
  %267 = getelementptr inbounds float, float* %238, i64 64
  %268 = bitcast float* %267 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %268, i32 0, i32 1, i32 1)
  %269 = getelementptr inbounds float, float* %235, i64 72
  %270 = bitcast float* %269 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %270, i32 0, i32 1, i32 1)
  %271 = getelementptr inbounds float, float* %238, i64 72
  %272 = bitcast float* %271 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %272, i32 0, i32 1, i32 1)
  %273 = getelementptr inbounds float, float* %235, i64 80
  %274 = bitcast float* %273 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %274, i32 0, i32 1, i32 1)
  %275 = getelementptr inbounds float, float* %238, i64 80
  %276 = bitcast float* %275 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %276, i32 0, i32 1, i32 1)
  %277 = getelementptr inbounds float, float* %235, i64 88
  %278 = bitcast float* %277 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %278, i32 0, i32 1, i32 1)
  %279 = getelementptr inbounds float, float* %238, i64 88
  %280 = bitcast float* %279 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %280, i32 0, i32 1, i32 1)
  %281 = bitcast float* %235 to <8 x float>*
  %282 = load <8 x float>, <8 x float>* %281, align 1, !tbaa !12
  %283 = add nuw nsw i64 %234, 8
  %284 = getelementptr inbounds float, float* %5, i64 %283
  %285 = bitcast float* %284 to <8 x float>*
  %286 = load <8 x float>, <8 x float>* %285, align 1, !tbaa !12
  %287 = add nuw nsw i64 %234, 16
  %288 = getelementptr inbounds float, float* %5, i64 %287
  %289 = bitcast float* %288 to <8 x float>*
  %290 = load <8 x float>, <8 x float>* %289, align 1, !tbaa !12
  %291 = add nuw nsw i64 %234, 24
  %292 = getelementptr inbounds float, float* %5, i64 %291
  %293 = bitcast float* %292 to <8 x float>*
  %294 = load <8 x float>, <8 x float>* %293, align 1, !tbaa !12
  %295 = add nuw nsw i64 %234, 32
  %296 = getelementptr inbounds float, float* %5, i64 %295
  %297 = bitcast float* %296 to <8 x float>*
  %298 = load <8 x float>, <8 x float>* %297, align 1, !tbaa !12
  %299 = add nuw nsw i64 %234, 40
  %300 = getelementptr inbounds float, float* %5, i64 %299
  %301 = bitcast float* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 1, !tbaa !12
  %303 = add nuw nsw i64 %234, 48
  %304 = getelementptr inbounds float, float* %5, i64 %303
  %305 = bitcast float* %304 to <8 x float>*
  %306 = load <8 x float>, <8 x float>* %305, align 1, !tbaa !12
  %307 = add nuw nsw i64 %234, 56
  %308 = getelementptr inbounds float, float* %5, i64 %307
  %309 = bitcast float* %308 to <8 x float>*
  %310 = load <8 x float>, <8 x float>* %309, align 1, !tbaa !12
  %311 = add nuw nsw i64 %234, 64
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = bitcast float* %312 to <8 x float>*
  %314 = load <8 x float>, <8 x float>* %313, align 1, !tbaa !12
  %315 = add nuw nsw i64 %234, 72
  %316 = getelementptr inbounds float, float* %5, i64 %315
  %317 = bitcast float* %316 to <8 x float>*
  %318 = load <8 x float>, <8 x float>* %317, align 1, !tbaa !12
  %319 = add nuw nsw i64 %234, 80
  %320 = getelementptr inbounds float, float* %5, i64 %319
  %321 = bitcast float* %320 to <8 x float>*
  %322 = load <8 x float>, <8 x float>* %321, align 1, !tbaa !12
  %323 = add nsw i64 %234, %66
  %324 = getelementptr inbounds float, float* %3, i64 %323
  %325 = bitcast float* %324 to <8 x float>*
  %326 = load <8 x float>, <8 x float>* %325, align 1, !tbaa !12
  %327 = add nsw i64 %323, 8
  %328 = getelementptr inbounds float, float* %3, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  %330 = load <8 x float>, <8 x float>* %329, align 1, !tbaa !12
  %331 = add nsw i64 %323, 16
  %332 = getelementptr inbounds float, float* %3, i64 %331
  %333 = bitcast float* %332 to <8 x float>*
  %334 = load <8 x float>, <8 x float>* %333, align 1, !tbaa !12
  %335 = add nsw i64 %323, 24
  %336 = getelementptr inbounds float, float* %3, i64 %335
  %337 = bitcast float* %336 to <8 x float>*
  %338 = load <8 x float>, <8 x float>* %337, align 1, !tbaa !12
  %339 = add nsw i64 %323, 32
  %340 = getelementptr inbounds float, float* %3, i64 %339
  %341 = bitcast float* %340 to <8 x float>*
  %342 = load <8 x float>, <8 x float>* %341, align 1, !tbaa !12
  %343 = add nsw i64 %323, 40
  %344 = getelementptr inbounds float, float* %3, i64 %343
  %345 = bitcast float* %344 to <8 x float>*
  %346 = load <8 x float>, <8 x float>* %345, align 1, !tbaa !12
  %347 = add nsw i64 %323, 48
  %348 = getelementptr inbounds float, float* %3, i64 %347
  %349 = bitcast float* %348 to <8 x float>*
  %350 = load <8 x float>, <8 x float>* %349, align 1, !tbaa !12
  %351 = add nsw i64 %323, 56
  %352 = getelementptr inbounds float, float* %3, i64 %351
  %353 = bitcast float* %352 to <8 x float>*
  %354 = load <8 x float>, <8 x float>* %353, align 1, !tbaa !12
  %355 = add nsw i64 %323, 64
  %356 = getelementptr inbounds float, float* %3, i64 %355
  %357 = bitcast float* %356 to <8 x float>*
  %358 = load <8 x float>, <8 x float>* %357, align 1, !tbaa !12
  %359 = add nsw i64 %323, 72
  %360 = getelementptr inbounds float, float* %3, i64 %359
  %361 = bitcast float* %360 to <8 x float>*
  %362 = load <8 x float>, <8 x float>* %361, align 1, !tbaa !12
  %363 = add nsw i64 %323, 80
  %364 = getelementptr inbounds float, float* %3, i64 %363
  %365 = bitcast float* %364 to <8 x float>*
  %366 = load <8 x float>, <8 x float>* %365, align 1, !tbaa !12
  %367 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %326, <8 x float> %30, <8 x float> %282) #10
  %368 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %330, <8 x float> %30, <8 x float> %286) #10
  %369 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %334, <8 x float> %30, <8 x float> %290) #10
  %370 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %338, <8 x float> %30, <8 x float> %294) #10
  %371 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %342, <8 x float> %30, <8 x float> %298) #10
  %372 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %346, <8 x float> %30, <8 x float> %302) #10
  %373 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %350, <8 x float> %30, <8 x float> %306) #10
  %374 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %354, <8 x float> %30, <8 x float> %310) #10
  %375 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %358, <8 x float> %30, <8 x float> %314) #10
  %376 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %362, <8 x float> %30, <8 x float> %318) #10
  %377 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %366, <8 x float> %30, <8 x float> %322) #10
  store <8 x float> %367, <8 x float>* %281, align 1, !tbaa !12
  store <8 x float> %368, <8 x float>* %285, align 1, !tbaa !12
  store <8 x float> %369, <8 x float>* %289, align 1, !tbaa !12
  store <8 x float> %370, <8 x float>* %293, align 1, !tbaa !12
  store <8 x float> %371, <8 x float>* %297, align 1, !tbaa !12
  store <8 x float> %372, <8 x float>* %301, align 1, !tbaa !12
  store <8 x float> %373, <8 x float>* %305, align 1, !tbaa !12
  store <8 x float> %374, <8 x float>* %309, align 1, !tbaa !12
  store <8 x float> %375, <8 x float>* %313, align 1, !tbaa !12
  store <8 x float> %376, <8 x float>* %317, align 1, !tbaa !12
  store <8 x float> %377, <8 x float>* %321, align 1, !tbaa !12
  %378 = add nuw nsw i64 %234, 88
  %379 = icmp ult i64 %378, %67
  br i1 %379, label %233, label %227

380:                                              ; preds = %386
  br i1 %57, label %381, label %533

381:                                              ; preds = %380
  %382 = trunc i64 %36 to i32
  %383 = mul nsw i32 %56, %382
  %384 = sext i32 %383 to i64
  %385 = zext i32 %56 to i64
  br label %540

386:                                              ; preds = %228, %386
  %387 = phi i64 [ 0, %228 ], [ %531, %386 ]
  %388 = getelementptr inbounds float, float* %5, i64 %387
  %389 = getelementptr inbounds float, float* %388, i64 8
  %390 = bitcast float* %389 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %390, i32 0, i32 1, i32 1)
  %391 = getelementptr inbounds float, float* %3, i64 %387
  %392 = getelementptr inbounds float, float* %391, i64 8
  %393 = bitcast float* %392 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %393, i32 0, i32 1, i32 1)
  %394 = getelementptr inbounds float, float* %388, i64 16
  %395 = bitcast float* %394 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %395, i32 0, i32 1, i32 1)
  %396 = getelementptr inbounds float, float* %391, i64 16
  %397 = bitcast float* %396 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %397, i32 0, i32 1, i32 1)
  %398 = getelementptr inbounds float, float* %388, i64 24
  %399 = bitcast float* %398 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %399, i32 0, i32 1, i32 1)
  %400 = getelementptr inbounds float, float* %391, i64 24
  %401 = bitcast float* %400 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %401, i32 0, i32 1, i32 1)
  %402 = getelementptr inbounds float, float* %388, i64 32
  %403 = bitcast float* %402 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %403, i32 0, i32 1, i32 1)
  %404 = getelementptr inbounds float, float* %391, i64 32
  %405 = bitcast float* %404 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %405, i32 0, i32 1, i32 1)
  %406 = getelementptr inbounds float, float* %388, i64 40
  %407 = bitcast float* %406 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %407, i32 0, i32 1, i32 1)
  %408 = getelementptr inbounds float, float* %391, i64 40
  %409 = bitcast float* %408 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %409, i32 0, i32 1, i32 1)
  %410 = getelementptr inbounds float, float* %388, i64 48
  %411 = bitcast float* %410 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %411, i32 0, i32 1, i32 1)
  %412 = getelementptr inbounds float, float* %391, i64 48
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %413, i32 0, i32 1, i32 1)
  %414 = getelementptr inbounds float, float* %388, i64 56
  %415 = bitcast float* %414 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %415, i32 0, i32 1, i32 1)
  %416 = getelementptr inbounds float, float* %391, i64 56
  %417 = bitcast float* %416 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %417, i32 0, i32 1, i32 1)
  %418 = getelementptr inbounds float, float* %388, i64 64
  %419 = bitcast float* %418 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %419, i32 0, i32 1, i32 1)
  %420 = getelementptr inbounds float, float* %391, i64 64
  %421 = bitcast float* %420 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %421, i32 0, i32 1, i32 1)
  %422 = getelementptr inbounds float, float* %388, i64 72
  %423 = bitcast float* %422 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %423, i32 0, i32 1, i32 1)
  %424 = getelementptr inbounds float, float* %391, i64 72
  %425 = bitcast float* %424 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %425, i32 0, i32 1, i32 1)
  %426 = getelementptr inbounds float, float* %388, i64 80
  %427 = bitcast float* %426 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %427, i32 0, i32 1, i32 1)
  %428 = getelementptr inbounds float, float* %391, i64 80
  %429 = bitcast float* %428 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %429, i32 0, i32 1, i32 1)
  %430 = getelementptr inbounds float, float* %388, i64 88
  %431 = bitcast float* %430 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %431, i32 0, i32 1, i32 1)
  %432 = getelementptr inbounds float, float* %391, i64 88
  %433 = bitcast float* %432 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %433, i32 0, i32 1, i32 1)
  %434 = bitcast float* %388 to <8 x float>*
  %435 = load <8 x float>, <8 x float>* %434, align 1, !tbaa !12
  %436 = add nuw nsw i64 %387, 8
  %437 = getelementptr inbounds float, float* %5, i64 %436
  %438 = bitcast float* %437 to <8 x float>*
  %439 = load <8 x float>, <8 x float>* %438, align 1, !tbaa !12
  %440 = add nuw nsw i64 %387, 16
  %441 = getelementptr inbounds float, float* %5, i64 %440
  %442 = bitcast float* %441 to <8 x float>*
  %443 = load <8 x float>, <8 x float>* %442, align 1, !tbaa !12
  %444 = add nuw nsw i64 %387, 24
  %445 = getelementptr inbounds float, float* %5, i64 %444
  %446 = bitcast float* %445 to <8 x float>*
  %447 = load <8 x float>, <8 x float>* %446, align 1, !tbaa !12
  %448 = add nuw nsw i64 %387, 32
  %449 = getelementptr inbounds float, float* %5, i64 %448
  %450 = bitcast float* %449 to <8 x float>*
  %451 = load <8 x float>, <8 x float>* %450, align 1, !tbaa !12
  %452 = add nuw nsw i64 %387, 40
  %453 = getelementptr inbounds float, float* %5, i64 %452
  %454 = bitcast float* %453 to <8 x float>*
  %455 = load <8 x float>, <8 x float>* %454, align 1, !tbaa !12
  %456 = add nuw nsw i64 %387, 48
  %457 = getelementptr inbounds float, float* %5, i64 %456
  %458 = bitcast float* %457 to <8 x float>*
  %459 = load <8 x float>, <8 x float>* %458, align 1, !tbaa !12
  %460 = add nuw nsw i64 %387, 56
  %461 = getelementptr inbounds float, float* %5, i64 %460
  %462 = bitcast float* %461 to <8 x float>*
  %463 = load <8 x float>, <8 x float>* %462, align 1, !tbaa !12
  %464 = add nuw nsw i64 %387, 64
  %465 = getelementptr inbounds float, float* %5, i64 %464
  %466 = bitcast float* %465 to <8 x float>*
  %467 = load <8 x float>, <8 x float>* %466, align 1, !tbaa !12
  %468 = add nuw nsw i64 %387, 72
  %469 = getelementptr inbounds float, float* %5, i64 %468
  %470 = bitcast float* %469 to <8 x float>*
  %471 = load <8 x float>, <8 x float>* %470, align 1, !tbaa !12
  %472 = add nuw nsw i64 %387, 80
  %473 = getelementptr inbounds float, float* %5, i64 %472
  %474 = bitcast float* %473 to <8 x float>*
  %475 = load <8 x float>, <8 x float>* %474, align 1, !tbaa !12
  %476 = add nsw i64 %387, %231
  %477 = getelementptr inbounds float, float* %3, i64 %476
  %478 = bitcast float* %477 to <8 x float>*
  %479 = load <8 x float>, <8 x float>* %478, align 1, !tbaa !12
  %480 = add nsw i64 %476, 8
  %481 = getelementptr inbounds float, float* %3, i64 %480
  %482 = bitcast float* %481 to <8 x float>*
  %483 = load <8 x float>, <8 x float>* %482, align 1, !tbaa !12
  %484 = add nsw i64 %476, 16
  %485 = getelementptr inbounds float, float* %3, i64 %484
  %486 = bitcast float* %485 to <8 x float>*
  %487 = load <8 x float>, <8 x float>* %486, align 1, !tbaa !12
  %488 = add nsw i64 %476, 24
  %489 = getelementptr inbounds float, float* %3, i64 %488
  %490 = bitcast float* %489 to <8 x float>*
  %491 = load <8 x float>, <8 x float>* %490, align 1, !tbaa !12
  %492 = add nsw i64 %476, 32
  %493 = getelementptr inbounds float, float* %3, i64 %492
  %494 = bitcast float* %493 to <8 x float>*
  %495 = load <8 x float>, <8 x float>* %494, align 1, !tbaa !12
  %496 = add nsw i64 %476, 40
  %497 = getelementptr inbounds float, float* %3, i64 %496
  %498 = bitcast float* %497 to <8 x float>*
  %499 = load <8 x float>, <8 x float>* %498, align 1, !tbaa !12
  %500 = add nsw i64 %476, 48
  %501 = getelementptr inbounds float, float* %3, i64 %500
  %502 = bitcast float* %501 to <8 x float>*
  %503 = load <8 x float>, <8 x float>* %502, align 1, !tbaa !12
  %504 = add nsw i64 %476, 56
  %505 = getelementptr inbounds float, float* %3, i64 %504
  %506 = bitcast float* %505 to <8 x float>*
  %507 = load <8 x float>, <8 x float>* %506, align 1, !tbaa !12
  %508 = add nsw i64 %476, 64
  %509 = getelementptr inbounds float, float* %3, i64 %508
  %510 = bitcast float* %509 to <8 x float>*
  %511 = load <8 x float>, <8 x float>* %510, align 1, !tbaa !12
  %512 = add nsw i64 %476, 72
  %513 = getelementptr inbounds float, float* %3, i64 %512
  %514 = bitcast float* %513 to <8 x float>*
  %515 = load <8 x float>, <8 x float>* %514, align 1, !tbaa !12
  %516 = add nsw i64 %476, 80
  %517 = getelementptr inbounds float, float* %3, i64 %516
  %518 = bitcast float* %517 to <8 x float>*
  %519 = load <8 x float>, <8 x float>* %518, align 1, !tbaa !12
  %520 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %479, <8 x float> %35, <8 x float> %435) #10
  %521 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %483, <8 x float> %35, <8 x float> %439) #10
  %522 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %487, <8 x float> %35, <8 x float> %443) #10
  %523 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %491, <8 x float> %35, <8 x float> %447) #10
  %524 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %495, <8 x float> %35, <8 x float> %451) #10
  %525 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %499, <8 x float> %35, <8 x float> %455) #10
  %526 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %503, <8 x float> %35, <8 x float> %459) #10
  %527 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %507, <8 x float> %35, <8 x float> %463) #10
  %528 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %511, <8 x float> %35, <8 x float> %467) #10
  %529 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %515, <8 x float> %35, <8 x float> %471) #10
  %530 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> %35, <8 x float> %475) #10
  store <8 x float> %520, <8 x float>* %434, align 1, !tbaa !12
  store <8 x float> %521, <8 x float>* %438, align 1, !tbaa !12
  store <8 x float> %522, <8 x float>* %442, align 1, !tbaa !12
  store <8 x float> %523, <8 x float>* %446, align 1, !tbaa !12
  store <8 x float> %524, <8 x float>* %450, align 1, !tbaa !12
  store <8 x float> %525, <8 x float>* %454, align 1, !tbaa !12
  store <8 x float> %526, <8 x float>* %458, align 1, !tbaa !12
  store <8 x float> %527, <8 x float>* %462, align 1, !tbaa !12
  store <8 x float> %528, <8 x float>* %466, align 1, !tbaa !12
  store <8 x float> %529, <8 x float>* %470, align 1, !tbaa !12
  store <8 x float> %530, <8 x float>* %474, align 1, !tbaa !12
  %531 = add nuw nsw i64 %387, 88
  %532 = icmp ult i64 %531, %232
  br i1 %532, label %386, label %380

533:                                              ; preds = %540, %62, %227, %380
  %534 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %535 = icmp sgt i32 %534, 0
  br i1 %535, label %536, label %1005

536:                                              ; preds = %533
  %537 = zext i32 %534 to i64
  %538 = trunc i64 %41 to i32
  %539 = mul nsw i32 %534, %538
  br label %693

540:                                              ; preds = %381, %540
  %541 = phi i64 [ 0, %381 ], [ %685, %540 ]
  %542 = getelementptr inbounds float, float* %5, i64 %541
  %543 = getelementptr inbounds float, float* %542, i64 8
  %544 = bitcast float* %543 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %544, i32 0, i32 1, i32 1)
  %545 = getelementptr inbounds float, float* %3, i64 %541
  %546 = getelementptr inbounds float, float* %545, i64 8
  %547 = bitcast float* %546 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %547, i32 0, i32 1, i32 1)
  %548 = getelementptr inbounds float, float* %542, i64 16
  %549 = bitcast float* %548 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %549, i32 0, i32 1, i32 1)
  %550 = getelementptr inbounds float, float* %545, i64 16
  %551 = bitcast float* %550 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %551, i32 0, i32 1, i32 1)
  %552 = getelementptr inbounds float, float* %542, i64 24
  %553 = bitcast float* %552 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %553, i32 0, i32 1, i32 1)
  %554 = getelementptr inbounds float, float* %545, i64 24
  %555 = bitcast float* %554 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %555, i32 0, i32 1, i32 1)
  %556 = getelementptr inbounds float, float* %542, i64 32
  %557 = bitcast float* %556 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %557, i32 0, i32 1, i32 1)
  %558 = getelementptr inbounds float, float* %545, i64 32
  %559 = bitcast float* %558 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %559, i32 0, i32 1, i32 1)
  %560 = getelementptr inbounds float, float* %542, i64 40
  %561 = bitcast float* %560 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %561, i32 0, i32 1, i32 1)
  %562 = getelementptr inbounds float, float* %545, i64 40
  %563 = bitcast float* %562 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %563, i32 0, i32 1, i32 1)
  %564 = getelementptr inbounds float, float* %542, i64 48
  %565 = bitcast float* %564 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %565, i32 0, i32 1, i32 1)
  %566 = getelementptr inbounds float, float* %545, i64 48
  %567 = bitcast float* %566 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %567, i32 0, i32 1, i32 1)
  %568 = getelementptr inbounds float, float* %542, i64 56
  %569 = bitcast float* %568 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %569, i32 0, i32 1, i32 1)
  %570 = getelementptr inbounds float, float* %545, i64 56
  %571 = bitcast float* %570 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %571, i32 0, i32 1, i32 1)
  %572 = getelementptr inbounds float, float* %542, i64 64
  %573 = bitcast float* %572 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %573, i32 0, i32 1, i32 1)
  %574 = getelementptr inbounds float, float* %545, i64 64
  %575 = bitcast float* %574 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %575, i32 0, i32 1, i32 1)
  %576 = getelementptr inbounds float, float* %542, i64 72
  %577 = bitcast float* %576 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %577, i32 0, i32 1, i32 1)
  %578 = getelementptr inbounds float, float* %545, i64 72
  %579 = bitcast float* %578 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %579, i32 0, i32 1, i32 1)
  %580 = getelementptr inbounds float, float* %542, i64 80
  %581 = bitcast float* %580 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %581, i32 0, i32 1, i32 1)
  %582 = getelementptr inbounds float, float* %545, i64 80
  %583 = bitcast float* %582 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %583, i32 0, i32 1, i32 1)
  %584 = getelementptr inbounds float, float* %542, i64 88
  %585 = bitcast float* %584 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %585, i32 0, i32 1, i32 1)
  %586 = getelementptr inbounds float, float* %545, i64 88
  %587 = bitcast float* %586 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %587, i32 0, i32 1, i32 1)
  %588 = bitcast float* %542 to <8 x float>*
  %589 = load <8 x float>, <8 x float>* %588, align 1, !tbaa !12
  %590 = add nuw nsw i64 %541, 8
  %591 = getelementptr inbounds float, float* %5, i64 %590
  %592 = bitcast float* %591 to <8 x float>*
  %593 = load <8 x float>, <8 x float>* %592, align 1, !tbaa !12
  %594 = add nuw nsw i64 %541, 16
  %595 = getelementptr inbounds float, float* %5, i64 %594
  %596 = bitcast float* %595 to <8 x float>*
  %597 = load <8 x float>, <8 x float>* %596, align 1, !tbaa !12
  %598 = add nuw nsw i64 %541, 24
  %599 = getelementptr inbounds float, float* %5, i64 %598
  %600 = bitcast float* %599 to <8 x float>*
  %601 = load <8 x float>, <8 x float>* %600, align 1, !tbaa !12
  %602 = add nuw nsw i64 %541, 32
  %603 = getelementptr inbounds float, float* %5, i64 %602
  %604 = bitcast float* %603 to <8 x float>*
  %605 = load <8 x float>, <8 x float>* %604, align 1, !tbaa !12
  %606 = add nuw nsw i64 %541, 40
  %607 = getelementptr inbounds float, float* %5, i64 %606
  %608 = bitcast float* %607 to <8 x float>*
  %609 = load <8 x float>, <8 x float>* %608, align 1, !tbaa !12
  %610 = add nuw nsw i64 %541, 48
  %611 = getelementptr inbounds float, float* %5, i64 %610
  %612 = bitcast float* %611 to <8 x float>*
  %613 = load <8 x float>, <8 x float>* %612, align 1, !tbaa !12
  %614 = add nuw nsw i64 %541, 56
  %615 = getelementptr inbounds float, float* %5, i64 %614
  %616 = bitcast float* %615 to <8 x float>*
  %617 = load <8 x float>, <8 x float>* %616, align 1, !tbaa !12
  %618 = add nuw nsw i64 %541, 64
  %619 = getelementptr inbounds float, float* %5, i64 %618
  %620 = bitcast float* %619 to <8 x float>*
  %621 = load <8 x float>, <8 x float>* %620, align 1, !tbaa !12
  %622 = add nuw nsw i64 %541, 72
  %623 = getelementptr inbounds float, float* %5, i64 %622
  %624 = bitcast float* %623 to <8 x float>*
  %625 = load <8 x float>, <8 x float>* %624, align 1, !tbaa !12
  %626 = add nuw nsw i64 %541, 80
  %627 = getelementptr inbounds float, float* %5, i64 %626
  %628 = bitcast float* %627 to <8 x float>*
  %629 = load <8 x float>, <8 x float>* %628, align 1, !tbaa !12
  %630 = add nsw i64 %541, %384
  %631 = getelementptr inbounds float, float* %3, i64 %630
  %632 = bitcast float* %631 to <8 x float>*
  %633 = load <8 x float>, <8 x float>* %632, align 1, !tbaa !12
  %634 = add nsw i64 %630, 8
  %635 = getelementptr inbounds float, float* %3, i64 %634
  %636 = bitcast float* %635 to <8 x float>*
  %637 = load <8 x float>, <8 x float>* %636, align 1, !tbaa !12
  %638 = add nsw i64 %630, 16
  %639 = getelementptr inbounds float, float* %3, i64 %638
  %640 = bitcast float* %639 to <8 x float>*
  %641 = load <8 x float>, <8 x float>* %640, align 1, !tbaa !12
  %642 = add nsw i64 %630, 24
  %643 = getelementptr inbounds float, float* %3, i64 %642
  %644 = bitcast float* %643 to <8 x float>*
  %645 = load <8 x float>, <8 x float>* %644, align 1, !tbaa !12
  %646 = add nsw i64 %630, 32
  %647 = getelementptr inbounds float, float* %3, i64 %646
  %648 = bitcast float* %647 to <8 x float>*
  %649 = load <8 x float>, <8 x float>* %648, align 1, !tbaa !12
  %650 = add nsw i64 %630, 40
  %651 = getelementptr inbounds float, float* %3, i64 %650
  %652 = bitcast float* %651 to <8 x float>*
  %653 = load <8 x float>, <8 x float>* %652, align 1, !tbaa !12
  %654 = add nsw i64 %630, 48
  %655 = getelementptr inbounds float, float* %3, i64 %654
  %656 = bitcast float* %655 to <8 x float>*
  %657 = load <8 x float>, <8 x float>* %656, align 1, !tbaa !12
  %658 = add nsw i64 %630, 56
  %659 = getelementptr inbounds float, float* %3, i64 %658
  %660 = bitcast float* %659 to <8 x float>*
  %661 = load <8 x float>, <8 x float>* %660, align 1, !tbaa !12
  %662 = add nsw i64 %630, 64
  %663 = getelementptr inbounds float, float* %3, i64 %662
  %664 = bitcast float* %663 to <8 x float>*
  %665 = load <8 x float>, <8 x float>* %664, align 1, !tbaa !12
  %666 = add nsw i64 %630, 72
  %667 = getelementptr inbounds float, float* %3, i64 %666
  %668 = bitcast float* %667 to <8 x float>*
  %669 = load <8 x float>, <8 x float>* %668, align 1, !tbaa !12
  %670 = add nsw i64 %630, 80
  %671 = getelementptr inbounds float, float* %3, i64 %670
  %672 = bitcast float* %671 to <8 x float>*
  %673 = load <8 x float>, <8 x float>* %672, align 1, !tbaa !12
  %674 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %633, <8 x float> %40, <8 x float> %589) #10
  %675 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %637, <8 x float> %40, <8 x float> %593) #10
  %676 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %641, <8 x float> %40, <8 x float> %597) #10
  %677 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %645, <8 x float> %40, <8 x float> %601) #10
  %678 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %649, <8 x float> %40, <8 x float> %605) #10
  %679 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %653, <8 x float> %40, <8 x float> %609) #10
  %680 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %657, <8 x float> %40, <8 x float> %613) #10
  %681 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %661, <8 x float> %40, <8 x float> %617) #10
  %682 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %665, <8 x float> %40, <8 x float> %621) #10
  %683 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %669, <8 x float> %40, <8 x float> %625) #10
  %684 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %673, <8 x float> %40, <8 x float> %629) #10
  store <8 x float> %674, <8 x float>* %588, align 1, !tbaa !12
  store <8 x float> %675, <8 x float>* %592, align 1, !tbaa !12
  store <8 x float> %676, <8 x float>* %596, align 1, !tbaa !12
  store <8 x float> %677, <8 x float>* %600, align 1, !tbaa !12
  store <8 x float> %678, <8 x float>* %604, align 1, !tbaa !12
  store <8 x float> %679, <8 x float>* %608, align 1, !tbaa !12
  store <8 x float> %680, <8 x float>* %612, align 1, !tbaa !12
  store <8 x float> %681, <8 x float>* %616, align 1, !tbaa !12
  store <8 x float> %682, <8 x float>* %620, align 1, !tbaa !12
  store <8 x float> %683, <8 x float>* %624, align 1, !tbaa !12
  store <8 x float> %684, <8 x float>* %628, align 1, !tbaa !12
  %685 = add nuw nsw i64 %541, 88
  %686 = icmp ult i64 %685, %385
  br i1 %686, label %540, label %533

687:                                              ; preds = %693
  br i1 %535, label %688, label %1005

688:                                              ; preds = %687
  %689 = trunc i64 %46 to i32
  %690 = mul nsw i32 %534, %689
  %691 = sext i32 %690 to i64
  %692 = zext i32 %534 to i64
  br label %858

693:                                              ; preds = %536, %693
  %694 = phi i64 [ 0, %536 ], [ %850, %693 ]
  %695 = getelementptr inbounds float, float* %5, i64 %694
  %696 = getelementptr inbounds float, float* %695, i64 8
  %697 = bitcast float* %696 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %697, i32 0, i32 1, i32 1)
  %698 = getelementptr inbounds float, float* %3, i64 %694
  %699 = getelementptr inbounds float, float* %698, i64 8
  %700 = bitcast float* %699 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %700, i32 0, i32 1, i32 1)
  %701 = getelementptr inbounds float, float* %695, i64 16
  %702 = bitcast float* %701 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %702, i32 0, i32 1, i32 1)
  %703 = getelementptr inbounds float, float* %698, i64 16
  %704 = bitcast float* %703 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %704, i32 0, i32 1, i32 1)
  %705 = getelementptr inbounds float, float* %695, i64 24
  %706 = bitcast float* %705 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %706, i32 0, i32 1, i32 1)
  %707 = getelementptr inbounds float, float* %698, i64 24
  %708 = bitcast float* %707 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %708, i32 0, i32 1, i32 1)
  %709 = getelementptr inbounds float, float* %695, i64 32
  %710 = bitcast float* %709 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %710, i32 0, i32 1, i32 1)
  %711 = getelementptr inbounds float, float* %698, i64 32
  %712 = bitcast float* %711 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %712, i32 0, i32 1, i32 1)
  %713 = getelementptr inbounds float, float* %695, i64 40
  %714 = bitcast float* %713 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %714, i32 0, i32 1, i32 1)
  %715 = getelementptr inbounds float, float* %698, i64 40
  %716 = bitcast float* %715 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %716, i32 0, i32 1, i32 1)
  %717 = getelementptr inbounds float, float* %695, i64 48
  %718 = bitcast float* %717 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %718, i32 0, i32 1, i32 1)
  %719 = getelementptr inbounds float, float* %698, i64 48
  %720 = bitcast float* %719 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %720, i32 0, i32 1, i32 1)
  %721 = getelementptr inbounds float, float* %695, i64 56
  %722 = bitcast float* %721 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %722, i32 0, i32 1, i32 1)
  %723 = getelementptr inbounds float, float* %698, i64 56
  %724 = bitcast float* %723 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %724, i32 0, i32 1, i32 1)
  %725 = getelementptr inbounds float, float* %695, i64 64
  %726 = bitcast float* %725 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %726, i32 0, i32 1, i32 1)
  %727 = getelementptr inbounds float, float* %698, i64 64
  %728 = bitcast float* %727 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %728, i32 0, i32 1, i32 1)
  %729 = getelementptr inbounds float, float* %695, i64 72
  %730 = bitcast float* %729 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %730, i32 0, i32 1, i32 1)
  %731 = getelementptr inbounds float, float* %698, i64 72
  %732 = bitcast float* %731 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %732, i32 0, i32 1, i32 1)
  %733 = getelementptr inbounds float, float* %695, i64 80
  %734 = bitcast float* %733 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %734, i32 0, i32 1, i32 1)
  %735 = getelementptr inbounds float, float* %698, i64 80
  %736 = bitcast float* %735 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %736, i32 0, i32 1, i32 1)
  %737 = getelementptr inbounds float, float* %695, i64 88
  %738 = bitcast float* %737 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %738, i32 0, i32 1, i32 1)
  %739 = getelementptr inbounds float, float* %698, i64 88
  %740 = bitcast float* %739 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %740, i32 0, i32 1, i32 1)
  %741 = bitcast float* %695 to <8 x float>*
  %742 = load <8 x float>, <8 x float>* %741, align 1, !tbaa !12
  %743 = add nuw nsw i64 %694, 8
  %744 = getelementptr inbounds float, float* %5, i64 %743
  %745 = bitcast float* %744 to <8 x float>*
  %746 = load <8 x float>, <8 x float>* %745, align 1, !tbaa !12
  %747 = add nuw nsw i64 %694, 16
  %748 = getelementptr inbounds float, float* %5, i64 %747
  %749 = bitcast float* %748 to <8 x float>*
  %750 = load <8 x float>, <8 x float>* %749, align 1, !tbaa !12
  %751 = add nuw nsw i64 %694, 24
  %752 = getelementptr inbounds float, float* %5, i64 %751
  %753 = bitcast float* %752 to <8 x float>*
  %754 = load <8 x float>, <8 x float>* %753, align 1, !tbaa !12
  %755 = add nuw nsw i64 %694, 32
  %756 = getelementptr inbounds float, float* %5, i64 %755
  %757 = bitcast float* %756 to <8 x float>*
  %758 = load <8 x float>, <8 x float>* %757, align 1, !tbaa !12
  %759 = add nuw nsw i64 %694, 40
  %760 = getelementptr inbounds float, float* %5, i64 %759
  %761 = bitcast float* %760 to <8 x float>*
  %762 = load <8 x float>, <8 x float>* %761, align 1, !tbaa !12
  %763 = add nuw nsw i64 %694, 48
  %764 = getelementptr inbounds float, float* %5, i64 %763
  %765 = bitcast float* %764 to <8 x float>*
  %766 = load <8 x float>, <8 x float>* %765, align 1, !tbaa !12
  %767 = add nuw nsw i64 %694, 56
  %768 = getelementptr inbounds float, float* %5, i64 %767
  %769 = bitcast float* %768 to <8 x float>*
  %770 = load <8 x float>, <8 x float>* %769, align 1, !tbaa !12
  %771 = add nuw nsw i64 %694, 64
  %772 = getelementptr inbounds float, float* %5, i64 %771
  %773 = bitcast float* %772 to <8 x float>*
  %774 = load <8 x float>, <8 x float>* %773, align 1, !tbaa !12
  %775 = add nuw nsw i64 %694, 72
  %776 = getelementptr inbounds float, float* %5, i64 %775
  %777 = bitcast float* %776 to <8 x float>*
  %778 = load <8 x float>, <8 x float>* %777, align 1, !tbaa !12
  %779 = add nuw nsw i64 %694, 80
  %780 = getelementptr inbounds float, float* %5, i64 %779
  %781 = bitcast float* %780 to <8 x float>*
  %782 = load <8 x float>, <8 x float>* %781, align 1, !tbaa !12
  %783 = trunc i64 %694 to i32
  %784 = add nsw i32 %539, %783
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds float, float* %3, i64 %785
  %787 = bitcast float* %786 to <8 x float>*
  %788 = load <8 x float>, <8 x float>* %787, align 1, !tbaa !12
  %789 = add nsw i32 %784, 8
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds float, float* %3, i64 %790
  %792 = bitcast float* %791 to <8 x float>*
  %793 = load <8 x float>, <8 x float>* %792, align 1, !tbaa !12
  %794 = add nsw i32 %784, 16
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds float, float* %3, i64 %795
  %797 = bitcast float* %796 to <8 x float>*
  %798 = load <8 x float>, <8 x float>* %797, align 1, !tbaa !12
  %799 = add nsw i32 %784, 24
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds float, float* %3, i64 %800
  %802 = bitcast float* %801 to <8 x float>*
  %803 = load <8 x float>, <8 x float>* %802, align 1, !tbaa !12
  %804 = add nsw i32 %784, 32
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds float, float* %3, i64 %805
  %807 = bitcast float* %806 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 1, !tbaa !12
  %809 = add nsw i32 %784, 40
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds float, float* %3, i64 %810
  %812 = bitcast float* %811 to <8 x float>*
  %813 = load <8 x float>, <8 x float>* %812, align 1, !tbaa !12
  %814 = add nsw i32 %784, 48
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds float, float* %3, i64 %815
  %817 = bitcast float* %816 to <8 x float>*
  %818 = load <8 x float>, <8 x float>* %817, align 1, !tbaa !12
  %819 = add nsw i32 %784, 56
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds float, float* %3, i64 %820
  %822 = bitcast float* %821 to <8 x float>*
  %823 = load <8 x float>, <8 x float>* %822, align 1, !tbaa !12
  %824 = add nsw i32 %784, 64
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds float, float* %3, i64 %825
  %827 = bitcast float* %826 to <8 x float>*
  %828 = load <8 x float>, <8 x float>* %827, align 1, !tbaa !12
  %829 = add nsw i32 %784, 72
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds float, float* %3, i64 %830
  %832 = bitcast float* %831 to <8 x float>*
  %833 = load <8 x float>, <8 x float>* %832, align 1, !tbaa !12
  %834 = add nsw i32 %784, 80
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds float, float* %3, i64 %835
  %837 = bitcast float* %836 to <8 x float>*
  %838 = load <8 x float>, <8 x float>* %837, align 1, !tbaa !12
  %839 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %788, <8 x float> %45, <8 x float> %742) #10
  %840 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %793, <8 x float> %45, <8 x float> %746) #10
  %841 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %798, <8 x float> %45, <8 x float> %750) #10
  %842 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %803, <8 x float> %45, <8 x float> %754) #10
  %843 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %808, <8 x float> %45, <8 x float> %758) #10
  %844 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %813, <8 x float> %45, <8 x float> %762) #10
  %845 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %818, <8 x float> %45, <8 x float> %766) #10
  %846 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %823, <8 x float> %45, <8 x float> %770) #10
  %847 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %45, <8 x float> %774) #10
  %848 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %833, <8 x float> %45, <8 x float> %778) #10
  %849 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %838, <8 x float> %45, <8 x float> %782) #10
  store <8 x float> %839, <8 x float>* %741, align 1, !tbaa !12
  store <8 x float> %840, <8 x float>* %745, align 1, !tbaa !12
  store <8 x float> %841, <8 x float>* %749, align 1, !tbaa !12
  store <8 x float> %842, <8 x float>* %753, align 1, !tbaa !12
  store <8 x float> %843, <8 x float>* %757, align 1, !tbaa !12
  store <8 x float> %844, <8 x float>* %761, align 1, !tbaa !12
  store <8 x float> %845, <8 x float>* %765, align 1, !tbaa !12
  store <8 x float> %846, <8 x float>* %769, align 1, !tbaa !12
  store <8 x float> %847, <8 x float>* %773, align 1, !tbaa !12
  store <8 x float> %848, <8 x float>* %777, align 1, !tbaa !12
  store <8 x float> %849, <8 x float>* %781, align 1, !tbaa !12
  %850 = add nuw nsw i64 %694, 88
  %851 = icmp ult i64 %850, %537
  br i1 %851, label %693, label %687

852:                                              ; preds = %858
  br i1 %535, label %853, label %1005

853:                                              ; preds = %852
  %854 = trunc i64 %51 to i32
  %855 = mul nsw i32 %534, %854
  %856 = sext i32 %855 to i64
  %857 = zext i32 %534 to i64
  br label %1010

858:                                              ; preds = %688, %858
  %859 = phi i64 [ 0, %688 ], [ %1003, %858 ]
  %860 = getelementptr inbounds float, float* %5, i64 %859
  %861 = getelementptr inbounds float, float* %860, i64 8
  %862 = bitcast float* %861 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %862, i32 0, i32 1, i32 1)
  %863 = getelementptr inbounds float, float* %3, i64 %859
  %864 = getelementptr inbounds float, float* %863, i64 8
  %865 = bitcast float* %864 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %865, i32 0, i32 1, i32 1)
  %866 = getelementptr inbounds float, float* %860, i64 16
  %867 = bitcast float* %866 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %867, i32 0, i32 1, i32 1)
  %868 = getelementptr inbounds float, float* %863, i64 16
  %869 = bitcast float* %868 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %869, i32 0, i32 1, i32 1)
  %870 = getelementptr inbounds float, float* %860, i64 24
  %871 = bitcast float* %870 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %871, i32 0, i32 1, i32 1)
  %872 = getelementptr inbounds float, float* %863, i64 24
  %873 = bitcast float* %872 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %873, i32 0, i32 1, i32 1)
  %874 = getelementptr inbounds float, float* %860, i64 32
  %875 = bitcast float* %874 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %875, i32 0, i32 1, i32 1)
  %876 = getelementptr inbounds float, float* %863, i64 32
  %877 = bitcast float* %876 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %877, i32 0, i32 1, i32 1)
  %878 = getelementptr inbounds float, float* %860, i64 40
  %879 = bitcast float* %878 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %879, i32 0, i32 1, i32 1)
  %880 = getelementptr inbounds float, float* %863, i64 40
  %881 = bitcast float* %880 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %881, i32 0, i32 1, i32 1)
  %882 = getelementptr inbounds float, float* %860, i64 48
  %883 = bitcast float* %882 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %883, i32 0, i32 1, i32 1)
  %884 = getelementptr inbounds float, float* %863, i64 48
  %885 = bitcast float* %884 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %885, i32 0, i32 1, i32 1)
  %886 = getelementptr inbounds float, float* %860, i64 56
  %887 = bitcast float* %886 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %887, i32 0, i32 1, i32 1)
  %888 = getelementptr inbounds float, float* %863, i64 56
  %889 = bitcast float* %888 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %889, i32 0, i32 1, i32 1)
  %890 = getelementptr inbounds float, float* %860, i64 64
  %891 = bitcast float* %890 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %891, i32 0, i32 1, i32 1)
  %892 = getelementptr inbounds float, float* %863, i64 64
  %893 = bitcast float* %892 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %893, i32 0, i32 1, i32 1)
  %894 = getelementptr inbounds float, float* %860, i64 72
  %895 = bitcast float* %894 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %895, i32 0, i32 1, i32 1)
  %896 = getelementptr inbounds float, float* %863, i64 72
  %897 = bitcast float* %896 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %897, i32 0, i32 1, i32 1)
  %898 = getelementptr inbounds float, float* %860, i64 80
  %899 = bitcast float* %898 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %899, i32 0, i32 1, i32 1)
  %900 = getelementptr inbounds float, float* %863, i64 80
  %901 = bitcast float* %900 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %901, i32 0, i32 1, i32 1)
  %902 = getelementptr inbounds float, float* %860, i64 88
  %903 = bitcast float* %902 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %903, i32 0, i32 1, i32 1)
  %904 = getelementptr inbounds float, float* %863, i64 88
  %905 = bitcast float* %904 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %905, i32 0, i32 1, i32 1)
  %906 = bitcast float* %860 to <8 x float>*
  %907 = load <8 x float>, <8 x float>* %906, align 1, !tbaa !12
  %908 = add nuw nsw i64 %859, 8
  %909 = getelementptr inbounds float, float* %5, i64 %908
  %910 = bitcast float* %909 to <8 x float>*
  %911 = load <8 x float>, <8 x float>* %910, align 1, !tbaa !12
  %912 = add nuw nsw i64 %859, 16
  %913 = getelementptr inbounds float, float* %5, i64 %912
  %914 = bitcast float* %913 to <8 x float>*
  %915 = load <8 x float>, <8 x float>* %914, align 1, !tbaa !12
  %916 = add nuw nsw i64 %859, 24
  %917 = getelementptr inbounds float, float* %5, i64 %916
  %918 = bitcast float* %917 to <8 x float>*
  %919 = load <8 x float>, <8 x float>* %918, align 1, !tbaa !12
  %920 = add nuw nsw i64 %859, 32
  %921 = getelementptr inbounds float, float* %5, i64 %920
  %922 = bitcast float* %921 to <8 x float>*
  %923 = load <8 x float>, <8 x float>* %922, align 1, !tbaa !12
  %924 = add nuw nsw i64 %859, 40
  %925 = getelementptr inbounds float, float* %5, i64 %924
  %926 = bitcast float* %925 to <8 x float>*
  %927 = load <8 x float>, <8 x float>* %926, align 1, !tbaa !12
  %928 = add nuw nsw i64 %859, 48
  %929 = getelementptr inbounds float, float* %5, i64 %928
  %930 = bitcast float* %929 to <8 x float>*
  %931 = load <8 x float>, <8 x float>* %930, align 1, !tbaa !12
  %932 = add nuw nsw i64 %859, 56
  %933 = getelementptr inbounds float, float* %5, i64 %932
  %934 = bitcast float* %933 to <8 x float>*
  %935 = load <8 x float>, <8 x float>* %934, align 1, !tbaa !12
  %936 = add nuw nsw i64 %859, 64
  %937 = getelementptr inbounds float, float* %5, i64 %936
  %938 = bitcast float* %937 to <8 x float>*
  %939 = load <8 x float>, <8 x float>* %938, align 1, !tbaa !12
  %940 = add nuw nsw i64 %859, 72
  %941 = getelementptr inbounds float, float* %5, i64 %940
  %942 = bitcast float* %941 to <8 x float>*
  %943 = load <8 x float>, <8 x float>* %942, align 1, !tbaa !12
  %944 = add nuw nsw i64 %859, 80
  %945 = getelementptr inbounds float, float* %5, i64 %944
  %946 = bitcast float* %945 to <8 x float>*
  %947 = load <8 x float>, <8 x float>* %946, align 1, !tbaa !12
  %948 = add nsw i64 %859, %691
  %949 = getelementptr inbounds float, float* %3, i64 %948
  %950 = bitcast float* %949 to <8 x float>*
  %951 = load <8 x float>, <8 x float>* %950, align 1, !tbaa !12
  %952 = add nsw i64 %948, 8
  %953 = getelementptr inbounds float, float* %3, i64 %952
  %954 = bitcast float* %953 to <8 x float>*
  %955 = load <8 x float>, <8 x float>* %954, align 1, !tbaa !12
  %956 = add nsw i64 %948, 16
  %957 = getelementptr inbounds float, float* %3, i64 %956
  %958 = bitcast float* %957 to <8 x float>*
  %959 = load <8 x float>, <8 x float>* %958, align 1, !tbaa !12
  %960 = add nsw i64 %948, 24
  %961 = getelementptr inbounds float, float* %3, i64 %960
  %962 = bitcast float* %961 to <8 x float>*
  %963 = load <8 x float>, <8 x float>* %962, align 1, !tbaa !12
  %964 = add nsw i64 %948, 32
  %965 = getelementptr inbounds float, float* %3, i64 %964
  %966 = bitcast float* %965 to <8 x float>*
  %967 = load <8 x float>, <8 x float>* %966, align 1, !tbaa !12
  %968 = add nsw i64 %948, 40
  %969 = getelementptr inbounds float, float* %3, i64 %968
  %970 = bitcast float* %969 to <8 x float>*
  %971 = load <8 x float>, <8 x float>* %970, align 1, !tbaa !12
  %972 = add nsw i64 %948, 48
  %973 = getelementptr inbounds float, float* %3, i64 %972
  %974 = bitcast float* %973 to <8 x float>*
  %975 = load <8 x float>, <8 x float>* %974, align 1, !tbaa !12
  %976 = add nsw i64 %948, 56
  %977 = getelementptr inbounds float, float* %3, i64 %976
  %978 = bitcast float* %977 to <8 x float>*
  %979 = load <8 x float>, <8 x float>* %978, align 1, !tbaa !12
  %980 = add nsw i64 %948, 64
  %981 = getelementptr inbounds float, float* %3, i64 %980
  %982 = bitcast float* %981 to <8 x float>*
  %983 = load <8 x float>, <8 x float>* %982, align 1, !tbaa !12
  %984 = add nsw i64 %948, 72
  %985 = getelementptr inbounds float, float* %3, i64 %984
  %986 = bitcast float* %985 to <8 x float>*
  %987 = load <8 x float>, <8 x float>* %986, align 1, !tbaa !12
  %988 = add nsw i64 %948, 80
  %989 = getelementptr inbounds float, float* %3, i64 %988
  %990 = bitcast float* %989 to <8 x float>*
  %991 = load <8 x float>, <8 x float>* %990, align 1, !tbaa !12
  %992 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %951, <8 x float> %50, <8 x float> %907) #10
  %993 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %955, <8 x float> %50, <8 x float> %911) #10
  %994 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %959, <8 x float> %50, <8 x float> %915) #10
  %995 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %963, <8 x float> %50, <8 x float> %919) #10
  %996 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %967, <8 x float> %50, <8 x float> %923) #10
  %997 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %971, <8 x float> %50, <8 x float> %927) #10
  %998 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %975, <8 x float> %50, <8 x float> %931) #10
  %999 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %50, <8 x float> %935) #10
  %1000 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %983, <8 x float> %50, <8 x float> %939) #10
  %1001 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %987, <8 x float> %50, <8 x float> %943) #10
  %1002 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %991, <8 x float> %50, <8 x float> %947) #10
  store <8 x float> %992, <8 x float>* %906, align 1, !tbaa !12
  store <8 x float> %993, <8 x float>* %910, align 1, !tbaa !12
  store <8 x float> %994, <8 x float>* %914, align 1, !tbaa !12
  store <8 x float> %995, <8 x float>* %918, align 1, !tbaa !12
  store <8 x float> %996, <8 x float>* %922, align 1, !tbaa !12
  store <8 x float> %997, <8 x float>* %926, align 1, !tbaa !12
  store <8 x float> %998, <8 x float>* %930, align 1, !tbaa !12
  store <8 x float> %999, <8 x float>* %934, align 1, !tbaa !12
  store <8 x float> %1000, <8 x float>* %938, align 1, !tbaa !12
  store <8 x float> %1001, <8 x float>* %942, align 1, !tbaa !12
  store <8 x float> %1002, <8 x float>* %946, align 1, !tbaa !12
  %1003 = add nuw nsw i64 %859, 88
  %1004 = icmp ult i64 %1003, %692
  br i1 %1004, label %858, label %852

1005:                                             ; preds = %1010, %20, %533, %687, %852
  %1006 = add nuw nsw i64 %21, 7
  %1007 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %1008 = sext i32 %1007 to i64
  %1009 = icmp slt i64 %1006, %1008
  br i1 %1009, label %20, label %8

1010:                                             ; preds = %853, %1010
  %1011 = phi i64 [ 0, %853 ], [ %1155, %1010 ]
  %1012 = getelementptr inbounds float, float* %5, i64 %1011
  %1013 = getelementptr inbounds float, float* %1012, i64 8
  %1014 = bitcast float* %1013 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1014, i32 0, i32 1, i32 1)
  %1015 = getelementptr inbounds float, float* %3, i64 %1011
  %1016 = getelementptr inbounds float, float* %1015, i64 8
  %1017 = bitcast float* %1016 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1017, i32 0, i32 1, i32 1)
  %1018 = getelementptr inbounds float, float* %1012, i64 16
  %1019 = bitcast float* %1018 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1019, i32 0, i32 1, i32 1)
  %1020 = getelementptr inbounds float, float* %1015, i64 16
  %1021 = bitcast float* %1020 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1021, i32 0, i32 1, i32 1)
  %1022 = getelementptr inbounds float, float* %1012, i64 24
  %1023 = bitcast float* %1022 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1023, i32 0, i32 1, i32 1)
  %1024 = getelementptr inbounds float, float* %1015, i64 24
  %1025 = bitcast float* %1024 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1025, i32 0, i32 1, i32 1)
  %1026 = getelementptr inbounds float, float* %1012, i64 32
  %1027 = bitcast float* %1026 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1027, i32 0, i32 1, i32 1)
  %1028 = getelementptr inbounds float, float* %1015, i64 32
  %1029 = bitcast float* %1028 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1029, i32 0, i32 1, i32 1)
  %1030 = getelementptr inbounds float, float* %1012, i64 40
  %1031 = bitcast float* %1030 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1031, i32 0, i32 1, i32 1)
  %1032 = getelementptr inbounds float, float* %1015, i64 40
  %1033 = bitcast float* %1032 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1033, i32 0, i32 1, i32 1)
  %1034 = getelementptr inbounds float, float* %1012, i64 48
  %1035 = bitcast float* %1034 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1035, i32 0, i32 1, i32 1)
  %1036 = getelementptr inbounds float, float* %1015, i64 48
  %1037 = bitcast float* %1036 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1037, i32 0, i32 1, i32 1)
  %1038 = getelementptr inbounds float, float* %1012, i64 56
  %1039 = bitcast float* %1038 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1039, i32 0, i32 1, i32 1)
  %1040 = getelementptr inbounds float, float* %1015, i64 56
  %1041 = bitcast float* %1040 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1041, i32 0, i32 1, i32 1)
  %1042 = getelementptr inbounds float, float* %1012, i64 64
  %1043 = bitcast float* %1042 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1043, i32 0, i32 1, i32 1)
  %1044 = getelementptr inbounds float, float* %1015, i64 64
  %1045 = bitcast float* %1044 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1045, i32 0, i32 1, i32 1)
  %1046 = getelementptr inbounds float, float* %1012, i64 72
  %1047 = bitcast float* %1046 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1047, i32 0, i32 1, i32 1)
  %1048 = getelementptr inbounds float, float* %1015, i64 72
  %1049 = bitcast float* %1048 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1049, i32 0, i32 1, i32 1)
  %1050 = getelementptr inbounds float, float* %1012, i64 80
  %1051 = bitcast float* %1050 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1051, i32 0, i32 1, i32 1)
  %1052 = getelementptr inbounds float, float* %1015, i64 80
  %1053 = bitcast float* %1052 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1053, i32 0, i32 1, i32 1)
  %1054 = getelementptr inbounds float, float* %1012, i64 88
  %1055 = bitcast float* %1054 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1055, i32 0, i32 1, i32 1)
  %1056 = getelementptr inbounds float, float* %1015, i64 88
  %1057 = bitcast float* %1056 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1057, i32 0, i32 1, i32 1)
  %1058 = bitcast float* %1012 to <8 x float>*
  %1059 = load <8 x float>, <8 x float>* %1058, align 1, !tbaa !12
  %1060 = add nuw nsw i64 %1011, 8
  %1061 = getelementptr inbounds float, float* %5, i64 %1060
  %1062 = bitcast float* %1061 to <8 x float>*
  %1063 = load <8 x float>, <8 x float>* %1062, align 1, !tbaa !12
  %1064 = add nuw nsw i64 %1011, 16
  %1065 = getelementptr inbounds float, float* %5, i64 %1064
  %1066 = bitcast float* %1065 to <8 x float>*
  %1067 = load <8 x float>, <8 x float>* %1066, align 1, !tbaa !12
  %1068 = add nuw nsw i64 %1011, 24
  %1069 = getelementptr inbounds float, float* %5, i64 %1068
  %1070 = bitcast float* %1069 to <8 x float>*
  %1071 = load <8 x float>, <8 x float>* %1070, align 1, !tbaa !12
  %1072 = add nuw nsw i64 %1011, 32
  %1073 = getelementptr inbounds float, float* %5, i64 %1072
  %1074 = bitcast float* %1073 to <8 x float>*
  %1075 = load <8 x float>, <8 x float>* %1074, align 1, !tbaa !12
  %1076 = add nuw nsw i64 %1011, 40
  %1077 = getelementptr inbounds float, float* %5, i64 %1076
  %1078 = bitcast float* %1077 to <8 x float>*
  %1079 = load <8 x float>, <8 x float>* %1078, align 1, !tbaa !12
  %1080 = add nuw nsw i64 %1011, 48
  %1081 = getelementptr inbounds float, float* %5, i64 %1080
  %1082 = bitcast float* %1081 to <8 x float>*
  %1083 = load <8 x float>, <8 x float>* %1082, align 1, !tbaa !12
  %1084 = add nuw nsw i64 %1011, 56
  %1085 = getelementptr inbounds float, float* %5, i64 %1084
  %1086 = bitcast float* %1085 to <8 x float>*
  %1087 = load <8 x float>, <8 x float>* %1086, align 1, !tbaa !12
  %1088 = add nuw nsw i64 %1011, 64
  %1089 = getelementptr inbounds float, float* %5, i64 %1088
  %1090 = bitcast float* %1089 to <8 x float>*
  %1091 = load <8 x float>, <8 x float>* %1090, align 1, !tbaa !12
  %1092 = add nuw nsw i64 %1011, 72
  %1093 = getelementptr inbounds float, float* %5, i64 %1092
  %1094 = bitcast float* %1093 to <8 x float>*
  %1095 = load <8 x float>, <8 x float>* %1094, align 1, !tbaa !12
  %1096 = add nuw nsw i64 %1011, 80
  %1097 = getelementptr inbounds float, float* %5, i64 %1096
  %1098 = bitcast float* %1097 to <8 x float>*
  %1099 = load <8 x float>, <8 x float>* %1098, align 1, !tbaa !12
  %1100 = add nsw i64 %1011, %856
  %1101 = getelementptr inbounds float, float* %3, i64 %1100
  %1102 = bitcast float* %1101 to <8 x float>*
  %1103 = load <8 x float>, <8 x float>* %1102, align 1, !tbaa !12
  %1104 = add nsw i64 %1100, 8
  %1105 = getelementptr inbounds float, float* %3, i64 %1104
  %1106 = bitcast float* %1105 to <8 x float>*
  %1107 = load <8 x float>, <8 x float>* %1106, align 1, !tbaa !12
  %1108 = add nsw i64 %1100, 16
  %1109 = getelementptr inbounds float, float* %3, i64 %1108
  %1110 = bitcast float* %1109 to <8 x float>*
  %1111 = load <8 x float>, <8 x float>* %1110, align 1, !tbaa !12
  %1112 = add nsw i64 %1100, 24
  %1113 = getelementptr inbounds float, float* %3, i64 %1112
  %1114 = bitcast float* %1113 to <8 x float>*
  %1115 = load <8 x float>, <8 x float>* %1114, align 1, !tbaa !12
  %1116 = add nsw i64 %1100, 32
  %1117 = getelementptr inbounds float, float* %3, i64 %1116
  %1118 = bitcast float* %1117 to <8 x float>*
  %1119 = load <8 x float>, <8 x float>* %1118, align 1, !tbaa !12
  %1120 = add nsw i64 %1100, 40
  %1121 = getelementptr inbounds float, float* %3, i64 %1120
  %1122 = bitcast float* %1121 to <8 x float>*
  %1123 = load <8 x float>, <8 x float>* %1122, align 1, !tbaa !12
  %1124 = add nsw i64 %1100, 48
  %1125 = getelementptr inbounds float, float* %3, i64 %1124
  %1126 = bitcast float* %1125 to <8 x float>*
  %1127 = load <8 x float>, <8 x float>* %1126, align 1, !tbaa !12
  %1128 = add nsw i64 %1100, 56
  %1129 = getelementptr inbounds float, float* %3, i64 %1128
  %1130 = bitcast float* %1129 to <8 x float>*
  %1131 = load <8 x float>, <8 x float>* %1130, align 1, !tbaa !12
  %1132 = add nsw i64 %1100, 64
  %1133 = getelementptr inbounds float, float* %3, i64 %1132
  %1134 = bitcast float* %1133 to <8 x float>*
  %1135 = load <8 x float>, <8 x float>* %1134, align 1, !tbaa !12
  %1136 = add nsw i64 %1100, 72
  %1137 = getelementptr inbounds float, float* %3, i64 %1136
  %1138 = bitcast float* %1137 to <8 x float>*
  %1139 = load <8 x float>, <8 x float>* %1138, align 1, !tbaa !12
  %1140 = add nsw i64 %1100, 80
  %1141 = getelementptr inbounds float, float* %3, i64 %1140
  %1142 = bitcast float* %1141 to <8 x float>*
  %1143 = load <8 x float>, <8 x float>* %1142, align 1, !tbaa !12
  %1144 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1103, <8 x float> %55, <8 x float> %1059) #10
  %1145 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1107, <8 x float> %55, <8 x float> %1063) #10
  %1146 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1111, <8 x float> %55, <8 x float> %1067) #10
  %1147 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1115, <8 x float> %55, <8 x float> %1071) #10
  %1148 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1119, <8 x float> %55, <8 x float> %1075) #10
  %1149 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1123, <8 x float> %55, <8 x float> %1079) #10
  %1150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1127, <8 x float> %55, <8 x float> %1083) #10
  %1151 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1131, <8 x float> %55, <8 x float> %1087) #10
  %1152 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1135, <8 x float> %55, <8 x float> %1091) #10
  %1153 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1139, <8 x float> %55, <8 x float> %1095) #10
  %1154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1143, <8 x float> %55, <8 x float> %1099) #10
  store <8 x float> %1144, <8 x float>* %1058, align 1, !tbaa !12
  store <8 x float> %1145, <8 x float>* %1062, align 1, !tbaa !12
  store <8 x float> %1146, <8 x float>* %1066, align 1, !tbaa !12
  store <8 x float> %1147, <8 x float>* %1070, align 1, !tbaa !12
  store <8 x float> %1148, <8 x float>* %1074, align 1, !tbaa !12
  store <8 x float> %1149, <8 x float>* %1078, align 1, !tbaa !12
  store <8 x float> %1150, <8 x float>* %1082, align 1, !tbaa !12
  store <8 x float> %1151, <8 x float>* %1086, align 1, !tbaa !12
  store <8 x float> %1152, <8 x float>* %1090, align 1, !tbaa !12
  store <8 x float> %1153, <8 x float>* %1094, align 1, !tbaa !12
  store <8 x float> %1154, <8 x float>* %1098, align 1, !tbaa !12
  %1155 = add nuw nsw i64 %1011, 88
  %1156 = icmp ult i64 %1155, %857
  br i1 %1156, label %1010, label %1005
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 161
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui11_uk7.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
