; ModuleID = 'codes/matvec_ui11_uk6.cpp'
source_filename = "codes/matvec_ui11_uk6.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN4mippL15InstructionTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@_ZN4mippL19InstructionFullTypeB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@_ZN4mippL18InstructionVersionB5cxx11E = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_ZL6BLOCKI = internal unnamed_addr global i32 256, align 4
@_ZL6BLOCKK = internal unnamed_addr global i32 256, align 4
@_ZL2vA = internal unnamed_addr global float* null, align 8
@_ZL2vB = internal unnamed_addr global float* null, align 8
@_ZL2vC = internal unnamed_addr global float* null, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matvec_ui11_uk6.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* noalias sret %0, %"class.std::__cxx11::basic_string"* dereferenceable(32) %1, i8* %2) local_unnamed_addr #5 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !10
  %11 = icmp ne i8* %8, null
  %12 = icmp eq i64 %10, 0
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %3
  tail call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #18
  unreachable

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %5 to i8*
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i64 %10, i64* %4, align 8, !tbaa !11
  %18 = icmp ugt i64 %10, 15
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %0, i64* nonnull dereferenceable(8) %4, i64 0)
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8, !tbaa !7
  %22 = load i64, i64* %4, align 8, !tbaa !11
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !12
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8* [ %20, %19 ], [ %16, %15 ]
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  switch i64 %10, label %29 [
    i64 1, label %27
    i64 0, label %30
  ]

27:                                               ; preds = %24
  %28 = load i8, i8* %8, align 1, !tbaa !12
  store i8 %28, i8* %25, align 1, !tbaa !12
  br label %30

29:                                               ; preds = %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %8, i64 %10, i1 false) #10
  br label %30

30:                                               ; preds = %24, %27, %29
  %31 = load i64, i64* %4, align 8, !tbaa !11
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %31, i64* %32, align 8, !tbaa !10
  %33 = load i8*, i8** %26, align 8, !tbaa !7
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8 0, i8* %34, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %35 = call i64 @strlen(i8* nonnull dereferenceable(1) %2) #10
  %36 = load i64, i64* %32, align 8, !tbaa !10
  %37 = sub i64 4611686018427387903, %36
  %38 = icmp ult i64 %37, %35
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #18
          to label %40 unwind label %43

40:                                               ; preds = %39
  unreachable

41:                                               ; preds = %30
  %42 = invoke dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull %0, i8* %2, i64 %35)
          to label %49 unwind label %43

43:                                               ; preds = %41, %39
  %44 = landingpad { i8*, i32 }
          cleanup
  %45 = load i8*, i8** %26, align 8, !tbaa !7
  %46 = icmp eq i8* %45, %16
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  call void @_ZdlPv(i8* %45) #10
  br label %48

48:                                               ; preds = %43, %47
  resume { i8*, i32 } %44

49:                                               ; preds = %41
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @_Z4initv() local_unnamed_addr #6 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = srem i32 %1, 88
  %3 = sub i32 %1, %2
  store i32 %3, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %4 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %5 = srem i32 %4, 48
  %6 = sub i32 %4, %5
  store i32 %6, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = sext i32 %3 to i64
  %8 = shl nsw i64 %7, 2
  %9 = sext i32 %6 to i64
  %10 = mul i64 %8, %9
  %11 = tail call noalias i8* @valloc(i64 %10) #10
  store i8* %11, i8** bitcast (float** @_ZL2vA to i8**), align 8, !tbaa !15
  %12 = shl nsw i64 %9, 2
  %13 = tail call noalias i8* @valloc(i64 %12) #10
  store i8* %13, i8** bitcast (float** @_ZL2vB to i8**), align 8, !tbaa !15
  %14 = tail call noalias i8* @valloc(i64 %8) #10
  store i8* %14, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @valloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @_Z10init_benchv() local_unnamed_addr #8 {
  %1 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %2 = icmp sgt i32 %1, 0
  %3 = load i32, i32* @_ZL6BLOCKK, align 4
  br i1 %2, label %4, label %16

4:                                                ; preds = %0
  %5 = icmp sgt i32 %3, 0
  %6 = load float*, float** @_ZL2vA, align 8
  %7 = sext i32 %3 to i64
  %8 = zext i32 %1 to i64
  %9 = zext i32 %3 to i64
  br label %10

10:                                               ; preds = %4, %21
  %11 = phi i64 [ 0, %4 ], [ %22, %21 ]
  br i1 %5, label %12, label %21

12:                                               ; preds = %10
  %13 = trunc i64 %11 to i32
  %14 = shl i32 %13, 1
  %15 = mul nsw i64 %11, %7
  br label %24

16:                                               ; preds = %21, %0
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %16
  %19 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %20 = zext i32 %3 to i64
  br label %38

21:                                               ; preds = %24, %10
  %22 = add nuw nsw i64 %11, 1
  %23 = icmp ult i64 %22, %8
  br i1 %23, label %10, label %16, !llvm.loop !16

24:                                               ; preds = %24, %12
  %25 = phi i64 [ 0, %12 ], [ %31, %24 ]
  %26 = trunc i64 %25 to i32
  %27 = add i32 %14, %26
  %28 = sitofp i32 %27 to float
  %29 = add nsw i64 %15, %25
  %30 = getelementptr inbounds float, float* %6, i64 %29
  store float %28, float* %30, align 4, !tbaa !18
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %9
  br i1 %32, label %21, label %24, !llvm.loop !20

33:                                               ; preds = %38, %16
  br i1 %2, label %34, label %45

34:                                               ; preds = %33
  %35 = load i8*, i8** bitcast (float** @_ZL2vC to i8**), align 8, !tbaa !15
  %36 = zext i32 %1 to i64
  %37 = shl nuw nsw i64 %36, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %37, i1 false)
  br label %45

38:                                               ; preds = %18, %38
  %39 = phi i64 [ 0, %18 ], [ %43, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds float, float* %19, i64 %39
  store float %41, float* %42, align 4, !tbaa !18
  %43 = add nuw nsw i64 %39, 1
  %44 = icmp ult i64 %43, %20
  br i1 %44, label %38, label %33, !llvm.loop !21

45:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: uwtable
define dso_local float @_Z5benchv() local_unnamed_addr #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i64 @llvm.x86.rdtsc()
  %2 = uitofp i64 %1 to double
  %3 = load float*, float** @_ZL2vA, align 8, !tbaa !15
  %4 = load float*, float** @_ZL2vB, align 8, !tbaa !15
  %5 = load float*, float** @_ZL2vC, align 8, !tbaa !15
  %6 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %847, %0
  %9 = tail call i64 @llvm.x86.rdtsc()
  %10 = uitofp i64 %9 to double
  %11 = fsub double %10, %2
  %12 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %13 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %14 = shl i32 %13, 1
  %15 = add nsw i32 %14, -1
  %16 = mul nsw i32 %15, %12
  %17 = sitofp i32 %16 to float
  %18 = fptrunc double %11 to float
  %19 = fdiv float %17, %18
  ret float %19

20:                                               ; preds = %0, %847
  %21 = phi i64 [ %848, %847 ], [ 0, %0 ]
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !18
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = or i64 %21, 1
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !18
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = add nuw nsw i64 %21, 2
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !18
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = add nuw nsw i64 %21, 3
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !18
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = add nuw nsw i64 %21, 4
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !18
  %44 = insertelement <8 x float> undef, float %43, i32 0
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  %46 = add nuw nsw i64 %21, 5
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !18
  %49 = insertelement <8 x float> undef, float %48, i32 0
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <8 x i32> zeroinitializer
  %51 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %847

53:                                               ; preds = %20
  %54 = zext i32 %51 to i64
  %55 = trunc i64 %21 to i32
  %56 = mul nsw i32 %51, %55
  br label %63

57:                                               ; preds = %63
  br i1 %52, label %58, label %528

58:                                               ; preds = %57
  %59 = trunc i64 %26 to i32
  %60 = mul nsw i32 %51, %59
  %61 = sext i32 %60 to i64
  %62 = zext i32 %51 to i64
  br label %228

63:                                               ; preds = %53, %63
  %64 = phi i64 [ 0, %53 ], [ %220, %63 ]
  %65 = getelementptr inbounds float, float* %5, i64 %64
  %66 = getelementptr inbounds float, float* %65, i64 8
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %67, i32 0, i32 1, i32 1)
  %68 = getelementptr inbounds float, float* %3, i64 %64
  %69 = getelementptr inbounds float, float* %68, i64 8
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %70, i32 0, i32 1, i32 1)
  %71 = getelementptr inbounds float, float* %65, i64 16
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %72, i32 0, i32 1, i32 1)
  %73 = getelementptr inbounds float, float* %68, i64 16
  %74 = bitcast float* %73 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %74, i32 0, i32 1, i32 1)
  %75 = getelementptr inbounds float, float* %65, i64 24
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %76, i32 0, i32 1, i32 1)
  %77 = getelementptr inbounds float, float* %68, i64 24
  %78 = bitcast float* %77 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %78, i32 0, i32 1, i32 1)
  %79 = getelementptr inbounds float, float* %65, i64 32
  %80 = bitcast float* %79 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %80, i32 0, i32 1, i32 1)
  %81 = getelementptr inbounds float, float* %68, i64 32
  %82 = bitcast float* %81 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %82, i32 0, i32 1, i32 1)
  %83 = getelementptr inbounds float, float* %65, i64 40
  %84 = bitcast float* %83 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %84, i32 0, i32 1, i32 1)
  %85 = getelementptr inbounds float, float* %68, i64 40
  %86 = bitcast float* %85 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %86, i32 0, i32 1, i32 1)
  %87 = getelementptr inbounds float, float* %65, i64 48
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %88, i32 0, i32 1, i32 1)
  %89 = getelementptr inbounds float, float* %68, i64 48
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %90, i32 0, i32 1, i32 1)
  %91 = getelementptr inbounds float, float* %65, i64 56
  %92 = bitcast float* %91 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %92, i32 0, i32 1, i32 1)
  %93 = getelementptr inbounds float, float* %68, i64 56
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %94, i32 0, i32 1, i32 1)
  %95 = getelementptr inbounds float, float* %65, i64 64
  %96 = bitcast float* %95 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %96, i32 0, i32 1, i32 1)
  %97 = getelementptr inbounds float, float* %68, i64 64
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %98, i32 0, i32 1, i32 1)
  %99 = getelementptr inbounds float, float* %65, i64 72
  %100 = bitcast float* %99 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %100, i32 0, i32 1, i32 1)
  %101 = getelementptr inbounds float, float* %68, i64 72
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %102, i32 0, i32 1, i32 1)
  %103 = getelementptr inbounds float, float* %65, i64 80
  %104 = bitcast float* %103 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %104, i32 0, i32 1, i32 1)
  %105 = getelementptr inbounds float, float* %68, i64 80
  %106 = bitcast float* %105 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %106, i32 0, i32 1, i32 1)
  %107 = getelementptr inbounds float, float* %65, i64 88
  %108 = bitcast float* %107 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %108, i32 0, i32 1, i32 1)
  %109 = getelementptr inbounds float, float* %68, i64 88
  %110 = bitcast float* %109 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %110, i32 0, i32 1, i32 1)
  %111 = bitcast float* %65 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 1, !tbaa !12
  %113 = add nuw nsw i64 %64, 8
  %114 = getelementptr inbounds float, float* %5, i64 %113
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 1, !tbaa !12
  %117 = add nuw nsw i64 %64, 16
  %118 = getelementptr inbounds float, float* %5, i64 %117
  %119 = bitcast float* %118 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 1, !tbaa !12
  %121 = add nuw nsw i64 %64, 24
  %122 = getelementptr inbounds float, float* %5, i64 %121
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 1, !tbaa !12
  %125 = add nuw nsw i64 %64, 32
  %126 = getelementptr inbounds float, float* %5, i64 %125
  %127 = bitcast float* %126 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 1, !tbaa !12
  %129 = add nuw nsw i64 %64, 40
  %130 = getelementptr inbounds float, float* %5, i64 %129
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !tbaa !12
  %133 = add nuw nsw i64 %64, 48
  %134 = getelementptr inbounds float, float* %5, i64 %133
  %135 = bitcast float* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 1, !tbaa !12
  %137 = add nuw nsw i64 %64, 56
  %138 = getelementptr inbounds float, float* %5, i64 %137
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 1, !tbaa !12
  %141 = add nuw nsw i64 %64, 64
  %142 = getelementptr inbounds float, float* %5, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  %144 = load <8 x float>, <8 x float>* %143, align 1, !tbaa !12
  %145 = add nuw nsw i64 %64, 72
  %146 = getelementptr inbounds float, float* %5, i64 %145
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !tbaa !12
  %149 = add nuw nsw i64 %64, 80
  %150 = getelementptr inbounds float, float* %5, i64 %149
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 1, !tbaa !12
  %153 = trunc i64 %64 to i32
  %154 = add nsw i32 %56, %153
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds float, float* %3, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 1, !tbaa !12
  %159 = add nsw i32 %154, 8
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float* %3, i64 %160
  %162 = bitcast float* %161 to <8 x float>*
  %163 = load <8 x float>, <8 x float>* %162, align 1, !tbaa !12
  %164 = add nsw i32 %154, 16
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %3, i64 %165
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !tbaa !12
  %169 = add nsw i32 %154, 24
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds float, float* %3, i64 %170
  %172 = bitcast float* %171 to <8 x float>*
  %173 = load <8 x float>, <8 x float>* %172, align 1, !tbaa !12
  %174 = add nsw i32 %154, 32
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %3, i64 %175
  %177 = bitcast float* %176 to <8 x float>*
  %178 = load <8 x float>, <8 x float>* %177, align 1, !tbaa !12
  %179 = add nsw i32 %154, 40
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds float, float* %3, i64 %180
  %182 = bitcast float* %181 to <8 x float>*
  %183 = load <8 x float>, <8 x float>* %182, align 1, !tbaa !12
  %184 = add nsw i32 %154, 48
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds float, float* %3, i64 %185
  %187 = bitcast float* %186 to <8 x float>*
  %188 = load <8 x float>, <8 x float>* %187, align 1, !tbaa !12
  %189 = add nsw i32 %154, 56
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %3, i64 %190
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 1, !tbaa !12
  %194 = add nsw i32 %154, 64
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float* %3, i64 %195
  %197 = bitcast float* %196 to <8 x float>*
  %198 = load <8 x float>, <8 x float>* %197, align 1, !tbaa !12
  %199 = add nsw i32 %154, 72
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %3, i64 %200
  %202 = bitcast float* %201 to <8 x float>*
  %203 = load <8 x float>, <8 x float>* %202, align 1, !tbaa !12
  %204 = add nsw i32 %154, 80
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %3, i64 %205
  %207 = bitcast float* %206 to <8 x float>*
  %208 = load <8 x float>, <8 x float>* %207, align 1, !tbaa !12
  %209 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %158, <8 x float> %25, <8 x float> %112) #10
  %210 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %163, <8 x float> %25, <8 x float> %116) #10
  %211 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %25, <8 x float> %120) #10
  %212 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %25, <8 x float> %124) #10
  %213 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %25, <8 x float> %128) #10
  %214 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %183, <8 x float> %25, <8 x float> %132) #10
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %188, <8 x float> %25, <8 x float> %136) #10
  %216 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %193, <8 x float> %25, <8 x float> %140) #10
  %217 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %198, <8 x float> %25, <8 x float> %144) #10
  %218 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> %25, <8 x float> %148) #10
  %219 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %208, <8 x float> %25, <8 x float> %152) #10
  store <8 x float> %209, <8 x float>* %111, align 1, !tbaa !12
  store <8 x float> %210, <8 x float>* %115, align 1, !tbaa !12
  store <8 x float> %211, <8 x float>* %119, align 1, !tbaa !12
  store <8 x float> %212, <8 x float>* %123, align 1, !tbaa !12
  store <8 x float> %213, <8 x float>* %127, align 1, !tbaa !12
  store <8 x float> %214, <8 x float>* %131, align 1, !tbaa !12
  store <8 x float> %215, <8 x float>* %135, align 1, !tbaa !12
  store <8 x float> %216, <8 x float>* %139, align 1, !tbaa !12
  store <8 x float> %217, <8 x float>* %143, align 1, !tbaa !12
  store <8 x float> %218, <8 x float>* %147, align 1, !tbaa !12
  store <8 x float> %219, <8 x float>* %151, align 1, !tbaa !12
  %220 = add nuw nsw i64 %64, 88
  %221 = icmp ult i64 %220, %54
  br i1 %221, label %63, label %57

222:                                              ; preds = %228
  br i1 %52, label %223, label %528

223:                                              ; preds = %222
  %224 = trunc i64 %31 to i32
  %225 = mul nsw i32 %51, %224
  %226 = sext i32 %225 to i64
  %227 = zext i32 %51 to i64
  br label %381

228:                                              ; preds = %58, %228
  %229 = phi i64 [ 0, %58 ], [ %373, %228 ]
  %230 = getelementptr inbounds float, float* %5, i64 %229
  %231 = getelementptr inbounds float, float* %230, i64 8
  %232 = bitcast float* %231 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %232, i32 0, i32 1, i32 1)
  %233 = getelementptr inbounds float, float* %3, i64 %229
  %234 = getelementptr inbounds float, float* %233, i64 8
  %235 = bitcast float* %234 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %235, i32 0, i32 1, i32 1)
  %236 = getelementptr inbounds float, float* %230, i64 16
  %237 = bitcast float* %236 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %237, i32 0, i32 1, i32 1)
  %238 = getelementptr inbounds float, float* %233, i64 16
  %239 = bitcast float* %238 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %239, i32 0, i32 1, i32 1)
  %240 = getelementptr inbounds float, float* %230, i64 24
  %241 = bitcast float* %240 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %241, i32 0, i32 1, i32 1)
  %242 = getelementptr inbounds float, float* %233, i64 24
  %243 = bitcast float* %242 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %243, i32 0, i32 1, i32 1)
  %244 = getelementptr inbounds float, float* %230, i64 32
  %245 = bitcast float* %244 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %245, i32 0, i32 1, i32 1)
  %246 = getelementptr inbounds float, float* %233, i64 32
  %247 = bitcast float* %246 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %247, i32 0, i32 1, i32 1)
  %248 = getelementptr inbounds float, float* %230, i64 40
  %249 = bitcast float* %248 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %249, i32 0, i32 1, i32 1)
  %250 = getelementptr inbounds float, float* %233, i64 40
  %251 = bitcast float* %250 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %251, i32 0, i32 1, i32 1)
  %252 = getelementptr inbounds float, float* %230, i64 48
  %253 = bitcast float* %252 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %253, i32 0, i32 1, i32 1)
  %254 = getelementptr inbounds float, float* %233, i64 48
  %255 = bitcast float* %254 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %255, i32 0, i32 1, i32 1)
  %256 = getelementptr inbounds float, float* %230, i64 56
  %257 = bitcast float* %256 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %257, i32 0, i32 1, i32 1)
  %258 = getelementptr inbounds float, float* %233, i64 56
  %259 = bitcast float* %258 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %259, i32 0, i32 1, i32 1)
  %260 = getelementptr inbounds float, float* %230, i64 64
  %261 = bitcast float* %260 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %261, i32 0, i32 1, i32 1)
  %262 = getelementptr inbounds float, float* %233, i64 64
  %263 = bitcast float* %262 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %263, i32 0, i32 1, i32 1)
  %264 = getelementptr inbounds float, float* %230, i64 72
  %265 = bitcast float* %264 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %265, i32 0, i32 1, i32 1)
  %266 = getelementptr inbounds float, float* %233, i64 72
  %267 = bitcast float* %266 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %267, i32 0, i32 1, i32 1)
  %268 = getelementptr inbounds float, float* %230, i64 80
  %269 = bitcast float* %268 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %269, i32 0, i32 1, i32 1)
  %270 = getelementptr inbounds float, float* %233, i64 80
  %271 = bitcast float* %270 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %271, i32 0, i32 1, i32 1)
  %272 = getelementptr inbounds float, float* %230, i64 88
  %273 = bitcast float* %272 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %273, i32 0, i32 1, i32 1)
  %274 = getelementptr inbounds float, float* %233, i64 88
  %275 = bitcast float* %274 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %275, i32 0, i32 1, i32 1)
  %276 = bitcast float* %230 to <8 x float>*
  %277 = load <8 x float>, <8 x float>* %276, align 1, !tbaa !12
  %278 = add nuw nsw i64 %229, 8
  %279 = getelementptr inbounds float, float* %5, i64 %278
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !tbaa !12
  %282 = add nuw nsw i64 %229, 16
  %283 = getelementptr inbounds float, float* %5, i64 %282
  %284 = bitcast float* %283 to <8 x float>*
  %285 = load <8 x float>, <8 x float>* %284, align 1, !tbaa !12
  %286 = add nuw nsw i64 %229, 24
  %287 = getelementptr inbounds float, float* %5, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 1, !tbaa !12
  %290 = add nuw nsw i64 %229, 32
  %291 = getelementptr inbounds float, float* %5, i64 %290
  %292 = bitcast float* %291 to <8 x float>*
  %293 = load <8 x float>, <8 x float>* %292, align 1, !tbaa !12
  %294 = add nuw nsw i64 %229, 40
  %295 = getelementptr inbounds float, float* %5, i64 %294
  %296 = bitcast float* %295 to <8 x float>*
  %297 = load <8 x float>, <8 x float>* %296, align 1, !tbaa !12
  %298 = add nuw nsw i64 %229, 48
  %299 = getelementptr inbounds float, float* %5, i64 %298
  %300 = bitcast float* %299 to <8 x float>*
  %301 = load <8 x float>, <8 x float>* %300, align 1, !tbaa !12
  %302 = add nuw nsw i64 %229, 56
  %303 = getelementptr inbounds float, float* %5, i64 %302
  %304 = bitcast float* %303 to <8 x float>*
  %305 = load <8 x float>, <8 x float>* %304, align 1, !tbaa !12
  %306 = add nuw nsw i64 %229, 64
  %307 = getelementptr inbounds float, float* %5, i64 %306
  %308 = bitcast float* %307 to <8 x float>*
  %309 = load <8 x float>, <8 x float>* %308, align 1, !tbaa !12
  %310 = add nuw nsw i64 %229, 72
  %311 = getelementptr inbounds float, float* %5, i64 %310
  %312 = bitcast float* %311 to <8 x float>*
  %313 = load <8 x float>, <8 x float>* %312, align 1, !tbaa !12
  %314 = add nuw nsw i64 %229, 80
  %315 = getelementptr inbounds float, float* %5, i64 %314
  %316 = bitcast float* %315 to <8 x float>*
  %317 = load <8 x float>, <8 x float>* %316, align 1, !tbaa !12
  %318 = add nsw i64 %229, %61
  %319 = getelementptr inbounds float, float* %3, i64 %318
  %320 = bitcast float* %319 to <8 x float>*
  %321 = load <8 x float>, <8 x float>* %320, align 1, !tbaa !12
  %322 = add nsw i64 %318, 8
  %323 = getelementptr inbounds float, float* %3, i64 %322
  %324 = bitcast float* %323 to <8 x float>*
  %325 = load <8 x float>, <8 x float>* %324, align 1, !tbaa !12
  %326 = add nsw i64 %318, 16
  %327 = getelementptr inbounds float, float* %3, i64 %326
  %328 = bitcast float* %327 to <8 x float>*
  %329 = load <8 x float>, <8 x float>* %328, align 1, !tbaa !12
  %330 = add nsw i64 %318, 24
  %331 = getelementptr inbounds float, float* %3, i64 %330
  %332 = bitcast float* %331 to <8 x float>*
  %333 = load <8 x float>, <8 x float>* %332, align 1, !tbaa !12
  %334 = add nsw i64 %318, 32
  %335 = getelementptr inbounds float, float* %3, i64 %334
  %336 = bitcast float* %335 to <8 x float>*
  %337 = load <8 x float>, <8 x float>* %336, align 1, !tbaa !12
  %338 = add nsw i64 %318, 40
  %339 = getelementptr inbounds float, float* %3, i64 %338
  %340 = bitcast float* %339 to <8 x float>*
  %341 = load <8 x float>, <8 x float>* %340, align 1, !tbaa !12
  %342 = add nsw i64 %318, 48
  %343 = getelementptr inbounds float, float* %3, i64 %342
  %344 = bitcast float* %343 to <8 x float>*
  %345 = load <8 x float>, <8 x float>* %344, align 1, !tbaa !12
  %346 = add nsw i64 %318, 56
  %347 = getelementptr inbounds float, float* %3, i64 %346
  %348 = bitcast float* %347 to <8 x float>*
  %349 = load <8 x float>, <8 x float>* %348, align 1, !tbaa !12
  %350 = add nsw i64 %318, 64
  %351 = getelementptr inbounds float, float* %3, i64 %350
  %352 = bitcast float* %351 to <8 x float>*
  %353 = load <8 x float>, <8 x float>* %352, align 1, !tbaa !12
  %354 = add nsw i64 %318, 72
  %355 = getelementptr inbounds float, float* %3, i64 %354
  %356 = bitcast float* %355 to <8 x float>*
  %357 = load <8 x float>, <8 x float>* %356, align 1, !tbaa !12
  %358 = add nsw i64 %318, 80
  %359 = getelementptr inbounds float, float* %3, i64 %358
  %360 = bitcast float* %359 to <8 x float>*
  %361 = load <8 x float>, <8 x float>* %360, align 1, !tbaa !12
  %362 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %321, <8 x float> %30, <8 x float> %277) #10
  %363 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %325, <8 x float> %30, <8 x float> %281) #10
  %364 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %329, <8 x float> %30, <8 x float> %285) #10
  %365 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %333, <8 x float> %30, <8 x float> %289) #10
  %366 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %337, <8 x float> %30, <8 x float> %293) #10
  %367 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %341, <8 x float> %30, <8 x float> %297) #10
  %368 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %345, <8 x float> %30, <8 x float> %301) #10
  %369 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %349, <8 x float> %30, <8 x float> %305) #10
  %370 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %353, <8 x float> %30, <8 x float> %309) #10
  %371 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %357, <8 x float> %30, <8 x float> %313) #10
  %372 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %361, <8 x float> %30, <8 x float> %317) #10
  store <8 x float> %362, <8 x float>* %276, align 1, !tbaa !12
  store <8 x float> %363, <8 x float>* %280, align 1, !tbaa !12
  store <8 x float> %364, <8 x float>* %284, align 1, !tbaa !12
  store <8 x float> %365, <8 x float>* %288, align 1, !tbaa !12
  store <8 x float> %366, <8 x float>* %292, align 1, !tbaa !12
  store <8 x float> %367, <8 x float>* %296, align 1, !tbaa !12
  store <8 x float> %368, <8 x float>* %300, align 1, !tbaa !12
  store <8 x float> %369, <8 x float>* %304, align 1, !tbaa !12
  store <8 x float> %370, <8 x float>* %308, align 1, !tbaa !12
  store <8 x float> %371, <8 x float>* %312, align 1, !tbaa !12
  store <8 x float> %372, <8 x float>* %316, align 1, !tbaa !12
  %373 = add nuw nsw i64 %229, 88
  %374 = icmp ult i64 %373, %62
  br i1 %374, label %228, label %222

375:                                              ; preds = %381
  br i1 %52, label %376, label %528

376:                                              ; preds = %375
  %377 = trunc i64 %36 to i32
  %378 = mul nsw i32 %51, %377
  %379 = sext i32 %378 to i64
  %380 = zext i32 %51 to i64
  br label %535

381:                                              ; preds = %223, %381
  %382 = phi i64 [ 0, %223 ], [ %526, %381 ]
  %383 = getelementptr inbounds float, float* %5, i64 %382
  %384 = getelementptr inbounds float, float* %383, i64 8
  %385 = bitcast float* %384 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %385, i32 0, i32 1, i32 1)
  %386 = getelementptr inbounds float, float* %3, i64 %382
  %387 = getelementptr inbounds float, float* %386, i64 8
  %388 = bitcast float* %387 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %388, i32 0, i32 1, i32 1)
  %389 = getelementptr inbounds float, float* %383, i64 16
  %390 = bitcast float* %389 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %390, i32 0, i32 1, i32 1)
  %391 = getelementptr inbounds float, float* %386, i64 16
  %392 = bitcast float* %391 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %392, i32 0, i32 1, i32 1)
  %393 = getelementptr inbounds float, float* %383, i64 24
  %394 = bitcast float* %393 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %394, i32 0, i32 1, i32 1)
  %395 = getelementptr inbounds float, float* %386, i64 24
  %396 = bitcast float* %395 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %396, i32 0, i32 1, i32 1)
  %397 = getelementptr inbounds float, float* %383, i64 32
  %398 = bitcast float* %397 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %398, i32 0, i32 1, i32 1)
  %399 = getelementptr inbounds float, float* %386, i64 32
  %400 = bitcast float* %399 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %400, i32 0, i32 1, i32 1)
  %401 = getelementptr inbounds float, float* %383, i64 40
  %402 = bitcast float* %401 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %402, i32 0, i32 1, i32 1)
  %403 = getelementptr inbounds float, float* %386, i64 40
  %404 = bitcast float* %403 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %404, i32 0, i32 1, i32 1)
  %405 = getelementptr inbounds float, float* %383, i64 48
  %406 = bitcast float* %405 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %406, i32 0, i32 1, i32 1)
  %407 = getelementptr inbounds float, float* %386, i64 48
  %408 = bitcast float* %407 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %408, i32 0, i32 1, i32 1)
  %409 = getelementptr inbounds float, float* %383, i64 56
  %410 = bitcast float* %409 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %410, i32 0, i32 1, i32 1)
  %411 = getelementptr inbounds float, float* %386, i64 56
  %412 = bitcast float* %411 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %412, i32 0, i32 1, i32 1)
  %413 = getelementptr inbounds float, float* %383, i64 64
  %414 = bitcast float* %413 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %414, i32 0, i32 1, i32 1)
  %415 = getelementptr inbounds float, float* %386, i64 64
  %416 = bitcast float* %415 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %416, i32 0, i32 1, i32 1)
  %417 = getelementptr inbounds float, float* %383, i64 72
  %418 = bitcast float* %417 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %418, i32 0, i32 1, i32 1)
  %419 = getelementptr inbounds float, float* %386, i64 72
  %420 = bitcast float* %419 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %420, i32 0, i32 1, i32 1)
  %421 = getelementptr inbounds float, float* %383, i64 80
  %422 = bitcast float* %421 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %422, i32 0, i32 1, i32 1)
  %423 = getelementptr inbounds float, float* %386, i64 80
  %424 = bitcast float* %423 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %424, i32 0, i32 1, i32 1)
  %425 = getelementptr inbounds float, float* %383, i64 88
  %426 = bitcast float* %425 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %426, i32 0, i32 1, i32 1)
  %427 = getelementptr inbounds float, float* %386, i64 88
  %428 = bitcast float* %427 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %428, i32 0, i32 1, i32 1)
  %429 = bitcast float* %383 to <8 x float>*
  %430 = load <8 x float>, <8 x float>* %429, align 1, !tbaa !12
  %431 = add nuw nsw i64 %382, 8
  %432 = getelementptr inbounds float, float* %5, i64 %431
  %433 = bitcast float* %432 to <8 x float>*
  %434 = load <8 x float>, <8 x float>* %433, align 1, !tbaa !12
  %435 = add nuw nsw i64 %382, 16
  %436 = getelementptr inbounds float, float* %5, i64 %435
  %437 = bitcast float* %436 to <8 x float>*
  %438 = load <8 x float>, <8 x float>* %437, align 1, !tbaa !12
  %439 = add nuw nsw i64 %382, 24
  %440 = getelementptr inbounds float, float* %5, i64 %439
  %441 = bitcast float* %440 to <8 x float>*
  %442 = load <8 x float>, <8 x float>* %441, align 1, !tbaa !12
  %443 = add nuw nsw i64 %382, 32
  %444 = getelementptr inbounds float, float* %5, i64 %443
  %445 = bitcast float* %444 to <8 x float>*
  %446 = load <8 x float>, <8 x float>* %445, align 1, !tbaa !12
  %447 = add nuw nsw i64 %382, 40
  %448 = getelementptr inbounds float, float* %5, i64 %447
  %449 = bitcast float* %448 to <8 x float>*
  %450 = load <8 x float>, <8 x float>* %449, align 1, !tbaa !12
  %451 = add nuw nsw i64 %382, 48
  %452 = getelementptr inbounds float, float* %5, i64 %451
  %453 = bitcast float* %452 to <8 x float>*
  %454 = load <8 x float>, <8 x float>* %453, align 1, !tbaa !12
  %455 = add nuw nsw i64 %382, 56
  %456 = getelementptr inbounds float, float* %5, i64 %455
  %457 = bitcast float* %456 to <8 x float>*
  %458 = load <8 x float>, <8 x float>* %457, align 1, !tbaa !12
  %459 = add nuw nsw i64 %382, 64
  %460 = getelementptr inbounds float, float* %5, i64 %459
  %461 = bitcast float* %460 to <8 x float>*
  %462 = load <8 x float>, <8 x float>* %461, align 1, !tbaa !12
  %463 = add nuw nsw i64 %382, 72
  %464 = getelementptr inbounds float, float* %5, i64 %463
  %465 = bitcast float* %464 to <8 x float>*
  %466 = load <8 x float>, <8 x float>* %465, align 1, !tbaa !12
  %467 = add nuw nsw i64 %382, 80
  %468 = getelementptr inbounds float, float* %5, i64 %467
  %469 = bitcast float* %468 to <8 x float>*
  %470 = load <8 x float>, <8 x float>* %469, align 1, !tbaa !12
  %471 = add nsw i64 %382, %226
  %472 = getelementptr inbounds float, float* %3, i64 %471
  %473 = bitcast float* %472 to <8 x float>*
  %474 = load <8 x float>, <8 x float>* %473, align 1, !tbaa !12
  %475 = add nsw i64 %471, 8
  %476 = getelementptr inbounds float, float* %3, i64 %475
  %477 = bitcast float* %476 to <8 x float>*
  %478 = load <8 x float>, <8 x float>* %477, align 1, !tbaa !12
  %479 = add nsw i64 %471, 16
  %480 = getelementptr inbounds float, float* %3, i64 %479
  %481 = bitcast float* %480 to <8 x float>*
  %482 = load <8 x float>, <8 x float>* %481, align 1, !tbaa !12
  %483 = add nsw i64 %471, 24
  %484 = getelementptr inbounds float, float* %3, i64 %483
  %485 = bitcast float* %484 to <8 x float>*
  %486 = load <8 x float>, <8 x float>* %485, align 1, !tbaa !12
  %487 = add nsw i64 %471, 32
  %488 = getelementptr inbounds float, float* %3, i64 %487
  %489 = bitcast float* %488 to <8 x float>*
  %490 = load <8 x float>, <8 x float>* %489, align 1, !tbaa !12
  %491 = add nsw i64 %471, 40
  %492 = getelementptr inbounds float, float* %3, i64 %491
  %493 = bitcast float* %492 to <8 x float>*
  %494 = load <8 x float>, <8 x float>* %493, align 1, !tbaa !12
  %495 = add nsw i64 %471, 48
  %496 = getelementptr inbounds float, float* %3, i64 %495
  %497 = bitcast float* %496 to <8 x float>*
  %498 = load <8 x float>, <8 x float>* %497, align 1, !tbaa !12
  %499 = add nsw i64 %471, 56
  %500 = getelementptr inbounds float, float* %3, i64 %499
  %501 = bitcast float* %500 to <8 x float>*
  %502 = load <8 x float>, <8 x float>* %501, align 1, !tbaa !12
  %503 = add nsw i64 %471, 64
  %504 = getelementptr inbounds float, float* %3, i64 %503
  %505 = bitcast float* %504 to <8 x float>*
  %506 = load <8 x float>, <8 x float>* %505, align 1, !tbaa !12
  %507 = add nsw i64 %471, 72
  %508 = getelementptr inbounds float, float* %3, i64 %507
  %509 = bitcast float* %508 to <8 x float>*
  %510 = load <8 x float>, <8 x float>* %509, align 1, !tbaa !12
  %511 = add nsw i64 %471, 80
  %512 = getelementptr inbounds float, float* %3, i64 %511
  %513 = bitcast float* %512 to <8 x float>*
  %514 = load <8 x float>, <8 x float>* %513, align 1, !tbaa !12
  %515 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %474, <8 x float> %35, <8 x float> %430) #10
  %516 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %478, <8 x float> %35, <8 x float> %434) #10
  %517 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %482, <8 x float> %35, <8 x float> %438) #10
  %518 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %486, <8 x float> %35, <8 x float> %442) #10
  %519 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %490, <8 x float> %35, <8 x float> %446) #10
  %520 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %494, <8 x float> %35, <8 x float> %450) #10
  %521 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %498, <8 x float> %35, <8 x float> %454) #10
  %522 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %502, <8 x float> %35, <8 x float> %458) #10
  %523 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %506, <8 x float> %35, <8 x float> %462) #10
  %524 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %510, <8 x float> %35, <8 x float> %466) #10
  %525 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %514, <8 x float> %35, <8 x float> %470) #10
  store <8 x float> %515, <8 x float>* %429, align 1, !tbaa !12
  store <8 x float> %516, <8 x float>* %433, align 1, !tbaa !12
  store <8 x float> %517, <8 x float>* %437, align 1, !tbaa !12
  store <8 x float> %518, <8 x float>* %441, align 1, !tbaa !12
  store <8 x float> %519, <8 x float>* %445, align 1, !tbaa !12
  store <8 x float> %520, <8 x float>* %449, align 1, !tbaa !12
  store <8 x float> %521, <8 x float>* %453, align 1, !tbaa !12
  store <8 x float> %522, <8 x float>* %457, align 1, !tbaa !12
  store <8 x float> %523, <8 x float>* %461, align 1, !tbaa !12
  store <8 x float> %524, <8 x float>* %465, align 1, !tbaa !12
  store <8 x float> %525, <8 x float>* %469, align 1, !tbaa !12
  %526 = add nuw nsw i64 %382, 88
  %527 = icmp ult i64 %526, %227
  br i1 %527, label %381, label %375

528:                                              ; preds = %535, %57, %222, %375
  %529 = load i32, i32* @_ZL6BLOCKI, align 4, !tbaa !13
  %530 = icmp sgt i32 %529, 0
  br i1 %530, label %531, label %847

531:                                              ; preds = %528
  %532 = zext i32 %529 to i64
  %533 = trunc i64 %41 to i32
  %534 = mul nsw i32 %529, %533
  br label %688

535:                                              ; preds = %376, %535
  %536 = phi i64 [ 0, %376 ], [ %680, %535 ]
  %537 = getelementptr inbounds float, float* %5, i64 %536
  %538 = getelementptr inbounds float, float* %537, i64 8
  %539 = bitcast float* %538 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %539, i32 0, i32 1, i32 1)
  %540 = getelementptr inbounds float, float* %3, i64 %536
  %541 = getelementptr inbounds float, float* %540, i64 8
  %542 = bitcast float* %541 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %542, i32 0, i32 1, i32 1)
  %543 = getelementptr inbounds float, float* %537, i64 16
  %544 = bitcast float* %543 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %544, i32 0, i32 1, i32 1)
  %545 = getelementptr inbounds float, float* %540, i64 16
  %546 = bitcast float* %545 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %546, i32 0, i32 1, i32 1)
  %547 = getelementptr inbounds float, float* %537, i64 24
  %548 = bitcast float* %547 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %548, i32 0, i32 1, i32 1)
  %549 = getelementptr inbounds float, float* %540, i64 24
  %550 = bitcast float* %549 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %550, i32 0, i32 1, i32 1)
  %551 = getelementptr inbounds float, float* %537, i64 32
  %552 = bitcast float* %551 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %552, i32 0, i32 1, i32 1)
  %553 = getelementptr inbounds float, float* %540, i64 32
  %554 = bitcast float* %553 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %554, i32 0, i32 1, i32 1)
  %555 = getelementptr inbounds float, float* %537, i64 40
  %556 = bitcast float* %555 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %556, i32 0, i32 1, i32 1)
  %557 = getelementptr inbounds float, float* %540, i64 40
  %558 = bitcast float* %557 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %558, i32 0, i32 1, i32 1)
  %559 = getelementptr inbounds float, float* %537, i64 48
  %560 = bitcast float* %559 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %560, i32 0, i32 1, i32 1)
  %561 = getelementptr inbounds float, float* %540, i64 48
  %562 = bitcast float* %561 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %562, i32 0, i32 1, i32 1)
  %563 = getelementptr inbounds float, float* %537, i64 56
  %564 = bitcast float* %563 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %564, i32 0, i32 1, i32 1)
  %565 = getelementptr inbounds float, float* %540, i64 56
  %566 = bitcast float* %565 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %566, i32 0, i32 1, i32 1)
  %567 = getelementptr inbounds float, float* %537, i64 64
  %568 = bitcast float* %567 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %568, i32 0, i32 1, i32 1)
  %569 = getelementptr inbounds float, float* %540, i64 64
  %570 = bitcast float* %569 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %570, i32 0, i32 1, i32 1)
  %571 = getelementptr inbounds float, float* %537, i64 72
  %572 = bitcast float* %571 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %572, i32 0, i32 1, i32 1)
  %573 = getelementptr inbounds float, float* %540, i64 72
  %574 = bitcast float* %573 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %574, i32 0, i32 1, i32 1)
  %575 = getelementptr inbounds float, float* %537, i64 80
  %576 = bitcast float* %575 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %576, i32 0, i32 1, i32 1)
  %577 = getelementptr inbounds float, float* %540, i64 80
  %578 = bitcast float* %577 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %578, i32 0, i32 1, i32 1)
  %579 = getelementptr inbounds float, float* %537, i64 88
  %580 = bitcast float* %579 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %580, i32 0, i32 1, i32 1)
  %581 = getelementptr inbounds float, float* %540, i64 88
  %582 = bitcast float* %581 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %582, i32 0, i32 1, i32 1)
  %583 = bitcast float* %537 to <8 x float>*
  %584 = load <8 x float>, <8 x float>* %583, align 1, !tbaa !12
  %585 = add nuw nsw i64 %536, 8
  %586 = getelementptr inbounds float, float* %5, i64 %585
  %587 = bitcast float* %586 to <8 x float>*
  %588 = load <8 x float>, <8 x float>* %587, align 1, !tbaa !12
  %589 = add nuw nsw i64 %536, 16
  %590 = getelementptr inbounds float, float* %5, i64 %589
  %591 = bitcast float* %590 to <8 x float>*
  %592 = load <8 x float>, <8 x float>* %591, align 1, !tbaa !12
  %593 = add nuw nsw i64 %536, 24
  %594 = getelementptr inbounds float, float* %5, i64 %593
  %595 = bitcast float* %594 to <8 x float>*
  %596 = load <8 x float>, <8 x float>* %595, align 1, !tbaa !12
  %597 = add nuw nsw i64 %536, 32
  %598 = getelementptr inbounds float, float* %5, i64 %597
  %599 = bitcast float* %598 to <8 x float>*
  %600 = load <8 x float>, <8 x float>* %599, align 1, !tbaa !12
  %601 = add nuw nsw i64 %536, 40
  %602 = getelementptr inbounds float, float* %5, i64 %601
  %603 = bitcast float* %602 to <8 x float>*
  %604 = load <8 x float>, <8 x float>* %603, align 1, !tbaa !12
  %605 = add nuw nsw i64 %536, 48
  %606 = getelementptr inbounds float, float* %5, i64 %605
  %607 = bitcast float* %606 to <8 x float>*
  %608 = load <8 x float>, <8 x float>* %607, align 1, !tbaa !12
  %609 = add nuw nsw i64 %536, 56
  %610 = getelementptr inbounds float, float* %5, i64 %609
  %611 = bitcast float* %610 to <8 x float>*
  %612 = load <8 x float>, <8 x float>* %611, align 1, !tbaa !12
  %613 = add nuw nsw i64 %536, 64
  %614 = getelementptr inbounds float, float* %5, i64 %613
  %615 = bitcast float* %614 to <8 x float>*
  %616 = load <8 x float>, <8 x float>* %615, align 1, !tbaa !12
  %617 = add nuw nsw i64 %536, 72
  %618 = getelementptr inbounds float, float* %5, i64 %617
  %619 = bitcast float* %618 to <8 x float>*
  %620 = load <8 x float>, <8 x float>* %619, align 1, !tbaa !12
  %621 = add nuw nsw i64 %536, 80
  %622 = getelementptr inbounds float, float* %5, i64 %621
  %623 = bitcast float* %622 to <8 x float>*
  %624 = load <8 x float>, <8 x float>* %623, align 1, !tbaa !12
  %625 = add nsw i64 %536, %379
  %626 = getelementptr inbounds float, float* %3, i64 %625
  %627 = bitcast float* %626 to <8 x float>*
  %628 = load <8 x float>, <8 x float>* %627, align 1, !tbaa !12
  %629 = add nsw i64 %625, 8
  %630 = getelementptr inbounds float, float* %3, i64 %629
  %631 = bitcast float* %630 to <8 x float>*
  %632 = load <8 x float>, <8 x float>* %631, align 1, !tbaa !12
  %633 = add nsw i64 %625, 16
  %634 = getelementptr inbounds float, float* %3, i64 %633
  %635 = bitcast float* %634 to <8 x float>*
  %636 = load <8 x float>, <8 x float>* %635, align 1, !tbaa !12
  %637 = add nsw i64 %625, 24
  %638 = getelementptr inbounds float, float* %3, i64 %637
  %639 = bitcast float* %638 to <8 x float>*
  %640 = load <8 x float>, <8 x float>* %639, align 1, !tbaa !12
  %641 = add nsw i64 %625, 32
  %642 = getelementptr inbounds float, float* %3, i64 %641
  %643 = bitcast float* %642 to <8 x float>*
  %644 = load <8 x float>, <8 x float>* %643, align 1, !tbaa !12
  %645 = add nsw i64 %625, 40
  %646 = getelementptr inbounds float, float* %3, i64 %645
  %647 = bitcast float* %646 to <8 x float>*
  %648 = load <8 x float>, <8 x float>* %647, align 1, !tbaa !12
  %649 = add nsw i64 %625, 48
  %650 = getelementptr inbounds float, float* %3, i64 %649
  %651 = bitcast float* %650 to <8 x float>*
  %652 = load <8 x float>, <8 x float>* %651, align 1, !tbaa !12
  %653 = add nsw i64 %625, 56
  %654 = getelementptr inbounds float, float* %3, i64 %653
  %655 = bitcast float* %654 to <8 x float>*
  %656 = load <8 x float>, <8 x float>* %655, align 1, !tbaa !12
  %657 = add nsw i64 %625, 64
  %658 = getelementptr inbounds float, float* %3, i64 %657
  %659 = bitcast float* %658 to <8 x float>*
  %660 = load <8 x float>, <8 x float>* %659, align 1, !tbaa !12
  %661 = add nsw i64 %625, 72
  %662 = getelementptr inbounds float, float* %3, i64 %661
  %663 = bitcast float* %662 to <8 x float>*
  %664 = load <8 x float>, <8 x float>* %663, align 1, !tbaa !12
  %665 = add nsw i64 %625, 80
  %666 = getelementptr inbounds float, float* %3, i64 %665
  %667 = bitcast float* %666 to <8 x float>*
  %668 = load <8 x float>, <8 x float>* %667, align 1, !tbaa !12
  %669 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %628, <8 x float> %40, <8 x float> %584) #10
  %670 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %632, <8 x float> %40, <8 x float> %588) #10
  %671 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %636, <8 x float> %40, <8 x float> %592) #10
  %672 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %640, <8 x float> %40, <8 x float> %596) #10
  %673 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %644, <8 x float> %40, <8 x float> %600) #10
  %674 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %648, <8 x float> %40, <8 x float> %604) #10
  %675 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %652, <8 x float> %40, <8 x float> %608) #10
  %676 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %656, <8 x float> %40, <8 x float> %612) #10
  %677 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %660, <8 x float> %40, <8 x float> %616) #10
  %678 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %664, <8 x float> %40, <8 x float> %620) #10
  %679 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %668, <8 x float> %40, <8 x float> %624) #10
  store <8 x float> %669, <8 x float>* %583, align 1, !tbaa !12
  store <8 x float> %670, <8 x float>* %587, align 1, !tbaa !12
  store <8 x float> %671, <8 x float>* %591, align 1, !tbaa !12
  store <8 x float> %672, <8 x float>* %595, align 1, !tbaa !12
  store <8 x float> %673, <8 x float>* %599, align 1, !tbaa !12
  store <8 x float> %674, <8 x float>* %603, align 1, !tbaa !12
  store <8 x float> %675, <8 x float>* %607, align 1, !tbaa !12
  store <8 x float> %676, <8 x float>* %611, align 1, !tbaa !12
  store <8 x float> %677, <8 x float>* %615, align 1, !tbaa !12
  store <8 x float> %678, <8 x float>* %619, align 1, !tbaa !12
  store <8 x float> %679, <8 x float>* %623, align 1, !tbaa !12
  %680 = add nuw nsw i64 %536, 88
  %681 = icmp ult i64 %680, %380
  br i1 %681, label %535, label %528

682:                                              ; preds = %688
  br i1 %530, label %683, label %847

683:                                              ; preds = %682
  %684 = trunc i64 %46 to i32
  %685 = mul nsw i32 %529, %684
  %686 = sext i32 %685 to i64
  %687 = zext i32 %529 to i64
  br label %852

688:                                              ; preds = %531, %688
  %689 = phi i64 [ 0, %531 ], [ %845, %688 ]
  %690 = getelementptr inbounds float, float* %5, i64 %689
  %691 = getelementptr inbounds float, float* %690, i64 8
  %692 = bitcast float* %691 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %692, i32 0, i32 1, i32 1)
  %693 = getelementptr inbounds float, float* %3, i64 %689
  %694 = getelementptr inbounds float, float* %693, i64 8
  %695 = bitcast float* %694 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %695, i32 0, i32 1, i32 1)
  %696 = getelementptr inbounds float, float* %690, i64 16
  %697 = bitcast float* %696 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %697, i32 0, i32 1, i32 1)
  %698 = getelementptr inbounds float, float* %693, i64 16
  %699 = bitcast float* %698 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %699, i32 0, i32 1, i32 1)
  %700 = getelementptr inbounds float, float* %690, i64 24
  %701 = bitcast float* %700 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %701, i32 0, i32 1, i32 1)
  %702 = getelementptr inbounds float, float* %693, i64 24
  %703 = bitcast float* %702 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %703, i32 0, i32 1, i32 1)
  %704 = getelementptr inbounds float, float* %690, i64 32
  %705 = bitcast float* %704 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %705, i32 0, i32 1, i32 1)
  %706 = getelementptr inbounds float, float* %693, i64 32
  %707 = bitcast float* %706 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %707, i32 0, i32 1, i32 1)
  %708 = getelementptr inbounds float, float* %690, i64 40
  %709 = bitcast float* %708 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %709, i32 0, i32 1, i32 1)
  %710 = getelementptr inbounds float, float* %693, i64 40
  %711 = bitcast float* %710 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %711, i32 0, i32 1, i32 1)
  %712 = getelementptr inbounds float, float* %690, i64 48
  %713 = bitcast float* %712 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %713, i32 0, i32 1, i32 1)
  %714 = getelementptr inbounds float, float* %693, i64 48
  %715 = bitcast float* %714 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %715, i32 0, i32 1, i32 1)
  %716 = getelementptr inbounds float, float* %690, i64 56
  %717 = bitcast float* %716 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %717, i32 0, i32 1, i32 1)
  %718 = getelementptr inbounds float, float* %693, i64 56
  %719 = bitcast float* %718 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %719, i32 0, i32 1, i32 1)
  %720 = getelementptr inbounds float, float* %690, i64 64
  %721 = bitcast float* %720 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %721, i32 0, i32 1, i32 1)
  %722 = getelementptr inbounds float, float* %693, i64 64
  %723 = bitcast float* %722 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %723, i32 0, i32 1, i32 1)
  %724 = getelementptr inbounds float, float* %690, i64 72
  %725 = bitcast float* %724 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %725, i32 0, i32 1, i32 1)
  %726 = getelementptr inbounds float, float* %693, i64 72
  %727 = bitcast float* %726 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %727, i32 0, i32 1, i32 1)
  %728 = getelementptr inbounds float, float* %690, i64 80
  %729 = bitcast float* %728 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %729, i32 0, i32 1, i32 1)
  %730 = getelementptr inbounds float, float* %693, i64 80
  %731 = bitcast float* %730 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %731, i32 0, i32 1, i32 1)
  %732 = getelementptr inbounds float, float* %690, i64 88
  %733 = bitcast float* %732 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %733, i32 0, i32 1, i32 1)
  %734 = getelementptr inbounds float, float* %693, i64 88
  %735 = bitcast float* %734 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %735, i32 0, i32 1, i32 1)
  %736 = bitcast float* %690 to <8 x float>*
  %737 = load <8 x float>, <8 x float>* %736, align 1, !tbaa !12
  %738 = add nuw nsw i64 %689, 8
  %739 = getelementptr inbounds float, float* %5, i64 %738
  %740 = bitcast float* %739 to <8 x float>*
  %741 = load <8 x float>, <8 x float>* %740, align 1, !tbaa !12
  %742 = add nuw nsw i64 %689, 16
  %743 = getelementptr inbounds float, float* %5, i64 %742
  %744 = bitcast float* %743 to <8 x float>*
  %745 = load <8 x float>, <8 x float>* %744, align 1, !tbaa !12
  %746 = add nuw nsw i64 %689, 24
  %747 = getelementptr inbounds float, float* %5, i64 %746
  %748 = bitcast float* %747 to <8 x float>*
  %749 = load <8 x float>, <8 x float>* %748, align 1, !tbaa !12
  %750 = add nuw nsw i64 %689, 32
  %751 = getelementptr inbounds float, float* %5, i64 %750
  %752 = bitcast float* %751 to <8 x float>*
  %753 = load <8 x float>, <8 x float>* %752, align 1, !tbaa !12
  %754 = add nuw nsw i64 %689, 40
  %755 = getelementptr inbounds float, float* %5, i64 %754
  %756 = bitcast float* %755 to <8 x float>*
  %757 = load <8 x float>, <8 x float>* %756, align 1, !tbaa !12
  %758 = add nuw nsw i64 %689, 48
  %759 = getelementptr inbounds float, float* %5, i64 %758
  %760 = bitcast float* %759 to <8 x float>*
  %761 = load <8 x float>, <8 x float>* %760, align 1, !tbaa !12
  %762 = add nuw nsw i64 %689, 56
  %763 = getelementptr inbounds float, float* %5, i64 %762
  %764 = bitcast float* %763 to <8 x float>*
  %765 = load <8 x float>, <8 x float>* %764, align 1, !tbaa !12
  %766 = add nuw nsw i64 %689, 64
  %767 = getelementptr inbounds float, float* %5, i64 %766
  %768 = bitcast float* %767 to <8 x float>*
  %769 = load <8 x float>, <8 x float>* %768, align 1, !tbaa !12
  %770 = add nuw nsw i64 %689, 72
  %771 = getelementptr inbounds float, float* %5, i64 %770
  %772 = bitcast float* %771 to <8 x float>*
  %773 = load <8 x float>, <8 x float>* %772, align 1, !tbaa !12
  %774 = add nuw nsw i64 %689, 80
  %775 = getelementptr inbounds float, float* %5, i64 %774
  %776 = bitcast float* %775 to <8 x float>*
  %777 = load <8 x float>, <8 x float>* %776, align 1, !tbaa !12
  %778 = trunc i64 %689 to i32
  %779 = add nsw i32 %534, %778
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds float, float* %3, i64 %780
  %782 = bitcast float* %781 to <8 x float>*
  %783 = load <8 x float>, <8 x float>* %782, align 1, !tbaa !12
  %784 = add nsw i32 %779, 8
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds float, float* %3, i64 %785
  %787 = bitcast float* %786 to <8 x float>*
  %788 = load <8 x float>, <8 x float>* %787, align 1, !tbaa !12
  %789 = add nsw i32 %779, 16
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds float, float* %3, i64 %790
  %792 = bitcast float* %791 to <8 x float>*
  %793 = load <8 x float>, <8 x float>* %792, align 1, !tbaa !12
  %794 = add nsw i32 %779, 24
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds float, float* %3, i64 %795
  %797 = bitcast float* %796 to <8 x float>*
  %798 = load <8 x float>, <8 x float>* %797, align 1, !tbaa !12
  %799 = add nsw i32 %779, 32
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds float, float* %3, i64 %800
  %802 = bitcast float* %801 to <8 x float>*
  %803 = load <8 x float>, <8 x float>* %802, align 1, !tbaa !12
  %804 = add nsw i32 %779, 40
  %805 = sext i32 %804 to i64
  %806 = getelementptr inbounds float, float* %3, i64 %805
  %807 = bitcast float* %806 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 1, !tbaa !12
  %809 = add nsw i32 %779, 48
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds float, float* %3, i64 %810
  %812 = bitcast float* %811 to <8 x float>*
  %813 = load <8 x float>, <8 x float>* %812, align 1, !tbaa !12
  %814 = add nsw i32 %779, 56
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds float, float* %3, i64 %815
  %817 = bitcast float* %816 to <8 x float>*
  %818 = load <8 x float>, <8 x float>* %817, align 1, !tbaa !12
  %819 = add nsw i32 %779, 64
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds float, float* %3, i64 %820
  %822 = bitcast float* %821 to <8 x float>*
  %823 = load <8 x float>, <8 x float>* %822, align 1, !tbaa !12
  %824 = add nsw i32 %779, 72
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds float, float* %3, i64 %825
  %827 = bitcast float* %826 to <8 x float>*
  %828 = load <8 x float>, <8 x float>* %827, align 1, !tbaa !12
  %829 = add nsw i32 %779, 80
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds float, float* %3, i64 %830
  %832 = bitcast float* %831 to <8 x float>*
  %833 = load <8 x float>, <8 x float>* %832, align 1, !tbaa !12
  %834 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %783, <8 x float> %45, <8 x float> %737) #10
  %835 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %788, <8 x float> %45, <8 x float> %741) #10
  %836 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %793, <8 x float> %45, <8 x float> %745) #10
  %837 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %798, <8 x float> %45, <8 x float> %749) #10
  %838 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %803, <8 x float> %45, <8 x float> %753) #10
  %839 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %808, <8 x float> %45, <8 x float> %757) #10
  %840 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %813, <8 x float> %45, <8 x float> %761) #10
  %841 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %818, <8 x float> %45, <8 x float> %765) #10
  %842 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %823, <8 x float> %45, <8 x float> %769) #10
  %843 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %45, <8 x float> %773) #10
  %844 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %833, <8 x float> %45, <8 x float> %777) #10
  store <8 x float> %834, <8 x float>* %736, align 1, !tbaa !12
  store <8 x float> %835, <8 x float>* %740, align 1, !tbaa !12
  store <8 x float> %836, <8 x float>* %744, align 1, !tbaa !12
  store <8 x float> %837, <8 x float>* %748, align 1, !tbaa !12
  store <8 x float> %838, <8 x float>* %752, align 1, !tbaa !12
  store <8 x float> %839, <8 x float>* %756, align 1, !tbaa !12
  store <8 x float> %840, <8 x float>* %760, align 1, !tbaa !12
  store <8 x float> %841, <8 x float>* %764, align 1, !tbaa !12
  store <8 x float> %842, <8 x float>* %768, align 1, !tbaa !12
  store <8 x float> %843, <8 x float>* %772, align 1, !tbaa !12
  store <8 x float> %844, <8 x float>* %776, align 1, !tbaa !12
  %845 = add nuw nsw i64 %689, 88
  %846 = icmp ult i64 %845, %532
  br i1 %846, label %688, label %682

847:                                              ; preds = %852, %20, %528, %682
  %848 = add nuw nsw i64 %21, 6
  %849 = load i32, i32* @_ZL6BLOCKK, align 4, !tbaa !13
  %850 = sext i32 %849 to i64
  %851 = icmp slt i64 %848, %850
  br i1 %851, label %20, label %8

852:                                              ; preds = %683, %852
  %853 = phi i64 [ 0, %683 ], [ %997, %852 ]
  %854 = getelementptr inbounds float, float* %5, i64 %853
  %855 = getelementptr inbounds float, float* %854, i64 8
  %856 = bitcast float* %855 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %856, i32 0, i32 1, i32 1)
  %857 = getelementptr inbounds float, float* %3, i64 %853
  %858 = getelementptr inbounds float, float* %857, i64 8
  %859 = bitcast float* %858 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %859, i32 0, i32 1, i32 1)
  %860 = getelementptr inbounds float, float* %854, i64 16
  %861 = bitcast float* %860 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %861, i32 0, i32 1, i32 1)
  %862 = getelementptr inbounds float, float* %857, i64 16
  %863 = bitcast float* %862 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %863, i32 0, i32 1, i32 1)
  %864 = getelementptr inbounds float, float* %854, i64 24
  %865 = bitcast float* %864 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %865, i32 0, i32 1, i32 1)
  %866 = getelementptr inbounds float, float* %857, i64 24
  %867 = bitcast float* %866 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %867, i32 0, i32 1, i32 1)
  %868 = getelementptr inbounds float, float* %854, i64 32
  %869 = bitcast float* %868 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %869, i32 0, i32 1, i32 1)
  %870 = getelementptr inbounds float, float* %857, i64 32
  %871 = bitcast float* %870 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %871, i32 0, i32 1, i32 1)
  %872 = getelementptr inbounds float, float* %854, i64 40
  %873 = bitcast float* %872 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %873, i32 0, i32 1, i32 1)
  %874 = getelementptr inbounds float, float* %857, i64 40
  %875 = bitcast float* %874 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %875, i32 0, i32 1, i32 1)
  %876 = getelementptr inbounds float, float* %854, i64 48
  %877 = bitcast float* %876 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %877, i32 0, i32 1, i32 1)
  %878 = getelementptr inbounds float, float* %857, i64 48
  %879 = bitcast float* %878 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %879, i32 0, i32 1, i32 1)
  %880 = getelementptr inbounds float, float* %854, i64 56
  %881 = bitcast float* %880 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %881, i32 0, i32 1, i32 1)
  %882 = getelementptr inbounds float, float* %857, i64 56
  %883 = bitcast float* %882 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %883, i32 0, i32 1, i32 1)
  %884 = getelementptr inbounds float, float* %854, i64 64
  %885 = bitcast float* %884 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %885, i32 0, i32 1, i32 1)
  %886 = getelementptr inbounds float, float* %857, i64 64
  %887 = bitcast float* %886 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %887, i32 0, i32 1, i32 1)
  %888 = getelementptr inbounds float, float* %854, i64 72
  %889 = bitcast float* %888 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %889, i32 0, i32 1, i32 1)
  %890 = getelementptr inbounds float, float* %857, i64 72
  %891 = bitcast float* %890 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %891, i32 0, i32 1, i32 1)
  %892 = getelementptr inbounds float, float* %854, i64 80
  %893 = bitcast float* %892 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %893, i32 0, i32 1, i32 1)
  %894 = getelementptr inbounds float, float* %857, i64 80
  %895 = bitcast float* %894 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %895, i32 0, i32 1, i32 1)
  %896 = getelementptr inbounds float, float* %854, i64 88
  %897 = bitcast float* %896 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %897, i32 0, i32 1, i32 1)
  %898 = getelementptr inbounds float, float* %857, i64 88
  %899 = bitcast float* %898 to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %899, i32 0, i32 1, i32 1)
  %900 = bitcast float* %854 to <8 x float>*
  %901 = load <8 x float>, <8 x float>* %900, align 1, !tbaa !12
  %902 = add nuw nsw i64 %853, 8
  %903 = getelementptr inbounds float, float* %5, i64 %902
  %904 = bitcast float* %903 to <8 x float>*
  %905 = load <8 x float>, <8 x float>* %904, align 1, !tbaa !12
  %906 = add nuw nsw i64 %853, 16
  %907 = getelementptr inbounds float, float* %5, i64 %906
  %908 = bitcast float* %907 to <8 x float>*
  %909 = load <8 x float>, <8 x float>* %908, align 1, !tbaa !12
  %910 = add nuw nsw i64 %853, 24
  %911 = getelementptr inbounds float, float* %5, i64 %910
  %912 = bitcast float* %911 to <8 x float>*
  %913 = load <8 x float>, <8 x float>* %912, align 1, !tbaa !12
  %914 = add nuw nsw i64 %853, 32
  %915 = getelementptr inbounds float, float* %5, i64 %914
  %916 = bitcast float* %915 to <8 x float>*
  %917 = load <8 x float>, <8 x float>* %916, align 1, !tbaa !12
  %918 = add nuw nsw i64 %853, 40
  %919 = getelementptr inbounds float, float* %5, i64 %918
  %920 = bitcast float* %919 to <8 x float>*
  %921 = load <8 x float>, <8 x float>* %920, align 1, !tbaa !12
  %922 = add nuw nsw i64 %853, 48
  %923 = getelementptr inbounds float, float* %5, i64 %922
  %924 = bitcast float* %923 to <8 x float>*
  %925 = load <8 x float>, <8 x float>* %924, align 1, !tbaa !12
  %926 = add nuw nsw i64 %853, 56
  %927 = getelementptr inbounds float, float* %5, i64 %926
  %928 = bitcast float* %927 to <8 x float>*
  %929 = load <8 x float>, <8 x float>* %928, align 1, !tbaa !12
  %930 = add nuw nsw i64 %853, 64
  %931 = getelementptr inbounds float, float* %5, i64 %930
  %932 = bitcast float* %931 to <8 x float>*
  %933 = load <8 x float>, <8 x float>* %932, align 1, !tbaa !12
  %934 = add nuw nsw i64 %853, 72
  %935 = getelementptr inbounds float, float* %5, i64 %934
  %936 = bitcast float* %935 to <8 x float>*
  %937 = load <8 x float>, <8 x float>* %936, align 1, !tbaa !12
  %938 = add nuw nsw i64 %853, 80
  %939 = getelementptr inbounds float, float* %5, i64 %938
  %940 = bitcast float* %939 to <8 x float>*
  %941 = load <8 x float>, <8 x float>* %940, align 1, !tbaa !12
  %942 = add nsw i64 %853, %686
  %943 = getelementptr inbounds float, float* %3, i64 %942
  %944 = bitcast float* %943 to <8 x float>*
  %945 = load <8 x float>, <8 x float>* %944, align 1, !tbaa !12
  %946 = add nsw i64 %942, 8
  %947 = getelementptr inbounds float, float* %3, i64 %946
  %948 = bitcast float* %947 to <8 x float>*
  %949 = load <8 x float>, <8 x float>* %948, align 1, !tbaa !12
  %950 = add nsw i64 %942, 16
  %951 = getelementptr inbounds float, float* %3, i64 %950
  %952 = bitcast float* %951 to <8 x float>*
  %953 = load <8 x float>, <8 x float>* %952, align 1, !tbaa !12
  %954 = add nsw i64 %942, 24
  %955 = getelementptr inbounds float, float* %3, i64 %954
  %956 = bitcast float* %955 to <8 x float>*
  %957 = load <8 x float>, <8 x float>* %956, align 1, !tbaa !12
  %958 = add nsw i64 %942, 32
  %959 = getelementptr inbounds float, float* %3, i64 %958
  %960 = bitcast float* %959 to <8 x float>*
  %961 = load <8 x float>, <8 x float>* %960, align 1, !tbaa !12
  %962 = add nsw i64 %942, 40
  %963 = getelementptr inbounds float, float* %3, i64 %962
  %964 = bitcast float* %963 to <8 x float>*
  %965 = load <8 x float>, <8 x float>* %964, align 1, !tbaa !12
  %966 = add nsw i64 %942, 48
  %967 = getelementptr inbounds float, float* %3, i64 %966
  %968 = bitcast float* %967 to <8 x float>*
  %969 = load <8 x float>, <8 x float>* %968, align 1, !tbaa !12
  %970 = add nsw i64 %942, 56
  %971 = getelementptr inbounds float, float* %3, i64 %970
  %972 = bitcast float* %971 to <8 x float>*
  %973 = load <8 x float>, <8 x float>* %972, align 1, !tbaa !12
  %974 = add nsw i64 %942, 64
  %975 = getelementptr inbounds float, float* %3, i64 %974
  %976 = bitcast float* %975 to <8 x float>*
  %977 = load <8 x float>, <8 x float>* %976, align 1, !tbaa !12
  %978 = add nsw i64 %942, 72
  %979 = getelementptr inbounds float, float* %3, i64 %978
  %980 = bitcast float* %979 to <8 x float>*
  %981 = load <8 x float>, <8 x float>* %980, align 1, !tbaa !12
  %982 = add nsw i64 %942, 80
  %983 = getelementptr inbounds float, float* %3, i64 %982
  %984 = bitcast float* %983 to <8 x float>*
  %985 = load <8 x float>, <8 x float>* %984, align 1, !tbaa !12
  %986 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %945, <8 x float> %50, <8 x float> %901) #10
  %987 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %949, <8 x float> %50, <8 x float> %905) #10
  %988 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %953, <8 x float> %50, <8 x float> %909) #10
  %989 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %957, <8 x float> %50, <8 x float> %913) #10
  %990 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %961, <8 x float> %50, <8 x float> %917) #10
  %991 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %965, <8 x float> %50, <8 x float> %921) #10
  %992 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %969, <8 x float> %50, <8 x float> %925) #10
  %993 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %973, <8 x float> %50, <8 x float> %929) #10
  %994 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %977, <8 x float> %50, <8 x float> %933) #10
  %995 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %981, <8 x float> %50, <8 x float> %937) #10
  %996 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %985, <8 x float> %50, <8 x float> %941) #10
  store <8 x float> %986, <8 x float>* %900, align 1, !tbaa !12
  store <8 x float> %987, <8 x float>* %904, align 1, !tbaa !12
  store <8 x float> %988, <8 x float>* %908, align 1, !tbaa !12
  store <8 x float> %989, <8 x float>* %912, align 1, !tbaa !12
  store <8 x float> %990, <8 x float>* %916, align 1, !tbaa !12
  store <8 x float> %991, <8 x float>* %920, align 1, !tbaa !12
  store <8 x float> %992, <8 x float>* %924, align 1, !tbaa !12
  store <8 x float> %993, <8 x float>* %928, align 1, !tbaa !12
  store <8 x float> %994, <8 x float>* %932, align 1, !tbaa !12
  store <8 x float> %995, <8 x float>* %936, align 1, !tbaa !12
  store <8 x float> %996, <8 x float>* %940, align 1, !tbaa !12
  %997 = add nuw nsw i64 %853, 88
  %998 = icmp ult i64 %997, %687
  br i1 %998, label %852, label %847
}

; Function Attrs: nounwind
declare i64 @llvm.x86.rdtsc() #10

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #11

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local zeroext i1 @_Z6enablev() local_unnamed_addr #12 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z9n_reg_maxv() local_unnamed_addr #12 {
  ret i32 138
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #14

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #15

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable willreturn
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #16

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_matvec_ui11_uk6.cpp() #17 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to %union.anon**), align 8, !tbaa !2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(3) bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #10
  store i64 3, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E, i64 0, i32 2) to i8*), i64 3), align 1, !tbaa !12
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL15InstructionTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  tail call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_(%"class.std::__cxx11::basic_string"* nonnull sret @_ZN4mippL19InstructionFullTypeB5cxx11E, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_ZN4mippL15InstructionTypeB5cxx11E, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %3 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL19InstructionFullTypeB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  store %union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2), %union.anon** bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to %union.anon**), align 8, !tbaa !2
  store i8 50, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), align 8, !tbaa !12
  store i64 1, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 1), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (i8, i8* bitcast (%union.anon* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E, i64 0, i32 2) to i8*), i64 1), align 1, !tbaa !12
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN4mippL18InstructionVersionB5cxx11E to i8*), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inaccessiblemem_or_argmemonly nounwind willreturn }
attributes #12 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable willreturn }
attributes #17 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="znver1" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+clzero,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mwaitx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clwb,-enqcmd,-fma4,-gfni,-invpcid,-lwp,-movdir64b,-movdiri,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-rtm,-sgx,-shstk,-tbm,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
!2 = !{!3, !4, i64 0}
!3 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !4, i64 0}
!8 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !3, i64 0, !9, i64 8, !5, i64 16}
!9 = !{!"long", !5, i64 0}
!10 = !{!8, !9, i64 8}
!11 = !{!9, !9, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !5, i64 0}
!15 = !{!4, !4, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.vectorize.width", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !5, i64 0}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
