#ifndef BLOCKI
#define BLOCKI {{ opt.blocki }}
#endif

#include "mipp.h"

#ifndef TYPE
#define TYPE double
#endif

extern "C" {
double mb_{{ opt.ui }}(TYPE *U, TYPE *Z, double *);
}

double mb_{{opt.ui}}(TYPE *U, TYPE *Z, double *event) {
     uint64_t time=__rdtsc();
     const int nv=mipp::N<TYPE>();                     
    const TYPE twoPI = 2.f * 3.141592f;
    #pragma omp parallel for
    for (int i=0; i<BLOCKI ; i+= nv*2*{{ opt.ui }}) {
     {% for ii in range(opt.ui) -%}
        mipp::Reg<TYPE> u1{{ ii }},u2{{ ii }};
       u1{{ ii }}.load(&U[i+2*{{ ii }}*nv]);
       u2{{ ii }}.load(&U[i+(2*{{ ii }} + 1)*nv]);
       {% endfor %}
       {% for ii in range(opt.ui) -%}
       auto r{{ ii }}=mipp::sqrt(mipp::log(u1{{ ii }})*-2.f);
       auto theta{{ ii }} = u2{{ ii }} * twoPI;
       mipp::Reg<TYPE> sinTheta{{ ii }} ,cosTheta{{ ii }};
       mipp::sincos(theta{{ ii }},sinTheta{{ ii }},cosTheta{{ ii }});
       auto z1{{ ii }}= r{{ ii }}*cosTheta{{ ii }};
       auto z2{{ ii }}=r{{ ii }}*sinTheta{{ ii }};
       {% endfor %}
       {% for ii in range(opt.ui) -%}       
       z1{{ ii }}.store(&Z[i+nv*(2*{{ ii }})]);
       z2{{ ii }}.store(&Z[i+nv*(2*{{ ii }} +1 )]);
       {% endfor %}
}
    event[0]=BLOCKI*7;
    time=__rdtsc()-time;
    return time;                                       
  }


